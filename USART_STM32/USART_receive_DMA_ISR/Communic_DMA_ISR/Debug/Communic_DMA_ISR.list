
Communic_DMA_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005888  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08005a10  08005a10  00006a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e1c  08005e1c  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005e1c  08005e1c  00007060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005e1c  08005e1c  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e1c  08005e1c  00006e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e20  08005e20  00006e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005e24  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          000079d4  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20007a34  20007a34  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e18e  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ac  00000000  00000000  0001521e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c0  00000000  00000000  000172d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000775  00000000  00000000  00017c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d780  00000000  00000000  00018405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d4fd  00000000  00000000  00035b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0a63  00000000  00000000  00043082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000009c  00000000  00000000  000f3ae5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b58  00000000  00000000  000f3b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a8  00000000  00000000  000f66dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080059f8 	.word	0x080059f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	080059f8 	.word	0x080059f8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	f6ad 2d18 	subw	sp, sp, #2584	@ 0xa18
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fd3e 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f924 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f9fa 	bl	80005d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80001dc:	f000 f9d2 	bl	8000584 <MX_DMA_Init>
  MX_USB_PCD_Init();
 80001e0:	f000 f9ae 	bl	8000540 <MX_USB_PCD_Init>
  MX_UART4_Init();
 80001e4:	f000 f97c 	bl	80004e0 <MX_UART4_Init>
  // GPIOE15 -> LED 3 Green
  // GPIOE14 -> Led 4 Orange
  // GPIOE13 -> Led 5 Red


  HAL_UART_Receive_DMA(&huart4, metadata, 8);
 80001e8:	2208      	movs	r2, #8
 80001ea:	497f      	ldr	r1, [pc, #508]	@ (80003e8 <main+0x220>)
 80001ec:	487f      	ldr	r0, [pc, #508]	@ (80003ec <main+0x224>)
 80001ee:	f003 f997 	bl	8003520 <HAL_UART_Receive_DMA>
  while(metadati_ricevuti == 0){
 80001f2:	bf00      	nop
 80001f4:	4b7e      	ldr	r3, [pc, #504]	@ (80003f0 <main+0x228>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d0fa      	beq.n	80001f4 <main+0x2c>
  }
  HAL_UART_Receive_DMA(&huart4, signal, N_FINESTRE*N_CAMPIONI);
 80001fe:	f44f 5252 	mov.w	r2, #13440	@ 0x3480
 8000202:	497c      	ldr	r1, [pc, #496]	@ (80003f4 <main+0x22c>)
 8000204:	4879      	ldr	r0, [pc, #484]	@ (80003ec <main+0x224>)
 8000206:	f003 f98b 	bl	8003520 <HAL_UART_Receive_DMA>
  while(dati_ricevuti == 0){
 800020a:	bf00      	nop
 800020c:	4b7a      	ldr	r3, [pc, #488]	@ (80003f8 <main+0x230>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	b2db      	uxtb	r3, r3
 8000212:	2b00      	cmp	r3, #0
 8000214:	d0fa      	beq.n	800020c <main+0x44>
  }

  // calcolo massimo e minimo
  massimo = (int32_t)(metadata[0] | metadata[1]<<8 | metadata[2]<<16 | metadata[3]<<24);
 8000216:	4b74      	ldr	r3, [pc, #464]	@ (80003e8 <main+0x220>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	461a      	mov	r2, r3
 800021c:	4b72      	ldr	r3, [pc, #456]	@ (80003e8 <main+0x220>)
 800021e:	785b      	ldrb	r3, [r3, #1]
 8000220:	021b      	lsls	r3, r3, #8
 8000222:	431a      	orrs	r2, r3
 8000224:	4b70      	ldr	r3, [pc, #448]	@ (80003e8 <main+0x220>)
 8000226:	789b      	ldrb	r3, [r3, #2]
 8000228:	041b      	lsls	r3, r3, #16
 800022a:	431a      	orrs	r2, r3
 800022c:	4b6e      	ldr	r3, [pc, #440]	@ (80003e8 <main+0x220>)
 800022e:	78db      	ldrb	r3, [r3, #3]
 8000230:	061b      	lsls	r3, r3, #24
 8000232:	4313      	orrs	r3, r2
 8000234:	4a71      	ldr	r2, [pc, #452]	@ (80003fc <main+0x234>)
 8000236:	6013      	str	r3, [r2, #0]
  minimo = (int32_t)(metadata[4] | metadata[5]<<8 | metadata[6]<<16 | metadata[7]<<24);
 8000238:	4b6b      	ldr	r3, [pc, #428]	@ (80003e8 <main+0x220>)
 800023a:	791b      	ldrb	r3, [r3, #4]
 800023c:	461a      	mov	r2, r3
 800023e:	4b6a      	ldr	r3, [pc, #424]	@ (80003e8 <main+0x220>)
 8000240:	795b      	ldrb	r3, [r3, #5]
 8000242:	021b      	lsls	r3, r3, #8
 8000244:	431a      	orrs	r2, r3
 8000246:	4b68      	ldr	r3, [pc, #416]	@ (80003e8 <main+0x220>)
 8000248:	799b      	ldrb	r3, [r3, #6]
 800024a:	041b      	lsls	r3, r3, #16
 800024c:	431a      	orrs	r2, r3
 800024e:	4b66      	ldr	r3, [pc, #408]	@ (80003e8 <main+0x220>)
 8000250:	79db      	ldrb	r3, [r3, #7]
 8000252:	061b      	lsls	r3, r3, #24
 8000254:	4313      	orrs	r3, r2
 8000256:	4a6a      	ldr	r2, [pc, #424]	@ (8000400 <main+0x238>)
 8000258:	6013      	str	r3, [r2, #0]


  for(int i=0; i<N_FINESTRE; i++){
 800025a:	2300      	movs	r3, #0
 800025c:	f8c7 3a14 	str.w	r3, [r7, #2580]	@ 0xa14
 8000260:	e0a5      	b.n	80003ae <main+0x1e6>
	  HAL_GPIO_WritePin(EMB_LEDS, LED_3, GPIO_PIN_SET); //inizio elaborazione finestra i-esima
 8000262:	2201      	movs	r2, #1
 8000264:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000268:	4866      	ldr	r0, [pc, #408]	@ (8000404 <main+0x23c>)
 800026a:	f001 fb8b 	bl	8001984 <HAL_GPIO_WritePin>

	  // CALCOLI FFT
	  Complesso x[N_CAMPIONI];
	  Complesso X[N_CAMPIONI];
	  float magnitude[N_CAMPIONI];
	  for(int j=0; j<N_CAMPIONI; j++){
 800026e:	2300      	movs	r3, #0
 8000270:	f8c7 3a10 	str.w	r3, [r7, #2576]	@ 0xa10
 8000274:	e03d      	b.n	80002f2 <main+0x12a>
		  x[j].re = ((float)signal[i*N_CAMPIONI + j]) / 255.0f * (massimo - minimo) + minimo;
 8000276:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	@ 0xa14
 800027a:	01da      	lsls	r2, r3, #7
 800027c:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	@ 0xa10
 8000280:	4413      	add	r3, r2
 8000282:	4a5c      	ldr	r2, [pc, #368]	@ (80003f4 <main+0x22c>)
 8000284:	5cd3      	ldrb	r3, [r2, r3]
 8000286:	ee07 3a90 	vmov	s15, r3
 800028a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800028e:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8000408 <main+0x240>
 8000292:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000296:	4b59      	ldr	r3, [pc, #356]	@ (80003fc <main+0x234>)
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	4b59      	ldr	r3, [pc, #356]	@ (8000400 <main+0x238>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	1ad3      	subs	r3, r2, r3
 80002a0:	ee07 3a90 	vmov	s15, r3
 80002a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80002ac:	4b54      	ldr	r3, [pc, #336]	@ (8000400 <main+0x238>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	ee07 3a90 	vmov	s15, r3
 80002b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002bc:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 80002c0:	f6a3 020c 	subw	r2, r3, #2060	@ 0x80c
 80002c4:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	@ 0xa10
 80002c8:	00db      	lsls	r3, r3, #3
 80002ca:	4413      	add	r3, r2
 80002cc:	edc3 7a00 	vstr	s15, [r3]
		  x[j].im = 0.0f;
 80002d0:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 80002d4:	f6a3 020c 	subw	r2, r3, #2060	@ 0x80c
 80002d8:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	@ 0xa10
 80002dc:	00db      	lsls	r3, r3, #3
 80002de:	4413      	add	r3, r2
 80002e0:	3304      	adds	r3, #4
 80002e2:	f04f 0200 	mov.w	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
	  for(int j=0; j<N_CAMPIONI; j++){
 80002e8:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	@ 0xa10
 80002ec:	3301      	adds	r3, #1
 80002ee:	f8c7 3a10 	str.w	r3, [r7, #2576]	@ 0xa10
 80002f2:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	@ 0xa10
 80002f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80002f8:	ddbd      	ble.n	8000276 <main+0xae>
	  }
	  arm_fft(x,X,N_CAMPIONI);
 80002fa:	f207 610c 	addw	r1, r7, #1548	@ 0x60c
 80002fe:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8000302:	2280      	movs	r2, #128	@ 0x80
 8000304:	4618      	mov	r0, r3
 8000306:	f004 fae1 	bl	80048cc <arm_fft>
	  fft_to_spectrogram(X, magnitude, N_CAMPIONI, -65.0f);	// [0,1]
 800030a:	f107 010c 	add.w	r1, r7, #12
 800030e:	f207 630c 	addw	r3, r7, #1548	@ 0x60c
 8000312:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800040c <main+0x244>
 8000316:	2280      	movs	r2, #128	@ 0x80
 8000318:	4618      	mov	r0, r3
 800031a:	f004 fb7d 	bl	8004a18 <fft_to_spectrogram>
	  for(int l=0; l<N_CAMPIONI; l++){
 800031e:	2300      	movs	r3, #0
 8000320:	f8c7 3a0c 	str.w	r3, [r7, #2572]	@ 0xa0c
 8000324:	e020      	b.n	8000368 <main+0x1a0>
		  signal[i*N_CAMPIONI+l] = (uint8_t)(magnitude[l]*255);
 8000326:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 800032a:	f6a3 220c 	subw	r2, r3, #2572	@ 0xa0c
 800032e:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	4413      	add	r3, r2
 8000336:	edd3 7a00 	vldr	s15, [r3]
 800033a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000408 <main+0x240>
 800033e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000342:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	@ 0xa14
 8000346:	01da      	lsls	r2, r3, #7
 8000348:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 800034c:	4413      	add	r3, r2
 800034e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000352:	edc7 7a01 	vstr	s15, [r7, #4]
 8000356:	793a      	ldrb	r2, [r7, #4]
 8000358:	b2d1      	uxtb	r1, r2
 800035a:	4a26      	ldr	r2, [pc, #152]	@ (80003f4 <main+0x22c>)
 800035c:	54d1      	strb	r1, [r2, r3]
	  for(int l=0; l<N_CAMPIONI; l++){
 800035e:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8000362:	3301      	adds	r3, #1
 8000364:	f8c7 3a0c 	str.w	r3, [r7, #2572]	@ 0xa0c
 8000368:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 800036c:	2b7f      	cmp	r3, #127	@ 0x7f
 800036e:	ddda      	ble.n	8000326 <main+0x15e>
	  }
	  finestra_calcolata++;
 8000370:	4b27      	ldr	r3, [pc, #156]	@ (8000410 <main+0x248>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	3301      	adds	r3, #1
 8000378:	b2da      	uxtb	r2, r3
 800037a:	4b25      	ldr	r3, [pc, #148]	@ (8000410 <main+0x248>)
 800037c:	701a      	strb	r2, [r3, #0]
	  if(trasmissione_completata == 1){
 800037e:	4b25      	ldr	r3, [pc, #148]	@ (8000414 <main+0x24c>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2b01      	cmp	r3, #1
 8000386:	d107      	bne.n	8000398 <main+0x1d0>
		  HAL_GPIO_WritePin(COM_PINS, REQ, GPIO_PIN_SET); // alzo la richiesta
 8000388:	2201      	movs	r2, #1
 800038a:	2101      	movs	r1, #1
 800038c:	4822      	ldr	r0, [pc, #136]	@ (8000418 <main+0x250>)
 800038e:	f001 faf9 	bl	8001984 <HAL_GPIO_WritePin>
		  trasmissione_completata = 0;
 8000392:	4b20      	ldr	r3, [pc, #128]	@ (8000414 <main+0x24c>)
 8000394:	2200      	movs	r2, #0
 8000396:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_GPIO_WritePin(EMB_LEDS, LED_3, GPIO_PIN_RESET); //fine elaborazione finestra i-esima
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800039e:	4819      	ldr	r0, [pc, #100]	@ (8000404 <main+0x23c>)
 80003a0:	f001 faf0 	bl	8001984 <HAL_GPIO_WritePin>
  for(int i=0; i<N_FINESTRE; i++){
 80003a4:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	@ 0xa14
 80003a8:	3301      	adds	r3, #1
 80003aa:	f8c7 3a14 	str.w	r3, [r7, #2580]	@ 0xa14
 80003ae:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	@ 0xa14
 80003b2:	2b68      	cmp	r3, #104	@ 0x68
 80003b4:	f77f af55 	ble.w	8000262 <main+0x9a>
//	  HAL_Delay(1000);
  }
  fine = 1;
 80003b8:	4b18      	ldr	r3, [pc, #96]	@ (800041c <main+0x254>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(EMB_LEDS, LED_5, GPIO_PIN_SET);
 80003be:	2201      	movs	r2, #1
 80003c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c4:	480f      	ldr	r0, [pc, #60]	@ (8000404 <main+0x23c>)
 80003c6:	f001 fadd 	bl	8001984 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80003ca:	2064      	movs	r0, #100	@ 0x64
 80003cc:	f000 fca6 	bl	8000d1c <HAL_Delay>
	  HAL_GPIO_WritePin(EMB_LEDS, LED_5, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003d6:	480b      	ldr	r0, [pc, #44]	@ (8000404 <main+0x23c>)
 80003d8:	f001 fad4 	bl	8001984 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80003dc:	2064      	movs	r0, #100	@ 0x64
 80003de:	f000 fc9d 	bl	8000d1c <HAL_Delay>
	  HAL_GPIO_WritePin(EMB_LEDS, LED_5, GPIO_PIN_SET);
 80003e2:	bf00      	nop
 80003e4:	e7eb      	b.n	80003be <main+0x1f6>
 80003e6:	bf00      	nop
 80003e8:	200038e0 	.word	0x200038e0
 80003ec:	2000007c 	.word	0x2000007c
 80003f0:	200038f0 	.word	0x200038f0
 80003f4:	20000460 	.word	0x20000460
 80003f8:	200038f1 	.word	0x200038f1
 80003fc:	200038e8 	.word	0x200038e8
 8000400:	200038ec 	.word	0x200038ec
 8000404:	48001000 	.word	0x48001000
 8000408:	437f0000 	.word	0x437f0000
 800040c:	c2820000 	.word	0xc2820000
 8000410:	200038f4 	.word	0x200038f4
 8000414:	20000000 	.word	0x20000000
 8000418:	48000400 	.word	0x48000400
 800041c:	200038f2 	.word	0x200038f2

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b09e      	sub	sp, #120	@ 0x78
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800042a:	2228      	movs	r2, #40	@ 0x28
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f004 fb9c 	bl	8004b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
 8000442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000444:	463b      	mov	r3, r7
 8000446:	223c      	movs	r2, #60	@ 0x3c
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f004 fb8e 	bl	8004b6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000450:	2301      	movs	r3, #1
 8000452:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000454:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000458:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045e:	2301      	movs	r3, #1
 8000460:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000462:	2302      	movs	r3, #2
 8000464:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000466:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800046a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800046c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000470:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000472:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000476:	4618      	mov	r0, r3
 8000478:	f001 fb7c 	bl	8001b74 <HAL_RCC_OscConfig>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000482:	f000 fa19 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000486:	230f      	movs	r3, #15
 8000488:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048a:	2302      	movs	r3, #2
 800048c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000496:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800049c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004a0:	2101      	movs	r1, #1
 80004a2:	4618      	mov	r0, r3
 80004a4:	f002 fb74 	bl	8002b90 <HAL_RCC_ClockConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004ae:	f000 fa03 	bl	80008b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART4;
 80004b2:	4b0a      	ldr	r3, [pc, #40]	@ (80004dc <SystemClock_Config+0xbc>)
 80004b4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80004ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80004be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c0:	463b      	mov	r3, r7
 80004c2:	4618      	mov	r0, r3
 80004c4:	f002 fd76 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004ce:	f000 f9f3 	bl	80008b8 <Error_Handler>
  }
}
 80004d2:	bf00      	nop
 80004d4:	3778      	adds	r7, #120	@ 0x78
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	00020008 	.word	0x00020008

080004e0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80004e4:	4b14      	ldr	r3, [pc, #80]	@ (8000538 <MX_UART4_Init+0x58>)
 80004e6:	4a15      	ldr	r2, [pc, #84]	@ (800053c <MX_UART4_Init+0x5c>)
 80004e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80004ea:	4b13      	ldr	r3, [pc, #76]	@ (8000538 <MX_UART4_Init+0x58>)
 80004ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80004f2:	4b11      	ldr	r3, [pc, #68]	@ (8000538 <MX_UART4_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <MX_UART4_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <MX_UART4_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000504:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <MX_UART4_Init+0x58>)
 8000506:	220c      	movs	r2, #12
 8000508:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050a:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <MX_UART4_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000510:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <MX_UART4_Init+0x58>)
 8000512:	2200      	movs	r2, #0
 8000514:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000516:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <MX_UART4_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <MX_UART4_Init+0x58>)
 800051e:	2200      	movs	r2, #0
 8000520:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000522:	4805      	ldr	r0, [pc, #20]	@ (8000538 <MX_UART4_Init+0x58>)
 8000524:	f002 fef4 	bl	8003310 <HAL_UART_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800052e:	f000 f9c3 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	2000007c 	.word	0x2000007c
 800053c:	40004c00 	.word	0x40004c00

08000540 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000544:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <MX_USB_PCD_Init+0x3c>)
 8000546:	4a0e      	ldr	r2, [pc, #56]	@ (8000580 <MX_USB_PCD_Init+0x40>)
 8000548:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800054a:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <MX_USB_PCD_Init+0x3c>)
 800054c:	2208      	movs	r2, #8
 800054e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000550:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <MX_USB_PCD_Init+0x3c>)
 8000552:	2202      	movs	r2, #2
 8000554:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000556:	4b09      	ldr	r3, [pc, #36]	@ (800057c <MX_USB_PCD_Init+0x3c>)
 8000558:	2202      	movs	r2, #2
 800055a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800055c:	4b07      	ldr	r3, [pc, #28]	@ (800057c <MX_USB_PCD_Init+0x3c>)
 800055e:	2200      	movs	r2, #0
 8000560:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000562:	4b06      	ldr	r3, [pc, #24]	@ (800057c <MX_USB_PCD_Init+0x3c>)
 8000564:	2200      	movs	r2, #0
 8000566:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000568:	4804      	ldr	r0, [pc, #16]	@ (800057c <MX_USB_PCD_Init+0x3c>)
 800056a:	f001 fa3b 	bl	80019e4 <HAL_PCD_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000574:	f000 f9a0 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	2000018c 	.word	0x2000018c
 8000580:	40005c00 	.word	0x40005c00

08000584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800058a:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <MX_DMA_Init+0x48>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a0f      	ldr	r2, [pc, #60]	@ (80005cc <MX_DMA_Init+0x48>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b0d      	ldr	r3, [pc, #52]	@ (80005cc <MX_DMA_Init+0x48>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f003 0302 	and.w	r3, r3, #2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	203a      	movs	r0, #58	@ 0x3a
 80005a8:	f000 fcdb 	bl	8000f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80005ac:	203a      	movs	r0, #58	@ 0x3a
 80005ae:	f000 fcf4 	bl	8000f9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	203c      	movs	r0, #60	@ 0x3c
 80005b8:	f000 fcd3 	bl	8000f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80005bc:	203c      	movs	r0, #60	@ 0x3c
 80005be:	f000 fcec 	bl	8000f9a <HAL_NVIC_EnableIRQ>

}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	@ 0x30
 80005d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005e6:	4b6c      	ldr	r3, [pc, #432]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a6b      	ldr	r2, [pc, #428]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 80005ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b69      	ldr	r3, [pc, #420]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005fa:	61bb      	str	r3, [r7, #24]
 80005fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b66      	ldr	r3, [pc, #408]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a65      	ldr	r2, [pc, #404]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 8000604:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b63      	ldr	r3, [pc, #396]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000616:	4b60      	ldr	r3, [pc, #384]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a5f      	ldr	r2, [pc, #380]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 800061c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b5d      	ldr	r3, [pc, #372]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b5a      	ldr	r3, [pc, #360]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a59      	ldr	r2, [pc, #356]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 8000634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000638:	6153      	str	r3, [r2, #20]
 800063a:	4b57      	ldr	r3, [pc, #348]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b54      	ldr	r3, [pc, #336]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a53      	ldr	r2, [pc, #332]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 800064c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000650:	6153      	str	r3, [r2, #20]
 8000652:	4b51      	ldr	r3, [pc, #324]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065e:	4b4e      	ldr	r3, [pc, #312]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a4d      	ldr	r2, [pc, #308]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	6153      	str	r3, [r2, #20]
 800066a:	4b4b      	ldr	r3, [pc, #300]	@ (8000798 <MX_GPIO_Init+0x1c8>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_13
 8000676:	2200      	movs	r2, #0
 8000678:	f24e 3108 	movw	r1, #58120	@ 0xe308
 800067c:	4847      	ldr	r0, [pc, #284]	@ (800079c <MX_GPIO_Init+0x1cc>)
 800067e:	f001 f981 	bl	8001984 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2101      	movs	r1, #1
 8000686:	4846      	ldr	r0, [pc, #280]	@ (80007a0 <MX_GPIO_Init+0x1d0>)
 8000688:	f001 f97c 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000692:	4844      	ldr	r0, [pc, #272]	@ (80007a4 <MX_GPIO_Init+0x1d4>)
 8000694:	f001 f976 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT4_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin;
 8000698:	2325      	movs	r3, #37	@ 0x25
 800069a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800069c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	483b      	ldr	r0, [pc, #236]	@ (800079c <MX_GPIO_Init+0x1cc>)
 80006ae:	f000 ff13 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE8 PE9 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_13
 80006b2:	f24e 3308 	movw	r3, #58120	@ 0xe308
 80006b6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4834      	ldr	r0, [pc, #208]	@ (800079c <MX_GPIO_Init+0x1cc>)
 80006cc:	f000 ff04 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e6:	f000 fef7 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80006ea:	23e0      	movs	r3, #224	@ 0xe0
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006fa:	2305      	movs	r3, #5
 80006fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	4619      	mov	r1, r3
 8000704:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000708:	f000 fee6 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800070c:	2301      	movs	r3, #1
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	481f      	ldr	r0, [pc, #124]	@ (80007a0 <MX_GPIO_Init+0x1d0>)
 8000724:	f000 fed8 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000728:	2302      	movs	r3, #2
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800072c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4619      	mov	r1, r3
 800073c:	4818      	ldr	r0, [pc, #96]	@ (80007a0 <MX_GPIO_Init+0x1d0>)
 800073e:	f000 fecb 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000742:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	4812      	ldr	r0, [pc, #72]	@ (80007a4 <MX_GPIO_Init+0x1d4>)
 800075c:	f000 febc 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000760:	23c0      	movs	r3, #192	@ 0xc0
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000764:	2312      	movs	r3, #18
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000768:	2301      	movs	r3, #1
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000770:	2304      	movs	r3, #4
 8000772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	4809      	ldr	r0, [pc, #36]	@ (80007a0 <MX_GPIO_Init+0x1d0>)
 800077c:	f000 feac 	bl	80014d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	2007      	movs	r0, #7
 8000786:	f000 fbec 	bl	8000f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800078a:	2007      	movs	r0, #7
 800078c:	f000 fc05 	bl	8000f9a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	bf00      	nop
 8000792:	3730      	adds	r7, #48	@ 0x30
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	48001000 	.word	0x48001000
 80007a0:	48000400 	.word	0x48000400
 80007a4:	48000c00 	.word	0x48000c00

080007a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	if(metadati_ricevuti == 0){
 80007b0:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <HAL_UART_RxCpltCallback+0x60>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d109      	bne.n	80007ce <HAL_UART_RxCpltCallback+0x26>
		metadati_ricevuti = 1;
 80007ba:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <HAL_UART_RxCpltCallback+0x60>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(EMB_LEDS, LED_1, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c6:	4811      	ldr	r0, [pc, #68]	@ (800080c <HAL_UART_RxCpltCallback+0x64>)
 80007c8:	f001 f8dc 	bl	8001984 <HAL_GPIO_WritePin>
	        Error_Handler();
	    }
	    if (HAL_UART_Init(huart) != HAL_OK) {
	        Error_Handler(); 	    }
	}
}
 80007cc:	e018      	b.n	8000800 <HAL_UART_RxCpltCallback+0x58>
		dati_ricevuti = 1;
 80007ce:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <HAL_UART_RxCpltCallback+0x68>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(EMB_LEDS, LED_2, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007da:	480c      	ldr	r0, [pc, #48]	@ (800080c <HAL_UART_RxCpltCallback+0x64>)
 80007dc:	f001 f8d2 	bl	8001984 <HAL_GPIO_WritePin>
	    if (HAL_UART_DeInit(huart) != HAL_OK) {
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f002 fde3 	bl	80033ac <HAL_UART_DeInit>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <HAL_UART_RxCpltCallback+0x48>
	        Error_Handler();
 80007ec:	f000 f864 	bl	80008b8 <Error_Handler>
	    if (HAL_UART_Init(huart) != HAL_OK) {
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f002 fd8d 	bl	8003310 <HAL_UART_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <HAL_UART_RxCpltCallback+0x58>
	        Error_Handler(); 	    }
 80007fc:	f000 f85c 	bl	80008b8 <Error_Handler>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200038f0 	.word	0x200038f0
 800080c:	48001000 	.word	0x48001000
 8000810:	200038f1 	.word	0x200038f1

08000814 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
//		stop = 1;
//		HAL_GPIO_TogglePin(EMB_LEDS, LED_4);
//	}else{
//		stop = 0;
//	}
	trasmissione_completata = 1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <HAL_UART_TxCpltCallback+0x3c>)
 800081e:	2201      	movs	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
	if(fine == 1){
 8000822:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <HAL_UART_TxCpltCallback+0x40>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b01      	cmp	r3, #1
 800082a:	d10c      	bne.n	8000846 <HAL_UART_TxCpltCallback+0x32>
		if(finestra_corrente<finestra_calcolata){
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <HAL_UART_TxCpltCallback+0x44>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <HAL_UART_TxCpltCallback+0x48>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	429a      	cmp	r2, r3
 800083a:	d204      	bcs.n	8000846 <HAL_UART_TxCpltCallback+0x32>
			HAL_GPIO_WritePin(COM_PINS, REQ, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2101      	movs	r1, #1
 8000840:	4807      	ldr	r0, [pc, #28]	@ (8000860 <HAL_UART_TxCpltCallback+0x4c>)
 8000842:	f001 f89f 	bl	8001984 <HAL_GPIO_WritePin>
		}
	}
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000000 	.word	0x20000000
 8000854:	200038f2 	.word	0x200038f2
 8000858:	200038f3 	.word	0x200038f3
 800085c:	200038f4 	.word	0x200038f4
 8000860:	48000400 	.word	0x48000400

08000864 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	80fb      	strh	r3, [r7, #6]
//		HAL_GPIO_WritePin(COM_PINS, REQ, GPIO_PIN_RESET);
//		stop = 0;
//		finestra_corrente++;
//		HAL_UART_Transmit_DMA(&huart4, &signal[(finestra_corrente-1)*N_CAMPIONI], 128);
//	}
	HAL_GPIO_WritePin(COM_PINS, REQ, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2101      	movs	r1, #1
 8000872:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000874:	f001 f886 	bl	8001984 <HAL_GPIO_WritePin>
	finestra_corrente++;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x48>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	3301      	adds	r3, #1
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x48>)
 8000884:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart4, &signal[(finestra_corrente-1)*N_CAMPIONI], 128);
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x48>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	3b01      	subs	r3, #1
 800088e:	01db      	lsls	r3, r3, #7
 8000890:	4a07      	ldr	r2, [pc, #28]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000892:	4413      	add	r3, r2
 8000894:	2280      	movs	r2, #128	@ 0x80
 8000896:	4619      	mov	r1, r3
 8000898:	4806      	ldr	r0, [pc, #24]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0x50>)
 800089a:	f002 fdc5 	bl	8003428 <HAL_UART_Transmit_DMA>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	48000400 	.word	0x48000400
 80008ac:	200038f3 	.word	0x200038f3
 80008b0:	20000460 	.word	0x20000460
 80008b4:	2000007c 	.word	0x2000007c

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <Error_Handler+0x8>

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <HAL_MspInit+0x44>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000908 <HAL_MspInit+0x44>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6193      	str	r3, [r2, #24]
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <HAL_MspInit+0x44>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <HAL_MspInit+0x44>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a08      	ldr	r2, [pc, #32]	@ (8000908 <HAL_MspInit+0x44>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	61d3      	str	r3, [r2, #28]
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <HAL_MspInit+0x44>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008fa:	2007      	movs	r0, #7
 80008fc:	f000 fb26 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	@ 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a42      	ldr	r2, [pc, #264]	@ (8000a34 <HAL_UART_MspInit+0x128>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d17e      	bne.n	8000a2c <HAL_UART_MspInit+0x120>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800092e:	4b42      	ldr	r3, [pc, #264]	@ (8000a38 <HAL_UART_MspInit+0x12c>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	4a41      	ldr	r2, [pc, #260]	@ (8000a38 <HAL_UART_MspInit+0x12c>)
 8000934:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000938:	61d3      	str	r3, [r2, #28]
 800093a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a38 <HAL_UART_MspInit+0x12c>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	4b3c      	ldr	r3, [pc, #240]	@ (8000a38 <HAL_UART_MspInit+0x12c>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	4a3b      	ldr	r2, [pc, #236]	@ (8000a38 <HAL_UART_MspInit+0x12c>)
 800094c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000950:	6153      	str	r3, [r2, #20]
 8000952:	4b39      	ldr	r3, [pc, #228]	@ (8000a38 <HAL_UART_MspInit+0x12c>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800095e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000970:	2305      	movs	r3, #5
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	4830      	ldr	r0, [pc, #192]	@ (8000a3c <HAL_UART_MspInit+0x130>)
 800097c:	f000 fdac 	bl	80014d8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 8000980:	4b2f      	ldr	r3, [pc, #188]	@ (8000a40 <HAL_UART_MspInit+0x134>)
 8000982:	4a30      	ldr	r2, [pc, #192]	@ (8000a44 <HAL_UART_MspInit+0x138>)
 8000984:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000986:	4b2e      	ldr	r3, [pc, #184]	@ (8000a40 <HAL_UART_MspInit+0x134>)
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800098c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a40 <HAL_UART_MspInit+0x134>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000992:	4b2b      	ldr	r3, [pc, #172]	@ (8000a40 <HAL_UART_MspInit+0x134>)
 8000994:	2280      	movs	r2, #128	@ 0x80
 8000996:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000998:	4b29      	ldr	r3, [pc, #164]	@ (8000a40 <HAL_UART_MspInit+0x134>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800099e:	4b28      	ldr	r3, [pc, #160]	@ (8000a40 <HAL_UART_MspInit+0x134>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80009a4:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <HAL_UART_MspInit+0x134>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80009aa:	4b25      	ldr	r3, [pc, #148]	@ (8000a40 <HAL_UART_MspInit+0x134>)
 80009ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80009b2:	4823      	ldr	r0, [pc, #140]	@ (8000a40 <HAL_UART_MspInit+0x134>)
 80009b4:	f000 fb19 	bl	8000fea <HAL_DMA_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80009be:	f7ff ff7b 	bl	80008b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a1e      	ldr	r2, [pc, #120]	@ (8000a40 <HAL_UART_MspInit+0x134>)
 80009c6:	675a      	str	r2, [r3, #116]	@ 0x74
 80009c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a40 <HAL_UART_MspInit+0x134>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel5;
 80009ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000a48 <HAL_UART_MspInit+0x13c>)
 80009d0:	4a1e      	ldr	r2, [pc, #120]	@ (8000a4c <HAL_UART_MspInit+0x140>)
 80009d2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <HAL_UART_MspInit+0x13c>)
 80009d6:	2210      	movs	r2, #16
 80009d8:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009da:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <HAL_UART_MspInit+0x13c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009e0:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <HAL_UART_MspInit+0x13c>)
 80009e2:	2280      	movs	r2, #128	@ 0x80
 80009e4:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009e6:	4b18      	ldr	r3, [pc, #96]	@ (8000a48 <HAL_UART_MspInit+0x13c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <HAL_UART_MspInit+0x13c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <HAL_UART_MspInit+0x13c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80009f8:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <HAL_UART_MspInit+0x13c>)
 80009fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000a00:	4811      	ldr	r0, [pc, #68]	@ (8000a48 <HAL_UART_MspInit+0x13c>)
 8000a02:	f000 faf2 	bl	8000fea <HAL_DMA_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8000a0c:	f7ff ff54 	bl	80008b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <HAL_UART_MspInit+0x13c>)
 8000a14:	671a      	str	r2, [r3, #112]	@ 0x70
 8000a16:	4a0c      	ldr	r2, [pc, #48]	@ (8000a48 <HAL_UART_MspInit+0x13c>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2034      	movs	r0, #52	@ 0x34
 8000a22:	f000 fa9e 	bl	8000f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000a26:	2034      	movs	r0, #52	@ 0x34
 8000a28:	f000 fab7 	bl	8000f9a <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	@ 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40004c00 	.word	0x40004c00
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	48000800 	.word	0x48000800
 8000a40:	20000104 	.word	0x20000104
 8000a44:	40020430 	.word	0x40020430
 8000a48:	20000148 	.word	0x20000148
 8000a4c:	40020458 	.word	0x40020458

08000a50 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a9c <HAL_UART_MspDeInit+0x4c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d117      	bne.n	8000a92 <HAL_UART_MspDeInit+0x42>
  {
    /* USER CODE BEGIN UART4_MspDeInit 0 */

    /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <HAL_UART_MspDeInit+0x50>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa0 <HAL_UART_MspDeInit+0x50>)
 8000a68:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000a6c:	61d3      	str	r3, [r2, #28]

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8000a6e:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000a72:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <HAL_UART_MspDeInit+0x54>)
 8000a74:	f000 feaa 	bl	80017cc <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 fafb 	bl	8001078 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 faf6 	bl	8001078 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8000a8c:	2034      	movs	r0, #52	@ 0x34
 8000a8e:	f000 fa92 	bl	8000fb6 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN UART4_MspDeInit 1 */

    /* USER CODE END UART4_MspDeInit 1 */
  }

}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40004c00 	.word	0x40004c00
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	48000800 	.word	0x48000800

08000aa8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a18      	ldr	r2, [pc, #96]	@ (8000b28 <HAL_PCD_MspInit+0x80>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d129      	bne.n	8000b1e <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <HAL_PCD_MspInit+0x84>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	4a17      	ldr	r2, [pc, #92]	@ (8000b2c <HAL_PCD_MspInit+0x84>)
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad4:	6153      	str	r3, [r2, #20]
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <HAL_PCD_MspInit+0x84>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000ae2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000af4:	230e      	movs	r3, #14
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b02:	f000 fce9 	bl	80014d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <HAL_PCD_MspInit+0x84>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a08      	ldr	r2, [pc, #32]	@ (8000b2c <HAL_PCD_MspInit+0x84>)
 8000b0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <HAL_PCD_MspInit+0x84>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	@ 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40005c00 	.word	0x40005c00
 8000b2c:	40021000 	.word	0x40021000

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <NMI_Handler+0x4>

08000b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <MemManage_Handler+0x4>

08000b48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b86:	f000 f8a9 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b92:	2002      	movs	r0, #2
 8000b94:	f000 ff0e 	bl	80019b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000ba0:	4802      	ldr	r0, [pc, #8]	@ (8000bac <UART4_IRQHandler+0x10>)
 8000ba2:	f002 fd01 	bl	80035a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2000007c 	.word	0x2000007c

08000bb0 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <DMA2_Channel3_IRQHandler+0x10>)
 8000bb6:	f000 fb82 	bl	80012be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000104 	.word	0x20000104

08000bc4 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <DMA2_Channel5_IRQHandler+0x10>)
 8000bca:	f000 fb78 	bl	80012be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000148 	.word	0x20000148

08000bd8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	@ (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c34 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c00:	f7ff ffea 	bl	8000bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	@ (8000c3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	@ (8000c40 <LoopForever+0xe>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c48 <LoopForever+0x16>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f003 ffad 	bl	8004b88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c2e:	f7ff facb 	bl	80001c8 <main>

08000c32 <LoopForever>:

LoopForever:
    b LoopForever
 8000c32:	e7fe      	b.n	8000c32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c34:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c40:	08005e24 	.word	0x08005e24
  ldr r2, =_sbss
 8000c44:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c48:	20007a34 	.word	0x20007a34

08000c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_2_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <HAL_Init+0x28>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <HAL_Init+0x28>)
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f973 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f000 f808 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6c:	f7ff fe2a 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40022000 	.word	0x40022000

08000c7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <HAL_InitTick+0x54>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_InitTick+0x58>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f999 	bl	8000fd2 <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f953 	bl	8000f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	@ (8000cd8 <HAL_InitTick+0x5c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000004 	.word	0x20000004
 8000cd4:	2000000c 	.word	0x2000000c
 8000cd8:	20000008 	.word	0x20000008

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2000000c 	.word	0x2000000c
 8000d00:	200038f8 	.word	0x200038f8

08000d04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200038f8 	.word	0x200038f8

08000d1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d36:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000000c 	.word	0x2000000c

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	@ (8000e00 <__NVIC_EnableIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db12      	blt.n	8000e3c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	490a      	ldr	r1, [pc, #40]	@ (8000e48 <__NVIC_DisableIRQ+0x44>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	3320      	adds	r3, #32
 8000e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e30:	f3bf 8f4f 	dsb	sy
}
 8000e34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e36:	f3bf 8f6f 	isb	sy
}
 8000e3a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	@ (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	@ (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	@ 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	@ 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f18:	d301      	bcc.n	8000f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00f      	b.n	8000f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <SysTick_Config+0x40>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f26:	210f      	movs	r1, #15
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f7ff ff8e 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f30:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <SysTick_Config+0x40>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f36:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <SysTick_Config+0x40>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e000e010 	.word	0xe000e010

08000f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff05 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f74:	f7ff ff1a 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff ff8e 	bl	8000ea0 <NVIC_EncodePriority>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff5d 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff0d 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff1d 	bl	8000e04 <__NVIC_DisableIRQ>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ff94 	bl	8000f08 <SysTick_Config>
 8000fe0:	4603      	mov	r3, r0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b084      	sub	sp, #16
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e037      	b.n	8001070 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2202      	movs	r2, #2
 8001004:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001016:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800101a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001024:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001030:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 fa04 	bl	8001460 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e03a      	b.n	8001100 <HAL_DMA_DeInit+0x88>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0201 	bic.w	r2, r2, #1
 8001098:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f9d0 	bl	8001460 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010c8:	2101      	movs	r1, #1
 80010ca:	fa01 f202 	lsl.w	r2, r1, r2
 80010ce:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d101      	bne.n	8001128 <HAL_DMA_Start_IT+0x20>
 8001124:	2302      	movs	r3, #2
 8001126:	e04a      	b.n	80011be <HAL_DMA_Start_IT+0xb6>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001136:	2b01      	cmp	r3, #1
 8001138:	d13a      	bne.n	80011b0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2202      	movs	r2, #2
 800113e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2200      	movs	r2, #0
 8001146:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f000 f950 	bl	8001404 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001168:	2b00      	cmp	r3, #0
 800116a:	d008      	beq.n	800117e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 020e 	orr.w	r2, r2, #14
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e00f      	b.n	800119e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 020a 	orr.w	r2, r2, #10
 800118c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0204 	bic.w	r2, r2, #4
 800119c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0201 	orr.w	r2, r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e005      	b.n	80011bc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80011b8:	2302      	movs	r3, #2
 80011ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e02e      	b.n	8001236 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d008      	beq.n	80011f4 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2204      	movs	r2, #4
 80011e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e020      	b.n	8001236 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 020e 	bic.w	r2, r2, #14
 8001202:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0201 	bic.w	r2, r2, #1
 8001212:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800121c:	2101      	movs	r1, #1
 800121e:	fa01 f202 	lsl.w	r2, r1, r2
 8001222:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001254:	2b02      	cmp	r3, #2
 8001256:	d005      	beq.n	8001264 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2204      	movs	r2, #4
 800125c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	e027      	b.n	80012b4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 020e 	bic.w	r2, r2, #14
 8001272:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0201 	bic.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800128c:	2101      	movs	r1, #1
 800128e:	fa01 f202 	lsl.w	r2, r1, r2
 8001292:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	4798      	blx	r3
    }
  }
  return status;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	2204      	movs	r2, #4
 80012dc:	409a      	lsls	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d024      	beq.n	8001330 <HAL_DMA_IRQHandler+0x72>
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d01f      	beq.n	8001330 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0320 	and.w	r3, r3, #32
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d107      	bne.n	800130e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0204 	bic.w	r2, r2, #4
 800130c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001316:	2104      	movs	r1, #4
 8001318:	fa01 f202 	lsl.w	r2, r1, r2
 800131c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001322:	2b00      	cmp	r3, #0
 8001324:	d06a      	beq.n	80013fc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800132e:	e065      	b.n	80013fc <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	2202      	movs	r2, #2
 8001336:	409a      	lsls	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d02c      	beq.n	800139a <HAL_DMA_IRQHandler+0xdc>
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d027      	beq.n	800139a <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0320 	and.w	r3, r3, #32
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10b      	bne.n	8001370 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 020a 	bic.w	r2, r2, #10
 8001366:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001378:	2102      	movs	r1, #2
 800137a:	fa01 f202 	lsl.w	r2, r1, r2
 800137e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138c:	2b00      	cmp	r3, #0
 800138e:	d035      	beq.n	80013fc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001398:	e030      	b.n	80013fc <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	2208      	movs	r2, #8
 80013a0:	409a      	lsls	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d028      	beq.n	80013fc <HAL_DMA_IRQHandler+0x13e>
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d023      	beq.n	80013fc <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 020e 	bic.w	r2, r2, #14
 80013c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013cc:	2101      	movs	r1, #1
 80013ce:	fa01 f202 	lsl.w	r2, r1, r2
 80013d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d004      	beq.n	80013fc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	4798      	blx	r3
    }
  }
}
 80013fa:	e7ff      	b.n	80013fc <HAL_DMA_IRQHandler+0x13e>
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800141a:	2101      	movs	r1, #1
 800141c:	fa01 f202 	lsl.w	r2, r1, r2
 8001420:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b10      	cmp	r3, #16
 8001430:	d108      	bne.n	8001444 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001442:	e007      	b.n	8001454 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	60da      	str	r2, [r3, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <DMA_CalcBaseAndBitshift+0x60>)
 8001470:	429a      	cmp	r2, r3
 8001472:	d80f      	bhi.n	8001494 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <DMA_CalcBaseAndBitshift+0x64>)
 800147c:	4413      	add	r3, r2
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <DMA_CalcBaseAndBitshift+0x68>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	091b      	lsrs	r3, r3, #4
 8001486:	009a      	lsls	r2, r3, #2
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a0f      	ldr	r2, [pc, #60]	@ (80014cc <DMA_CalcBaseAndBitshift+0x6c>)
 8001490:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001492:	e00e      	b.n	80014b2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <DMA_CalcBaseAndBitshift+0x70>)
 800149c:	4413      	add	r3, r2
 800149e:	4a0a      	ldr	r2, [pc, #40]	@ (80014c8 <DMA_CalcBaseAndBitshift+0x68>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	009a      	lsls	r2, r3, #2
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a09      	ldr	r2, [pc, #36]	@ (80014d4 <DMA_CalcBaseAndBitshift+0x74>)
 80014b0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40020407 	.word	0x40020407
 80014c4:	bffdfff8 	.word	0xbffdfff8
 80014c8:	cccccccd 	.word	0xcccccccd
 80014cc:	40020000 	.word	0x40020000
 80014d0:	bffdfbf8 	.word	0xbffdfbf8
 80014d4:	40020400 	.word	0x40020400

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e6:	e154      	b.n	8001792 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8146 	beq.w	800178c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b01      	cmp	r3, #1
 800150a:	d005      	beq.n	8001518 <HAL_GPIO_Init+0x40>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d130      	bne.n	800157a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800154e:	2201      	movs	r2, #1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	f003 0201 	and.w	r2, r3, #1
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b03      	cmp	r3, #3
 8001584:	d017      	beq.n	80015b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d123      	bne.n	800160a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	220f      	movs	r2, #15
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	691a      	ldr	r2, [r3, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	6939      	ldr	r1, [r7, #16]
 8001606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0203 	and.w	r2, r3, #3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 80a0 	beq.w	800178c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164c:	4b58      	ldr	r3, [pc, #352]	@ (80017b0 <HAL_GPIO_Init+0x2d8>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a57      	ldr	r2, [pc, #348]	@ (80017b0 <HAL_GPIO_Init+0x2d8>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b55      	ldr	r3, [pc, #340]	@ (80017b0 <HAL_GPIO_Init+0x2d8>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001664:	4a53      	ldr	r2, [pc, #332]	@ (80017b4 <HAL_GPIO_Init+0x2dc>)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3302      	adds	r3, #2
 800166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800168e:	d019      	beq.n	80016c4 <HAL_GPIO_Init+0x1ec>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a49      	ldr	r2, [pc, #292]	@ (80017b8 <HAL_GPIO_Init+0x2e0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d013      	beq.n	80016c0 <HAL_GPIO_Init+0x1e8>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a48      	ldr	r2, [pc, #288]	@ (80017bc <HAL_GPIO_Init+0x2e4>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d00d      	beq.n	80016bc <HAL_GPIO_Init+0x1e4>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a47      	ldr	r2, [pc, #284]	@ (80017c0 <HAL_GPIO_Init+0x2e8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d007      	beq.n	80016b8 <HAL_GPIO_Init+0x1e0>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a46      	ldr	r2, [pc, #280]	@ (80017c4 <HAL_GPIO_Init+0x2ec>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d101      	bne.n	80016b4 <HAL_GPIO_Init+0x1dc>
 80016b0:	2304      	movs	r3, #4
 80016b2:	e008      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016b4:	2305      	movs	r3, #5
 80016b6:	e006      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016b8:	2303      	movs	r3, #3
 80016ba:	e004      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016bc:	2302      	movs	r3, #2
 80016be:	e002      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016c4:	2300      	movs	r3, #0
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	f002 0203 	and.w	r2, r2, #3
 80016cc:	0092      	lsls	r2, r2, #2
 80016ce:	4093      	lsls	r3, r2
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016d6:	4937      	ldr	r1, [pc, #220]	@ (80017b4 <HAL_GPIO_Init+0x2dc>)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	3302      	adds	r3, #2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016e4:	4b38      	ldr	r3, [pc, #224]	@ (80017c8 <HAL_GPIO_Init+0x2f0>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001708:	4a2f      	ldr	r2, [pc, #188]	@ (80017c8 <HAL_GPIO_Init+0x2f0>)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800170e:	4b2e      	ldr	r3, [pc, #184]	@ (80017c8 <HAL_GPIO_Init+0x2f0>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001732:	4a25      	ldr	r2, [pc, #148]	@ (80017c8 <HAL_GPIO_Init+0x2f0>)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001738:	4b23      	ldr	r3, [pc, #140]	@ (80017c8 <HAL_GPIO_Init+0x2f0>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800175c:	4a1a      	ldr	r2, [pc, #104]	@ (80017c8 <HAL_GPIO_Init+0x2f0>)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001762:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <HAL_GPIO_Init+0x2f0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001786:	4a10      	ldr	r2, [pc, #64]	@ (80017c8 <HAL_GPIO_Init+0x2f0>)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	fa22 f303 	lsr.w	r3, r2, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	f47f aea3 	bne.w	80014e8 <HAL_GPIO_Init+0x10>
  }
}
 80017a2:	bf00      	nop
 80017a4:	bf00      	nop
 80017a6:	371c      	adds	r7, #28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010000 	.word	0x40010000
 80017b8:	48000400 	.word	0x48000400
 80017bc:	48000800 	.word	0x48000800
 80017c0:	48000c00 	.word	0x48000c00
 80017c4:	48001000 	.word	0x48001000
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80017da:	e0b8      	b.n	800194e <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80017dc:	2201      	movs	r2, #1
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80ab 	beq.w	8001948 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80017f2:	4a5e      	ldr	r2, [pc, #376]	@ (800196c <HAL_GPIO_DeInit+0x1a0>)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	3302      	adds	r3, #2
 80017fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	220f      	movs	r2, #15
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4013      	ands	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800181a:	d019      	beq.n	8001850 <HAL_GPIO_DeInit+0x84>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a54      	ldr	r2, [pc, #336]	@ (8001970 <HAL_GPIO_DeInit+0x1a4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d013      	beq.n	800184c <HAL_GPIO_DeInit+0x80>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a53      	ldr	r2, [pc, #332]	@ (8001974 <HAL_GPIO_DeInit+0x1a8>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d00d      	beq.n	8001848 <HAL_GPIO_DeInit+0x7c>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a52      	ldr	r2, [pc, #328]	@ (8001978 <HAL_GPIO_DeInit+0x1ac>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d007      	beq.n	8001844 <HAL_GPIO_DeInit+0x78>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a51      	ldr	r2, [pc, #324]	@ (800197c <HAL_GPIO_DeInit+0x1b0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d101      	bne.n	8001840 <HAL_GPIO_DeInit+0x74>
 800183c:	2304      	movs	r3, #4
 800183e:	e008      	b.n	8001852 <HAL_GPIO_DeInit+0x86>
 8001840:	2305      	movs	r3, #5
 8001842:	e006      	b.n	8001852 <HAL_GPIO_DeInit+0x86>
 8001844:	2303      	movs	r3, #3
 8001846:	e004      	b.n	8001852 <HAL_GPIO_DeInit+0x86>
 8001848:	2302      	movs	r3, #2
 800184a:	e002      	b.n	8001852 <HAL_GPIO_DeInit+0x86>
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <HAL_GPIO_DeInit+0x86>
 8001850:	2300      	movs	r3, #0
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	f002 0203 	and.w	r2, r2, #3
 8001858:	0092      	lsls	r2, r2, #2
 800185a:	4093      	lsls	r3, r2
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	429a      	cmp	r2, r3
 8001860:	d132      	bne.n	80018c8 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001862:	4b47      	ldr	r3, [pc, #284]	@ (8001980 <HAL_GPIO_DeInit+0x1b4>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	43db      	mvns	r3, r3
 800186a:	4945      	ldr	r1, [pc, #276]	@ (8001980 <HAL_GPIO_DeInit+0x1b4>)
 800186c:	4013      	ands	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001870:	4b43      	ldr	r3, [pc, #268]	@ (8001980 <HAL_GPIO_DeInit+0x1b4>)
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	43db      	mvns	r3, r3
 8001878:	4941      	ldr	r1, [pc, #260]	@ (8001980 <HAL_GPIO_DeInit+0x1b4>)
 800187a:	4013      	ands	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800187e:	4b40      	ldr	r3, [pc, #256]	@ (8001980 <HAL_GPIO_DeInit+0x1b4>)
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	43db      	mvns	r3, r3
 8001886:	493e      	ldr	r1, [pc, #248]	@ (8001980 <HAL_GPIO_DeInit+0x1b4>)
 8001888:	4013      	ands	r3, r2
 800188a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800188c:	4b3c      	ldr	r3, [pc, #240]	@ (8001980 <HAL_GPIO_DeInit+0x1b4>)
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	43db      	mvns	r3, r3
 8001894:	493a      	ldr	r1, [pc, #232]	@ (8001980 <HAL_GPIO_DeInit+0x1b4>)
 8001896:	4013      	ands	r3, r2
 8001898:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	220f      	movs	r2, #15
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80018aa:	4a30      	ldr	r2, [pc, #192]	@ (800196c <HAL_GPIO_DeInit+0x1a0>)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	43da      	mvns	r2, r3
 80018ba:	482c      	ldr	r0, [pc, #176]	@ (800196c <HAL_GPIO_DeInit+0x1a0>)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	400a      	ands	r2, r1
 80018c2:	3302      	adds	r3, #2
 80018c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2103      	movs	r1, #3
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	401a      	ands	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	08da      	lsrs	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3208      	adds	r2, #8
 80018e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	220f      	movs	r2, #15
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	08d2      	lsrs	r2, r2, #3
 80018fe:	4019      	ands	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3208      	adds	r2, #8
 8001904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2103      	movs	r1, #3
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	401a      	ands	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	2101      	movs	r1, #1
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	401a      	ands	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2103      	movs	r1, #3
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	401a      	ands	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	3301      	adds	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	f47f af40 	bne.w	80017dc <HAL_GPIO_DeInit+0x10>
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	371c      	adds	r7, #28
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40010000 	.word	0x40010000
 8001970:	48000400 	.word	0x48000400
 8001974:	48000800 	.word	0x48000800
 8001978:	48000c00 	.word	0x48000c00
 800197c:	48001000 	.word	0x48001000
 8001980:	40010400 	.word	0x40010400

08001984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019be:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ca:	4a05      	ldr	r2, [pc, #20]	@ (80019e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe ff46 	bl	8000864 <HAL_GPIO_EXTI_Callback>
  }
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40010400 	.word	0x40010400

080019e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0b9      	b.n	8001b6a <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d106      	bne.n	8001a10 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff f84c 	bl	8000aa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2203      	movs	r2, #3
 8001a14:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 ff1c 	bl	800485a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
 8001a26:	e03e      	b.n	8001aa6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	3311      	adds	r3, #17
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	3310      	adds	r3, #16
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a50:	7bfa      	ldrb	r2, [r7, #15]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3313      	adds	r3, #19
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	3320      	adds	r3, #32
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	440b      	add	r3, r1
 8001a86:	3324      	adds	r3, #36	@ 0x24
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	440b      	add	r3, r1
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	791b      	ldrb	r3, [r3, #4]
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d3bb      	bcc.n	8001a28 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]
 8001ab4:	e044      	b.n	8001b40 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ab6:	7bfa      	ldrb	r2, [r7, #15]
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	440b      	add	r3, r1
 8001ada:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ade:	7bfa      	ldrb	r2, [r7, #15]
 8001ae0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	440b      	add	r3, r1
 8001af0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	440b      	add	r3, r1
 8001b32:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	791b      	ldrb	r3, [r3, #4]
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d3b5      	bcc.n	8001ab6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3304      	adds	r3, #4
 8001b52:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001b56:	f002 fe9b 	bl	8004890 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b84:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	f000 bff4 	b.w	8002b82 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 816d 	beq.w	8001e8a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bb0:	4bb4      	ldr	r3, [pc, #720]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d00c      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bbc:	4bb1      	ldr	r3, [pc, #708]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d157      	bne.n	8001c78 <HAL_RCC_OscConfig+0x104>
 8001bc8:	4bae      	ldr	r3, [pc, #696]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd4:	d150      	bne.n	8001c78 <HAL_RCC_OscConfig+0x104>
 8001bd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bda:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bf6:	d802      	bhi.n	8001bfe <HAL_RCC_OscConfig+0x8a>
 8001bf8:	4ba2      	ldr	r3, [pc, #648]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	e015      	b.n	8001c2a <HAL_RCC_OscConfig+0xb6>
 8001bfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c02:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001c12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c16:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001c1a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001c26:	4b97      	ldr	r3, [pc, #604]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c2e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001c32:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001c36:	fa92 f2a2 	rbit	r2, r2
 8001c3a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001c3e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001c42:	fab2 f282 	clz	r2, r2
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	f042 0220 	orr.w	r2, r2, #32
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	f002 021f 	and.w	r2, r2, #31
 8001c52:	2101      	movs	r1, #1
 8001c54:	fa01 f202 	lsl.w	r2, r1, r2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8114 	beq.w	8001e88 <HAL_RCC_OscConfig+0x314>
 8001c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f040 810b 	bne.w	8001e88 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f000 bf85 	b.w	8002b82 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c88:	d106      	bne.n	8001c98 <HAL_RCC_OscConfig+0x124>
 8001c8a:	4b7e      	ldr	r3, [pc, #504]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e036      	b.n	8001d06 <HAL_RCC_OscConfig+0x192>
 8001c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10c      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x14e>
 8001ca8:	4b76      	ldr	r3, [pc, #472]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a75      	ldr	r2, [pc, #468]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b73      	ldr	r3, [pc, #460]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a72      	ldr	r2, [pc, #456]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	e021      	b.n	8001d06 <HAL_RCC_OscConfig+0x192>
 8001cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cd2:	d10c      	bne.n	8001cee <HAL_RCC_OscConfig+0x17a>
 8001cd4:	4b6b      	ldr	r3, [pc, #428]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001cda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b68      	ldr	r3, [pc, #416]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a67      	ldr	r2, [pc, #412]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	e00b      	b.n	8001d06 <HAL_RCC_OscConfig+0x192>
 8001cee:	4b65      	ldr	r3, [pc, #404]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a64      	ldr	r2, [pc, #400]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b62      	ldr	r3, [pc, #392]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a61      	ldr	r2, [pc, #388]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001d00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d04:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d06:	4b5f      	ldr	r3, [pc, #380]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0a:	f023 020f 	bic.w	r2, r3, #15
 8001d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	495a      	ldr	r1, [pc, #360]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d054      	beq.n	8001dda <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7fe ffe8 	bl	8000d04 <HAL_GetTick>
 8001d34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3a:	f7fe ffe3 	bl	8000d04 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	@ 0x64
 8001d48:	d902      	bls.n	8001d50 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	f000 bf19 	b.w	8002b82 <HAL_RCC_OscConfig+0x100e>
 8001d50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d54:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001d64:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d70:	d802      	bhi.n	8001d78 <HAL_RCC_OscConfig+0x204>
 8001d72:	4b44      	ldr	r3, [pc, #272]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	e015      	b.n	8001da4 <HAL_RCC_OscConfig+0x230>
 8001d78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d7c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001d8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d90:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001d94:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001da0:	4b38      	ldr	r3, [pc, #224]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001da8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001dac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001db0:	fa92 f2a2 	rbit	r2, r2
 8001db4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001db8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001dbc:	fab2 f282 	clz	r2, r2
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	f042 0220 	orr.w	r2, r2, #32
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	f002 021f 	and.w	r2, r2, #31
 8001dcc:	2101      	movs	r1, #1
 8001dce:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0b0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1c6>
 8001dd8:	e057      	b.n	8001e8a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7fe ff93 	bl	8000d04 <HAL_GetTick>
 8001dde:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de2:	e00a      	b.n	8001dfa <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de4:	f7fe ff8e 	bl	8000d04 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b64      	cmp	r3, #100	@ 0x64
 8001df2:	d902      	bls.n	8001dfa <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	f000 bec4 	b.w	8002b82 <HAL_RCC_OscConfig+0x100e>
 8001dfa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dfe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001e0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e1a:	d802      	bhi.n	8001e22 <HAL_RCC_OscConfig+0x2ae>
 8001e1c:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	e015      	b.n	8001e4e <HAL_RCC_OscConfig+0x2da>
 8001e22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e26:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001e36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e3a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001e3e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <HAL_RCC_OscConfig+0x310>)
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e52:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001e56:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001e5a:	fa92 f2a2 	rbit	r2, r2
 8001e5e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001e62:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001e66:	fab2 f282 	clz	r2, r2
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	f042 0220 	orr.w	r2, r2, #32
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f002 021f 	and.w	r2, r2, #31
 8001e76:	2101      	movs	r1, #1
 8001e78:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1b0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x270>
 8001e82:	e002      	b.n	8001e8a <HAL_RCC_OscConfig+0x316>
 8001e84:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 816c 	beq.w	8002178 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ea0:	4bcc      	ldr	r3, [pc, #816]	@ (80021d4 <HAL_RCC_OscConfig+0x660>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00b      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001eac:	4bc9      	ldr	r3, [pc, #804]	@ (80021d4 <HAL_RCC_OscConfig+0x660>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d16d      	bne.n	8001f94 <HAL_RCC_OscConfig+0x420>
 8001eb8:	4bc6      	ldr	r3, [pc, #792]	@ (80021d4 <HAL_RCC_OscConfig+0x660>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d167      	bne.n	8001f94 <HAL_RCC_OscConfig+0x420>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001ed6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ee2:	d802      	bhi.n	8001eea <HAL_RCC_OscConfig+0x376>
 8001ee4:	4bbb      	ldr	r3, [pc, #748]	@ (80021d4 <HAL_RCC_OscConfig+0x660>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	e013      	b.n	8001f12 <HAL_RCC_OscConfig+0x39e>
 8001eea:	2302      	movs	r3, #2
 8001eec:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001efc:	2302      	movs	r3, #2
 8001efe:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001f02:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001f0e:	4bb1      	ldr	r3, [pc, #708]	@ (80021d4 <HAL_RCC_OscConfig+0x660>)
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	2202      	movs	r2, #2
 8001f14:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001f18:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001f1c:	fa92 f2a2 	rbit	r2, r2
 8001f20:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001f24:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001f28:	fab2 f282 	clz	r2, r2
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	f042 0220 	orr.w	r2, r2, #32
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	f002 021f 	and.w	r2, r2, #31
 8001f38:	2101      	movs	r1, #1
 8001f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00a      	beq.n	8001f5a <HAL_RCC_OscConfig+0x3e6>
 8001f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d002      	beq.n	8001f5a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f000 be14 	b.w	8002b82 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5a:	4b9e      	ldr	r3, [pc, #632]	@ (80021d4 <HAL_RCC_OscConfig+0x660>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	21f8      	movs	r1, #248	@ 0xf8
 8001f70:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001f78:	fa91 f1a1 	rbit	r1, r1
 8001f7c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001f80:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001f84:	fab1 f181 	clz	r1, r1
 8001f88:	b2c9      	uxtb	r1, r1
 8001f8a:	408b      	lsls	r3, r1
 8001f8c:	4991      	ldr	r1, [pc, #580]	@ (80021d4 <HAL_RCC_OscConfig+0x660>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	e0f1      	b.n	8002178 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 8083 	beq.w	80020ac <HAL_RCC_OscConfig+0x538>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001fb8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fbc:	fab3 f383 	clz	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fc6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2301      	movs	r3, #1
 8001fd0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7fe fe97 	bl	8000d04 <HAL_GetTick>
 8001fd6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fdc:	f7fe fe92 	bl	8000d04 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d902      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	f000 bdc8 	b.w	8002b82 <HAL_RCC_OscConfig+0x100e>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002004:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002010:	d802      	bhi.n	8002018 <HAL_RCC_OscConfig+0x4a4>
 8002012:	4b70      	ldr	r3, [pc, #448]	@ (80021d4 <HAL_RCC_OscConfig+0x660>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	e013      	b.n	8002040 <HAL_RCC_OscConfig+0x4cc>
 8002018:	2302      	movs	r3, #2
 800201a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800202a:	2302      	movs	r3, #2
 800202c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002030:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800203c:	4b65      	ldr	r3, [pc, #404]	@ (80021d4 <HAL_RCC_OscConfig+0x660>)
 800203e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002040:	2202      	movs	r2, #2
 8002042:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002046:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800204a:	fa92 f2a2 	rbit	r2, r2
 800204e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002052:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002056:	fab2 f282 	clz	r2, r2
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f042 0220 	orr.w	r2, r2, #32
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	f002 021f 	and.w	r2, r2, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0b4      	beq.n	8001fdc <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002072:	4b58      	ldr	r3, [pc, #352]	@ (80021d4 <HAL_RCC_OscConfig+0x660>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800207a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	21f8      	movs	r1, #248	@ 0xf8
 8002088:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002090:	fa91 f1a1 	rbit	r1, r1
 8002094:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002098:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800209c:	fab1 f181 	clz	r1, r1
 80020a0:	b2c9      	uxtb	r1, r1
 80020a2:	408b      	lsls	r3, r1
 80020a4:	494b      	ldr	r1, [pc, #300]	@ (80021d4 <HAL_RCC_OscConfig+0x660>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
 80020aa:	e065      	b.n	8002178 <HAL_RCC_OscConfig+0x604>
 80020ac:	2301      	movs	r3, #1
 80020ae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80020be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	461a      	mov	r2, r3
 80020d4:	2300      	movs	r3, #0
 80020d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe fe14 	bl	8000d04 <HAL_GetTick>
 80020dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e2:	f7fe fe0f 	bl	8000d04 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d902      	bls.n	80020f8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	f000 bd45 	b.w	8002b82 <HAL_RCC_OscConfig+0x100e>
 80020f8:	2302      	movs	r3, #2
 80020fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800210a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b3f      	cmp	r3, #63	@ 0x3f
 8002116:	d802      	bhi.n	800211e <HAL_RCC_OscConfig+0x5aa>
 8002118:	4b2e      	ldr	r3, [pc, #184]	@ (80021d4 <HAL_RCC_OscConfig+0x660>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	e013      	b.n	8002146 <HAL_RCC_OscConfig+0x5d2>
 800211e:	2302      	movs	r3, #2
 8002120:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002130:	2302      	movs	r3, #2
 8002132:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002136:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002142:	4b24      	ldr	r3, [pc, #144]	@ (80021d4 <HAL_RCC_OscConfig+0x660>)
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	2202      	movs	r2, #2
 8002148:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800214c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002150:	fa92 f2a2 	rbit	r2, r2
 8002154:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002158:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800215c:	fab2 f282 	clz	r2, r2
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	f042 0220 	orr.w	r2, r2, #32
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f002 021f 	and.w	r2, r2, #31
 800216c:	2101      	movs	r1, #1
 800216e:	fa01 f202 	lsl.w	r2, r1, r2
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1b4      	bne.n	80020e2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 8115 	beq.w	80023b8 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d07e      	beq.n	800229c <HAL_RCC_OscConfig+0x728>
 800219e:	2301      	movs	r3, #1
 80021a0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80021b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b4:	fab3 f383 	clz	r3, r3
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_RCC_OscConfig+0x664>)
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	461a      	mov	r2, r3
 80021c4:	2301      	movs	r3, #1
 80021c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c8:	f7fe fd9c 	bl	8000d04 <HAL_GetTick>
 80021cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d0:	e00f      	b.n	80021f2 <HAL_RCC_OscConfig+0x67e>
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021dc:	f7fe fd92 	bl	8000d04 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d902      	bls.n	80021f2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	f000 bcc8 	b.w	8002b82 <HAL_RCC_OscConfig+0x100e>
 80021f2:	2302      	movs	r3, #2
 80021f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002208:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800220c:	2202      	movs	r2, #2
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002214:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	fa93 f2a3 	rbit	r2, r3
 800221e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002222:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002230:	2202      	movs	r2, #2
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	fa93 f2a3 	rbit	r2, r3
 8002242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002246:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800224a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224c:	4bb0      	ldr	r3, [pc, #704]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 800224e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002254:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002258:	2102      	movs	r1, #2
 800225a:	6019      	str	r1, [r3, #0]
 800225c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002260:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	fa93 f1a3 	rbit	r1, r3
 800226a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002272:	6019      	str	r1, [r3, #0]
  return result;
 8002274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002278:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	2101      	movs	r1, #1
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0a0      	beq.n	80021dc <HAL_RCC_OscConfig+0x668>
 800229a:	e08d      	b.n	80023b8 <HAL_RCC_OscConfig+0x844>
 800229c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	fa93 f2a3 	rbit	r2, r3
 80022b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022be:	601a      	str	r2, [r3, #0]
  return result;
 80022c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b90      	ldr	r3, [pc, #576]	@ (8002514 <HAL_RCC_OscConfig+0x9a0>)
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	461a      	mov	r2, r3
 80022da:	2300      	movs	r3, #0
 80022dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7fe fd11 	bl	8000d04 <HAL_GetTick>
 80022e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e8:	f7fe fd0c 	bl	8000d04 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d902      	bls.n	80022fe <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	f000 bc42 	b.w	8002b82 <HAL_RCC_OscConfig+0x100e>
 80022fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002302:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002306:	2202      	movs	r2, #2
 8002308:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	fa93 f2a3 	rbit	r2, r3
 8002318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002326:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800232a:	2202      	movs	r2, #2
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002332:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	fa93 f2a3 	rbit	r2, r3
 800233c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002340:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800234e:	2202      	movs	r2, #2
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002356:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	fa93 f2a3 	rbit	r2, r3
 8002360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002364:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002368:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236a:	4b69      	ldr	r3, [pc, #420]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 800236c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800236e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002372:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002376:	2102      	movs	r1, #2
 8002378:	6019      	str	r1, [r3, #0]
 800237a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fa93 f1a3 	rbit	r1, r3
 8002388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002390:	6019      	str	r1, [r3, #0]
  return result;
 8002392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002396:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	2101      	movs	r1, #1
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d197      	bne.n	80022e8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 819e 	beq.w	800270a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d4:	4b4e      	ldr	r3, [pc, #312]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d116      	bne.n	800240e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 80023e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ea:	61d3      	str	r3, [r2, #28]
 80023ec:	4b48      	ldr	r3, [pc, #288]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80023f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002402:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002406:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002408:	2301      	movs	r3, #1
 800240a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240e:	4b42      	ldr	r3, [pc, #264]	@ (8002518 <HAL_RCC_OscConfig+0x9a4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002416:	2b00      	cmp	r3, #0
 8002418:	d11a      	bne.n	8002450 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241a:	4b3f      	ldr	r3, [pc, #252]	@ (8002518 <HAL_RCC_OscConfig+0x9a4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a3e      	ldr	r2, [pc, #248]	@ (8002518 <HAL_RCC_OscConfig+0x9a4>)
 8002420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002424:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002426:	f7fe fc6d 	bl	8000d04 <HAL_GetTick>
 800242a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242e:	e009      	b.n	8002444 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002430:	f7fe fc68 	bl	8000d04 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b64      	cmp	r3, #100	@ 0x64
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e39e      	b.n	8002b82 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	4b34      	ldr	r3, [pc, #208]	@ (8002518 <HAL_RCC_OscConfig+0x9a4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ef      	beq.n	8002430 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002454:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x8fa>
 8002460:	4b2b      	ldr	r3, [pc, #172]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4a2a      	ldr	r2, [pc, #168]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6213      	str	r3, [r2, #32]
 800246c:	e035      	b.n	80024da <HAL_RCC_OscConfig+0x966>
 800246e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002472:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x924>
 800247e:	4b24      	ldr	r3, [pc, #144]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a23      	ldr	r2, [pc, #140]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	6213      	str	r3, [r2, #32]
 800248a:	4b21      	ldr	r3, [pc, #132]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a20      	ldr	r2, [pc, #128]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	6213      	str	r3, [r2, #32]
 8002496:	e020      	b.n	80024da <HAL_RCC_OscConfig+0x966>
 8002498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d10c      	bne.n	80024c2 <HAL_RCC_OscConfig+0x94e>
 80024a8:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4a18      	ldr	r2, [pc, #96]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 80024ae:	f043 0304 	orr.w	r3, r3, #4
 80024b2:	6213      	str	r3, [r2, #32]
 80024b4:	4b16      	ldr	r3, [pc, #88]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4a15      	ldr	r2, [pc, #84]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6213      	str	r3, [r2, #32]
 80024c0:	e00b      	b.n	80024da <HAL_RCC_OscConfig+0x966>
 80024c2:	4b13      	ldr	r3, [pc, #76]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4a12      	ldr	r2, [pc, #72]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	6213      	str	r3, [r2, #32]
 80024ce:	4b10      	ldr	r3, [pc, #64]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002510 <HAL_RCC_OscConfig+0x99c>)
 80024d4:	f023 0304 	bic.w	r3, r3, #4
 80024d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8087 	beq.w	80025fa <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ec:	f7fe fc0a 	bl	8000d04 <HAL_GetTick>
 80024f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f4:	e012      	b.n	800251c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7fe fc05 	bl	8000d04 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d908      	bls.n	800251c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e339      	b.n	8002b82 <HAL_RCC_OscConfig+0x100e>
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
 8002514:	10908120 	.word	0x10908120
 8002518:	40007000 	.word	0x40007000
 800251c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002520:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002524:	2202      	movs	r2, #2
 8002526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	fa93 f2a3 	rbit	r2, r3
 8002536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002544:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002548:	2202      	movs	r2, #2
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002550:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fa93 f2a3 	rbit	r2, r3
 800255a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002562:	601a      	str	r2, [r3, #0]
  return result;
 8002564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002568:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800256c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <HAL_RCC_OscConfig+0xa10>
 800257e:	4b98      	ldr	r3, [pc, #608]	@ (80027e0 <HAL_RCC_OscConfig+0xc6c>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	e013      	b.n	80025ac <HAL_RCC_OscConfig+0xa38>
 8002584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002588:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800258c:	2202      	movs	r2, #2
 800258e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002594:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	fa93 f2a3 	rbit	r2, r3
 800259e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	4b8d      	ldr	r3, [pc, #564]	@ (80027e0 <HAL_RCC_OscConfig+0xc6c>)
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025b0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80025b4:	2102      	movs	r1, #2
 80025b6:	6011      	str	r1, [r2, #0]
 80025b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	fa92 f1a2 	rbit	r1, r2
 80025c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025ca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80025ce:	6011      	str	r1, [r2, #0]
  return result;
 80025d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025d4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	fab2 f282 	clz	r2, r2
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f002 021f 	and.w	r2, r2, #31
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f202 	lsl.w	r2, r1, r2
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f43f af7f 	beq.w	80024f6 <HAL_RCC_OscConfig+0x982>
 80025f8:	e07d      	b.n	80026f6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7fe fb83 	bl	8000d04 <HAL_GetTick>
 80025fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002602:	e00b      	b.n	800261c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002604:	f7fe fb7e 	bl	8000d04 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002614:	4293      	cmp	r3, r2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e2b2      	b.n	8002b82 <HAL_RCC_OscConfig+0x100e>
 800261c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002620:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002624:	2202      	movs	r2, #2
 8002626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	fa93 f2a3 	rbit	r2, r3
 8002636:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002644:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002648:	2202      	movs	r2, #2
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002650:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	fa93 f2a3 	rbit	r2, r3
 800265a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002662:	601a      	str	r2, [r3, #0]
  return result;
 8002664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002668:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800266c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d102      	bne.n	8002684 <HAL_RCC_OscConfig+0xb10>
 800267e:	4b58      	ldr	r3, [pc, #352]	@ (80027e0 <HAL_RCC_OscConfig+0xc6c>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	e013      	b.n	80026ac <HAL_RCC_OscConfig+0xb38>
 8002684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002688:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800268c:	2202      	movs	r2, #2
 800268e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002694:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	fa93 f2a3 	rbit	r2, r3
 800269e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	4b4d      	ldr	r3, [pc, #308]	@ (80027e0 <HAL_RCC_OscConfig+0xc6c>)
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026b0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80026b4:	2102      	movs	r1, #2
 80026b6:	6011      	str	r1, [r2, #0]
 80026b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026bc:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	fa92 f1a2 	rbit	r1, r2
 80026c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ca:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80026ce:	6011      	str	r1, [r2, #0]
  return result;
 80026d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026d4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	fab2 f282 	clz	r2, r2
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f002 021f 	and.w	r2, r2, #31
 80026ea:	2101      	movs	r1, #1
 80026ec:	fa01 f202 	lsl.w	r2, r1, r2
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d186      	bne.n	8002604 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026f6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d105      	bne.n	800270a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fe:	4b38      	ldr	r3, [pc, #224]	@ (80027e0 <HAL_RCC_OscConfig+0xc6c>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	4a37      	ldr	r2, [pc, #220]	@ (80027e0 <HAL_RCC_OscConfig+0xc6c>)
 8002704:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002708:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8232 	beq.w	8002b80 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800271c:	4b30      	ldr	r3, [pc, #192]	@ (80027e0 <HAL_RCC_OscConfig+0xc6c>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	2b08      	cmp	r3, #8
 8002726:	f000 8201 	beq.w	8002b2c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800272a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	2b02      	cmp	r3, #2
 8002738:	f040 8157 	bne.w	80029ea <HAL_RCC_OscConfig+0xe76>
 800273c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002740:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002744:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	fa93 f2a3 	rbit	r2, r3
 8002758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002760:	601a      	str	r2, [r3, #0]
  return result;
 8002762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002766:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800276a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002776:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	461a      	mov	r2, r3
 800277e:	2300      	movs	r3, #0
 8002780:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7fe fabf 	bl	8000d04 <HAL_GetTick>
 8002786:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278a:	e009      	b.n	80027a0 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278c:	f7fe faba 	bl	8000d04 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e1f0      	b.n	8002b82 <HAL_RCC_OscConfig+0x100e>
 80027a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80027a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	fa93 f2a3 	rbit	r2, r3
 80027bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80027c4:	601a      	str	r2, [r3, #0]
  return result;
 80027c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ca:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80027ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80027d8:	d804      	bhi.n	80027e4 <HAL_RCC_OscConfig+0xc70>
 80027da:	4b01      	ldr	r3, [pc, #4]	@ (80027e0 <HAL_RCC_OscConfig+0xc6c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	e029      	b.n	8002834 <HAL_RCC_OscConfig+0xcc0>
 80027e0:	40021000 	.word	0x40021000
 80027e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	fa93 f2a3 	rbit	r2, r3
 8002800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002804:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002812:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	fa93 f2a3 	rbit	r2, r3
 8002826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	4bc3      	ldr	r3, [pc, #780]	@ (8002b40 <HAL_RCC_OscConfig+0xfcc>)
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002838:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800283c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002840:	6011      	str	r1, [r2, #0]
 8002842:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002846:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	fa92 f1a2 	rbit	r1, r2
 8002850:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002854:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002858:	6011      	str	r1, [r2, #0]
  return result;
 800285a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800285e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	fab2 f282 	clz	r2, r2
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f042 0220 	orr.w	r2, r2, #32
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f002 021f 	and.w	r2, r2, #31
 8002874:	2101      	movs	r1, #1
 8002876:	fa01 f202 	lsl.w	r2, r1, r2
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d185      	bne.n	800278c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002880:	4baf      	ldr	r3, [pc, #700]	@ (8002b40 <HAL_RCC_OscConfig+0xfcc>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002898:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	430b      	orrs	r3, r1
 80028a2:	49a7      	ldr	r1, [pc, #668]	@ (8002b40 <HAL_RCC_OscConfig+0xfcc>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
 80028a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ac:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80028b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ba:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	fa93 f2a3 	rbit	r2, r3
 80028c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80028cc:	601a      	str	r2, [r3, #0]
  return result;
 80028ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80028d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028e2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	461a      	mov	r2, r3
 80028ea:	2301      	movs	r3, #1
 80028ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7fe fa09 	bl	8000d04 <HAL_GetTick>
 80028f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f6:	e009      	b.n	800290c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe fa04 	bl	8000d04 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e13a      	b.n	8002b82 <HAL_RCC_OscConfig+0x100e>
 800290c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002910:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002914:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	fa93 f2a3 	rbit	r2, r3
 8002928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002930:	601a      	str	r2, [r3, #0]
  return result;
 8002932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002936:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800293a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800293c:	fab3 f383 	clz	r3, r3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b3f      	cmp	r3, #63	@ 0x3f
 8002944:	d802      	bhi.n	800294c <HAL_RCC_OscConfig+0xdd8>
 8002946:	4b7e      	ldr	r3, [pc, #504]	@ (8002b40 <HAL_RCC_OscConfig+0xfcc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	e027      	b.n	800299c <HAL_RCC_OscConfig+0xe28>
 800294c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002950:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002954:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	fa93 f2a3 	rbit	r2, r3
 8002968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002976:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800297a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002984:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	fa93 f2a3 	rbit	r2, r3
 800298e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002992:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	4b69      	ldr	r3, [pc, #420]	@ (8002b40 <HAL_RCC_OscConfig+0xfcc>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029a0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80029a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029a8:	6011      	str	r1, [r2, #0]
 80029aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029ae:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	fa92 f1a2 	rbit	r1, r2
 80029b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029bc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80029c0:	6011      	str	r1, [r2, #0]
  return result;
 80029c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029c6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	fab2 f282 	clz	r2, r2
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	f042 0220 	orr.w	r2, r2, #32
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	f002 021f 	and.w	r2, r2, #31
 80029dc:	2101      	movs	r1, #1
 80029de:	fa01 f202 	lsl.w	r2, r1, r2
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d087      	beq.n	80028f8 <HAL_RCC_OscConfig+0xd84>
 80029e8:	e0ca      	b.n	8002b80 <HAL_RCC_OscConfig+0x100c>
 80029ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ee:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80029f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	fa93 f2a3 	rbit	r2, r3
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a0e:	601a      	str	r2, [r3, #0]
  return result;
 8002a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a14:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe f968 	bl	8000d04 <HAL_GetTick>
 8002a34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a38:	e009      	b.n	8002a4e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3a:	f7fe f963 	bl	8000d04 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e099      	b.n	8002b82 <HAL_RCC_OscConfig+0x100e>
 8002a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a52:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a60:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	fa93 f2a3 	rbit	r2, r3
 8002a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a72:	601a      	str	r2, [r3, #0]
  return result;
 8002a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a78:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a86:	d802      	bhi.n	8002a8e <HAL_RCC_OscConfig+0xf1a>
 8002a88:	4b2d      	ldr	r3, [pc, #180]	@ (8002b40 <HAL_RCC_OscConfig+0xfcc>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	e027      	b.n	8002ade <HAL_RCC_OscConfig+0xf6a>
 8002a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a92:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	fa93 f2a3 	rbit	r2, r3
 8002aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aae:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002abc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fa93 f2a3 	rbit	r2, r3
 8002ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	4b19      	ldr	r3, [pc, #100]	@ (8002b40 <HAL_RCC_OscConfig+0xfcc>)
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ae2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002ae6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002aea:	6011      	str	r1, [r2, #0]
 8002aec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002af0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	fa92 f1a2 	rbit	r1, r2
 8002afa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002afe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b02:	6011      	str	r1, [r2, #0]
  return result;
 8002b04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b08:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	fab2 f282 	clz	r2, r2
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	f042 0220 	orr.w	r2, r2, #32
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	f002 021f 	and.w	r2, r2, #31
 8002b1e:	2101      	movs	r1, #1
 8002b20:	fa01 f202 	lsl.w	r2, r1, r2
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d187      	bne.n	8002a3a <HAL_RCC_OscConfig+0xec6>
 8002b2a:	e029      	b.n	8002b80 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d103      	bne.n	8002b44 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e020      	b.n	8002b82 <HAL_RCC_OscConfig+0x100e>
 8002b40:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b44:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <HAL_RCC_OscConfig+0x1018>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b4c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b50:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d10b      	bne.n	8002b7c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b64:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b68:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000

08002b90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b09e      	sub	sp, #120	@ 0x78
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e154      	b.n	8002e52 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b89      	ldr	r3, [pc, #548]	@ (8002dd0 <HAL_RCC_ClockConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d910      	bls.n	8002bd8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b86      	ldr	r3, [pc, #536]	@ (8002dd0 <HAL_RCC_ClockConfig+0x240>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 0207 	bic.w	r2, r3, #7
 8002bbe:	4984      	ldr	r1, [pc, #528]	@ (8002dd0 <HAL_RCC_ClockConfig+0x240>)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b82      	ldr	r3, [pc, #520]	@ (8002dd0 <HAL_RCC_ClockConfig+0x240>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e13c      	b.n	8002e52 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be4:	4b7b      	ldr	r3, [pc, #492]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4978      	ldr	r1, [pc, #480]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 80cd 	beq.w	8002d9e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d137      	bne.n	8002c7c <HAL_RCC_ClockConfig+0xec>
 8002c0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c10:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002c1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1c:	fab3 f383 	clz	r3, r3
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c24:	d802      	bhi.n	8002c2c <HAL_RCC_ClockConfig+0x9c>
 8002c26:	4b6b      	ldr	r3, [pc, #428]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	e00f      	b.n	8002c4c <HAL_RCC_ClockConfig+0xbc>
 8002c2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c34:	fa93 f3a3 	rbit	r3, r3
 8002c38:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c48:	4b62      	ldr	r3, [pc, #392]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c50:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c54:	fa92 f2a2 	rbit	r2, r2
 8002c58:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002c5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c5c:	fab2 f282 	clz	r2, r2
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	f042 0220 	orr.w	r2, r2, #32
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	f002 021f 	and.w	r2, r2, #31
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d171      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0ea      	b.n	8002e52 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d137      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x164>
 8002c84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c88:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c94:	fab3 f383 	clz	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c9c:	d802      	bhi.n	8002ca4 <HAL_RCC_ClockConfig+0x114>
 8002c9e:	4b4d      	ldr	r3, [pc, #308]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	e00f      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x134>
 8002ca4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cc0:	4b44      	ldr	r3, [pc, #272]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cc8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002cca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ccc:	fa92 f2a2 	rbit	r2, r2
 8002cd0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002cd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cd4:	fab2 f282 	clz	r2, r2
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	f042 0220 	orr.w	r2, r2, #32
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	f002 021f 	and.w	r2, r2, #31
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d135      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0ae      	b.n	8002e52 <HAL_RCC_ClockConfig+0x2c2>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d0a:	d802      	bhi.n	8002d12 <HAL_RCC_ClockConfig+0x182>
 8002d0c:	4b31      	ldr	r3, [pc, #196]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	e00d      	b.n	8002d2e <HAL_RCC_ClockConfig+0x19e>
 8002d12:	2302      	movs	r3, #2
 8002d14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d1e:	2302      	movs	r3, #2
 8002d20:	623b      	str	r3, [r7, #32]
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2e:	2202      	movs	r2, #2
 8002d30:	61ba      	str	r2, [r7, #24]
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	fa92 f2a2 	rbit	r2, r2
 8002d38:	617a      	str	r2, [r7, #20]
  return result;
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	fab2 f282 	clz	r2, r2
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	f042 0220 	orr.w	r2, r2, #32
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	f002 021f 	and.w	r2, r2, #31
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e07a      	b.n	8002e52 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f023 0203 	bic.w	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	491a      	ldr	r1, [pc, #104]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d6e:	f7fd ffc9 	bl	8000d04 <HAL_GetTick>
 8002d72:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d76:	f7fd ffc5 	bl	8000d04 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e062      	b.n	8002e52 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8c:	4b11      	ldr	r3, [pc, #68]	@ (8002dd4 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 020c 	and.w	r2, r3, #12
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d1eb      	bne.n	8002d76 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd0 <HAL_RCC_ClockConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d215      	bcs.n	8002dd8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dac:	4b08      	ldr	r3, [pc, #32]	@ (8002dd0 <HAL_RCC_ClockConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f023 0207 	bic.w	r2, r3, #7
 8002db4:	4906      	ldr	r1, [pc, #24]	@ (8002dd0 <HAL_RCC_ClockConfig+0x240>)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbc:	4b04      	ldr	r3, [pc, #16]	@ (8002dd0 <HAL_RCC_ClockConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d006      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e041      	b.n	8002e52 <HAL_RCC_ClockConfig+0x2c2>
 8002dce:	bf00      	nop
 8002dd0:	40022000 	.word	0x40022000
 8002dd4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e5c <HAL_RCC_ClockConfig+0x2cc>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	491a      	ldr	r1, [pc, #104]	@ (8002e5c <HAL_RCC_ClockConfig+0x2cc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e02:	4b16      	ldr	r3, [pc, #88]	@ (8002e5c <HAL_RCC_ClockConfig+0x2cc>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4912      	ldr	r1, [pc, #72]	@ (8002e5c <HAL_RCC_ClockConfig+0x2cc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e16:	f000 f829 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e5c <HAL_RCC_ClockConfig+0x2cc>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e24:	22f0      	movs	r2, #240	@ 0xf0
 8002e26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	fa92 f2a2 	rbit	r2, r2
 8002e2e:	60fa      	str	r2, [r7, #12]
  return result;
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	fab2 f282 	clz	r2, r2
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	40d3      	lsrs	r3, r2
 8002e3a:	4a09      	ldr	r2, [pc, #36]	@ (8002e60 <HAL_RCC_ClockConfig+0x2d0>)
 8002e3c:	5cd3      	ldrb	r3, [r2, r3]
 8002e3e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e42:	4a08      	ldr	r2, [pc, #32]	@ (8002e64 <HAL_RCC_ClockConfig+0x2d4>)
 8002e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e46:	4b08      	ldr	r3, [pc, #32]	@ (8002e68 <HAL_RCC_ClockConfig+0x2d8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd ff16 	bl	8000c7c <HAL_InitTick>
  
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3778      	adds	r7, #120	@ 0x78
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	08005a10 	.word	0x08005a10
 8002e64:	20000004 	.word	0x20000004
 8002e68:	20000008 	.word	0x20000008

08002e6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e86:	4b1e      	ldr	r3, [pc, #120]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d002      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0x30>
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d003      	beq.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x36>
 8002e9a:	e026      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e9c:	4b19      	ldr	r3, [pc, #100]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e9e:	613b      	str	r3, [r7, #16]
      break;
 8002ea0:	e026      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	0c9b      	lsrs	r3, r3, #18
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	4a17      	ldr	r2, [pc, #92]	@ (8002f08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002eac:	5cd3      	ldrb	r3, [r2, r3]
 8002eae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002eb0:	4b13      	ldr	r3, [pc, #76]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x94>)
 8002eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	4a14      	ldr	r2, [pc, #80]	@ (8002f0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eba:	5cd3      	ldrb	r3, [r2, r3]
 8002ebc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	e004      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a0c      	ldr	r2, [pc, #48]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	613b      	str	r3, [r7, #16]
      break;
 8002ee8:	e002      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eea:	4b06      	ldr	r3, [pc, #24]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eec:	613b      	str	r3, [r7, #16]
      break;
 8002eee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef0:	693b      	ldr	r3, [r7, #16]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
 8002f04:	007a1200 	.word	0x007a1200
 8002f08:	08005a28 	.word	0x08005a28
 8002f0c:	08005a38 	.word	0x08005a38
 8002f10:	003d0900 	.word	0x003d0900

08002f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f18:	4b03      	ldr	r3, [pc, #12]	@ (8002f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000004 	.word	0x20000004

08002f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f32:	f7ff ffef 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f36:	4601      	mov	r1, r0
 8002f38:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f40:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002f44:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	fa92 f2a2 	rbit	r2, r2
 8002f4c:	603a      	str	r2, [r7, #0]
  return result;
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	fab2 f282 	clz	r2, r2
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	40d3      	lsrs	r3, r2
 8002f58:	4a04      	ldr	r2, [pc, #16]	@ (8002f6c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	08005a20 	.word	0x08005a20

08002f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f76:	f7ff ffcd 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f7a:	4601      	mov	r1, r0
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002f84:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002f88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	fa92 f2a2 	rbit	r2, r2
 8002f90:	603a      	str	r2, [r7, #0]
  return result;
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	fab2 f282 	clz	r2, r2
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	40d3      	lsrs	r3, r2
 8002f9c:	4a04      	ldr	r2, [pc, #16]	@ (8002fb0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f9e:	5cd3      	ldrb	r3, [r2, r3]
 8002fa0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	08005a20 	.word	0x08005a20

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b092      	sub	sp, #72	@ 0x48
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80d2 	beq.w	800317c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10e      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe4:	4b4a      	ldr	r3, [pc, #296]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	4a49      	ldr	r2, [pc, #292]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	61d3      	str	r3, [r2, #28]
 8002ff0:	4b47      	ldr	r3, [pc, #284]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b44      	ldr	r3, [pc, #272]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300e:	4b41      	ldr	r3, [pc, #260]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a40      	ldr	r2, [pc, #256]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003018:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fd fe73 	bl	8000d04 <HAL_GetTick>
 800301e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fd fe6f 	bl	8000d04 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	@ 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e167      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	4b37      	ldr	r3, [pc, #220]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003040:	4b33      	ldr	r3, [pc, #204]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003048:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800304a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8082 	beq.w	8003156 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800305a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800305c:	429a      	cmp	r2, r3
 800305e:	d07a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003060:	4b2b      	ldr	r3, [pc, #172]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800306a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800306e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	4b25      	ldr	r3, [pc, #148]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	461a      	mov	r2, r3
 800308a:	2301      	movs	r3, #1
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003092:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800309c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	461a      	mov	r2, r3
 80030ae:	2300      	movs	r3, #0
 80030b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030b2:	4a17      	ldr	r2, [pc, #92]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80030b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d049      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c2:	f7fd fe1f 	bl	8000d04 <HAL_GetTick>
 80030c6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fd fe1b 	bl	8000d04 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e111      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80030e0:	2302      	movs	r3, #2
 80030e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e6:	fa93 f3a3 	rbit	r3, r3
 80030ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ec:	2302      	movs	r3, #2
 80030ee:	623b      	str	r3, [r7, #32]
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	fa93 f3a3 	rbit	r3, r3
 80030f6:	61fb      	str	r3, [r7, #28]
  return result;
 80030f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d108      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800310a:	4b01      	ldr	r3, [pc, #4]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	e00d      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003110:	40021000 	.word	0x40021000
 8003114:	40007000 	.word	0x40007000
 8003118:	10908100 	.word	0x10908100
 800311c:	2302      	movs	r3, #2
 800311e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	4b78      	ldr	r3, [pc, #480]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	2202      	movs	r2, #2
 800312e:	613a      	str	r2, [r7, #16]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	fa92 f2a2 	rbit	r2, r2
 8003136:	60fa      	str	r2, [r7, #12]
  return result;
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	fab2 f282 	clz	r2, r2
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	f002 021f 	and.w	r2, r2, #31
 800314a:	2101      	movs	r1, #1
 800314c:	fa01 f202 	lsl.w	r2, r1, r2
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0b9      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003156:	4b6d      	ldr	r3, [pc, #436]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	496a      	ldr	r1, [pc, #424]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003164:	4313      	orrs	r3, r2
 8003166:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003168:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800316c:	2b01      	cmp	r3, #1
 800316e:	d105      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003170:	4b66      	ldr	r3, [pc, #408]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	4a65      	ldr	r2, [pc, #404]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003176:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800317a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003188:	4b60      	ldr	r3, [pc, #384]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800318a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318c:	f023 0203 	bic.w	r2, r3, #3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	495d      	ldr	r1, [pc, #372]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003196:	4313      	orrs	r3, r2
 8003198:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031a6:	4b59      	ldr	r3, [pc, #356]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	4956      	ldr	r1, [pc, #344]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031c4:	4b51      	ldr	r3, [pc, #324]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	494e      	ldr	r1, [pc, #312]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e2:	4b4a      	ldr	r3, [pc, #296]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	f023 0210 	bic.w	r2, r3, #16
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	4947      	ldr	r1, [pc, #284]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003200:	4b42      	ldr	r3, [pc, #264]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320c:	493f      	ldr	r1, [pc, #252]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321a:	2b00      	cmp	r3, #0
 800321c:	d008      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800321e:	4b3b      	ldr	r3, [pc, #236]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	f023 0220 	bic.w	r2, r3, #32
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4938      	ldr	r1, [pc, #224]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800322c:	4313      	orrs	r3, r2
 800322e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800323c:	4b33      	ldr	r3, [pc, #204]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003240:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	4930      	ldr	r1, [pc, #192]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800324a:	4313      	orrs	r3, r2
 800324c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800325a:	4b2c      	ldr	r3, [pc, #176]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	4929      	ldr	r1, [pc, #164]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003268:	4313      	orrs	r3, r2
 800326a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003278:	4b24      	ldr	r3, [pc, #144]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003284:	4921      	ldr	r1, [pc, #132]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003286:	4313      	orrs	r3, r2
 8003288:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003296:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	491a      	ldr	r1, [pc, #104]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80032b4:	4b15      	ldr	r3, [pc, #84]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c0:	4912      	ldr	r1, [pc, #72]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032d2:	4b0e      	ldr	r3, [pc, #56]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	490b      	ldr	r1, [pc, #44]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80032f0:	4b06      	ldr	r3, [pc, #24]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fc:	4903      	ldr	r1, [pc, #12]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3748      	adds	r7, #72	@ 0x48
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021000 	.word	0x40021000

08003310 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e040      	b.n	80033a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fd faea 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	@ 0x24
 800333c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fe0a 	bl	8003f70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fc33 	bl	8003bc8 <UART_SetConfig>
 8003362:	4603      	mov	r3, r0
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e01b      	b.n	80033a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800337a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800338a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fe89 	bl	80040b4 <UART_CheckIdleState>
 80033a2:	4603      	mov	r3, r0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e02f      	b.n	800341e <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2224      	movs	r2, #36	@ 0x24
 80033c2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0201 	bic.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2200      	movs	r2, #0
 80033e2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7fd fb2f 	bl	8000a50 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	@ 0x28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	4613      	mov	r3, r2
 8003434:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800343a:	2b20      	cmp	r3, #32
 800343c:	d165      	bne.n	800350a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_UART_Transmit_DMA+0x22>
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e05e      	b.n	800350c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	88fa      	ldrh	r2, [r7, #6]
 8003458:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2221      	movs	r2, #33	@ 0x21
 8003470:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003476:	2b00      	cmp	r3, #0
 8003478:	d027      	beq.n	80034ca <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347e:	4a25      	ldr	r2, [pc, #148]	@ (8003514 <HAL_UART_Transmit_DMA+0xec>)
 8003480:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003486:	4a24      	ldr	r2, [pc, #144]	@ (8003518 <HAL_UART_Transmit_DMA+0xf0>)
 8003488:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348e:	4a23      	ldr	r2, [pc, #140]	@ (800351c <HAL_UART_Transmit_DMA+0xf4>)
 8003490:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003496:	2200      	movs	r2, #0
 8003498:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a2:	4619      	mov	r1, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3328      	adds	r3, #40	@ 0x28
 80034aa:	461a      	mov	r2, r3
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	f7fd fe2b 	bl	8001108 <HAL_DMA_Start_IT>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2210      	movs	r2, #16
 80034bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e020      	b.n	800350c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2240      	movs	r2, #64	@ 0x40
 80034d0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3308      	adds	r3, #8
 80034d8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	613b      	str	r3, [r7, #16]
   return(result);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3308      	adds	r3, #8
 80034f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f2:	623a      	str	r2, [r7, #32]
 80034f4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	69f9      	ldr	r1, [r7, #28]
 80034f8:	6a3a      	ldr	r2, [r7, #32]
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e5      	bne.n	80034d2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	e000      	b.n	800350c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800350a:	2302      	movs	r3, #2
  }
}
 800350c:	4618      	mov	r0, r3
 800350e:	3728      	adds	r7, #40	@ 0x28
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	08004535 	.word	0x08004535
 8003518:	080045c9 	.word	0x080045c9
 800351c:	08004749 	.word	0x08004749

08003520 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	@ 0x28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	4613      	mov	r3, r2
 800352c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003534:	2b20      	cmp	r3, #32
 8003536:	d132      	bne.n	800359e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_UART_Receive_DMA+0x24>
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e02b      	b.n	80035a0 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d018      	beq.n	800358e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	613b      	str	r3, [r7, #16]
   return(result);
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357a:	623b      	str	r3, [r7, #32]
 800357c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	69f9      	ldr	r1, [r7, #28]
 8003580:	6a3a      	ldr	r2, [r7, #32]
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	61bb      	str	r3, [r7, #24]
   return(result);
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e6      	bne.n	800355c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	461a      	mov	r2, r3
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fea3 	bl	80042e0 <UART_Start_Receive_DMA>
 800359a:	4603      	mov	r3, r0
 800359c:	e000      	b.n	80035a0 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800359e:	2302      	movs	r3, #2
  }
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3728      	adds	r7, #40	@ 0x28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b0ba      	sub	sp, #232	@ 0xe8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80035d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80035d6:	4013      	ands	r3, r2
 80035d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80035dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d115      	bne.n	8003610 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00f      	beq.n	8003610 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d009      	beq.n	8003610 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 82ab 	beq.w	8003b5c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
      }
      return;
 800360e:	e2a5      	b.n	8003b5c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8117 	beq.w	8003848 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800361a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003626:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800362a:	4b85      	ldr	r3, [pc, #532]	@ (8003840 <HAL_UART_IRQHandler+0x298>)
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 810a 	beq.w	8003848 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d011      	beq.n	8003664 <HAL_UART_IRQHandler+0xbc>
 8003640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00b      	beq.n	8003664 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2201      	movs	r2, #1
 8003652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800365a:	f043 0201 	orr.w	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d011      	beq.n	8003694 <HAL_UART_IRQHandler+0xec>
 8003670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2202      	movs	r2, #2
 8003682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800368a:	f043 0204 	orr.w	r2, r3, #4
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d011      	beq.n	80036c4 <HAL_UART_IRQHandler+0x11c>
 80036a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2204      	movs	r2, #4
 80036b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ba:	f043 0202 	orr.w	r2, r3, #2
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d017      	beq.n	8003700 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2208      	movs	r2, #8
 80036ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036f6:	f043 0208 	orr.w	r2, r3, #8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003708:	2b00      	cmp	r3, #0
 800370a:	d012      	beq.n	8003732 <HAL_UART_IRQHandler+0x18a>
 800370c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003710:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00c      	beq.n	8003732 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003720:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8211 	beq.w	8003b60 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800373e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00d      	beq.n	8003766 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800374a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800376c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377a:	2b40      	cmp	r3, #64	@ 0x40
 800377c:	d005      	beq.n	800378a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800377e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003782:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003786:	2b00      	cmp	r3, #0
 8003788:	d04f      	beq.n	800382a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fe6e 	bl	800446c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379a:	2b40      	cmp	r3, #64	@ 0x40
 800379c:	d141      	bne.n	8003822 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3308      	adds	r3, #8
 80037a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3308      	adds	r3, #8
 80037c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1d9      	bne.n	800379e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d013      	beq.n	800381a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f6:	4a13      	ldr	r2, [pc, #76]	@ (8003844 <HAL_UART_IRQHandler+0x29c>)
 80037f8:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd fd1f 	bl	8001242 <HAL_DMA_Abort_IT>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d017      	beq.n	800383a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800380e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003814:	4610      	mov	r0, r2
 8003816:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003818:	e00f      	b.n	800383a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f9be 	bl	8003b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003820:	e00b      	b.n	800383a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f9ba 	bl	8003b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003828:	e007      	b.n	800383a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f9b6 	bl	8003b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003838:	e192      	b.n	8003b60 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383a:	bf00      	nop
    return;
 800383c:	e190      	b.n	8003b60 <HAL_UART_IRQHandler+0x5b8>
 800383e:	bf00      	nop
 8003840:	04000120 	.word	0x04000120
 8003844:	080047c7 	.word	0x080047c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384c:	2b01      	cmp	r3, #1
 800384e:	f040 814b 	bne.w	8003ae8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003856:	f003 0310 	and.w	r3, r3, #16
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 8144 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 813d 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2210      	movs	r2, #16
 8003874:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003880:	2b40      	cmp	r3, #64	@ 0x40
 8003882:	f040 80b5 	bne.w	80039f0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003892:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8164 	beq.w	8003b64 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80038a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038a6:	429a      	cmp	r2, r3
 80038a8:	f080 815c 	bcs.w	8003b64 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2b20      	cmp	r3, #32
 80038be:	f000 8086 	beq.w	80039ce <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038f0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038fc:	e841 2300 	strex	r3, r2, [r1]
 8003900:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003904:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1da      	bne.n	80038c2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3308      	adds	r3, #8
 8003912:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003916:	e853 3f00 	ldrex	r3, [r3]
 800391a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800391c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3308      	adds	r3, #8
 800392c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003930:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003934:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003936:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003938:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003942:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e1      	bne.n	800390c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3308      	adds	r3, #8
 800394e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003952:	e853 3f00 	ldrex	r3, [r3]
 8003956:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003958:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800395a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800395e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3308      	adds	r3, #8
 8003968:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800396c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800396e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003970:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003972:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003974:	e841 2300 	strex	r3, r2, [r1]
 8003978:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800397a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e3      	bne.n	8003948 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800399c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800399e:	f023 0310 	bic.w	r3, r3, #16
 80039a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039b2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e4      	bne.n	800398e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fd fbfc 	bl	80011c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	4619      	mov	r1, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f8e1 	bl	8003bb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039ee:	e0b9      	b.n	8003b64 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80ab 	beq.w	8003b68 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003a12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80a6 	beq.w	8003b68 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a40:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e4      	bne.n	8003a1c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3308      	adds	r3, #8
 8003a58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	623b      	str	r3, [r7, #32]
   return(result);
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3308      	adds	r3, #8
 8003a72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a76:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e3      	bne.n	8003a52 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0310 	bic.w	r3, r3, #16
 8003ab2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	69b9      	ldr	r1, [r7, #24]
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e4      	bne.n	8003a9e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ada:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f865 	bl	8003bb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ae6:	e03f      	b.n	8003b68 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00e      	beq.n	8003b12 <HAL_UART_IRQHandler+0x56a>
 8003af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003af8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fe9b 	bl	8004846 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b10:	e02d      	b.n	8003b6e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00e      	beq.n	8003b3c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d008      	beq.n	8003b3c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d01c      	beq.n	8003b6c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	4798      	blx	r3
    }
    return;
 8003b3a:	e017      	b.n	8003b6c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d012      	beq.n	8003b6e <HAL_UART_IRQHandler+0x5c6>
 8003b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00c      	beq.n	8003b6e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fe4c 	bl	80047f2 <UART_EndTransmit_IT>
    return;
 8003b5a:	e008      	b.n	8003b6e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003b5c:	bf00      	nop
 8003b5e:	e006      	b.n	8003b6e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003b60:	bf00      	nop
 8003b62:	e004      	b.n	8003b6e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003b64:	bf00      	nop
 8003b66:	e002      	b.n	8003b6e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003b68:	bf00      	nop
 8003b6a:	e000      	b.n	8003b6e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003b6c:	bf00      	nop
  }

}
 8003b6e:	37e8      	adds	r7, #232	@ 0xe8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003bf6:	f023 030c 	bic.w	r3, r3, #12
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6812      	ldr	r2, [r2, #0]
 8003bfe:	6979      	ldr	r1, [r7, #20]
 8003c00:	430b      	orrs	r3, r1
 8003c02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4aa7      	ldr	r2, [pc, #668]	@ (8003ee0 <UART_SetConfig+0x318>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d120      	bne.n	8003c8a <UART_SetConfig+0xc2>
 8003c48:	4ba6      	ldr	r3, [pc, #664]	@ (8003ee4 <UART_SetConfig+0x31c>)
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d817      	bhi.n	8003c84 <UART_SetConfig+0xbc>
 8003c54:	a201      	add	r2, pc, #4	@ (adr r2, 8003c5c <UART_SetConfig+0x94>)
 8003c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5a:	bf00      	nop
 8003c5c:	08003c6d 	.word	0x08003c6d
 8003c60:	08003c79 	.word	0x08003c79
 8003c64:	08003c7f 	.word	0x08003c7f
 8003c68:	08003c73 	.word	0x08003c73
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	77fb      	strb	r3, [r7, #31]
 8003c70:	e0b5      	b.n	8003dde <UART_SetConfig+0x216>
 8003c72:	2302      	movs	r3, #2
 8003c74:	77fb      	strb	r3, [r7, #31]
 8003c76:	e0b2      	b.n	8003dde <UART_SetConfig+0x216>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	e0af      	b.n	8003dde <UART_SetConfig+0x216>
 8003c7e:	2308      	movs	r3, #8
 8003c80:	77fb      	strb	r3, [r7, #31]
 8003c82:	e0ac      	b.n	8003dde <UART_SetConfig+0x216>
 8003c84:	2310      	movs	r3, #16
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e0a9      	b.n	8003dde <UART_SetConfig+0x216>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a96      	ldr	r2, [pc, #600]	@ (8003ee8 <UART_SetConfig+0x320>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d124      	bne.n	8003cde <UART_SetConfig+0x116>
 8003c94:	4b93      	ldr	r3, [pc, #588]	@ (8003ee4 <UART_SetConfig+0x31c>)
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ca0:	d011      	beq.n	8003cc6 <UART_SetConfig+0xfe>
 8003ca2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ca6:	d817      	bhi.n	8003cd8 <UART_SetConfig+0x110>
 8003ca8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cac:	d011      	beq.n	8003cd2 <UART_SetConfig+0x10a>
 8003cae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cb2:	d811      	bhi.n	8003cd8 <UART_SetConfig+0x110>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <UART_SetConfig+0xf8>
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cbc:	d006      	beq.n	8003ccc <UART_SetConfig+0x104>
 8003cbe:	e00b      	b.n	8003cd8 <UART_SetConfig+0x110>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e08b      	b.n	8003dde <UART_SetConfig+0x216>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e088      	b.n	8003dde <UART_SetConfig+0x216>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e085      	b.n	8003dde <UART_SetConfig+0x216>
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e082      	b.n	8003dde <UART_SetConfig+0x216>
 8003cd8:	2310      	movs	r3, #16
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e07f      	b.n	8003dde <UART_SetConfig+0x216>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a82      	ldr	r2, [pc, #520]	@ (8003eec <UART_SetConfig+0x324>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d124      	bne.n	8003d32 <UART_SetConfig+0x16a>
 8003ce8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ee4 <UART_SetConfig+0x31c>)
 8003cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cec:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003cf0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003cf4:	d011      	beq.n	8003d1a <UART_SetConfig+0x152>
 8003cf6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003cfa:	d817      	bhi.n	8003d2c <UART_SetConfig+0x164>
 8003cfc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d00:	d011      	beq.n	8003d26 <UART_SetConfig+0x15e>
 8003d02:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d06:	d811      	bhi.n	8003d2c <UART_SetConfig+0x164>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <UART_SetConfig+0x14c>
 8003d0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d10:	d006      	beq.n	8003d20 <UART_SetConfig+0x158>
 8003d12:	e00b      	b.n	8003d2c <UART_SetConfig+0x164>
 8003d14:	2300      	movs	r3, #0
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e061      	b.n	8003dde <UART_SetConfig+0x216>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	77fb      	strb	r3, [r7, #31]
 8003d1e:	e05e      	b.n	8003dde <UART_SetConfig+0x216>
 8003d20:	2304      	movs	r3, #4
 8003d22:	77fb      	strb	r3, [r7, #31]
 8003d24:	e05b      	b.n	8003dde <UART_SetConfig+0x216>
 8003d26:	2308      	movs	r3, #8
 8003d28:	77fb      	strb	r3, [r7, #31]
 8003d2a:	e058      	b.n	8003dde <UART_SetConfig+0x216>
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e055      	b.n	8003dde <UART_SetConfig+0x216>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a6e      	ldr	r2, [pc, #440]	@ (8003ef0 <UART_SetConfig+0x328>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d124      	bne.n	8003d86 <UART_SetConfig+0x1be>
 8003d3c:	4b69      	ldr	r3, [pc, #420]	@ (8003ee4 <UART_SetConfig+0x31c>)
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003d44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d48:	d011      	beq.n	8003d6e <UART_SetConfig+0x1a6>
 8003d4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d4e:	d817      	bhi.n	8003d80 <UART_SetConfig+0x1b8>
 8003d50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d54:	d011      	beq.n	8003d7a <UART_SetConfig+0x1b2>
 8003d56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d5a:	d811      	bhi.n	8003d80 <UART_SetConfig+0x1b8>
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <UART_SetConfig+0x1a0>
 8003d60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d64:	d006      	beq.n	8003d74 <UART_SetConfig+0x1ac>
 8003d66:	e00b      	b.n	8003d80 <UART_SetConfig+0x1b8>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e037      	b.n	8003dde <UART_SetConfig+0x216>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	77fb      	strb	r3, [r7, #31]
 8003d72:	e034      	b.n	8003dde <UART_SetConfig+0x216>
 8003d74:	2304      	movs	r3, #4
 8003d76:	77fb      	strb	r3, [r7, #31]
 8003d78:	e031      	b.n	8003dde <UART_SetConfig+0x216>
 8003d7a:	2308      	movs	r3, #8
 8003d7c:	77fb      	strb	r3, [r7, #31]
 8003d7e:	e02e      	b.n	8003dde <UART_SetConfig+0x216>
 8003d80:	2310      	movs	r3, #16
 8003d82:	77fb      	strb	r3, [r7, #31]
 8003d84:	e02b      	b.n	8003dde <UART_SetConfig+0x216>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ef4 <UART_SetConfig+0x32c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d124      	bne.n	8003dda <UART_SetConfig+0x212>
 8003d90:	4b54      	ldr	r3, [pc, #336]	@ (8003ee4 <UART_SetConfig+0x31c>)
 8003d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d94:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003d98:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d9c:	d011      	beq.n	8003dc2 <UART_SetConfig+0x1fa>
 8003d9e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003da2:	d817      	bhi.n	8003dd4 <UART_SetConfig+0x20c>
 8003da4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003da8:	d011      	beq.n	8003dce <UART_SetConfig+0x206>
 8003daa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dae:	d811      	bhi.n	8003dd4 <UART_SetConfig+0x20c>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <UART_SetConfig+0x1f4>
 8003db4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003db8:	d006      	beq.n	8003dc8 <UART_SetConfig+0x200>
 8003dba:	e00b      	b.n	8003dd4 <UART_SetConfig+0x20c>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e00d      	b.n	8003dde <UART_SetConfig+0x216>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e00a      	b.n	8003dde <UART_SetConfig+0x216>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e007      	b.n	8003dde <UART_SetConfig+0x216>
 8003dce:	2308      	movs	r3, #8
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e004      	b.n	8003dde <UART_SetConfig+0x216>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	e001      	b.n	8003dde <UART_SetConfig+0x216>
 8003dda:	2310      	movs	r3, #16
 8003ddc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003de6:	d15b      	bne.n	8003ea0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003de8:	7ffb      	ldrb	r3, [r7, #31]
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d827      	bhi.n	8003e3e <UART_SetConfig+0x276>
 8003dee:	a201      	add	r2, pc, #4	@ (adr r2, 8003df4 <UART_SetConfig+0x22c>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e19 	.word	0x08003e19
 8003df8:	08003e21 	.word	0x08003e21
 8003dfc:	08003e29 	.word	0x08003e29
 8003e00:	08003e3f 	.word	0x08003e3f
 8003e04:	08003e2f 	.word	0x08003e2f
 8003e08:	08003e3f 	.word	0x08003e3f
 8003e0c:	08003e3f 	.word	0x08003e3f
 8003e10:	08003e3f 	.word	0x08003e3f
 8003e14:	08003e37 	.word	0x08003e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e18:	f7ff f888 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8003e1c:	61b8      	str	r0, [r7, #24]
        break;
 8003e1e:	e013      	b.n	8003e48 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e20:	f7ff f8a6 	bl	8002f70 <HAL_RCC_GetPCLK2Freq>
 8003e24:	61b8      	str	r0, [r7, #24]
        break;
 8003e26:	e00f      	b.n	8003e48 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e28:	4b33      	ldr	r3, [pc, #204]	@ (8003ef8 <UART_SetConfig+0x330>)
 8003e2a:	61bb      	str	r3, [r7, #24]
        break;
 8003e2c:	e00c      	b.n	8003e48 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2e:	f7ff f81d 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8003e32:	61b8      	str	r0, [r7, #24]
        break;
 8003e34:	e008      	b.n	8003e48 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e3a:	61bb      	str	r3, [r7, #24]
        break;
 8003e3c:	e004      	b.n	8003e48 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	77bb      	strb	r3, [r7, #30]
        break;
 8003e46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 8082 	beq.w	8003f54 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	005a      	lsls	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	441a      	add	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b0f      	cmp	r3, #15
 8003e6a:	d916      	bls.n	8003e9a <UART_SetConfig+0x2d2>
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e72:	d212      	bcs.n	8003e9a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f023 030f 	bic.w	r3, r3, #15
 8003e7c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	085b      	lsrs	r3, r3, #1
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	89fb      	ldrh	r3, [r7, #14]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	89fa      	ldrh	r2, [r7, #14]
 8003e96:	60da      	str	r2, [r3, #12]
 8003e98:	e05c      	b.n	8003f54 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	77bb      	strb	r3, [r7, #30]
 8003e9e:	e059      	b.n	8003f54 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ea0:	7ffb      	ldrb	r3, [r7, #31]
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d835      	bhi.n	8003f12 <UART_SetConfig+0x34a>
 8003ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8003eac <UART_SetConfig+0x2e4>)
 8003ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eac:	08003ed1 	.word	0x08003ed1
 8003eb0:	08003ed9 	.word	0x08003ed9
 8003eb4:	08003efd 	.word	0x08003efd
 8003eb8:	08003f13 	.word	0x08003f13
 8003ebc:	08003f03 	.word	0x08003f03
 8003ec0:	08003f13 	.word	0x08003f13
 8003ec4:	08003f13 	.word	0x08003f13
 8003ec8:	08003f13 	.word	0x08003f13
 8003ecc:	08003f0b 	.word	0x08003f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ed0:	f7ff f82c 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8003ed4:	61b8      	str	r0, [r7, #24]
        break;
 8003ed6:	e021      	b.n	8003f1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed8:	f7ff f84a 	bl	8002f70 <HAL_RCC_GetPCLK2Freq>
 8003edc:	61b8      	str	r0, [r7, #24]
        break;
 8003ede:	e01d      	b.n	8003f1c <UART_SetConfig+0x354>
 8003ee0:	40013800 	.word	0x40013800
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40004400 	.word	0x40004400
 8003eec:	40004800 	.word	0x40004800
 8003ef0:	40004c00 	.word	0x40004c00
 8003ef4:	40005000 	.word	0x40005000
 8003ef8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003efc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f6c <UART_SetConfig+0x3a4>)
 8003efe:	61bb      	str	r3, [r7, #24]
        break;
 8003f00:	e00c      	b.n	8003f1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f02:	f7fe ffb3 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8003f06:	61b8      	str	r0, [r7, #24]
        break;
 8003f08:	e008      	b.n	8003f1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f0e:	61bb      	str	r3, [r7, #24]
        break;
 8003f10:	e004      	b.n	8003f1c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	77bb      	strb	r3, [r7, #30]
        break;
 8003f1a:	bf00      	nop
    }

    if (pclk != 0U)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d018      	beq.n	8003f54 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	085a      	lsrs	r2, r3, #1
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	441a      	add	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b0f      	cmp	r3, #15
 8003f3a:	d909      	bls.n	8003f50 <UART_SetConfig+0x388>
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f42:	d205      	bcs.n	8003f50 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	e001      	b.n	8003f54 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f60:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	007a1200 	.word	0x007a1200

08003f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01a      	beq.n	8004086 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800406e:	d10a      	bne.n	8004086 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]
  }
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b098      	sub	sp, #96	@ 0x60
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040c4:	f7fc fe1e 	bl	8000d04 <HAL_GetTick>
 80040c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d12e      	bne.n	8004136 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e0:	2200      	movs	r2, #0
 80040e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f88c 	bl	8004204 <UART_WaitOnFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d021      	beq.n	8004136 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fa:	e853 3f00 	ldrex	r3, [r3]
 80040fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004106:	653b      	str	r3, [r7, #80]	@ 0x50
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004110:	647b      	str	r3, [r7, #68]	@ 0x44
 8004112:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800411e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e6      	bne.n	80040f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e062      	b.n	80041fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b04      	cmp	r3, #4
 8004142:	d149      	bne.n	80041d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004144:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800414c:	2200      	movs	r2, #0
 800414e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f856 	bl	8004204 <UART_WaitOnFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d03c      	beq.n	80041d8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	623b      	str	r3, [r7, #32]
   return(result);
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800417c:	633b      	str	r3, [r7, #48]	@ 0x30
 800417e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004182:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800418a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e6      	bne.n	800415e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3308      	adds	r3, #8
 8004196:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	60fb      	str	r3, [r7, #12]
   return(result);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3308      	adds	r3, #8
 80041ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041b0:	61fa      	str	r2, [r7, #28]
 80041b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	69b9      	ldr	r1, [r7, #24]
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	617b      	str	r3, [r7, #20]
   return(result);
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e5      	bne.n	8004190 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e011      	b.n	80041fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3758      	adds	r7, #88	@ 0x58
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004214:	e04f      	b.n	80042b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421c:	d04b      	beq.n	80042b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421e:	f7fc fd71 	bl	8000d04 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	429a      	cmp	r2, r3
 800422c:	d302      	bcc.n	8004234 <UART_WaitOnFlagUntilTimeout+0x30>
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e04e      	b.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d037      	beq.n	80042b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b80      	cmp	r3, #128	@ 0x80
 800424a:	d034      	beq.n	80042b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b40      	cmp	r3, #64	@ 0x40
 8004250:	d031      	beq.n	80042b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b08      	cmp	r3, #8
 800425e:	d110      	bne.n	8004282 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2208      	movs	r2, #8
 8004266:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f8ff 	bl	800446c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2208      	movs	r2, #8
 8004272:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e029      	b.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800428c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004290:	d111      	bne.n	80042b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800429a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 f8e5 	bl	800446c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e00f      	b.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4013      	ands	r3, r2
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	bf0c      	ite	eq
 80042c6:	2301      	moveq	r3, #1
 80042c8:	2300      	movne	r3, #0
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	461a      	mov	r2, r3
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d0a0      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b096      	sub	sp, #88	@ 0x58
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2222      	movs	r2, #34	@ 0x22
 8004308:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004310:	2b00      	cmp	r3, #0
 8004312:	d028      	beq.n	8004366 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004318:	4a3e      	ldr	r2, [pc, #248]	@ (8004414 <UART_Start_Receive_DMA+0x134>)
 800431a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004320:	4a3d      	ldr	r2, [pc, #244]	@ (8004418 <UART_Start_Receive_DMA+0x138>)
 8004322:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004328:	4a3c      	ldr	r2, [pc, #240]	@ (800441c <UART_Start_Receive_DMA+0x13c>)
 800432a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004330:	2200      	movs	r2, #0
 8004332:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3324      	adds	r3, #36	@ 0x24
 800433e:	4619      	mov	r1, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004344:	461a      	mov	r2, r3
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	f7fc fede 	bl	8001108 <HAL_DMA_Start_IT>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2210      	movs	r2, #16
 8004356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e051      	b.n	800440a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d018      	beq.n	80043a0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800437c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004382:	657b      	str	r3, [r7, #84]	@ 0x54
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800438c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800438e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004392:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800439a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e6      	bne.n	800436e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3308      	adds	r3, #8
 80043a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3308      	adds	r3, #8
 80043be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80043c0:	637a      	str	r2, [r7, #52]	@ 0x34
 80043c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80043ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e5      	bne.n	80043a0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3308      	adds	r3, #8
 80043da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	613b      	str	r3, [r7, #16]
   return(result);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3308      	adds	r3, #8
 80043f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043f4:	623a      	str	r2, [r7, #32]
 80043f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	69f9      	ldr	r1, [r7, #28]
 80043fa:	6a3a      	ldr	r2, [r7, #32]
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	61bb      	str	r3, [r7, #24]
   return(result);
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e5      	bne.n	80043d4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3758      	adds	r7, #88	@ 0x58
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	080045e5 	.word	0x080045e5
 8004418:	0800470b 	.word	0x0800470b
 800441c:	08004749 	.word	0x08004749

08004420 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004420:	b480      	push	{r7}
 8004422:	b089      	sub	sp, #36	@ 0x24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	60bb      	str	r3, [r7, #8]
   return(result);
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	61bb      	str	r3, [r7, #24]
 8004448:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	6979      	ldr	r1, [r7, #20]
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	613b      	str	r3, [r7, #16]
   return(result);
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e6      	bne.n	8004428 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004460:	bf00      	nop
 8004462:	3724      	adds	r7, #36	@ 0x24
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800446c:	b480      	push	{r7}
 800446e:	b095      	sub	sp, #84	@ 0x54
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004492:	643b      	str	r3, [r7, #64]	@ 0x40
 8004494:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004498:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e6      	bne.n	8004474 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3308      	adds	r3, #8
 80044ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3308      	adds	r3, #8
 80044c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d118      	bne.n	8004514 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f023 0310 	bic.w	r3, r3, #16
 80044f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	6979      	ldr	r1, [r7, #20]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	613b      	str	r3, [r7, #16]
   return(result);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e6      	bne.n	80044e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004528:	bf00      	nop
 800452a:	3754      	adds	r7, #84	@ 0x54
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b090      	sub	sp, #64	@ 0x40
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004540:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2b20      	cmp	r3, #32
 8004548:	d037      	beq.n	80045ba <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800454a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800454c:	2200      	movs	r2, #0
 800454e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3308      	adds	r3, #8
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	623b      	str	r3, [r7, #32]
   return(result);
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004568:	63bb      	str	r3, [r7, #56]	@ 0x38
 800456a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3308      	adds	r3, #8
 8004570:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004572:	633a      	str	r2, [r7, #48]	@ 0x30
 8004574:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e5      	bne.n	8004552 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	60fb      	str	r3, [r7, #12]
   return(result);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800459a:	637b      	str	r3, [r7, #52]	@ 0x34
 800459c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	69b9      	ldr	r1, [r7, #24]
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	617b      	str	r3, [r7, #20]
   return(result);
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e6      	bne.n	8004586 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045b8:	e002      	b.n	80045c0 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 80045ba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80045bc:	f7fc f92a 	bl	8000814 <HAL_UART_TxCpltCallback>
}
 80045c0:	bf00      	nop
 80045c2:	3740      	adds	r7, #64	@ 0x40
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7ff facc 	bl	8003b74 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045dc:	bf00      	nop
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b09c      	sub	sp, #112	@ 0x70
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d071      	beq.n	80046de <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80045fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045fc:	2200      	movs	r2, #0
 80045fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004610:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004612:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004616:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004620:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004622:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004626:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800462e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e6      	bne.n	8004602 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004634:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3308      	adds	r3, #8
 800463a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	667b      	str	r3, [r7, #100]	@ 0x64
 800464c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3308      	adds	r3, #8
 8004652:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004654:	647a      	str	r2, [r7, #68]	@ 0x44
 8004656:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800465a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e5      	bne.n	8004634 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004668:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3308      	adds	r3, #8
 800466e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	623b      	str	r3, [r7, #32]
   return(result);
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800467e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3308      	adds	r3, #8
 8004686:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004688:	633a      	str	r2, [r7, #48]	@ 0x30
 800468a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800468e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e5      	bne.n	8004668 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800469c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800469e:	2220      	movs	r2, #32
 80046a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d118      	bne.n	80046de <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f023 0310 	bic.w	r3, r3, #16
 80046c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	69b9      	ldr	r1, [r7, #24]
 80046d0:	69fa      	ldr	r2, [r7, #28]
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	617b      	str	r3, [r7, #20]
   return(result);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e6      	bne.n	80046ac <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046e0:	2200      	movs	r2, #0
 80046e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d107      	bne.n	80046fc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80046f2:	4619      	mov	r1, r3
 80046f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80046f6:	f7ff fa5b 	bl	8003bb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046fa:	e002      	b.n	8004702 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80046fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80046fe:	f7fc f853 	bl	80007a8 <HAL_UART_RxCpltCallback>
}
 8004702:	bf00      	nop
 8004704:	3770      	adds	r7, #112	@ 0x70
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b084      	sub	sp, #16
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004722:	2b01      	cmp	r3, #1
 8004724:	d109      	bne.n	800473a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	b29b      	uxth	r3, r3
 8004730:	4619      	mov	r1, r3
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7ff fa3c 	bl	8003bb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004738:	e002      	b.n	8004740 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f7ff fa24 	bl	8003b88 <HAL_UART_RxHalfCpltCallback>
}
 8004740:	bf00      	nop
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004754:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800475a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004762:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800476e:	2b80      	cmp	r3, #128	@ 0x80
 8004770:	d109      	bne.n	8004786 <UART_DMAError+0x3e>
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b21      	cmp	r3, #33	@ 0x21
 8004776:	d106      	bne.n	8004786 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2200      	movs	r2, #0
 800477c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004780:	6978      	ldr	r0, [r7, #20]
 8004782:	f7ff fe4d 	bl	8004420 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004790:	2b40      	cmp	r3, #64	@ 0x40
 8004792:	d109      	bne.n	80047a8 <UART_DMAError+0x60>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b22      	cmp	r3, #34	@ 0x22
 8004798:	d106      	bne.n	80047a8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2200      	movs	r2, #0
 800479e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80047a2:	6978      	ldr	r0, [r7, #20]
 80047a4:	f7ff fe62 	bl	800446c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047ae:	f043 0210 	orr.w	r2, r3, #16
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047b8:	6978      	ldr	r0, [r7, #20]
 80047ba:	f7ff f9ef 	bl	8003b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047be:	bf00      	nop
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7ff f9d9 	bl	8003b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b088      	sub	sp, #32
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	60bb      	str	r3, [r7, #8]
   return(result);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481c:	6979      	ldr	r1, [r7, #20]
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	e841 2300 	strex	r3, r2, [r1]
 8004824:	613b      	str	r3, [r7, #16]
   return(result);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e6      	bne.n	80047fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7fb ffeb 	bl	8000814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800483e:	bf00      	nop
 8004840:	3720      	adds	r7, #32
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004862:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004866:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	b29b      	uxth	r3, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	b29b      	uxth	r3, r3
 8004878:	4013      	ands	r3, r2
 800487a:	b29a      	uxth	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	1d3b      	adds	r3, r7, #4
 800489a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <arm_fft>:
 80048cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d0:	ed2d 8b02 	vpush	{d8}
 80048d4:	2a01      	cmp	r2, #1
 80048d6:	b087      	sub	sp, #28
 80048d8:	460d      	mov	r5, r1
 80048da:	af00      	add	r7, sp, #0
 80048dc:	d079      	beq.n	80049d2 <arm_fft+0x106>
 80048de:	4693      	mov	fp, r2
 80048e0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80048e4:	ea4f 0a62 	mov.w	sl, r2, asr #1
 80048e8:	dd7c      	ble.n	80049e4 <arm_fft+0x118>
 80048ea:	f8df e128 	ldr.w	lr, [pc, #296]	@ 8004a14 <arm_fft+0x148>
 80048ee:	4a48      	ldr	r2, [pc, #288]	@ (8004a10 <arm_fft+0x144>)
 80048f0:	4603      	mov	r3, r0
 80048f2:	2400      	movs	r4, #0
 80048f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80048f8:	eb0e 06c4 	add.w	r6, lr, r4, lsl #3
 80048fc:	e886 0003 	stmia.w	r6, {r0, r1}
 8004900:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004904:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
 8004908:	3401      	adds	r4, #1
 800490a:	4554      	cmp	r4, sl
 800490c:	e886 0003 	stmia.w	r6, {r0, r1}
 8004910:	f103 0310 	add.w	r3, r3, #16
 8004914:	dbee      	blt.n	80048f4 <arm_fft+0x28>
 8004916:	466b      	mov	r3, sp
 8004918:	ee08 3a10 	vmov	s16, r3
 800491c:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8004920:	469d      	mov	sp, r3
 8004922:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8004926:	46e8      	mov	r8, sp
 8004928:	469d      	mov	sp, r3
 800492a:	483a      	ldr	r0, [pc, #232]	@ (8004a14 <arm_fft+0x148>)
 800492c:	4641      	mov	r1, r8
 800492e:	4652      	mov	r2, sl
 8004930:	466e      	mov	r6, sp
 8004932:	f7ff ffcb 	bl	80048cc <arm_fft>
 8004936:	4836      	ldr	r0, [pc, #216]	@ (8004a10 <arm_fft+0x144>)
 8004938:	4652      	mov	r2, sl
 800493a:	4631      	mov	r1, r6
 800493c:	f7ff ffc6 	bl	80048cc <arm_fft>
 8004940:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8004944:	607b      	str	r3, [r7, #4]
 8004946:	f04f 0900 	mov.w	r9, #0
 800494a:	4648      	mov	r0, r9
 800494c:	4659      	mov	r1, fp
 800494e:	f000 f8e5 	bl	8004b1c <esponenziale_negj>
 8004952:	eb06 03c9 	add.w	r3, r6, r9, lsl #3
 8004956:	ed93 1a00 	vldr	s2, [r3]
 800495a:	edd3 1a01 	vldr	s3, [r3, #4]
 800495e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004962:	edc7 0a03 	vstr	s1, [r7, #12]
 8004966:	f000 f8cb 	bl	8004b00 <prodotto_c>
 800496a:	ea4f 04c9 	mov.w	r4, r9, lsl #3
 800496e:	4444      	add	r4, r8
 8004970:	eeb0 1a40 	vmov.f32	s2, s0
 8004974:	eef0 1a60 	vmov.f32	s3, s1
 8004978:	ed94 0a00 	vldr	s0, [r4]
 800497c:	edd4 0a01 	vldr	s1, [r4, #4]
 8004980:	edc7 1a05 	vstr	s3, [r7, #20]
 8004984:	ed87 1a04 	vstr	s2, [r7, #16]
 8004988:	f000 f8aa 	bl	8004ae0 <somma_c>
 800498c:	ed97 1a04 	vldr	s2, [r7, #16]
 8004990:	ed85 0a00 	vstr	s0, [r5]
 8004994:	edc5 0a01 	vstr	s1, [r5, #4]
 8004998:	ed94 0a00 	vldr	s0, [r4]
 800499c:	edd4 0a01 	vldr	s1, [r4, #4]
 80049a0:	edd7 1a05 	vldr	s3, [r7, #20]
 80049a4:	f000 f8a4 	bl	8004af0 <sottrazione_c>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f109 0901 	add.w	r9, r9, #1
 80049ae:	442b      	add	r3, r5
 80049b0:	45d1      	cmp	r9, sl
 80049b2:	ed83 0a00 	vstr	s0, [r3]
 80049b6:	f105 0508 	add.w	r5, r5, #8
 80049ba:	edc3 0a01 	vstr	s1, [r3, #4]
 80049be:	dbc4      	blt.n	800494a <arm_fft+0x7e>
 80049c0:	ee18 3a10 	vmov	r3, s16
 80049c4:	371c      	adds	r7, #28
 80049c6:	469d      	mov	sp, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	ecbd 8b02 	vpop	{d8}
 80049ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d2:	c803      	ldmia	r0, {r0, r1}
 80049d4:	371c      	adds	r7, #28
 80049d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80049da:	46bd      	mov	sp, r7
 80049dc:	ecbd 8b02 	vpop	{d8}
 80049e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e4:	466b      	mov	r3, sp
 80049e6:	ee08 3a10 	vmov	s16, r3
 80049ea:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 80049ee:	469d      	mov	sp, r3
 80049f0:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 80049f4:	4669      	mov	r1, sp
 80049f6:	469d      	mov	sp, r3
 80049f8:	4652      	mov	r2, sl
 80049fa:	4806      	ldr	r0, [pc, #24]	@ (8004a14 <arm_fft+0x148>)
 80049fc:	466c      	mov	r4, sp
 80049fe:	f7ff ff65 	bl	80048cc <arm_fft>
 8004a02:	4803      	ldr	r0, [pc, #12]	@ (8004a10 <arm_fft+0x144>)
 8004a04:	4652      	mov	r2, sl
 8004a06:	4621      	mov	r1, r4
 8004a08:	f7ff ff60 	bl	80048cc <arm_fft>
 8004a0c:	e7d8      	b.n	80049c0 <arm_fft+0xf4>
 8004a0e:	bf00      	nop
 8004a10:	200038fc 	.word	0x200038fc
 8004a14:	200058fc 	.word	0x200058fc

08004a18 <fft_to_spectrogram>:
 8004a18:	2a00      	cmp	r2, #0
 8004a1a:	dd50      	ble.n	8004abe <fft_to_spectrogram+0xa6>
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	ed2d 8b04 	vpush	{d8-d9}
 8004a22:	eddf 8a2d 	vldr	s17, [pc, #180]	@ 8004ad8 <fft_to_spectrogram+0xc0>
 8004a26:	b084      	sub	sp, #16
 8004a28:	eeb0 8a40 	vmov.f32	s16, s0
 8004a2c:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8004a30:	460c      	mov	r4, r1
 8004a32:	460d      	mov	r5, r1
 8004a34:	edd0 7a01 	vldr	s15, [r0, #4]
 8004a38:	ed90 7a00 	vldr	s14, [r0]
 8004a3c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a40:	3008      	adds	r0, #8
 8004a42:	eee7 7a07 	vfma.f32	s15, s14, s14
 8004a46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4e:	eeb1 9ae7 	vsqrt.f32	s18, s15
 8004a52:	d435      	bmi.n	8004ac0 <fft_to_spectrogram+0xa8>
 8004a54:	eeb4 9a68 	vcmp.f32	s18, s17
 8004a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5c:	bfc8      	it	gt
 8004a5e:	eef0 8a49 	vmovgt.f32	s17, s18
 8004a62:	42b0      	cmp	r0, r6
 8004a64:	eca5 9a01 	vstmia	r5!, {s18}
 8004a68:	d1e4      	bne.n	8004a34 <fft_to_spectrogram+0x1c>
 8004a6a:	ed9f 9a1c 	vldr	s18, [pc, #112]	@ 8004adc <fft_to_spectrogram+0xc4>
 8004a6e:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8004a72:	eef3 9a04 	vmov.f32	s19, #52	@ 0x41a00000  20.0
 8004a76:	ed94 0a00 	vldr	s0, [r4]
 8004a7a:	eeb4 0a49 	vcmp.f32	s0, s18
 8004a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a82:	bf48      	it	mi
 8004a84:	eeb0 0a49 	vmovmi.f32	s0, s18
 8004a88:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8004a8c:	f000 f8a0 	bl	8004bd0 <log10f>
 8004a90:	ee20 0a29 	vmul.f32	s0, s0, s19
 8004a94:	eeb4 0a48 	vcmp.f32	s0, s16
 8004a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9c:	bf48      	it	mi
 8004a9e:	eeb0 0a48 	vmovmi.f32	s0, s16
 8004aa2:	ee70 7a48 	vsub.f32	s15, s0, s16
 8004aa6:	eef1 7a67 	vneg.f32	s15, s15
 8004aaa:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8004aae:	eca4 7a01 	vstmia	r4!, {s14}
 8004ab2:	42a5      	cmp	r5, r4
 8004ab4:	d1df      	bne.n	8004a76 <fft_to_spectrogram+0x5e>
 8004ab6:	b004      	add	sp, #16
 8004ab8:	ecbd 8b04 	vpop	{d8-d9}
 8004abc:	bd70      	pop	{r4, r5, r6, pc}
 8004abe:	4770      	bx	lr
 8004ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004ac8:	9001      	str	r0, [sp, #4]
 8004aca:	f000 f8af 	bl	8004c2c <sqrtf>
 8004ace:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004ad2:	9801      	ldr	r0, [sp, #4]
 8004ad4:	e7be      	b.n	8004a54 <fft_to_spectrogram+0x3c>
 8004ad6:	bf00      	nop
 8004ad8:	00000000 	.word	0x00000000
 8004adc:	2b8cbccc 	.word	0x2b8cbccc

08004ae0 <somma_c>:
 8004ae0:	ee30 0a01 	vadd.f32	s0, s0, s2
 8004ae4:	ee70 0aa1 	vadd.f32	s1, s1, s3
 8004ae8:	b088      	sub	sp, #32
 8004aea:	b008      	add	sp, #32
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop

08004af0 <sottrazione_c>:
 8004af0:	ee30 0a41 	vsub.f32	s0, s0, s2
 8004af4:	ee70 0ae1 	vsub.f32	s1, s1, s3
 8004af8:	b088      	sub	sp, #32
 8004afa:	b008      	add	sp, #32
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop

08004b00 <prodotto_c>:
 8004b00:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8004b04:	ee60 0a81 	vmul.f32	s1, s1, s2
 8004b08:	eee0 7a01 	vfma.f32	s15, s0, s2
 8004b0c:	b088      	sub	sp, #32
 8004b0e:	eee0 0a21 	vfma.f32	s1, s0, s3
 8004b12:	eeb0 0a67 	vmov.f32	s0, s15
 8004b16:	b008      	add	sp, #32
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop

08004b1c <esponenziale_negj>:
 8004b1c:	ee07 0a90 	vmov	s15, r0
 8004b20:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004b68 <esponenziale_negj+0x4c>
 8004b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b28:	b500      	push	{lr}
 8004b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b2e:	ee07 1a10 	vmov	s14, r1
 8004b32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b36:	ed2d 8b02 	vpush	{d8}
 8004b3a:	eec7 8a87 	vdiv.f32	s17, s15, s14
 8004b3e:	b085      	sub	sp, #20
 8004b40:	eeb0 0a68 	vmov.f32	s0, s17
 8004b44:	f000 f890 	bl	8004c68 <cosf>
 8004b48:	eeb0 8a40 	vmov.f32	s16, s0
 8004b4c:	eeb0 0a68 	vmov.f32	s0, s17
 8004b50:	f000 f8ce 	bl	8004cf0 <sinf>
 8004b54:	eef0 0a40 	vmov.f32	s1, s0
 8004b58:	eeb0 0a48 	vmov.f32	s0, s16
 8004b5c:	b005      	add	sp, #20
 8004b5e:	ecbd 8b02 	vpop	{d8}
 8004b62:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b66:	bf00      	nop
 8004b68:	c0c90fdb 	.word	0xc0c90fdb

08004b6c <memset>:
 8004b6c:	4402      	add	r2, r0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d100      	bne.n	8004b76 <memset+0xa>
 8004b74:	4770      	bx	lr
 8004b76:	f803 1b01 	strb.w	r1, [r3], #1
 8004b7a:	e7f9      	b.n	8004b70 <memset+0x4>

08004b7c <__errno>:
 8004b7c:	4b01      	ldr	r3, [pc, #4]	@ (8004b84 <__errno+0x8>)
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000010 	.word	0x20000010

08004b88 <__libc_init_array>:
 8004b88:	b570      	push	{r4, r5, r6, lr}
 8004b8a:	4d0d      	ldr	r5, [pc, #52]	@ (8004bc0 <__libc_init_array+0x38>)
 8004b8c:	4c0d      	ldr	r4, [pc, #52]	@ (8004bc4 <__libc_init_array+0x3c>)
 8004b8e:	1b64      	subs	r4, r4, r5
 8004b90:	10a4      	asrs	r4, r4, #2
 8004b92:	2600      	movs	r6, #0
 8004b94:	42a6      	cmp	r6, r4
 8004b96:	d109      	bne.n	8004bac <__libc_init_array+0x24>
 8004b98:	4d0b      	ldr	r5, [pc, #44]	@ (8004bc8 <__libc_init_array+0x40>)
 8004b9a:	4c0c      	ldr	r4, [pc, #48]	@ (8004bcc <__libc_init_array+0x44>)
 8004b9c:	f000 ff2c 	bl	80059f8 <_init>
 8004ba0:	1b64      	subs	r4, r4, r5
 8004ba2:	10a4      	asrs	r4, r4, #2
 8004ba4:	2600      	movs	r6, #0
 8004ba6:	42a6      	cmp	r6, r4
 8004ba8:	d105      	bne.n	8004bb6 <__libc_init_array+0x2e>
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb0:	4798      	blx	r3
 8004bb2:	3601      	adds	r6, #1
 8004bb4:	e7ee      	b.n	8004b94 <__libc_init_array+0xc>
 8004bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bba:	4798      	blx	r3
 8004bbc:	3601      	adds	r6, #1
 8004bbe:	e7f2      	b.n	8004ba6 <__libc_init_array+0x1e>
 8004bc0:	08005e1c 	.word	0x08005e1c
 8004bc4:	08005e1c 	.word	0x08005e1c
 8004bc8:	08005e1c 	.word	0x08005e1c
 8004bcc:	08005e20 	.word	0x08005e20

08004bd0 <log10f>:
 8004bd0:	b508      	push	{r3, lr}
 8004bd2:	ed2d 8b02 	vpush	{d8}
 8004bd6:	eeb0 8a40 	vmov.f32	s16, s0
 8004bda:	f000 f979 	bl	8004ed0 <__ieee754_log10f>
 8004bde:	eeb4 8a48 	vcmp.f32	s16, s16
 8004be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be6:	d60f      	bvs.n	8004c08 <log10f+0x38>
 8004be8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf0:	d80a      	bhi.n	8004c08 <log10f+0x38>
 8004bf2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfa:	d108      	bne.n	8004c0e <log10f+0x3e>
 8004bfc:	f7ff ffbe 	bl	8004b7c <__errno>
 8004c00:	2322      	movs	r3, #34	@ 0x22
 8004c02:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8004c24 <log10f+0x54>
 8004c06:	6003      	str	r3, [r0, #0]
 8004c08:	ecbd 8b02 	vpop	{d8}
 8004c0c:	bd08      	pop	{r3, pc}
 8004c0e:	f7ff ffb5 	bl	8004b7c <__errno>
 8004c12:	ecbd 8b02 	vpop	{d8}
 8004c16:	2321      	movs	r3, #33	@ 0x21
 8004c18:	6003      	str	r3, [r0, #0]
 8004c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004c1e:	4802      	ldr	r0, [pc, #8]	@ (8004c28 <log10f+0x58>)
 8004c20:	f000 b8ac 	b.w	8004d7c <nanf>
 8004c24:	ff800000 	.word	0xff800000
 8004c28:	08005a48 	.word	0x08005a48

08004c2c <sqrtf>:
 8004c2c:	b508      	push	{r3, lr}
 8004c2e:	ed2d 8b02 	vpush	{d8}
 8004c32:	eeb0 8a40 	vmov.f32	s16, s0
 8004c36:	f000 f8a7 	bl	8004d88 <__ieee754_sqrtf>
 8004c3a:	eeb4 8a48 	vcmp.f32	s16, s16
 8004c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c42:	d60c      	bvs.n	8004c5e <sqrtf+0x32>
 8004c44:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8004c64 <sqrtf+0x38>
 8004c48:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c50:	d505      	bpl.n	8004c5e <sqrtf+0x32>
 8004c52:	f7ff ff93 	bl	8004b7c <__errno>
 8004c56:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004c5a:	2321      	movs	r3, #33	@ 0x21
 8004c5c:	6003      	str	r3, [r0, #0]
 8004c5e:	ecbd 8b02 	vpop	{d8}
 8004c62:	bd08      	pop	{r3, pc}
 8004c64:	00000000 	.word	0x00000000

08004c68 <cosf>:
 8004c68:	ee10 3a10 	vmov	r3, s0
 8004c6c:	b507      	push	{r0, r1, r2, lr}
 8004c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce8 <cosf+0x80>)
 8004c70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d806      	bhi.n	8004c86 <cosf+0x1e>
 8004c78:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8004cec <cosf+0x84>
 8004c7c:	b003      	add	sp, #12
 8004c7e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c82:	f000 b885 	b.w	8004d90 <__kernel_cosf>
 8004c86:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004c8a:	d304      	bcc.n	8004c96 <cosf+0x2e>
 8004c8c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004c90:	b003      	add	sp, #12
 8004c92:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c96:	4668      	mov	r0, sp
 8004c98:	f000 f972 	bl	8004f80 <__ieee754_rem_pio2f>
 8004c9c:	f000 0003 	and.w	r0, r0, #3
 8004ca0:	2801      	cmp	r0, #1
 8004ca2:	d009      	beq.n	8004cb8 <cosf+0x50>
 8004ca4:	2802      	cmp	r0, #2
 8004ca6:	d010      	beq.n	8004cca <cosf+0x62>
 8004ca8:	b9b0      	cbnz	r0, 8004cd8 <cosf+0x70>
 8004caa:	eddd 0a01 	vldr	s1, [sp, #4]
 8004cae:	ed9d 0a00 	vldr	s0, [sp]
 8004cb2:	f000 f86d 	bl	8004d90 <__kernel_cosf>
 8004cb6:	e7eb      	b.n	8004c90 <cosf+0x28>
 8004cb8:	eddd 0a01 	vldr	s1, [sp, #4]
 8004cbc:	ed9d 0a00 	vldr	s0, [sp]
 8004cc0:	f000 f8be 	bl	8004e40 <__kernel_sinf>
 8004cc4:	eeb1 0a40 	vneg.f32	s0, s0
 8004cc8:	e7e2      	b.n	8004c90 <cosf+0x28>
 8004cca:	eddd 0a01 	vldr	s1, [sp, #4]
 8004cce:	ed9d 0a00 	vldr	s0, [sp]
 8004cd2:	f000 f85d 	bl	8004d90 <__kernel_cosf>
 8004cd6:	e7f5      	b.n	8004cc4 <cosf+0x5c>
 8004cd8:	eddd 0a01 	vldr	s1, [sp, #4]
 8004cdc:	ed9d 0a00 	vldr	s0, [sp]
 8004ce0:	2001      	movs	r0, #1
 8004ce2:	f000 f8ad 	bl	8004e40 <__kernel_sinf>
 8004ce6:	e7d3      	b.n	8004c90 <cosf+0x28>
 8004ce8:	3f490fd8 	.word	0x3f490fd8
 8004cec:	00000000 	.word	0x00000000

08004cf0 <sinf>:
 8004cf0:	ee10 3a10 	vmov	r3, s0
 8004cf4:	b507      	push	{r0, r1, r2, lr}
 8004cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d74 <sinf+0x84>)
 8004cf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d807      	bhi.n	8004d10 <sinf+0x20>
 8004d00:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8004d78 <sinf+0x88>
 8004d04:	2000      	movs	r0, #0
 8004d06:	b003      	add	sp, #12
 8004d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d0c:	f000 b898 	b.w	8004e40 <__kernel_sinf>
 8004d10:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004d14:	d304      	bcc.n	8004d20 <sinf+0x30>
 8004d16:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004d1a:	b003      	add	sp, #12
 8004d1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d20:	4668      	mov	r0, sp
 8004d22:	f000 f92d 	bl	8004f80 <__ieee754_rem_pio2f>
 8004d26:	f000 0003 	and.w	r0, r0, #3
 8004d2a:	2801      	cmp	r0, #1
 8004d2c:	d00a      	beq.n	8004d44 <sinf+0x54>
 8004d2e:	2802      	cmp	r0, #2
 8004d30:	d00f      	beq.n	8004d52 <sinf+0x62>
 8004d32:	b9c0      	cbnz	r0, 8004d66 <sinf+0x76>
 8004d34:	eddd 0a01 	vldr	s1, [sp, #4]
 8004d38:	ed9d 0a00 	vldr	s0, [sp]
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	f000 f87f 	bl	8004e40 <__kernel_sinf>
 8004d42:	e7ea      	b.n	8004d1a <sinf+0x2a>
 8004d44:	eddd 0a01 	vldr	s1, [sp, #4]
 8004d48:	ed9d 0a00 	vldr	s0, [sp]
 8004d4c:	f000 f820 	bl	8004d90 <__kernel_cosf>
 8004d50:	e7e3      	b.n	8004d1a <sinf+0x2a>
 8004d52:	eddd 0a01 	vldr	s1, [sp, #4]
 8004d56:	ed9d 0a00 	vldr	s0, [sp]
 8004d5a:	2001      	movs	r0, #1
 8004d5c:	f000 f870 	bl	8004e40 <__kernel_sinf>
 8004d60:	eeb1 0a40 	vneg.f32	s0, s0
 8004d64:	e7d9      	b.n	8004d1a <sinf+0x2a>
 8004d66:	eddd 0a01 	vldr	s1, [sp, #4]
 8004d6a:	ed9d 0a00 	vldr	s0, [sp]
 8004d6e:	f000 f80f 	bl	8004d90 <__kernel_cosf>
 8004d72:	e7f5      	b.n	8004d60 <sinf+0x70>
 8004d74:	3f490fd8 	.word	0x3f490fd8
 8004d78:	00000000 	.word	0x00000000

08004d7c <nanf>:
 8004d7c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004d84 <nanf+0x8>
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	7fc00000 	.word	0x7fc00000

08004d88 <__ieee754_sqrtf>:
 8004d88:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004d8c:	4770      	bx	lr
	...

08004d90 <__kernel_cosf>:
 8004d90:	ee10 3a10 	vmov	r3, s0
 8004d94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d98:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004d9c:	eef0 6a40 	vmov.f32	s13, s0
 8004da0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004da4:	d204      	bcs.n	8004db0 <__kernel_cosf+0x20>
 8004da6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8004daa:	ee17 2a90 	vmov	r2, s15
 8004dae:	b342      	cbz	r2, 8004e02 <__kernel_cosf+0x72>
 8004db0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8004db4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8004e20 <__kernel_cosf+0x90>
 8004db8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8004e24 <__kernel_cosf+0x94>
 8004dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8004e28 <__kernel_cosf+0x98>)
 8004dbe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004e2c <__kernel_cosf+0x9c>
 8004dc8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004dcc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8004e30 <__kernel_cosf+0xa0>
 8004dd0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004dd4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8004e34 <__kernel_cosf+0xa4>
 8004dd8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004ddc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8004e38 <__kernel_cosf+0xa8>
 8004de0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004de4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8004de8:	ee26 6a07 	vmul.f32	s12, s12, s14
 8004dec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004df0:	eee7 0a06 	vfma.f32	s1, s14, s12
 8004df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df8:	d804      	bhi.n	8004e04 <__kernel_cosf+0x74>
 8004dfa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004dfe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004e02:	4770      	bx	lr
 8004e04:	4a0d      	ldr	r2, [pc, #52]	@ (8004e3c <__kernel_cosf+0xac>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	bf9a      	itte	ls
 8004e0a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8004e0e:	ee07 3a10 	vmovls	s14, r3
 8004e12:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8004e16:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004e1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e1e:	e7ec      	b.n	8004dfa <__kernel_cosf+0x6a>
 8004e20:	ad47d74e 	.word	0xad47d74e
 8004e24:	310f74f6 	.word	0x310f74f6
 8004e28:	3e999999 	.word	0x3e999999
 8004e2c:	b493f27c 	.word	0xb493f27c
 8004e30:	37d00d01 	.word	0x37d00d01
 8004e34:	bab60b61 	.word	0xbab60b61
 8004e38:	3d2aaaab 	.word	0x3d2aaaab
 8004e3c:	3f480000 	.word	0x3f480000

08004e40 <__kernel_sinf>:
 8004e40:	ee10 3a10 	vmov	r3, s0
 8004e44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e48:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004e4c:	d204      	bcs.n	8004e58 <__kernel_sinf+0x18>
 8004e4e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004e52:	ee17 3a90 	vmov	r3, s15
 8004e56:	b35b      	cbz	r3, 8004eb0 <__kernel_sinf+0x70>
 8004e58:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004e5c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8004eb4 <__kernel_sinf+0x74>
 8004e60:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8004eb8 <__kernel_sinf+0x78>
 8004e64:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004e68:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8004ebc <__kernel_sinf+0x7c>
 8004e6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004e70:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8004ec0 <__kernel_sinf+0x80>
 8004e74:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004e78:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8004ec4 <__kernel_sinf+0x84>
 8004e7c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004e80:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004e84:	b930      	cbnz	r0, 8004e94 <__kernel_sinf+0x54>
 8004e86:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8004ec8 <__kernel_sinf+0x88>
 8004e8a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004e8e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004e92:	4770      	bx	lr
 8004e94:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004e98:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8004e9c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004ea0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004ea4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8004ecc <__kernel_sinf+0x8c>
 8004ea8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004eac:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	2f2ec9d3 	.word	0x2f2ec9d3
 8004eb8:	b2d72f34 	.word	0xb2d72f34
 8004ebc:	3638ef1b 	.word	0x3638ef1b
 8004ec0:	b9500d01 	.word	0xb9500d01
 8004ec4:	3c088889 	.word	0x3c088889
 8004ec8:	be2aaaab 	.word	0xbe2aaaab
 8004ecc:	3e2aaaab 	.word	0x3e2aaaab

08004ed0 <__ieee754_log10f>:
 8004ed0:	b508      	push	{r3, lr}
 8004ed2:	ee10 3a10 	vmov	r3, s0
 8004ed6:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8004eda:	ed2d 8b02 	vpush	{d8}
 8004ede:	d108      	bne.n	8004ef2 <__ieee754_log10f+0x22>
 8004ee0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004f68 <__ieee754_log10f+0x98>
 8004ee4:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8004f6c <__ieee754_log10f+0x9c>
 8004ee8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8004eec:	ecbd 8b02 	vpop	{d8}
 8004ef0:	bd08      	pop	{r3, pc}
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	da02      	bge.n	8004efe <__ieee754_log10f+0x2e>
 8004ef8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8004efc:	e7f2      	b.n	8004ee4 <__ieee754_log10f+0x14>
 8004efe:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004f02:	db02      	blt.n	8004f0a <__ieee754_log10f+0x3a>
 8004f04:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004f08:	e7f0      	b.n	8004eec <__ieee754_log10f+0x1c>
 8004f0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f0e:	bfbf      	itttt	lt
 8004f10:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 8004f70 <__ieee754_log10f+0xa0>
 8004f14:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8004f18:	f06f 0118 	mvnlt.w	r1, #24
 8004f1c:	ee17 2a90 	vmovlt	r2, s15
 8004f20:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8004f24:	bfa8      	it	ge
 8004f26:	2100      	movge	r1, #0
 8004f28:	3b7f      	subs	r3, #127	@ 0x7f
 8004f2a:	440b      	add	r3, r1
 8004f2c:	0fd9      	lsrs	r1, r3, #31
 8004f2e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8004f3a:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 8004f3e:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8004f42:	ee00 3a10 	vmov	s0, r3
 8004f46:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8004f4a:	f000 fbb9 	bl	80056c0 <__ieee754_logf>
 8004f4e:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8004f74 <__ieee754_log10f+0xa4>
 8004f52:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004f56:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8004f78 <__ieee754_log10f+0xa8>
 8004f5a:	eea8 0a27 	vfma.f32	s0, s16, s15
 8004f5e:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8004f7c <__ieee754_log10f+0xac>
 8004f62:	eea8 0a27 	vfma.f32	s0, s16, s15
 8004f66:	e7c1      	b.n	8004eec <__ieee754_log10f+0x1c>
 8004f68:	cc000000 	.word	0xcc000000
 8004f6c:	00000000 	.word	0x00000000
 8004f70:	4c000000 	.word	0x4c000000
 8004f74:	3ede5bd9 	.word	0x3ede5bd9
 8004f78:	355427db 	.word	0x355427db
 8004f7c:	3e9a2080 	.word	0x3e9a2080

08004f80 <__ieee754_rem_pio2f>:
 8004f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f82:	ee10 6a10 	vmov	r6, s0
 8004f86:	4b88      	ldr	r3, [pc, #544]	@ (80051a8 <__ieee754_rem_pio2f+0x228>)
 8004f88:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8004f8c:	429d      	cmp	r5, r3
 8004f8e:	b087      	sub	sp, #28
 8004f90:	4604      	mov	r4, r0
 8004f92:	d805      	bhi.n	8004fa0 <__ieee754_rem_pio2f+0x20>
 8004f94:	2300      	movs	r3, #0
 8004f96:	ed80 0a00 	vstr	s0, [r0]
 8004f9a:	6043      	str	r3, [r0, #4]
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	e022      	b.n	8004fe6 <__ieee754_rem_pio2f+0x66>
 8004fa0:	4b82      	ldr	r3, [pc, #520]	@ (80051ac <__ieee754_rem_pio2f+0x22c>)
 8004fa2:	429d      	cmp	r5, r3
 8004fa4:	d83a      	bhi.n	800501c <__ieee754_rem_pio2f+0x9c>
 8004fa6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8004faa:	2e00      	cmp	r6, #0
 8004fac:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80051b0 <__ieee754_rem_pio2f+0x230>
 8004fb0:	4a80      	ldr	r2, [pc, #512]	@ (80051b4 <__ieee754_rem_pio2f+0x234>)
 8004fb2:	f023 030f 	bic.w	r3, r3, #15
 8004fb6:	dd18      	ble.n	8004fea <__ieee754_rem_pio2f+0x6a>
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	ee70 7a47 	vsub.f32	s15, s0, s14
 8004fbe:	bf09      	itett	eq
 8004fc0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80051b8 <__ieee754_rem_pio2f+0x238>
 8004fc4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80051bc <__ieee754_rem_pio2f+0x23c>
 8004fc8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80051c0 <__ieee754_rem_pio2f+0x240>
 8004fcc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004fd0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8004fd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004fd8:	ed80 7a00 	vstr	s14, [r0]
 8004fdc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004fe0:	edc0 7a01 	vstr	s15, [r0, #4]
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	b007      	add	sp, #28
 8004fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fea:	4293      	cmp	r3, r2
 8004fec:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004ff0:	bf09      	itett	eq
 8004ff2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80051b8 <__ieee754_rem_pio2f+0x238>
 8004ff6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80051bc <__ieee754_rem_pio2f+0x23c>
 8004ffa:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80051c0 <__ieee754_rem_pio2f+0x240>
 8004ffe:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005002:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005006:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800500a:	ed80 7a00 	vstr	s14, [r0]
 800500e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005012:	edc0 7a01 	vstr	s15, [r0, #4]
 8005016:	f04f 30ff 	mov.w	r0, #4294967295
 800501a:	e7e4      	b.n	8004fe6 <__ieee754_rem_pio2f+0x66>
 800501c:	4b69      	ldr	r3, [pc, #420]	@ (80051c4 <__ieee754_rem_pio2f+0x244>)
 800501e:	429d      	cmp	r5, r3
 8005020:	d873      	bhi.n	800510a <__ieee754_rem_pio2f+0x18a>
 8005022:	f000 f8dd 	bl	80051e0 <fabsf>
 8005026:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80051c8 <__ieee754_rem_pio2f+0x248>
 800502a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800502e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800503a:	ee17 0a90 	vmov	r0, s15
 800503e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80051b0 <__ieee754_rem_pio2f+0x230>
 8005042:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005046:	281f      	cmp	r0, #31
 8005048:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80051bc <__ieee754_rem_pio2f+0x23c>
 800504c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005050:	eeb1 6a47 	vneg.f32	s12, s14
 8005054:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005058:	ee16 1a90 	vmov	r1, s13
 800505c:	dc09      	bgt.n	8005072 <__ieee754_rem_pio2f+0xf2>
 800505e:	4a5b      	ldr	r2, [pc, #364]	@ (80051cc <__ieee754_rem_pio2f+0x24c>)
 8005060:	1e47      	subs	r7, r0, #1
 8005062:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005066:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800506a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800506e:	4293      	cmp	r3, r2
 8005070:	d107      	bne.n	8005082 <__ieee754_rem_pio2f+0x102>
 8005072:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8005076:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800507a:	2a08      	cmp	r2, #8
 800507c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8005080:	dc14      	bgt.n	80050ac <__ieee754_rem_pio2f+0x12c>
 8005082:	6021      	str	r1, [r4, #0]
 8005084:	ed94 7a00 	vldr	s14, [r4]
 8005088:	ee30 0a47 	vsub.f32	s0, s0, s14
 800508c:	2e00      	cmp	r6, #0
 800508e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005092:	ed84 0a01 	vstr	s0, [r4, #4]
 8005096:	daa6      	bge.n	8004fe6 <__ieee754_rem_pio2f+0x66>
 8005098:	eeb1 7a47 	vneg.f32	s14, s14
 800509c:	eeb1 0a40 	vneg.f32	s0, s0
 80050a0:	ed84 7a00 	vstr	s14, [r4]
 80050a4:	ed84 0a01 	vstr	s0, [r4, #4]
 80050a8:	4240      	negs	r0, r0
 80050aa:	e79c      	b.n	8004fe6 <__ieee754_rem_pio2f+0x66>
 80050ac:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80051b8 <__ieee754_rem_pio2f+0x238>
 80050b0:	eef0 6a40 	vmov.f32	s13, s0
 80050b4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80050b8:	ee70 7a66 	vsub.f32	s15, s0, s13
 80050bc:	eee6 7a25 	vfma.f32	s15, s12, s11
 80050c0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80051c0 <__ieee754_rem_pio2f+0x240>
 80050c4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80050c8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80050cc:	ee15 2a90 	vmov	r2, s11
 80050d0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80050d4:	1a5b      	subs	r3, r3, r1
 80050d6:	2b19      	cmp	r3, #25
 80050d8:	dc04      	bgt.n	80050e4 <__ieee754_rem_pio2f+0x164>
 80050da:	edc4 5a00 	vstr	s11, [r4]
 80050de:	eeb0 0a66 	vmov.f32	s0, s13
 80050e2:	e7cf      	b.n	8005084 <__ieee754_rem_pio2f+0x104>
 80050e4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80051d0 <__ieee754_rem_pio2f+0x250>
 80050e8:	eeb0 0a66 	vmov.f32	s0, s13
 80050ec:	eea6 0a25 	vfma.f32	s0, s12, s11
 80050f0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80050f4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80051d4 <__ieee754_rem_pio2f+0x254>
 80050f8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80050fc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005100:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005104:	ed84 7a00 	vstr	s14, [r4]
 8005108:	e7bc      	b.n	8005084 <__ieee754_rem_pio2f+0x104>
 800510a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800510e:	d306      	bcc.n	800511e <__ieee754_rem_pio2f+0x19e>
 8005110:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005114:	edc0 7a01 	vstr	s15, [r0, #4]
 8005118:	edc0 7a00 	vstr	s15, [r0]
 800511c:	e73e      	b.n	8004f9c <__ieee754_rem_pio2f+0x1c>
 800511e:	15ea      	asrs	r2, r5, #23
 8005120:	3a86      	subs	r2, #134	@ 0x86
 8005122:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800512e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80051d8 <__ieee754_rem_pio2f+0x258>
 8005132:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005136:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800513a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800513e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005142:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005146:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800514a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800514e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005152:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005156:	eef5 7a40 	vcmp.f32	s15, #0.0
 800515a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515e:	edcd 7a05 	vstr	s15, [sp, #20]
 8005162:	d11e      	bne.n	80051a2 <__ieee754_rem_pio2f+0x222>
 8005164:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516c:	bf0c      	ite	eq
 800516e:	2301      	moveq	r3, #1
 8005170:	2302      	movne	r3, #2
 8005172:	491a      	ldr	r1, [pc, #104]	@ (80051dc <__ieee754_rem_pio2f+0x25c>)
 8005174:	9101      	str	r1, [sp, #4]
 8005176:	2102      	movs	r1, #2
 8005178:	9100      	str	r1, [sp, #0]
 800517a:	a803      	add	r0, sp, #12
 800517c:	4621      	mov	r1, r4
 800517e:	f000 f837 	bl	80051f0 <__kernel_rem_pio2f>
 8005182:	2e00      	cmp	r6, #0
 8005184:	f6bf af2f 	bge.w	8004fe6 <__ieee754_rem_pio2f+0x66>
 8005188:	edd4 7a00 	vldr	s15, [r4]
 800518c:	eef1 7a67 	vneg.f32	s15, s15
 8005190:	edc4 7a00 	vstr	s15, [r4]
 8005194:	edd4 7a01 	vldr	s15, [r4, #4]
 8005198:	eef1 7a67 	vneg.f32	s15, s15
 800519c:	edc4 7a01 	vstr	s15, [r4, #4]
 80051a0:	e782      	b.n	80050a8 <__ieee754_rem_pio2f+0x128>
 80051a2:	2303      	movs	r3, #3
 80051a4:	e7e5      	b.n	8005172 <__ieee754_rem_pio2f+0x1f2>
 80051a6:	bf00      	nop
 80051a8:	3f490fd8 	.word	0x3f490fd8
 80051ac:	4016cbe3 	.word	0x4016cbe3
 80051b0:	3fc90f80 	.word	0x3fc90f80
 80051b4:	3fc90fd0 	.word	0x3fc90fd0
 80051b8:	37354400 	.word	0x37354400
 80051bc:	37354443 	.word	0x37354443
 80051c0:	2e85a308 	.word	0x2e85a308
 80051c4:	43490f80 	.word	0x43490f80
 80051c8:	3f22f984 	.word	0x3f22f984
 80051cc:	08005a4c 	.word	0x08005a4c
 80051d0:	2e85a300 	.word	0x2e85a300
 80051d4:	248d3132 	.word	0x248d3132
 80051d8:	43800000 	.word	0x43800000
 80051dc:	08005acc 	.word	0x08005acc

080051e0 <fabsf>:
 80051e0:	ee10 3a10 	vmov	r3, s0
 80051e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051e8:	ee00 3a10 	vmov	s0, r3
 80051ec:	4770      	bx	lr
	...

080051f0 <__kernel_rem_pio2f>:
 80051f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f4:	ed2d 8b04 	vpush	{d8-d9}
 80051f8:	b0d9      	sub	sp, #356	@ 0x164
 80051fa:	4690      	mov	r8, r2
 80051fc:	9001      	str	r0, [sp, #4]
 80051fe:	4ab6      	ldr	r2, [pc, #728]	@ (80054d8 <__kernel_rem_pio2f+0x2e8>)
 8005200:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8005202:	f118 0f04 	cmn.w	r8, #4
 8005206:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800520a:	460f      	mov	r7, r1
 800520c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005210:	db26      	blt.n	8005260 <__kernel_rem_pio2f+0x70>
 8005212:	f1b8 0203 	subs.w	r2, r8, #3
 8005216:	bf48      	it	mi
 8005218:	f108 0204 	addmi.w	r2, r8, #4
 800521c:	10d2      	asrs	r2, r2, #3
 800521e:	1c55      	adds	r5, r2, #1
 8005220:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8005222:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80054e8 <__kernel_rem_pio2f+0x2f8>
 8005226:	00e8      	lsls	r0, r5, #3
 8005228:	eba2 060b 	sub.w	r6, r2, fp
 800522c:	9002      	str	r0, [sp, #8]
 800522e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8005232:	eb0a 0c0b 	add.w	ip, sl, fp
 8005236:	ac1c      	add	r4, sp, #112	@ 0x70
 8005238:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800523c:	2000      	movs	r0, #0
 800523e:	4560      	cmp	r0, ip
 8005240:	dd10      	ble.n	8005264 <__kernel_rem_pio2f+0x74>
 8005242:	a91c      	add	r1, sp, #112	@ 0x70
 8005244:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8005248:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800524c:	2600      	movs	r6, #0
 800524e:	4556      	cmp	r6, sl
 8005250:	dc24      	bgt.n	800529c <__kernel_rem_pio2f+0xac>
 8005252:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005256:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80054e8 <__kernel_rem_pio2f+0x2f8>
 800525a:	4684      	mov	ip, r0
 800525c:	2400      	movs	r4, #0
 800525e:	e016      	b.n	800528e <__kernel_rem_pio2f+0x9e>
 8005260:	2200      	movs	r2, #0
 8005262:	e7dc      	b.n	800521e <__kernel_rem_pio2f+0x2e>
 8005264:	42c6      	cmn	r6, r0
 8005266:	bf5d      	ittte	pl
 8005268:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800526c:	ee07 1a90 	vmovpl	s15, r1
 8005270:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005274:	eef0 7a47 	vmovmi.f32	s15, s14
 8005278:	ece4 7a01 	vstmia	r4!, {s15}
 800527c:	3001      	adds	r0, #1
 800527e:	e7de      	b.n	800523e <__kernel_rem_pio2f+0x4e>
 8005280:	ecfe 6a01 	vldmia	lr!, {s13}
 8005284:	ed3c 7a01 	vldmdb	ip!, {s14}
 8005288:	eee6 7a87 	vfma.f32	s15, s13, s14
 800528c:	3401      	adds	r4, #1
 800528e:	455c      	cmp	r4, fp
 8005290:	ddf6      	ble.n	8005280 <__kernel_rem_pio2f+0x90>
 8005292:	ece9 7a01 	vstmia	r9!, {s15}
 8005296:	3601      	adds	r6, #1
 8005298:	3004      	adds	r0, #4
 800529a:	e7d8      	b.n	800524e <__kernel_rem_pio2f+0x5e>
 800529c:	a908      	add	r1, sp, #32
 800529e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80052a2:	9104      	str	r1, [sp, #16]
 80052a4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80052a6:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80054e4 <__kernel_rem_pio2f+0x2f4>
 80052aa:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80054e0 <__kernel_rem_pio2f+0x2f0>
 80052ae:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80052b2:	9203      	str	r2, [sp, #12]
 80052b4:	4654      	mov	r4, sl
 80052b6:	00a2      	lsls	r2, r4, #2
 80052b8:	9205      	str	r2, [sp, #20]
 80052ba:	aa58      	add	r2, sp, #352	@ 0x160
 80052bc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80052c0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80052c4:	a944      	add	r1, sp, #272	@ 0x110
 80052c6:	aa08      	add	r2, sp, #32
 80052c8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80052cc:	4694      	mov	ip, r2
 80052ce:	4626      	mov	r6, r4
 80052d0:	2e00      	cmp	r6, #0
 80052d2:	dc4c      	bgt.n	800536e <__kernel_rem_pio2f+0x17e>
 80052d4:	4628      	mov	r0, r5
 80052d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80052da:	f000 fae3 	bl	80058a4 <scalbnf>
 80052de:	eeb0 8a40 	vmov.f32	s16, s0
 80052e2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80052e6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80052ea:	f000 fb41 	bl	8005970 <floorf>
 80052ee:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80052f2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80052f6:	2d00      	cmp	r5, #0
 80052f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052fc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005300:	ee17 9a90 	vmov	r9, s15
 8005304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005308:	ee38 8a67 	vsub.f32	s16, s16, s15
 800530c:	dd41      	ble.n	8005392 <__kernel_rem_pio2f+0x1a2>
 800530e:	f104 3cff 	add.w	ip, r4, #4294967295
 8005312:	a908      	add	r1, sp, #32
 8005314:	f1c5 0e08 	rsb	lr, r5, #8
 8005318:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800531c:	fa46 f00e 	asr.w	r0, r6, lr
 8005320:	4481      	add	r9, r0
 8005322:	fa00 f00e 	lsl.w	r0, r0, lr
 8005326:	1a36      	subs	r6, r6, r0
 8005328:	f1c5 0007 	rsb	r0, r5, #7
 800532c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8005330:	4106      	asrs	r6, r0
 8005332:	2e00      	cmp	r6, #0
 8005334:	dd3c      	ble.n	80053b0 <__kernel_rem_pio2f+0x1c0>
 8005336:	f04f 0e00 	mov.w	lr, #0
 800533a:	f109 0901 	add.w	r9, r9, #1
 800533e:	4670      	mov	r0, lr
 8005340:	4574      	cmp	r4, lr
 8005342:	dc68      	bgt.n	8005416 <__kernel_rem_pio2f+0x226>
 8005344:	2d00      	cmp	r5, #0
 8005346:	dd03      	ble.n	8005350 <__kernel_rem_pio2f+0x160>
 8005348:	2d01      	cmp	r5, #1
 800534a:	d074      	beq.n	8005436 <__kernel_rem_pio2f+0x246>
 800534c:	2d02      	cmp	r5, #2
 800534e:	d07d      	beq.n	800544c <__kernel_rem_pio2f+0x25c>
 8005350:	2e02      	cmp	r6, #2
 8005352:	d12d      	bne.n	80053b0 <__kernel_rem_pio2f+0x1c0>
 8005354:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005358:	ee30 8a48 	vsub.f32	s16, s0, s16
 800535c:	b340      	cbz	r0, 80053b0 <__kernel_rem_pio2f+0x1c0>
 800535e:	4628      	mov	r0, r5
 8005360:	9306      	str	r3, [sp, #24]
 8005362:	f000 fa9f 	bl	80058a4 <scalbnf>
 8005366:	9b06      	ldr	r3, [sp, #24]
 8005368:	ee38 8a40 	vsub.f32	s16, s16, s0
 800536c:	e020      	b.n	80053b0 <__kernel_rem_pio2f+0x1c0>
 800536e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005372:	3e01      	subs	r6, #1
 8005374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800537c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005380:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005384:	ecac 0a01 	vstmia	ip!, {s0}
 8005388:	ed30 0a01 	vldmdb	r0!, {s0}
 800538c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005390:	e79e      	b.n	80052d0 <__kernel_rem_pio2f+0xe0>
 8005392:	d105      	bne.n	80053a0 <__kernel_rem_pio2f+0x1b0>
 8005394:	1e60      	subs	r0, r4, #1
 8005396:	a908      	add	r1, sp, #32
 8005398:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800539c:	11f6      	asrs	r6, r6, #7
 800539e:	e7c8      	b.n	8005332 <__kernel_rem_pio2f+0x142>
 80053a0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80053a4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80053a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ac:	da31      	bge.n	8005412 <__kernel_rem_pio2f+0x222>
 80053ae:	2600      	movs	r6, #0
 80053b0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80053b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b8:	f040 8098 	bne.w	80054ec <__kernel_rem_pio2f+0x2fc>
 80053bc:	1e60      	subs	r0, r4, #1
 80053be:	2200      	movs	r2, #0
 80053c0:	4550      	cmp	r0, sl
 80053c2:	da4b      	bge.n	800545c <__kernel_rem_pio2f+0x26c>
 80053c4:	2a00      	cmp	r2, #0
 80053c6:	d065      	beq.n	8005494 <__kernel_rem_pio2f+0x2a4>
 80053c8:	3c01      	subs	r4, #1
 80053ca:	ab08      	add	r3, sp, #32
 80053cc:	3d08      	subs	r5, #8
 80053ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0f8      	beq.n	80053c8 <__kernel_rem_pio2f+0x1d8>
 80053d6:	4628      	mov	r0, r5
 80053d8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80053dc:	f000 fa62 	bl	80058a4 <scalbnf>
 80053e0:	1c63      	adds	r3, r4, #1
 80053e2:	aa44      	add	r2, sp, #272	@ 0x110
 80053e4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80054e4 <__kernel_rem_pio2f+0x2f4>
 80053e8:	0099      	lsls	r1, r3, #2
 80053ea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80053ee:	4623      	mov	r3, r4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f280 80a9 	bge.w	8005548 <__kernel_rem_pio2f+0x358>
 80053f6:	4623      	mov	r3, r4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f2c0 80c7 	blt.w	800558c <__kernel_rem_pio2f+0x39c>
 80053fe:	aa44      	add	r2, sp, #272	@ 0x110
 8005400:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005404:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80054dc <__kernel_rem_pio2f+0x2ec>
 8005408:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80054e8 <__kernel_rem_pio2f+0x2f8>
 800540c:	2000      	movs	r0, #0
 800540e:	1ae2      	subs	r2, r4, r3
 8005410:	e0b1      	b.n	8005576 <__kernel_rem_pio2f+0x386>
 8005412:	2602      	movs	r6, #2
 8005414:	e78f      	b.n	8005336 <__kernel_rem_pio2f+0x146>
 8005416:	f852 1b04 	ldr.w	r1, [r2], #4
 800541a:	b948      	cbnz	r0, 8005430 <__kernel_rem_pio2f+0x240>
 800541c:	b121      	cbz	r1, 8005428 <__kernel_rem_pio2f+0x238>
 800541e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8005422:	f842 1c04 	str.w	r1, [r2, #-4]
 8005426:	2101      	movs	r1, #1
 8005428:	f10e 0e01 	add.w	lr, lr, #1
 800542c:	4608      	mov	r0, r1
 800542e:	e787      	b.n	8005340 <__kernel_rem_pio2f+0x150>
 8005430:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8005434:	e7f5      	b.n	8005422 <__kernel_rem_pio2f+0x232>
 8005436:	f104 3cff 	add.w	ip, r4, #4294967295
 800543a:	aa08      	add	r2, sp, #32
 800543c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005440:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005444:	a908      	add	r1, sp, #32
 8005446:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800544a:	e781      	b.n	8005350 <__kernel_rem_pio2f+0x160>
 800544c:	f104 3cff 	add.w	ip, r4, #4294967295
 8005450:	aa08      	add	r2, sp, #32
 8005452:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005456:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800545a:	e7f3      	b.n	8005444 <__kernel_rem_pio2f+0x254>
 800545c:	a908      	add	r1, sp, #32
 800545e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005462:	3801      	subs	r0, #1
 8005464:	430a      	orrs	r2, r1
 8005466:	e7ab      	b.n	80053c0 <__kernel_rem_pio2f+0x1d0>
 8005468:	3201      	adds	r2, #1
 800546a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800546e:	2e00      	cmp	r6, #0
 8005470:	d0fa      	beq.n	8005468 <__kernel_rem_pio2f+0x278>
 8005472:	9905      	ldr	r1, [sp, #20]
 8005474:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8005478:	eb0d 0001 	add.w	r0, sp, r1
 800547c:	18e6      	adds	r6, r4, r3
 800547e:	a91c      	add	r1, sp, #112	@ 0x70
 8005480:	f104 0c01 	add.w	ip, r4, #1
 8005484:	384c      	subs	r0, #76	@ 0x4c
 8005486:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800548a:	4422      	add	r2, r4
 800548c:	4562      	cmp	r2, ip
 800548e:	da04      	bge.n	800549a <__kernel_rem_pio2f+0x2aa>
 8005490:	4614      	mov	r4, r2
 8005492:	e710      	b.n	80052b6 <__kernel_rem_pio2f+0xc6>
 8005494:	9804      	ldr	r0, [sp, #16]
 8005496:	2201      	movs	r2, #1
 8005498:	e7e7      	b.n	800546a <__kernel_rem_pio2f+0x27a>
 800549a:	9903      	ldr	r1, [sp, #12]
 800549c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80054a0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80054a4:	9105      	str	r1, [sp, #20]
 80054a6:	ee07 1a90 	vmov	s15, r1
 80054aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054ae:	2400      	movs	r4, #0
 80054b0:	ece6 7a01 	vstmia	r6!, {s15}
 80054b4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80054e8 <__kernel_rem_pio2f+0x2f8>
 80054b8:	46b1      	mov	r9, r6
 80054ba:	455c      	cmp	r4, fp
 80054bc:	dd04      	ble.n	80054c8 <__kernel_rem_pio2f+0x2d8>
 80054be:	ece0 7a01 	vstmia	r0!, {s15}
 80054c2:	f10c 0c01 	add.w	ip, ip, #1
 80054c6:	e7e1      	b.n	800548c <__kernel_rem_pio2f+0x29c>
 80054c8:	ecfe 6a01 	vldmia	lr!, {s13}
 80054cc:	ed39 7a01 	vldmdb	r9!, {s14}
 80054d0:	3401      	adds	r4, #1
 80054d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80054d6:	e7f0      	b.n	80054ba <__kernel_rem_pio2f+0x2ca>
 80054d8:	08005e10 	.word	0x08005e10
 80054dc:	08005de4 	.word	0x08005de4
 80054e0:	43800000 	.word	0x43800000
 80054e4:	3b800000 	.word	0x3b800000
 80054e8:	00000000 	.word	0x00000000
 80054ec:	9b02      	ldr	r3, [sp, #8]
 80054ee:	eeb0 0a48 	vmov.f32	s0, s16
 80054f2:	eba3 0008 	sub.w	r0, r3, r8
 80054f6:	f000 f9d5 	bl	80058a4 <scalbnf>
 80054fa:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80054e0 <__kernel_rem_pio2f+0x2f0>
 80054fe:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005506:	db19      	blt.n	800553c <__kernel_rem_pio2f+0x34c>
 8005508:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80054e4 <__kernel_rem_pio2f+0x2f4>
 800550c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005510:	aa08      	add	r2, sp, #32
 8005512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005516:	3508      	adds	r5, #8
 8005518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800551c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005524:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005528:	ee10 3a10 	vmov	r3, s0
 800552c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005530:	ee17 3a90 	vmov	r3, s15
 8005534:	3401      	adds	r4, #1
 8005536:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800553a:	e74c      	b.n	80053d6 <__kernel_rem_pio2f+0x1e6>
 800553c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005540:	aa08      	add	r2, sp, #32
 8005542:	ee10 3a10 	vmov	r3, s0
 8005546:	e7f6      	b.n	8005536 <__kernel_rem_pio2f+0x346>
 8005548:	a808      	add	r0, sp, #32
 800554a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800554e:	9001      	str	r0, [sp, #4]
 8005550:	ee07 0a90 	vmov	s15, r0
 8005554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005558:	3b01      	subs	r3, #1
 800555a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800555e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005562:	ed62 7a01 	vstmdb	r2!, {s15}
 8005566:	e743      	b.n	80053f0 <__kernel_rem_pio2f+0x200>
 8005568:	ecfc 6a01 	vldmia	ip!, {s13}
 800556c:	ecb5 7a01 	vldmia	r5!, {s14}
 8005570:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005574:	3001      	adds	r0, #1
 8005576:	4550      	cmp	r0, sl
 8005578:	dc01      	bgt.n	800557e <__kernel_rem_pio2f+0x38e>
 800557a:	4290      	cmp	r0, r2
 800557c:	ddf4      	ble.n	8005568 <__kernel_rem_pio2f+0x378>
 800557e:	a858      	add	r0, sp, #352	@ 0x160
 8005580:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005584:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8005588:	3b01      	subs	r3, #1
 800558a:	e735      	b.n	80053f8 <__kernel_rem_pio2f+0x208>
 800558c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800558e:	2b02      	cmp	r3, #2
 8005590:	dc09      	bgt.n	80055a6 <__kernel_rem_pio2f+0x3b6>
 8005592:	2b00      	cmp	r3, #0
 8005594:	dc27      	bgt.n	80055e6 <__kernel_rem_pio2f+0x3f6>
 8005596:	d040      	beq.n	800561a <__kernel_rem_pio2f+0x42a>
 8005598:	f009 0007 	and.w	r0, r9, #7
 800559c:	b059      	add	sp, #356	@ 0x164
 800559e:	ecbd 8b04 	vpop	{d8-d9}
 80055a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d1f5      	bne.n	8005598 <__kernel_rem_pio2f+0x3a8>
 80055ac:	aa30      	add	r2, sp, #192	@ 0xc0
 80055ae:	1f0b      	subs	r3, r1, #4
 80055b0:	4413      	add	r3, r2
 80055b2:	461a      	mov	r2, r3
 80055b4:	4620      	mov	r0, r4
 80055b6:	2800      	cmp	r0, #0
 80055b8:	dc50      	bgt.n	800565c <__kernel_rem_pio2f+0x46c>
 80055ba:	4622      	mov	r2, r4
 80055bc:	2a01      	cmp	r2, #1
 80055be:	dc5d      	bgt.n	800567c <__kernel_rem_pio2f+0x48c>
 80055c0:	ab30      	add	r3, sp, #192	@ 0xc0
 80055c2:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80054e8 <__kernel_rem_pio2f+0x2f8>
 80055c6:	440b      	add	r3, r1
 80055c8:	2c01      	cmp	r4, #1
 80055ca:	dc67      	bgt.n	800569c <__kernel_rem_pio2f+0x4ac>
 80055cc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80055d0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80055d4:	2e00      	cmp	r6, #0
 80055d6:	d167      	bne.n	80056a8 <__kernel_rem_pio2f+0x4b8>
 80055d8:	edc7 6a00 	vstr	s13, [r7]
 80055dc:	ed87 7a01 	vstr	s14, [r7, #4]
 80055e0:	edc7 7a02 	vstr	s15, [r7, #8]
 80055e4:	e7d8      	b.n	8005598 <__kernel_rem_pio2f+0x3a8>
 80055e6:	ab30      	add	r3, sp, #192	@ 0xc0
 80055e8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80054e8 <__kernel_rem_pio2f+0x2f8>
 80055ec:	440b      	add	r3, r1
 80055ee:	4622      	mov	r2, r4
 80055f0:	2a00      	cmp	r2, #0
 80055f2:	da24      	bge.n	800563e <__kernel_rem_pio2f+0x44e>
 80055f4:	b34e      	cbz	r6, 800564a <__kernel_rem_pio2f+0x45a>
 80055f6:	eef1 7a47 	vneg.f32	s15, s14
 80055fa:	edc7 7a00 	vstr	s15, [r7]
 80055fe:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8005602:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005606:	aa31      	add	r2, sp, #196	@ 0xc4
 8005608:	2301      	movs	r3, #1
 800560a:	429c      	cmp	r4, r3
 800560c:	da20      	bge.n	8005650 <__kernel_rem_pio2f+0x460>
 800560e:	b10e      	cbz	r6, 8005614 <__kernel_rem_pio2f+0x424>
 8005610:	eef1 7a67 	vneg.f32	s15, s15
 8005614:	edc7 7a01 	vstr	s15, [r7, #4]
 8005618:	e7be      	b.n	8005598 <__kernel_rem_pio2f+0x3a8>
 800561a:	ab30      	add	r3, sp, #192	@ 0xc0
 800561c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80054e8 <__kernel_rem_pio2f+0x2f8>
 8005620:	440b      	add	r3, r1
 8005622:	2c00      	cmp	r4, #0
 8005624:	da05      	bge.n	8005632 <__kernel_rem_pio2f+0x442>
 8005626:	b10e      	cbz	r6, 800562c <__kernel_rem_pio2f+0x43c>
 8005628:	eef1 7a67 	vneg.f32	s15, s15
 800562c:	edc7 7a00 	vstr	s15, [r7]
 8005630:	e7b2      	b.n	8005598 <__kernel_rem_pio2f+0x3a8>
 8005632:	ed33 7a01 	vldmdb	r3!, {s14}
 8005636:	3c01      	subs	r4, #1
 8005638:	ee77 7a87 	vadd.f32	s15, s15, s14
 800563c:	e7f1      	b.n	8005622 <__kernel_rem_pio2f+0x432>
 800563e:	ed73 7a01 	vldmdb	r3!, {s15}
 8005642:	3a01      	subs	r2, #1
 8005644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005648:	e7d2      	b.n	80055f0 <__kernel_rem_pio2f+0x400>
 800564a:	eef0 7a47 	vmov.f32	s15, s14
 800564e:	e7d4      	b.n	80055fa <__kernel_rem_pio2f+0x40a>
 8005650:	ecb2 7a01 	vldmia	r2!, {s14}
 8005654:	3301      	adds	r3, #1
 8005656:	ee77 7a87 	vadd.f32	s15, s15, s14
 800565a:	e7d6      	b.n	800560a <__kernel_rem_pio2f+0x41a>
 800565c:	ed72 7a01 	vldmdb	r2!, {s15}
 8005660:	edd2 6a01 	vldr	s13, [r2, #4]
 8005664:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005668:	3801      	subs	r0, #1
 800566a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800566e:	ed82 7a00 	vstr	s14, [r2]
 8005672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005676:	edc2 7a01 	vstr	s15, [r2, #4]
 800567a:	e79c      	b.n	80055b6 <__kernel_rem_pio2f+0x3c6>
 800567c:	ed73 7a01 	vldmdb	r3!, {s15}
 8005680:	edd3 6a01 	vldr	s13, [r3, #4]
 8005684:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005688:	3a01      	subs	r2, #1
 800568a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800568e:	ed83 7a00 	vstr	s14, [r3]
 8005692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005696:	edc3 7a01 	vstr	s15, [r3, #4]
 800569a:	e78f      	b.n	80055bc <__kernel_rem_pio2f+0x3cc>
 800569c:	ed33 7a01 	vldmdb	r3!, {s14}
 80056a0:	3c01      	subs	r4, #1
 80056a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056a6:	e78f      	b.n	80055c8 <__kernel_rem_pio2f+0x3d8>
 80056a8:	eef1 6a66 	vneg.f32	s13, s13
 80056ac:	eeb1 7a47 	vneg.f32	s14, s14
 80056b0:	edc7 6a00 	vstr	s13, [r7]
 80056b4:	ed87 7a01 	vstr	s14, [r7, #4]
 80056b8:	eef1 7a67 	vneg.f32	s15, s15
 80056bc:	e790      	b.n	80055e0 <__kernel_rem_pio2f+0x3f0>
 80056be:	bf00      	nop

080056c0 <__ieee754_logf>:
 80056c0:	ee10 3a10 	vmov	r3, s0
 80056c4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80056c8:	d106      	bne.n	80056d8 <__ieee754_logf+0x18>
 80056ca:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8005864 <__ieee754_logf+0x1a4>
 80056ce:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8005868 <__ieee754_logf+0x1a8>
 80056d2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80056d6:	4770      	bx	lr
 80056d8:	2b00      	cmp	r3, #0
 80056da:	461a      	mov	r2, r3
 80056dc:	da02      	bge.n	80056e4 <__ieee754_logf+0x24>
 80056de:	ee30 7a40 	vsub.f32	s14, s0, s0
 80056e2:	e7f4      	b.n	80056ce <__ieee754_logf+0xe>
 80056e4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80056e8:	db02      	blt.n	80056f0 <__ieee754_logf+0x30>
 80056ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80056ee:	4770      	bx	lr
 80056f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056f4:	bfb8      	it	lt
 80056f6:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800586c <__ieee754_logf+0x1ac>
 80056fa:	485d      	ldr	r0, [pc, #372]	@ (8005870 <__ieee754_logf+0x1b0>)
 80056fc:	bfbe      	ittt	lt
 80056fe:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005702:	f06f 0118 	mvnlt.w	r1, #24
 8005706:	ee17 2a90 	vmovlt	r2, s15
 800570a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800570e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8005712:	4410      	add	r0, r2
 8005714:	bfa8      	it	ge
 8005716:	2100      	movge	r1, #0
 8005718:	3b7f      	subs	r3, #127	@ 0x7f
 800571a:	440b      	add	r3, r1
 800571c:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8005720:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8005724:	4311      	orrs	r1, r2
 8005726:	ee00 1a10 	vmov	s0, r1
 800572a:	4952      	ldr	r1, [pc, #328]	@ (8005874 <__ieee754_logf+0x1b4>)
 800572c:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8005730:	f102 000f 	add.w	r0, r2, #15
 8005734:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005738:	4001      	ands	r1, r0
 800573a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800573e:	bb89      	cbnz	r1, 80057a4 <__ieee754_logf+0xe4>
 8005740:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005748:	d10f      	bne.n	800576a <__ieee754_logf+0xaa>
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 8087 	beq.w	800585e <__ieee754_logf+0x19e>
 8005750:	ee07 3a90 	vmov	s15, r3
 8005754:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8005878 <__ieee754_logf+0x1b8>
 8005758:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800587c <__ieee754_logf+0x1bc>
 800575c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005760:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005764:	eea7 0a87 	vfma.f32	s0, s15, s14
 8005768:	4770      	bx	lr
 800576a:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8005880 <__ieee754_logf+0x1c0>
 800576e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005772:	eee0 7a66 	vfms.f32	s15, s0, s13
 8005776:	ee20 7a00 	vmul.f32	s14, s0, s0
 800577a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800577e:	b913      	cbnz	r3, 8005786 <__ieee754_logf+0xc6>
 8005780:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005784:	4770      	bx	lr
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8005878 <__ieee754_logf+0x1b8>
 800578e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005792:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8005796:	ee37 0a40 	vsub.f32	s0, s14, s0
 800579a:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800587c <__ieee754_logf+0x1bc>
 800579e:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80057a2:	4770      	bx	lr
 80057a4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80057a8:	ee70 7a27 	vadd.f32	s15, s0, s15
 80057ac:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8005884 <__ieee754_logf+0x1c4>
 80057b0:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8005888 <__ieee754_logf+0x1c8>
 80057b4:	4935      	ldr	r1, [pc, #212]	@ (800588c <__ieee754_logf+0x1cc>)
 80057b6:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80057ba:	4411      	add	r1, r2
 80057bc:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80057c0:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80057c4:	430a      	orrs	r2, r1
 80057c6:	2a00      	cmp	r2, #0
 80057c8:	ee07 3a90 	vmov	s15, r3
 80057cc:	ee26 5a06 	vmul.f32	s10, s12, s12
 80057d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80057d4:	ee25 7a05 	vmul.f32	s14, s10, s10
 80057d8:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8005890 <__ieee754_logf+0x1d0>
 80057dc:	eee7 7a25 	vfma.f32	s15, s14, s11
 80057e0:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005894 <__ieee754_logf+0x1d4>
 80057e4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80057e8:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8005898 <__ieee754_logf+0x1d8>
 80057ec:	eee7 7a24 	vfma.f32	s15, s14, s9
 80057f0:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800589c <__ieee754_logf+0x1dc>
 80057f4:	eee7 4a87 	vfma.f32	s9, s15, s14
 80057f8:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80058a0 <__ieee754_logf+0x1e0>
 80057fc:	eee4 7a87 	vfma.f32	s15, s9, s14
 8005800:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005804:	eee5 7a87 	vfma.f32	s15, s11, s14
 8005808:	dd1a      	ble.n	8005840 <__ieee754_logf+0x180>
 800580a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800580e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005812:	ee27 7a00 	vmul.f32	s14, s14, s0
 8005816:	ee77 7a87 	vadd.f32	s15, s15, s14
 800581a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800581e:	b913      	cbnz	r3, 8005826 <__ieee754_logf+0x166>
 8005820:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005824:	e7ac      	b.n	8005780 <__ieee754_logf+0xc0>
 8005826:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8005878 <__ieee754_logf+0x1b8>
 800582a:	eee6 7a86 	vfma.f32	s15, s13, s12
 800582e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005832:	ee37 0a40 	vsub.f32	s0, s14, s0
 8005836:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800587c <__ieee754_logf+0x1bc>
 800583a:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800583e:	4770      	bx	lr
 8005840:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005844:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005848:	b913      	cbnz	r3, 8005850 <__ieee754_logf+0x190>
 800584a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800584e:	4770      	bx	lr
 8005850:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8005878 <__ieee754_logf+0x1b8>
 8005854:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8005858:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800585c:	e7eb      	b.n	8005836 <__ieee754_logf+0x176>
 800585e:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8005868 <__ieee754_logf+0x1a8>
 8005862:	4770      	bx	lr
 8005864:	cc000000 	.word	0xcc000000
 8005868:	00000000 	.word	0x00000000
 800586c:	4c000000 	.word	0x4c000000
 8005870:	004afb20 	.word	0x004afb20
 8005874:	007ffff0 	.word	0x007ffff0
 8005878:	3717f7d1 	.word	0x3717f7d1
 800587c:	3f317180 	.word	0x3f317180
 8005880:	3eaaaaab 	.word	0x3eaaaaab
 8005884:	3e1cd04f 	.word	0x3e1cd04f
 8005888:	3e178897 	.word	0x3e178897
 800588c:	ffcf5c30 	.word	0xffcf5c30
 8005890:	3e638e29 	.word	0x3e638e29
 8005894:	3ecccccd 	.word	0x3ecccccd
 8005898:	3e3a3325 	.word	0x3e3a3325
 800589c:	3e924925 	.word	0x3e924925
 80058a0:	3f2aaaab 	.word	0x3f2aaaab

080058a4 <scalbnf>:
 80058a4:	ee10 3a10 	vmov	r3, s0
 80058a8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80058ac:	d02b      	beq.n	8005906 <scalbnf+0x62>
 80058ae:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80058b2:	d302      	bcc.n	80058ba <scalbnf+0x16>
 80058b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80058b8:	4770      	bx	lr
 80058ba:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80058be:	d123      	bne.n	8005908 <scalbnf+0x64>
 80058c0:	4b24      	ldr	r3, [pc, #144]	@ (8005954 <scalbnf+0xb0>)
 80058c2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8005958 <scalbnf+0xb4>
 80058c6:	4298      	cmp	r0, r3
 80058c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80058cc:	db17      	blt.n	80058fe <scalbnf+0x5a>
 80058ce:	ee10 3a10 	vmov	r3, s0
 80058d2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80058d6:	3a19      	subs	r2, #25
 80058d8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80058dc:	4288      	cmp	r0, r1
 80058de:	dd15      	ble.n	800590c <scalbnf+0x68>
 80058e0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800595c <scalbnf+0xb8>
 80058e4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8005960 <scalbnf+0xbc>
 80058e8:	ee10 3a10 	vmov	r3, s0
 80058ec:	eeb0 7a67 	vmov.f32	s14, s15
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bfb8      	it	lt
 80058f4:	eef0 7a66 	vmovlt.f32	s15, s13
 80058f8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80058fc:	4770      	bx	lr
 80058fe:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005964 <scalbnf+0xc0>
 8005902:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005906:	4770      	bx	lr
 8005908:	0dd2      	lsrs	r2, r2, #23
 800590a:	e7e5      	b.n	80058d8 <scalbnf+0x34>
 800590c:	4410      	add	r0, r2
 800590e:	28fe      	cmp	r0, #254	@ 0xfe
 8005910:	dce6      	bgt.n	80058e0 <scalbnf+0x3c>
 8005912:	2800      	cmp	r0, #0
 8005914:	dd06      	ble.n	8005924 <scalbnf+0x80>
 8005916:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800591a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800591e:	ee00 3a10 	vmov	s0, r3
 8005922:	4770      	bx	lr
 8005924:	f110 0f16 	cmn.w	r0, #22
 8005928:	da09      	bge.n	800593e <scalbnf+0x9a>
 800592a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8005964 <scalbnf+0xc0>
 800592e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8005968 <scalbnf+0xc4>
 8005932:	ee10 3a10 	vmov	r3, s0
 8005936:	eeb0 7a67 	vmov.f32	s14, s15
 800593a:	2b00      	cmp	r3, #0
 800593c:	e7d9      	b.n	80058f2 <scalbnf+0x4e>
 800593e:	3019      	adds	r0, #25
 8005940:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005944:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005948:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800596c <scalbnf+0xc8>
 800594c:	ee07 3a90 	vmov	s15, r3
 8005950:	e7d7      	b.n	8005902 <scalbnf+0x5e>
 8005952:	bf00      	nop
 8005954:	ffff3cb0 	.word	0xffff3cb0
 8005958:	4c000000 	.word	0x4c000000
 800595c:	7149f2ca 	.word	0x7149f2ca
 8005960:	f149f2ca 	.word	0xf149f2ca
 8005964:	0da24260 	.word	0x0da24260
 8005968:	8da24260 	.word	0x8da24260
 800596c:	33000000 	.word	0x33000000

08005970 <floorf>:
 8005970:	ee10 3a10 	vmov	r3, s0
 8005974:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005978:	3a7f      	subs	r2, #127	@ 0x7f
 800597a:	2a16      	cmp	r2, #22
 800597c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005980:	dc2b      	bgt.n	80059da <floorf+0x6a>
 8005982:	2a00      	cmp	r2, #0
 8005984:	da12      	bge.n	80059ac <floorf+0x3c>
 8005986:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80059ec <floorf+0x7c>
 800598a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800598e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005996:	dd06      	ble.n	80059a6 <floorf+0x36>
 8005998:	2b00      	cmp	r3, #0
 800599a:	da24      	bge.n	80059e6 <floorf+0x76>
 800599c:	2900      	cmp	r1, #0
 800599e:	4b14      	ldr	r3, [pc, #80]	@ (80059f0 <floorf+0x80>)
 80059a0:	bf08      	it	eq
 80059a2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80059a6:	ee00 3a10 	vmov	s0, r3
 80059aa:	4770      	bx	lr
 80059ac:	4911      	ldr	r1, [pc, #68]	@ (80059f4 <floorf+0x84>)
 80059ae:	4111      	asrs	r1, r2
 80059b0:	420b      	tst	r3, r1
 80059b2:	d0fa      	beq.n	80059aa <floorf+0x3a>
 80059b4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80059ec <floorf+0x7c>
 80059b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80059bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80059c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c4:	ddef      	ble.n	80059a6 <floorf+0x36>
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bfbe      	ittt	lt
 80059ca:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80059ce:	fa40 f202 	asrlt.w	r2, r0, r2
 80059d2:	189b      	addlt	r3, r3, r2
 80059d4:	ea23 0301 	bic.w	r3, r3, r1
 80059d8:	e7e5      	b.n	80059a6 <floorf+0x36>
 80059da:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80059de:	d3e4      	bcc.n	80059aa <floorf+0x3a>
 80059e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80059e4:	4770      	bx	lr
 80059e6:	2300      	movs	r3, #0
 80059e8:	e7dd      	b.n	80059a6 <floorf+0x36>
 80059ea:	bf00      	nop
 80059ec:	7149f2ca 	.word	0x7149f2ca
 80059f0:	bf800000 	.word	0xbf800000
 80059f4:	007fffff 	.word	0x007fffff

080059f8 <_init>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	bf00      	nop
 80059fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fe:	bc08      	pop	{r3}
 8005a00:	469e      	mov	lr, r3
 8005a02:	4770      	bx	lr

08005a04 <_fini>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr
