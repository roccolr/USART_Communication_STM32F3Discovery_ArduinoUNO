
Communic_DMA_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005818  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  080059a0  080059a0  000069a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dac  08005dac  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005dac  08005dac  00007060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005dac  08005dac  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dac  08005dac  00006dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005db0  08005db0  00006db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005db4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00007a50  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20007ab0  20007ab0  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e12a  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ae  00000000  00000000  000151ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b0  00000000  00000000  00017268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000769  00000000  00000000  00017c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d756  00000000  00000000  00018381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d4c3  00000000  00000000  00035ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b09c7  00000000  00000000  00042f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000009c  00000000  00000000  000f3961  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b1c  00000000  00000000  000f3a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a8  00000000  00000000  000f651c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005988 	.word	0x08005988

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08005988 	.word	0x08005988

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	f6ad 2d18 	subw	sp, sp, #2584	@ 0xa18
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fd06 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f92e 	bl	8000434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 fa04 	bl	80005e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80001dc:	f000 f9dc 	bl	8000598 <MX_DMA_Init>
  MX_USB_PCD_Init();
 80001e0:	f000 f9b8 	bl	8000554 <MX_USB_PCD_Init>
  MX_UART4_Init();
 80001e4:	f000 f986 	bl	80004f4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /*
   * FASE 0 - RICEZIONE METADATI
   */
  HAL_UART_Receive_DMA(&huart4, metadata, 8);
 80001e8:	2208      	movs	r2, #8
 80001ea:	4985      	ldr	r1, [pc, #532]	@ (8000400 <main+0x238>)
 80001ec:	4885      	ldr	r0, [pc, #532]	@ (8000404 <main+0x23c>)
 80001ee:	f003 f95f 	bl	80034b0 <HAL_UART_Receive_DMA>
  while(metadati_ricevuti == 0){
 80001f2:	bf00      	nop
 80001f4:	4b84      	ldr	r3, [pc, #528]	@ (8000408 <main+0x240>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d0fa      	beq.n	80001f4 <main+0x2c>

  /*
   * PRIMA FASE - RICEZIONE DI TUTTA LA PORZIONE DI SEGNALE QUANTIZZATA DESTINATA AL NODO
   * La ricezione avviene mediante DMA e USART
   */
  HAL_UART_Receive_DMA(&huart4, signal, N_FINESTRE*N_CAMPIONI);
 80001fe:	f44f 5252 	mov.w	r2, #13440	@ 0x3480
 8000202:	4982      	ldr	r1, [pc, #520]	@ (800040c <main+0x244>)
 8000204:	487f      	ldr	r0, [pc, #508]	@ (8000404 <main+0x23c>)
 8000206:	f003 f953 	bl	80034b0 <HAL_UART_Receive_DMA>
  while(dati_ricevuti == 0){
 800020a:	bf00      	nop
 800020c:	4b80      	ldr	r3, [pc, #512]	@ (8000410 <main+0x248>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	b2db      	uxtb	r3, r3
 8000212:	2b00      	cmp	r3, #0
 8000214:	d0fa      	beq.n	800020c <main+0x44>

  }
  //LED ARANCIONE -> Dati ricevuti

//  //calcolo massimo e minimo
  massimo = (int32_t)(metadata[0] | metadata[1]<<8 | metadata[2]<<16 | metadata[3]<<24);
 8000216:	4b7a      	ldr	r3, [pc, #488]	@ (8000400 <main+0x238>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	461a      	mov	r2, r3
 800021c:	4b78      	ldr	r3, [pc, #480]	@ (8000400 <main+0x238>)
 800021e:	785b      	ldrb	r3, [r3, #1]
 8000220:	021b      	lsls	r3, r3, #8
 8000222:	431a      	orrs	r2, r3
 8000224:	4b76      	ldr	r3, [pc, #472]	@ (8000400 <main+0x238>)
 8000226:	789b      	ldrb	r3, [r3, #2]
 8000228:	041b      	lsls	r3, r3, #16
 800022a:	431a      	orrs	r2, r3
 800022c:	4b74      	ldr	r3, [pc, #464]	@ (8000400 <main+0x238>)
 800022e:	78db      	ldrb	r3, [r3, #3]
 8000230:	061b      	lsls	r3, r3, #24
 8000232:	4313      	orrs	r3, r2
 8000234:	4a77      	ldr	r2, [pc, #476]	@ (8000414 <main+0x24c>)
 8000236:	6013      	str	r3, [r2, #0]
  minimo = (int32_t)(metadata[4] | metadata[5]<<8 | metadata[6]<<16 | metadata[7]<<24);
 8000238:	4b71      	ldr	r3, [pc, #452]	@ (8000400 <main+0x238>)
 800023a:	791b      	ldrb	r3, [r3, #4]
 800023c:	461a      	mov	r2, r3
 800023e:	4b70      	ldr	r3, [pc, #448]	@ (8000400 <main+0x238>)
 8000240:	795b      	ldrb	r3, [r3, #5]
 8000242:	021b      	lsls	r3, r3, #8
 8000244:	431a      	orrs	r2, r3
 8000246:	4b6e      	ldr	r3, [pc, #440]	@ (8000400 <main+0x238>)
 8000248:	799b      	ldrb	r3, [r3, #6]
 800024a:	041b      	lsls	r3, r3, #16
 800024c:	431a      	orrs	r2, r3
 800024e:	4b6c      	ldr	r3, [pc, #432]	@ (8000400 <main+0x238>)
 8000250:	79db      	ldrb	r3, [r3, #7]
 8000252:	061b      	lsls	r3, r3, #24
 8000254:	4313      	orrs	r3, r2
 8000256:	4a70      	ldr	r2, [pc, #448]	@ (8000418 <main+0x250>)
 8000258:	6013      	str	r3, [r2, #0]

  /*
   * FASE 2: Ad ogni elaborazione, iniziamo un handshake con il master e invieremo il dato
   *
   */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // alziamo ACK la prima volta
 800025a:	2201      	movs	r2, #1
 800025c:	2101      	movs	r1, #1
 800025e:	486f      	ldr	r0, [pc, #444]	@ (800041c <main+0x254>)
 8000260:	f001 fb70 	bl	8001944 <HAL_GPIO_WritePin>


  for(int i=0; i<N_FINESTRE; i++){
 8000264:	2300      	movs	r3, #0
 8000266:	f8c7 3a14 	str.w	r3, [r7, #2580]	@ 0xa14
 800026a:	e0b0      	b.n	80003ce <main+0x206>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET); //inizio elaborazione
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000272:	486b      	ldr	r0, [pc, #428]	@ (8000420 <main+0x258>)
 8000274:	f001 fb66 	bl	8001944 <HAL_GPIO_WritePin>

	  // CALCOLI FFT
	  Complesso x[N_CAMPIONI];
	  Complesso X[N_CAMPIONI];
	  float magnitude[N_CAMPIONI];
	  for(int j=0; j<N_CAMPIONI; j++){
 8000278:	2300      	movs	r3, #0
 800027a:	f8c7 3a10 	str.w	r3, [r7, #2576]	@ 0xa10
 800027e:	e03d      	b.n	80002fc <main+0x134>
		  x[j].re = ((float)signal[i*N_CAMPIONI + j]) / 255.0f * (massimo - minimo) + minimo;
 8000280:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	@ 0xa14
 8000284:	01da      	lsls	r2, r3, #7
 8000286:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	@ 0xa10
 800028a:	4413      	add	r3, r2
 800028c:	4a5f      	ldr	r2, [pc, #380]	@ (800040c <main+0x244>)
 800028e:	5cd3      	ldrb	r3, [r2, r3]
 8000290:	ee07 3a90 	vmov	s15, r3
 8000294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000298:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8000424 <main+0x25c>
 800029c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80002a0:	4b5c      	ldr	r3, [pc, #368]	@ (8000414 <main+0x24c>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b5c      	ldr	r3, [pc, #368]	@ (8000418 <main+0x250>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	1ad3      	subs	r3, r2, r3
 80002aa:	ee07 3a90 	vmov	s15, r3
 80002ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80002b6:	4b58      	ldr	r3, [pc, #352]	@ (8000418 <main+0x250>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	ee07 3a90 	vmov	s15, r3
 80002be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002c6:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 80002ca:	f6a3 020c 	subw	r2, r3, #2060	@ 0x80c
 80002ce:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	@ 0xa10
 80002d2:	00db      	lsls	r3, r3, #3
 80002d4:	4413      	add	r3, r2
 80002d6:	edc3 7a00 	vstr	s15, [r3]
		  x[j].im = 0.0f;
 80002da:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 80002de:	f6a3 020c 	subw	r2, r3, #2060	@ 0x80c
 80002e2:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	@ 0xa10
 80002e6:	00db      	lsls	r3, r3, #3
 80002e8:	4413      	add	r3, r2
 80002ea:	3304      	adds	r3, #4
 80002ec:	f04f 0200 	mov.w	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
	  for(int j=0; j<N_CAMPIONI; j++){
 80002f2:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	@ 0xa10
 80002f6:	3301      	adds	r3, #1
 80002f8:	f8c7 3a10 	str.w	r3, [r7, #2576]	@ 0xa10
 80002fc:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	@ 0xa10
 8000300:	2b7f      	cmp	r3, #127	@ 0x7f
 8000302:	ddbd      	ble.n	8000280 <main+0xb8>
	  }
	  arm_fft(x,X,N_CAMPIONI);
 8000304:	f207 610c 	addw	r1, r7, #1548	@ 0x60c
 8000308:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 800030c:	2280      	movs	r2, #128	@ 0x80
 800030e:	4618      	mov	r0, r3
 8000310:	f004 faa4 	bl	800485c <arm_fft>
	  fft_to_spectrogram(X, magnitude, N_CAMPIONI, -65.0f);	// [0,1]
 8000314:	f107 010c 	add.w	r1, r7, #12
 8000318:	f207 630c 	addw	r3, r7, #1548	@ 0x60c
 800031c:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8000428 <main+0x260>
 8000320:	2280      	movs	r2, #128	@ 0x80
 8000322:	4618      	mov	r0, r3
 8000324:	f004 fb40 	bl	80049a8 <fft_to_spectrogram>
	  for(int l=0; l<N_CAMPIONI; l++){
 8000328:	2300      	movs	r3, #0
 800032a:	f8c7 3a0c 	str.w	r3, [r7, #2572]	@ 0xa0c
 800032e:	e01e      	b.n	800036e <main+0x1a6>
		  indici[l] = (uint8_t)(magnitude[l]*255);
 8000330:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000334:	f6a3 220c 	subw	r2, r3, #2572	@ 0xa0c
 8000338:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	4413      	add	r3, r2
 8000340:	edd3 7a00 	vldr	s15, [r3]
 8000344:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8000424 <main+0x25c>
 8000348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800034c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000350:	edc7 7a01 	vstr	s15, [r7, #4]
 8000354:	793b      	ldrb	r3, [r7, #4]
 8000356:	b2d9      	uxtb	r1, r3
 8000358:	4a34      	ldr	r2, [pc, #208]	@ (800042c <main+0x264>)
 800035a:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 800035e:	4413      	add	r3, r2
 8000360:	460a      	mov	r2, r1
 8000362:	701a      	strb	r2, [r3, #0]
	  for(int l=0; l<N_CAMPIONI; l++){
 8000364:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8000368:	3301      	adds	r3, #1
 800036a:	f8c7 3a0c 	str.w	r3, [r7, #2572]	@ 0xa0c
 800036e:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8000372:	2b7f      	cmp	r3, #127	@ 0x7f
 8000374:	dddc      	ble.n	8000330 <main+0x168>
	  }


	  // HANDSHAKE
	  while((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) || (trasmissione_completata==0)){
 8000376:	2102      	movs	r1, #2
 8000378:	4828      	ldr	r0, [pc, #160]	@ (800041c <main+0x254>)
 800037a:	f001 facb 	bl	8001914 <HAL_GPIO_ReadPin>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d0f8      	beq.n	8000376 <main+0x1ae>
 8000384:	4b2a      	ldr	r3, [pc, #168]	@ (8000430 <main+0x268>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	b2db      	uxtb	r3, r3
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f3      	beq.n	8000376 <main+0x1ae>

	  }
	  trasmissione_completata = 0;
 800038e:	4b28      	ldr	r3, [pc, #160]	@ (8000430 <main+0x268>)
 8000390:	2200      	movs	r2, #0
 8000392:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // ACK
 8000394:	2201      	movs	r2, #1
 8000396:	2101      	movs	r1, #1
 8000398:	4820      	ldr	r0, [pc, #128]	@ (800041c <main+0x254>)
 800039a:	f001 fad3 	bl	8001944 <HAL_GPIO_WritePin>
	  HAL_UART_Transmit_DMA(&huart4, indici, N_CAMPIONI);
 800039e:	2280      	movs	r2, #128	@ 0x80
 80003a0:	4922      	ldr	r1, [pc, #136]	@ (800042c <main+0x264>)
 80003a2:	4818      	ldr	r0, [pc, #96]	@ (8000404 <main+0x23c>)
 80003a4:	f003 f808 	bl	80033b8 <HAL_UART_Transmit_DMA>
//	  HAL_UART_Transmit(&huart4, indici, N_CAMPIONI, HAL_MAX_DELAY);
	  HAL_Delay(1);
 80003a8:	2001      	movs	r0, #1
 80003aa:	f000 fc7f 	bl	8000cac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2101      	movs	r1, #1
 80003b2:	481a      	ldr	r0, [pc, #104]	@ (800041c <main+0x254>)
 80003b4:	f001 fac6 	bl	8001944 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET); // fine elaborazione
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003be:	4818      	ldr	r0, [pc, #96]	@ (8000420 <main+0x258>)
 80003c0:	f001 fac0 	bl	8001944 <HAL_GPIO_WritePin>
  for(int i=0; i<N_FINESTRE; i++){
 80003c4:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	@ 0xa14
 80003c8:	3301      	adds	r3, #1
 80003ca:	f8c7 3a14 	str.w	r3, [r7, #2580]	@ 0xa14
 80003ce:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	@ 0xa14
 80003d2:	2b68      	cmp	r3, #104	@ 0x68
 80003d4:	f77f af4a 	ble.w	800026c <main+0xa4>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003de:	4810      	ldr	r0, [pc, #64]	@ (8000420 <main+0x258>)
 80003e0:	f001 fab0 	bl	8001944 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80003e4:	2064      	movs	r0, #100	@ 0x64
 80003e6:	f000 fc61 	bl	8000cac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003f0:	480b      	ldr	r0, [pc, #44]	@ (8000420 <main+0x258>)
 80003f2:	f001 faa7 	bl	8001944 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80003f6:	2064      	movs	r0, #100	@ 0x64
 80003f8:	f000 fc58 	bl	8000cac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80003fc:	bf00      	nop
 80003fe:	e7eb      	b.n	80003d8 <main+0x210>
 8000400:	200038e0 	.word	0x200038e0
 8000404:	2000007c 	.word	0x2000007c
 8000408:	20003970 	.word	0x20003970
 800040c:	20000460 	.word	0x20000460
 8000410:	20003971 	.word	0x20003971
 8000414:	200038e8 	.word	0x200038e8
 8000418:	200038ec 	.word	0x200038ec
 800041c:	48000400 	.word	0x48000400
 8000420:	48001000 	.word	0x48001000
 8000424:	437f0000 	.word	0x437f0000
 8000428:	c2820000 	.word	0xc2820000
 800042c:	200038f0 	.word	0x200038f0
 8000430:	20000000 	.word	0x20000000

08000434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b09e      	sub	sp, #120	@ 0x78
 8000438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800043e:	2228      	movs	r2, #40	@ 0x28
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f004 fb5a 	bl	8004afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000448:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000458:	463b      	mov	r3, r7
 800045a:	223c      	movs	r2, #60	@ 0x3c
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f004 fb4c 	bl	8004afc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000464:	2301      	movs	r3, #1
 8000466:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000468:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800046c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000472:	2301      	movs	r3, #1
 8000474:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000476:	2302      	movs	r3, #2
 8000478:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800047a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800047e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000480:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000484:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000486:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800048a:	4618      	mov	r0, r3
 800048c:	f001 fb3a 	bl	8001b04 <HAL_RCC_OscConfig>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000496:	f000 f9dd 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049a:	230f      	movs	r3, #15
 800049c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049e:	2302      	movs	r3, #2
 80004a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004b4:	2101      	movs	r1, #1
 80004b6:	4618      	mov	r0, r3
 80004b8:	f002 fb32 	bl	8002b20 <HAL_RCC_ClockConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004c2:	f000 f9c7 	bl	8000854 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART4;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <SystemClock_Config+0xbc>)
 80004c8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80004ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80004d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d4:	463b      	mov	r3, r7
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 fd34 	bl	8002f44 <HAL_RCCEx_PeriphCLKConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004e2:	f000 f9b7 	bl	8000854 <Error_Handler>
  }
}
 80004e6:	bf00      	nop
 80004e8:	3778      	adds	r7, #120	@ 0x78
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	00020008 	.word	0x00020008

080004f4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80004f8:	4b14      	ldr	r3, [pc, #80]	@ (800054c <MX_UART4_Init+0x58>)
 80004fa:	4a15      	ldr	r2, [pc, #84]	@ (8000550 <MX_UART4_Init+0x5c>)
 80004fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80004fe:	4b13      	ldr	r3, [pc, #76]	@ (800054c <MX_UART4_Init+0x58>)
 8000500:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000504:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000506:	4b11      	ldr	r3, [pc, #68]	@ (800054c <MX_UART4_Init+0x58>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800050c:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <MX_UART4_Init+0x58>)
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000512:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <MX_UART4_Init+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000518:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <MX_UART4_Init+0x58>)
 800051a:	220c      	movs	r2, #12
 800051c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051e:	4b0b      	ldr	r3, [pc, #44]	@ (800054c <MX_UART4_Init+0x58>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000524:	4b09      	ldr	r3, [pc, #36]	@ (800054c <MX_UART4_Init+0x58>)
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800052a:	4b08      	ldr	r3, [pc, #32]	@ (800054c <MX_UART4_Init+0x58>)
 800052c:	2200      	movs	r2, #0
 800052e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000530:	4b06      	ldr	r3, [pc, #24]	@ (800054c <MX_UART4_Init+0x58>)
 8000532:	2200      	movs	r2, #0
 8000534:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000536:	4805      	ldr	r0, [pc, #20]	@ (800054c <MX_UART4_Init+0x58>)
 8000538:	f002 feb2 	bl	80032a0 <HAL_UART_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000542:	f000 f987 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	2000007c 	.word	0x2000007c
 8000550:	40004c00 	.word	0x40004c00

08000554 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000558:	4b0d      	ldr	r3, [pc, #52]	@ (8000590 <MX_USB_PCD_Init+0x3c>)
 800055a:	4a0e      	ldr	r2, [pc, #56]	@ (8000594 <MX_USB_PCD_Init+0x40>)
 800055c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800055e:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <MX_USB_PCD_Init+0x3c>)
 8000560:	2208      	movs	r2, #8
 8000562:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000564:	4b0a      	ldr	r3, [pc, #40]	@ (8000590 <MX_USB_PCD_Init+0x3c>)
 8000566:	2202      	movs	r2, #2
 8000568:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800056a:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <MX_USB_PCD_Init+0x3c>)
 800056c:	2202      	movs	r2, #2
 800056e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000570:	4b07      	ldr	r3, [pc, #28]	@ (8000590 <MX_USB_PCD_Init+0x3c>)
 8000572:	2200      	movs	r2, #0
 8000574:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000576:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <MX_USB_PCD_Init+0x3c>)
 8000578:	2200      	movs	r2, #0
 800057a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800057c:	4804      	ldr	r0, [pc, #16]	@ (8000590 <MX_USB_PCD_Init+0x3c>)
 800057e:	f001 f9f9 	bl	8001974 <HAL_PCD_Init>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000588:	f000 f964 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000018c 	.word	0x2000018c
 8000594:	40005c00 	.word	0x40005c00

08000598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800059e:	4b10      	ldr	r3, [pc, #64]	@ (80005e0 <MX_DMA_Init+0x48>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a0f      	ldr	r2, [pc, #60]	@ (80005e0 <MX_DMA_Init+0x48>)
 80005a4:	f043 0302 	orr.w	r3, r3, #2
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b0d      	ldr	r3, [pc, #52]	@ (80005e0 <MX_DMA_Init+0x48>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f003 0302 	and.w	r3, r3, #2
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	203a      	movs	r0, #58	@ 0x3a
 80005bc:	f000 fc99 	bl	8000ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80005c0:	203a      	movs	r0, #58	@ 0x3a
 80005c2:	f000 fcb2 	bl	8000f2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	203c      	movs	r0, #60	@ 0x3c
 80005cc:	f000 fc91 	bl	8000ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80005d0:	203c      	movs	r0, #60	@ 0x3c
 80005d2:	f000 fcaa 	bl	8000f2a <HAL_NVIC_EnableIRQ>

}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	@ 0x30
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005fa:	4b6e      	ldr	r3, [pc, #440]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a6d      	ldr	r2, [pc, #436]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 8000600:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b6b      	ldr	r3, [pc, #428]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800060e:	61bb      	str	r3, [r7, #24]
 8000610:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b68      	ldr	r3, [pc, #416]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	4a67      	ldr	r2, [pc, #412]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 8000618:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800061c:	6153      	str	r3, [r2, #20]
 800061e:	4b65      	ldr	r3, [pc, #404]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062a:	4b62      	ldr	r3, [pc, #392]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a61      	ldr	r2, [pc, #388]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 8000630:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	4b5f      	ldr	r3, [pc, #380]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b5c      	ldr	r3, [pc, #368]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a5b      	ldr	r2, [pc, #364]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b59      	ldr	r3, [pc, #356]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	4b56      	ldr	r3, [pc, #344]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a55      	ldr	r2, [pc, #340]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 8000660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b53      	ldr	r3, [pc, #332]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000672:	4b50      	ldr	r3, [pc, #320]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a4f      	ldr	r2, [pc, #316]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 8000678:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	4b4d      	ldr	r3, [pc, #308]	@ (80007b4 <MX_GPIO_Init+0x1d0>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800068a:	2200      	movs	r2, #0
 800068c:	f645 4108 	movw	r1, #23560	@ 0x5c08
 8000690:	4849      	ldr	r0, [pc, #292]	@ (80007b8 <MX_GPIO_Init+0x1d4>)
 8000692:	f001 f957 	bl	8001944 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2101      	movs	r1, #1
 800069a:	4848      	ldr	r0, [pc, #288]	@ (80007bc <MX_GPIO_Init+0x1d8>)
 800069c:	f001 f952 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006a6:	4846      	ldr	r0, [pc, #280]	@ (80007c0 <MX_GPIO_Init+0x1dc>)
 80006a8:	f001 f94c 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT4_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 80006ac:	2327      	movs	r3, #39	@ 0x27
 80006ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006b0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80006b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	483d      	ldr	r0, [pc, #244]	@ (80007b8 <MX_GPIO_Init+0x1d4>)
 80006c2:	f000 fed1 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE10 PE11 PE12
                           PE14 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80006c6:	f645 4308 	movw	r3, #23560	@ 0x5c08
 80006ca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	4836      	ldr	r0, [pc, #216]	@ (80007b8 <MX_GPIO_Init+0x1d4>)
 80006e0:	f000 fec2 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006e4:	2301      	movs	r3, #1
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fa:	f000 feb5 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80006fe:	23e0      	movs	r3, #224	@ 0xe0
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800070e:	2305      	movs	r3, #5
 8000710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800071c:	f000 fea4 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000720:	2310      	movs	r3, #16
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4824      	ldr	r0, [pc, #144]	@ (80007c4 <MX_GPIO_Init+0x1e0>)
 8000734:	f000 fe98 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000738:	2301      	movs	r3, #1
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4619      	mov	r1, r3
 800074e:	481b      	ldr	r0, [pc, #108]	@ (80007bc <MX_GPIO_Init+0x1d8>)
 8000750:	f000 fe8a 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	4815      	ldr	r0, [pc, #84]	@ (80007bc <MX_GPIO_Init+0x1d8>)
 8000768:	f000 fe7e 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800076c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	480e      	ldr	r0, [pc, #56]	@ (80007c0 <MX_GPIO_Init+0x1dc>)
 8000786:	f000 fe6f 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800078a:	23c0      	movs	r3, #192	@ 0xc0
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800078e:	2312      	movs	r3, #18
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000792:	2301      	movs	r3, #1
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800079a:	2304      	movs	r3, #4
 800079c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_GPIO_Init+0x1d8>)
 80007a6:	f000 fe5f 	bl	8001468 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007aa:	bf00      	nop
 80007ac:	3730      	adds	r7, #48	@ 0x30
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48001000 	.word	0x48001000
 80007bc:	48000400 	.word	0x48000400
 80007c0:	48000c00 	.word	0x48000c00
 80007c4:	48000800 	.word	0x48000800

080007c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	if(metadati_ricevuti == 0){
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <HAL_UART_RxCpltCallback+0x60>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d109      	bne.n	80007ee <HAL_UART_RxCpltCallback+0x26>
		metadati_ricevuti = 1;
 80007da:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <HAL_UART_RxCpltCallback+0x60>)
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007e6:	4811      	ldr	r0, [pc, #68]	@ (800082c <HAL_UART_RxCpltCallback+0x64>)
 80007e8:	f001 f8ac 	bl	8001944 <HAL_GPIO_WritePin>
	    }
	    if (HAL_UART_Init(huart) != HAL_OK) {
	        Error_Handler(); // Handle re-initialization error
	    }
	}
}
 80007ec:	e018      	b.n	8000820 <HAL_UART_RxCpltCallback+0x58>
		dati_ricevuti = 1;
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <HAL_UART_RxCpltCallback+0x68>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007fa:	480c      	ldr	r0, [pc, #48]	@ (800082c <HAL_UART_RxCpltCallback+0x64>)
 80007fc:	f001 f8a2 	bl	8001944 <HAL_GPIO_WritePin>
	    if (HAL_UART_DeInit(huart) != HAL_OK) {
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f002 fd9b 	bl	800333c <HAL_UART_DeInit>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <HAL_UART_RxCpltCallback+0x48>
	        Error_Handler(); // Handle de-initialization error
 800080c:	f000 f822 	bl	8000854 <Error_Handler>
	    if (HAL_UART_Init(huart) != HAL_OK) {
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f002 fd45 	bl	80032a0 <HAL_UART_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <HAL_UART_RxCpltCallback+0x58>
	        Error_Handler(); // Handle re-initialization error
 800081c:	f000 f81a 	bl	8000854 <Error_Handler>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20003970 	.word	0x20003970
 800082c:	48001000 	.word	0x48001000
 8000830:	20003971 	.word	0x20003971

08000834 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	trasmissione_completata = 1;
 800083c:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <HAL_UART_TxCpltCallback+0x1c>)
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]

//	HAL_Delay(500);
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000000 	.word	0x20000000

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <Error_Handler+0x8>

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <HAL_MspInit+0x44>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	4a0e      	ldr	r2, [pc, #56]	@ (80008a4 <HAL_MspInit+0x44>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6193      	str	r3, [r2, #24]
 8000872:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <HAL_MspInit+0x44>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <HAL_MspInit+0x44>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <HAL_MspInit+0x44>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000888:	61d3      	str	r3, [r2, #28]
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <HAL_MspInit+0x44>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000896:	2007      	movs	r0, #7
 8000898:	f000 fb20 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a42      	ldr	r2, [pc, #264]	@ (80009d0 <HAL_UART_MspInit+0x128>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d17e      	bne.n	80009c8 <HAL_UART_MspInit+0x120>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80008ca:	4b42      	ldr	r3, [pc, #264]	@ (80009d4 <HAL_UART_MspInit+0x12c>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	4a41      	ldr	r2, [pc, #260]	@ (80009d4 <HAL_UART_MspInit+0x12c>)
 80008d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008d4:	61d3      	str	r3, [r2, #28]
 80008d6:	4b3f      	ldr	r3, [pc, #252]	@ (80009d4 <HAL_UART_MspInit+0x12c>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b3c      	ldr	r3, [pc, #240]	@ (80009d4 <HAL_UART_MspInit+0x12c>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a3b      	ldr	r2, [pc, #236]	@ (80009d4 <HAL_UART_MspInit+0x12c>)
 80008e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	4b39      	ldr	r3, [pc, #228]	@ (80009d4 <HAL_UART_MspInit+0x12c>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800090c:	2305      	movs	r3, #5
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	4830      	ldr	r0, [pc, #192]	@ (80009d8 <HAL_UART_MspInit+0x130>)
 8000918:	f000 fda6 	bl	8001468 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 800091c:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <HAL_UART_MspInit+0x134>)
 800091e:	4a30      	ldr	r2, [pc, #192]	@ (80009e0 <HAL_UART_MspInit+0x138>)
 8000920:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000922:	4b2e      	ldr	r3, [pc, #184]	@ (80009dc <HAL_UART_MspInit+0x134>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000928:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <HAL_UART_MspInit+0x134>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800092e:	4b2b      	ldr	r3, [pc, #172]	@ (80009dc <HAL_UART_MspInit+0x134>)
 8000930:	2280      	movs	r2, #128	@ 0x80
 8000932:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000934:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <HAL_UART_MspInit+0x134>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800093a:	4b28      	ldr	r3, [pc, #160]	@ (80009dc <HAL_UART_MspInit+0x134>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000940:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <HAL_UART_MspInit+0x134>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000946:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <HAL_UART_MspInit+0x134>)
 8000948:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800094c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800094e:	4823      	ldr	r0, [pc, #140]	@ (80009dc <HAL_UART_MspInit+0x134>)
 8000950:	f000 fb13 	bl	8000f7a <HAL_DMA_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 800095a:	f7ff ff7b 	bl	8000854 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a1e      	ldr	r2, [pc, #120]	@ (80009dc <HAL_UART_MspInit+0x134>)
 8000962:	675a      	str	r2, [r3, #116]	@ 0x74
 8000964:	4a1d      	ldr	r2, [pc, #116]	@ (80009dc <HAL_UART_MspInit+0x134>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6253      	str	r3, [r2, #36]	@ 0x24

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel5;
 800096a:	4b1e      	ldr	r3, [pc, #120]	@ (80009e4 <HAL_UART_MspInit+0x13c>)
 800096c:	4a1e      	ldr	r2, [pc, #120]	@ (80009e8 <HAL_UART_MspInit+0x140>)
 800096e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000970:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <HAL_UART_MspInit+0x13c>)
 8000972:	2210      	movs	r2, #16
 8000974:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000976:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <HAL_UART_MspInit+0x13c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800097c:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <HAL_UART_MspInit+0x13c>)
 800097e:	2280      	movs	r2, #128	@ 0x80
 8000980:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000982:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <HAL_UART_MspInit+0x13c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000988:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <HAL_UART_MspInit+0x13c>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800098e:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <HAL_UART_MspInit+0x13c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000994:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <HAL_UART_MspInit+0x13c>)
 8000996:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800099a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800099c:	4811      	ldr	r0, [pc, #68]	@ (80009e4 <HAL_UART_MspInit+0x13c>)
 800099e:	f000 faec 	bl	8000f7a <HAL_DMA_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 80009a8:	f7ff ff54 	bl	8000854 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a0d      	ldr	r2, [pc, #52]	@ (80009e4 <HAL_UART_MspInit+0x13c>)
 80009b0:	671a      	str	r2, [r3, #112]	@ 0x70
 80009b2:	4a0c      	ldr	r2, [pc, #48]	@ (80009e4 <HAL_UART_MspInit+0x13c>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	2034      	movs	r0, #52	@ 0x34
 80009be:	f000 fa98 	bl	8000ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80009c2:	2034      	movs	r0, #52	@ 0x34
 80009c4:	f000 fab1 	bl	8000f2a <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	@ 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40004c00 	.word	0x40004c00
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000800 	.word	0x48000800
 80009dc:	20000104 	.word	0x20000104
 80009e0:	40020430 	.word	0x40020430
 80009e4:	20000148 	.word	0x20000148
 80009e8:	40020458 	.word	0x40020458

080009ec <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000a38 <HAL_UART_MspDeInit+0x4c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d117      	bne.n	8000a2e <HAL_UART_MspDeInit+0x42>
  {
    /* USER CODE BEGIN UART4_MspDeInit 0 */

    /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80009fe:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <HAL_UART_MspDeInit+0x50>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	4a0e      	ldr	r2, [pc, #56]	@ (8000a3c <HAL_UART_MspDeInit+0x50>)
 8000a04:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000a08:	61d3      	str	r3, [r2, #28]

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8000a0a:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000a0e:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <HAL_UART_MspDeInit+0x54>)
 8000a10:	f000 fea4 	bl	800175c <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 faf5 	bl	8001008 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 faf0 	bl	8001008 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8000a28:	2034      	movs	r0, #52	@ 0x34
 8000a2a:	f000 fa8c 	bl	8000f46 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN UART4_MspDeInit 1 */

    /* USER CODE END UART4_MspDeInit 1 */
  }

}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40004c00 	.word	0x40004c00
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	48000800 	.word	0x48000800

08000a44 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	@ 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a18      	ldr	r2, [pc, #96]	@ (8000ac4 <HAL_PCD_MspInit+0x80>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d129      	bne.n	8000aba <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <HAL_PCD_MspInit+0x84>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a17      	ldr	r2, [pc, #92]	@ (8000ac8 <HAL_PCD_MspInit+0x84>)
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a70:	6153      	str	r3, [r2, #20]
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <HAL_PCD_MspInit+0x84>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000a7e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a90:	230e      	movs	r3, #14
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9e:	f000 fce3 	bl	8001468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <HAL_PCD_MspInit+0x84>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	4a08      	ldr	r2, [pc, #32]	@ (8000ac8 <HAL_PCD_MspInit+0x84>)
 8000aa8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000aac:	61d3      	str	r3, [r2, #28]
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_PCD_MspInit+0x84>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	@ 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40005c00 	.word	0x40005c00
 8000ac8:	40021000 	.word	0x40021000

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b22:	f000 f8a3 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b30:	4802      	ldr	r0, [pc, #8]	@ (8000b3c <UART4_IRQHandler+0x10>)
 8000b32:	f002 fd01 	bl	8003538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000007c 	.word	0x2000007c

08000b40 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <DMA2_Channel3_IRQHandler+0x10>)
 8000b46:	f000 fb82 	bl	800124e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000104 	.word	0x20000104

08000b54 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000b58:	4802      	ldr	r0, [pc, #8]	@ (8000b64 <DMA2_Channel5_IRQHandler+0x10>)
 8000b5a:	f000 fb78 	bl	800124e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000148 	.word	0x20000148

08000b68 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b90:	f7ff ffea 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	@ (8000bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <LoopForever+0xe>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd8 <LoopForever+0x16>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bba:	f003 ffad 	bl	8004b18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bbe:	f7ff fb03 	bl	80001c8 <main>

08000bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bd0:	08005db4 	.word	0x08005db4
  ldr r2, =_sbss
 8000bd4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bd8:	20007ab0 	.word	0x20007ab0

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <HAL_Init+0x28>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	@ (8000c08 <HAL_Init+0x28>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f973 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 f808 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff fe30 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40022000 	.word	0x40022000

08000c0c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c14:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <HAL_InitTick+0x54>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <HAL_InitTick+0x58>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f999 	bl	8000f62 <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00e      	b.n	8000c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d80a      	bhi.n	8000c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f000 f953 	bl	8000ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4a06      	ldr	r2, [pc, #24]	@ (8000c68 <HAL_InitTick+0x5c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000004 	.word	0x20000004
 8000c64:	2000000c 	.word	0x2000000c
 8000c68:	20000008 	.word	0x20000008

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_IncTick+0x20>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <HAL_IncTick+0x24>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a04      	ldr	r2, [pc, #16]	@ (8000c90 <HAL_IncTick+0x24>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	2000000c 	.word	0x2000000c
 8000c90:	20003974 	.word	0x20003974

08000c94 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c98:	4b03      	ldr	r3, [pc, #12]	@ (8000ca8 <HAL_GetTick+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20003974 	.word	0x20003974

08000cac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff ffee 	bl	8000c94 <HAL_GetTick>
 8000cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc4:	d005      	beq.n	8000cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <HAL_Delay+0x44>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cd2:	bf00      	nop
 8000cd4:	f7ff ffde 	bl	8000c94 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d8f7      	bhi.n	8000cd4 <HAL_Delay+0x28>
  {
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000000c 	.word	0x2000000c

08000cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d04:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d26:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d40:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <__NVIC_GetPriorityGrouping+0x18>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 0307 	and.w	r3, r3, #7
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	db0b      	blt.n	8000d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f003 021f 	and.w	r2, r3, #31
 8000d70:	4907      	ldr	r1, [pc, #28]	@ (8000d90 <__NVIC_EnableIRQ+0x38>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	2001      	movs	r0, #1
 8000d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000e100 	.word	0xe000e100

08000d94 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db12      	blt.n	8000dcc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	490a      	ldr	r1, [pc, #40]	@ (8000dd8 <__NVIC_DisableIRQ+0x44>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	3320      	adds	r3, #32
 8000dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc0:	f3bf 8f4f 	dsb	sy
}
 8000dc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dc6:	f3bf 8f6f 	isb	sy
}
 8000dca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	@ (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	@ (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	@ 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	@ 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f7ff ff8e 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff05 	bl	8000cf4 <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff1a 	bl	8000d3c <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ff8e 	bl	8000e30 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff5d 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff0d 	bl	8000d58 <__NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff1d 	bl	8000d94 <__NVIC_DisableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ff94 	bl	8000e98 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e037      	b.n	8001000 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2202      	movs	r2, #2
 8000f94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000fa6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000faa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 fa04 	bl	80013f0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e03a      	b.n	8001090 <HAL_DMA_DeInit+0x88>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 0201 	bic.w	r2, r2, #1
 8001028:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2200      	movs	r2, #0
 8001038:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f9d0 	bl	80013f0 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001058:	2101      	movs	r1, #1
 800105a:	fa01 f202 	lsl.w	r2, r1, r2
 800105e:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d101      	bne.n	80010b8 <HAL_DMA_Start_IT+0x20>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e04a      	b.n	800114e <HAL_DMA_Start_IT+0xb6>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d13a      	bne.n	8001140 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2202      	movs	r2, #2
 80010ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f000 f950 	bl	8001394 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d008      	beq.n	800110e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 020e 	orr.w	r2, r2, #14
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	e00f      	b.n	800112e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 020a 	orr.w	r2, r2, #10
 800111c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0204 	bic.w	r2, r2, #4
 800112c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 0201 	orr.w	r2, r2, #1
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e005      	b.n	800114c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001148:	2302      	movs	r3, #2
 800114a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800114c:	7dfb      	ldrb	r3, [r7, #23]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e02e      	b.n	80011c6 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800116e:	2b02      	cmp	r3, #2
 8001170:	d008      	beq.n	8001184 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2204      	movs	r2, #4
 8001176:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e020      	b.n	80011c6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 020e 	bic.w	r2, r2, #14
 8001192:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0201 	bic.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011ac:	2101      	movs	r1, #1
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b084      	sub	sp, #16
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d005      	beq.n	80011f4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2204      	movs	r2, #4
 80011ec:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	e027      	b.n	8001244 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 020e 	bic.w	r2, r2, #14
 8001202:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0201 	bic.w	r2, r2, #1
 8001212:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800121c:	2101      	movs	r1, #1
 800121e:	fa01 f202 	lsl.w	r2, r1, r2
 8001222:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	4798      	blx	r3
    }
  }
  return status;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b084      	sub	sp, #16
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	2204      	movs	r2, #4
 800126c:	409a      	lsls	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4013      	ands	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d024      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x72>
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	2b00      	cmp	r3, #0
 800127e:	d01f      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0320 	and.w	r3, r3, #32
 800128a:	2b00      	cmp	r3, #0
 800128c:	d107      	bne.n	800129e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0204 	bic.w	r2, r2, #4
 800129c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012a6:	2104      	movs	r1, #4
 80012a8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d06a      	beq.n	800138c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012be:	e065      	b.n	800138c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	2202      	movs	r2, #2
 80012c6:	409a      	lsls	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d02c      	beq.n	800132a <HAL_DMA_IRQHandler+0xdc>
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d027      	beq.n	800132a <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0320 	and.w	r3, r3, #32
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10b      	bne.n	8001300 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 020a 	bic.w	r2, r2, #10
 80012f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001308:	2102      	movs	r1, #2
 800130a:	fa01 f202 	lsl.w	r2, r1, r2
 800130e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131c:	2b00      	cmp	r3, #0
 800131e:	d035      	beq.n	800138c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001328:	e030      	b.n	800138c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	2208      	movs	r2, #8
 8001330:	409a      	lsls	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d028      	beq.n	800138c <HAL_DMA_IRQHandler+0x13e>
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	2b00      	cmp	r3, #0
 8001342:	d023      	beq.n	800138c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 020e 	bic.w	r2, r2, #14
 8001352:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800135c:	2101      	movs	r1, #1
 800135e:	fa01 f202 	lsl.w	r2, r1, r2
 8001362:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	4798      	blx	r3
    }
  }
}
 800138a:	e7ff      	b.n	800138c <HAL_DMA_IRQHandler+0x13e>
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013aa:	2101      	movs	r1, #1
 80013ac:	fa01 f202 	lsl.w	r2, r1, r2
 80013b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b10      	cmp	r3, #16
 80013c0:	d108      	bne.n	80013d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013d2:	e007      	b.n	80013e4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	60da      	str	r2, [r3, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <DMA_CalcBaseAndBitshift+0x60>)
 8001400:	429a      	cmp	r2, r3
 8001402:	d80f      	bhi.n	8001424 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <DMA_CalcBaseAndBitshift+0x64>)
 800140c:	4413      	add	r3, r2
 800140e:	4a12      	ldr	r2, [pc, #72]	@ (8001458 <DMA_CalcBaseAndBitshift+0x68>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	009a      	lsls	r2, r3, #2
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a0f      	ldr	r2, [pc, #60]	@ (800145c <DMA_CalcBaseAndBitshift+0x6c>)
 8001420:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001422:	e00e      	b.n	8001442 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <DMA_CalcBaseAndBitshift+0x70>)
 800142c:	4413      	add	r3, r2
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <DMA_CalcBaseAndBitshift+0x68>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	009a      	lsls	r2, r3, #2
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a09      	ldr	r2, [pc, #36]	@ (8001464 <DMA_CalcBaseAndBitshift+0x74>)
 8001440:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40020407 	.word	0x40020407
 8001454:	bffdfff8 	.word	0xbffdfff8
 8001458:	cccccccd 	.word	0xcccccccd
 800145c:	40020000 	.word	0x40020000
 8001460:	bffdfbf8 	.word	0xbffdfbf8
 8001464:	40020400 	.word	0x40020400

08001468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001476:	e154      	b.n	8001722 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2101      	movs	r1, #1
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	4013      	ands	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8146 	beq.w	800171c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b01      	cmp	r3, #1
 800149a:	d005      	beq.n	80014a8 <HAL_GPIO_Init+0x40>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d130      	bne.n	800150a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014de:	2201      	movs	r2, #1
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	f003 0201 	and.w	r2, r3, #1
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	2b03      	cmp	r3, #3
 8001514:	d017      	beq.n	8001546 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2203      	movs	r2, #3
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d123      	bne.n	800159a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	08da      	lsrs	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3208      	adds	r2, #8
 800155a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	220f      	movs	r2, #15
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	691a      	ldr	r2, [r3, #16]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	08da      	lsrs	r2, r3, #3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3208      	adds	r2, #8
 8001594:	6939      	ldr	r1, [r7, #16]
 8001596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0203 	and.w	r2, r3, #3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 80a0 	beq.w	800171c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015dc:	4b58      	ldr	r3, [pc, #352]	@ (8001740 <HAL_GPIO_Init+0x2d8>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a57      	ldr	r2, [pc, #348]	@ (8001740 <HAL_GPIO_Init+0x2d8>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b55      	ldr	r3, [pc, #340]	@ (8001740 <HAL_GPIO_Init+0x2d8>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015f4:	4a53      	ldr	r2, [pc, #332]	@ (8001744 <HAL_GPIO_Init+0x2dc>)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	220f      	movs	r2, #15
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800161e:	d019      	beq.n	8001654 <HAL_GPIO_Init+0x1ec>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a49      	ldr	r2, [pc, #292]	@ (8001748 <HAL_GPIO_Init+0x2e0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d013      	beq.n	8001650 <HAL_GPIO_Init+0x1e8>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a48      	ldr	r2, [pc, #288]	@ (800174c <HAL_GPIO_Init+0x2e4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d00d      	beq.n	800164c <HAL_GPIO_Init+0x1e4>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a47      	ldr	r2, [pc, #284]	@ (8001750 <HAL_GPIO_Init+0x2e8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d007      	beq.n	8001648 <HAL_GPIO_Init+0x1e0>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a46      	ldr	r2, [pc, #280]	@ (8001754 <HAL_GPIO_Init+0x2ec>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d101      	bne.n	8001644 <HAL_GPIO_Init+0x1dc>
 8001640:	2304      	movs	r3, #4
 8001642:	e008      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 8001644:	2305      	movs	r3, #5
 8001646:	e006      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 8001648:	2303      	movs	r3, #3
 800164a:	e004      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 800164c:	2302      	movs	r3, #2
 800164e:	e002      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 8001654:	2300      	movs	r3, #0
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	f002 0203 	and.w	r2, r2, #3
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	4093      	lsls	r3, r2
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001666:	4937      	ldr	r1, [pc, #220]	@ (8001744 <HAL_GPIO_Init+0x2dc>)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001674:	4b38      	ldr	r3, [pc, #224]	@ (8001758 <HAL_GPIO_Init+0x2f0>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001698:	4a2f      	ldr	r2, [pc, #188]	@ (8001758 <HAL_GPIO_Init+0x2f0>)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800169e:	4b2e      	ldr	r3, [pc, #184]	@ (8001758 <HAL_GPIO_Init+0x2f0>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016c2:	4a25      	ldr	r2, [pc, #148]	@ (8001758 <HAL_GPIO_Init+0x2f0>)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016c8:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <HAL_GPIO_Init+0x2f0>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001758 <HAL_GPIO_Init+0x2f0>)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f2:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <HAL_GPIO_Init+0x2f0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001716:	4a10      	ldr	r2, [pc, #64]	@ (8001758 <HAL_GPIO_Init+0x2f0>)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	f47f aea3 	bne.w	8001478 <HAL_GPIO_Init+0x10>
  }
}
 8001732:	bf00      	nop
 8001734:	bf00      	nop
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000
 8001748:	48000400 	.word	0x48000400
 800174c:	48000800 	.word	0x48000800
 8001750:	48000c00 	.word	0x48000c00
 8001754:	48001000 	.word	0x48001000
 8001758:	40010400 	.word	0x40010400

0800175c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800176a:	e0b8      	b.n	80018de <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800176c:	2201      	movs	r2, #1
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80ab 	beq.w	80018d8 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001782:	4a5e      	ldr	r2, [pc, #376]	@ (80018fc <HAL_GPIO_DeInit+0x1a0>)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	3302      	adds	r3, #2
 800178a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	220f      	movs	r2, #15
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017aa:	d019      	beq.n	80017e0 <HAL_GPIO_DeInit+0x84>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a54      	ldr	r2, [pc, #336]	@ (8001900 <HAL_GPIO_DeInit+0x1a4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d013      	beq.n	80017dc <HAL_GPIO_DeInit+0x80>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a53      	ldr	r2, [pc, #332]	@ (8001904 <HAL_GPIO_DeInit+0x1a8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00d      	beq.n	80017d8 <HAL_GPIO_DeInit+0x7c>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a52      	ldr	r2, [pc, #328]	@ (8001908 <HAL_GPIO_DeInit+0x1ac>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d007      	beq.n	80017d4 <HAL_GPIO_DeInit+0x78>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a51      	ldr	r2, [pc, #324]	@ (800190c <HAL_GPIO_DeInit+0x1b0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d101      	bne.n	80017d0 <HAL_GPIO_DeInit+0x74>
 80017cc:	2304      	movs	r3, #4
 80017ce:	e008      	b.n	80017e2 <HAL_GPIO_DeInit+0x86>
 80017d0:	2305      	movs	r3, #5
 80017d2:	e006      	b.n	80017e2 <HAL_GPIO_DeInit+0x86>
 80017d4:	2303      	movs	r3, #3
 80017d6:	e004      	b.n	80017e2 <HAL_GPIO_DeInit+0x86>
 80017d8:	2302      	movs	r3, #2
 80017da:	e002      	b.n	80017e2 <HAL_GPIO_DeInit+0x86>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <HAL_GPIO_DeInit+0x86>
 80017e0:	2300      	movs	r3, #0
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	f002 0203 	and.w	r2, r2, #3
 80017e8:	0092      	lsls	r2, r2, #2
 80017ea:	4093      	lsls	r3, r2
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d132      	bne.n	8001858 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80017f2:	4b47      	ldr	r3, [pc, #284]	@ (8001910 <HAL_GPIO_DeInit+0x1b4>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4945      	ldr	r1, [pc, #276]	@ (8001910 <HAL_GPIO_DeInit+0x1b4>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001800:	4b43      	ldr	r3, [pc, #268]	@ (8001910 <HAL_GPIO_DeInit+0x1b4>)
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	43db      	mvns	r3, r3
 8001808:	4941      	ldr	r1, [pc, #260]	@ (8001910 <HAL_GPIO_DeInit+0x1b4>)
 800180a:	4013      	ands	r3, r2
 800180c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800180e:	4b40      	ldr	r3, [pc, #256]	@ (8001910 <HAL_GPIO_DeInit+0x1b4>)
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	43db      	mvns	r3, r3
 8001816:	493e      	ldr	r1, [pc, #248]	@ (8001910 <HAL_GPIO_DeInit+0x1b4>)
 8001818:	4013      	ands	r3, r2
 800181a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800181c:	4b3c      	ldr	r3, [pc, #240]	@ (8001910 <HAL_GPIO_DeInit+0x1b4>)
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	43db      	mvns	r3, r3
 8001824:	493a      	ldr	r1, [pc, #232]	@ (8001910 <HAL_GPIO_DeInit+0x1b4>)
 8001826:	4013      	ands	r3, r2
 8001828:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800183a:	4a30      	ldr	r2, [pc, #192]	@ (80018fc <HAL_GPIO_DeInit+0x1a0>)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43da      	mvns	r2, r3
 800184a:	482c      	ldr	r0, [pc, #176]	@ (80018fc <HAL_GPIO_DeInit+0x1a0>)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	400a      	ands	r2, r1
 8001852:	3302      	adds	r3, #2
 8001854:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2103      	movs	r1, #3
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	401a      	ands	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	08da      	lsrs	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3208      	adds	r2, #8
 8001876:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	08d2      	lsrs	r2, r2, #3
 800188e:	4019      	ands	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3208      	adds	r2, #8
 8001894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2103      	movs	r1, #3
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	401a      	ands	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	2101      	movs	r1, #1
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	401a      	ands	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2103      	movs	r1, #3
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	401a      	ands	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	609a      	str	r2, [r3, #8]
    }

    position++;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3301      	adds	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa22 f303 	lsr.w	r3, r2, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f47f af40 	bne.w	800176c <HAL_GPIO_DeInit+0x10>
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	371c      	adds	r7, #28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40010000 	.word	0x40010000
 8001900:	48000400 	.word	0x48000400
 8001904:	48000800 	.word	0x48000800
 8001908:	48000c00 	.word	0x48000c00
 800190c:	48001000 	.word	0x48001000
 8001910:	40010400 	.word	0x40010400

08001914 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691a      	ldr	r2, [r3, #16]
 8001924:	887b      	ldrh	r3, [r7, #2]
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	e001      	b.n	8001936 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
 8001950:	4613      	mov	r3, r2
 8001952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001954:	787b      	ldrb	r3, [r7, #1]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800195a:	887a      	ldrh	r2, [r7, #2]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001960:	e002      	b.n	8001968 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001962:	887a      	ldrh	r2, [r7, #2]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e0b9      	b.n	8001afa <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff f852 	bl	8000a44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2203      	movs	r2, #3
 80019a4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 ff1c 	bl	80047ea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]
 80019b6:	e03e      	b.n	8001a36 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	440b      	add	r3, r1
 80019c6:	3311      	adds	r3, #17
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	440b      	add	r3, r1
 80019da:	3310      	adds	r3, #16
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	3313      	adds	r3, #19
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	3320      	adds	r3, #32
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	440b      	add	r3, r1
 8001a16:	3324      	adds	r3, #36	@ 0x24
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	440b      	add	r3, r1
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	3301      	adds	r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	791b      	ldrb	r3, [r3, #4]
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d3bb      	bcc.n	80019b8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	e044      	b.n	8001ad0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	440b      	add	r3, r1
 8001a54:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a5c:	7bfa      	ldrb	r2, [r7, #15]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	440b      	add	r3, r1
 8001a6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a72:	7bfa      	ldrb	r2, [r7, #15]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	440b      	add	r3, r1
 8001a80:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a88:	7bfa      	ldrb	r2, [r7, #15]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a9e:	7bfa      	ldrb	r2, [r7, #15]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	440b      	add	r3, r1
 8001aac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ab4:	7bfa      	ldrb	r2, [r7, #15]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	3301      	adds	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	791b      	ldrb	r3, [r3, #4]
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d3b5      	bcc.n	8001a46 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ae6:	f002 fe9b 	bl	8004820 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b14:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	f000 bff4 	b.w	8002b12 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 816d 	beq.w	8001e1a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b40:	4bb4      	ldr	r3, [pc, #720]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d00c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b4c:	4bb1      	ldr	r3, [pc, #708]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d157      	bne.n	8001c08 <HAL_RCC_OscConfig+0x104>
 8001b58:	4bae      	ldr	r3, [pc, #696]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b64:	d150      	bne.n	8001c08 <HAL_RCC_OscConfig+0x104>
 8001b66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b6a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b7a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b86:	d802      	bhi.n	8001b8e <HAL_RCC_OscConfig+0x8a>
 8001b88:	4ba2      	ldr	r3, [pc, #648]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	e015      	b.n	8001bba <HAL_RCC_OscConfig+0xb6>
 8001b8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b92:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001b9a:	fa93 f3a3 	rbit	r3, r3
 8001b9e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001ba2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ba6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001baa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001bb6:	4b97      	ldr	r3, [pc, #604]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bbe:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001bc2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001bc6:	fa92 f2a2 	rbit	r2, r2
 8001bca:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001bce:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001bd2:	fab2 f282 	clz	r2, r2
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	f042 0220 	orr.w	r2, r2, #32
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	f002 021f 	and.w	r2, r2, #31
 8001be2:	2101      	movs	r1, #1
 8001be4:	fa01 f202 	lsl.w	r2, r1, r2
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8114 	beq.w	8001e18 <HAL_RCC_OscConfig+0x314>
 8001bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f040 810b 	bne.w	8001e18 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f000 bf85 	b.w	8002b12 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c18:	d106      	bne.n	8001c28 <HAL_RCC_OscConfig+0x124>
 8001c1a:	4b7e      	ldr	r3, [pc, #504]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e036      	b.n	8001c96 <HAL_RCC_OscConfig+0x192>
 8001c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10c      	bne.n	8001c52 <HAL_RCC_OscConfig+0x14e>
 8001c38:	4b76      	ldr	r3, [pc, #472]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a75      	ldr	r2, [pc, #468]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b73      	ldr	r3, [pc, #460]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a72      	ldr	r2, [pc, #456]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	e021      	b.n	8001c96 <HAL_RCC_OscConfig+0x192>
 8001c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_OscConfig+0x17a>
 8001c64:	4b6b      	ldr	r3, [pc, #428]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a6a      	ldr	r2, [pc, #424]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001c6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b68      	ldr	r3, [pc, #416]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a67      	ldr	r2, [pc, #412]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e00b      	b.n	8001c96 <HAL_RCC_OscConfig+0x192>
 8001c7e:	4b65      	ldr	r3, [pc, #404]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a64      	ldr	r2, [pc, #400]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b62      	ldr	r3, [pc, #392]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a61      	ldr	r2, [pc, #388]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001c90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c94:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c96:	4b5f      	ldr	r3, [pc, #380]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c9a:	f023 020f 	bic.w	r2, r3, #15
 8001c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	495a      	ldr	r1, [pc, #360]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d054      	beq.n	8001d6a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7fe ffe8 	bl	8000c94 <HAL_GetTick>
 8001cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cca:	f7fe ffe3 	bl	8000c94 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	@ 0x64
 8001cd8:	d902      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	f000 bf19 	b.w	8002b12 <HAL_RCC_OscConfig+0x100e>
 8001ce0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ce4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001cf4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf8:	fab3 f383 	clz	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d00:	d802      	bhi.n	8001d08 <HAL_RCC_OscConfig+0x204>
 8001d02:	4b44      	ldr	r3, [pc, #272]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	e015      	b.n	8001d34 <HAL_RCC_OscConfig+0x230>
 8001d08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d0c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001d1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d20:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001d24:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001d30:	4b38      	ldr	r3, [pc, #224]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d38:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001d3c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001d40:	fa92 f2a2 	rbit	r2, r2
 8001d44:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001d48:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001d4c:	fab2 f282 	clz	r2, r2
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	f042 0220 	orr.w	r2, r2, #32
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	f002 021f 	and.w	r2, r2, #31
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0b0      	beq.n	8001cca <HAL_RCC_OscConfig+0x1c6>
 8001d68:	e057      	b.n	8001e1a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7fe ff93 	bl	8000c94 <HAL_GetTick>
 8001d6e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d74:	f7fe ff8e 	bl	8000c94 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	@ 0x64
 8001d82:	d902      	bls.n	8001d8a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	f000 bec4 	b.w	8002b12 <HAL_RCC_OscConfig+0x100e>
 8001d8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d8e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001d9e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001daa:	d802      	bhi.n	8001db2 <HAL_RCC_OscConfig+0x2ae>
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	e015      	b.n	8001dde <HAL_RCC_OscConfig+0x2da>
 8001db2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001db6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001dc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dca:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001dce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001dda:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <HAL_RCC_OscConfig+0x310>)
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001de2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001de6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001dea:	fa92 f2a2 	rbit	r2, r2
 8001dee:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001df2:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001df6:	fab2 f282 	clz	r2, r2
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	f042 0220 	orr.w	r2, r2, #32
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	f002 021f 	and.w	r2, r2, #31
 8001e06:	2101      	movs	r1, #1
 8001e08:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1b0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x270>
 8001e12:	e002      	b.n	8001e1a <HAL_RCC_OscConfig+0x316>
 8001e14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 816c 	beq.w	8002108 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e30:	4bcc      	ldr	r3, [pc, #816]	@ (8002164 <HAL_RCC_OscConfig+0x660>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e3c:	4bc9      	ldr	r3, [pc, #804]	@ (8002164 <HAL_RCC_OscConfig+0x660>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d16d      	bne.n	8001f24 <HAL_RCC_OscConfig+0x420>
 8001e48:	4bc6      	ldr	r3, [pc, #792]	@ (8002164 <HAL_RCC_OscConfig+0x660>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d167      	bne.n	8001f24 <HAL_RCC_OscConfig+0x420>
 8001e54:	2302      	movs	r3, #2
 8001e56:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001e66:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e72:	d802      	bhi.n	8001e7a <HAL_RCC_OscConfig+0x376>
 8001e74:	4bbb      	ldr	r3, [pc, #748]	@ (8002164 <HAL_RCC_OscConfig+0x660>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	e013      	b.n	8001ea2 <HAL_RCC_OscConfig+0x39e>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001e92:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001e9e:	4bb1      	ldr	r3, [pc, #708]	@ (8002164 <HAL_RCC_OscConfig+0x660>)
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001ea8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001eac:	fa92 f2a2 	rbit	r2, r2
 8001eb0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001eb4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001eb8:	fab2 f282 	clz	r2, r2
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f042 0220 	orr.w	r2, r2, #32
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	f002 021f 	and.w	r2, r2, #31
 8001ec8:	2101      	movs	r1, #1
 8001eca:	fa01 f202 	lsl.w	r2, r1, r2
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00a      	beq.n	8001eea <HAL_RCC_OscConfig+0x3e6>
 8001ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d002      	beq.n	8001eea <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	f000 be14 	b.w	8002b12 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eea:	4b9e      	ldr	r3, [pc, #632]	@ (8002164 <HAL_RCC_OscConfig+0x660>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	21f8      	movs	r1, #248	@ 0xf8
 8001f00:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001f08:	fa91 f1a1 	rbit	r1, r1
 8001f0c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001f10:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001f14:	fab1 f181 	clz	r1, r1
 8001f18:	b2c9      	uxtb	r1, r1
 8001f1a:	408b      	lsls	r3, r1
 8001f1c:	4991      	ldr	r1, [pc, #580]	@ (8002164 <HAL_RCC_OscConfig+0x660>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f22:	e0f1      	b.n	8002108 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 8083 	beq.w	800203c <HAL_RCC_OscConfig+0x538>
 8001f36:	2301      	movs	r3, #1
 8001f38:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001f48:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f56:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	2301      	movs	r3, #1
 8001f60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7fe fe97 	bl	8000c94 <HAL_GetTick>
 8001f66:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6a:	e00a      	b.n	8001f82 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6c:	f7fe fe92 	bl	8000c94 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d902      	bls.n	8001f82 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	f000 bdc8 	b.w	8002b12 <HAL_RCC_OscConfig+0x100e>
 8001f82:	2302      	movs	r3, #2
 8001f84:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001f94:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fa0:	d802      	bhi.n	8001fa8 <HAL_RCC_OscConfig+0x4a4>
 8001fa2:	4b70      	ldr	r3, [pc, #448]	@ (8002164 <HAL_RCC_OscConfig+0x660>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	e013      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4cc>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001fb2:	fa93 f3a3 	rbit	r3, r3
 8001fb6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001fba:	2302      	movs	r3, #2
 8001fbc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001fc0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001fcc:	4b65      	ldr	r3, [pc, #404]	@ (8002164 <HAL_RCC_OscConfig+0x660>)
 8001fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001fd6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001fda:	fa92 f2a2 	rbit	r2, r2
 8001fde:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001fe2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001fe6:	fab2 f282 	clz	r2, r2
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	f042 0220 	orr.w	r2, r2, #32
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	f002 021f 	and.w	r2, r2, #31
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0b4      	beq.n	8001f6c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002002:	4b58      	ldr	r3, [pc, #352]	@ (8002164 <HAL_RCC_OscConfig+0x660>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800200a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	21f8      	movs	r1, #248	@ 0xf8
 8002018:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002020:	fa91 f1a1 	rbit	r1, r1
 8002024:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002028:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800202c:	fab1 f181 	clz	r1, r1
 8002030:	b2c9      	uxtb	r1, r1
 8002032:	408b      	lsls	r3, r1
 8002034:	494b      	ldr	r1, [pc, #300]	@ (8002164 <HAL_RCC_OscConfig+0x660>)
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
 800203a:	e065      	b.n	8002108 <HAL_RCC_OscConfig+0x604>
 800203c:	2301      	movs	r3, #1
 800203e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800204e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800205c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	461a      	mov	r2, r3
 8002064:	2300      	movs	r3, #0
 8002066:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7fe fe14 	bl	8000c94 <HAL_GetTick>
 800206c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002072:	f7fe fe0f 	bl	8000c94 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d902      	bls.n	8002088 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	f000 bd45 	b.w	8002b12 <HAL_RCC_OscConfig+0x100e>
 8002088:	2302      	movs	r3, #2
 800208a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800209a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80020a6:	d802      	bhi.n	80020ae <HAL_RCC_OscConfig+0x5aa>
 80020a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002164 <HAL_RCC_OscConfig+0x660>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	e013      	b.n	80020d6 <HAL_RCC_OscConfig+0x5d2>
 80020ae:	2302      	movs	r3, #2
 80020b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80020c0:	2302      	movs	r3, #2
 80020c2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80020c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80020d2:	4b24      	ldr	r3, [pc, #144]	@ (8002164 <HAL_RCC_OscConfig+0x660>)
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	2202      	movs	r2, #2
 80020d8:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80020dc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80020e0:	fa92 f2a2 	rbit	r2, r2
 80020e4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80020e8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80020ec:	fab2 f282 	clz	r2, r2
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	f042 0220 	orr.w	r2, r2, #32
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	f002 021f 	and.w	r2, r2, #31
 80020fc:	2101      	movs	r1, #1
 80020fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1b4      	bne.n	8002072 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8115 	beq.w	8002348 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d07e      	beq.n	800222c <HAL_RCC_OscConfig+0x728>
 800212e:	2301      	movs	r3, #1
 8002130:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_RCC_OscConfig+0x664>)
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	461a      	mov	r2, r3
 8002154:	2301      	movs	r3, #1
 8002156:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002158:	f7fe fd9c 	bl	8000c94 <HAL_GetTick>
 800215c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002160:	e00f      	b.n	8002182 <HAL_RCC_OscConfig+0x67e>
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800216c:	f7fe fd92 	bl	8000c94 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d902      	bls.n	8002182 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	f000 bcc8 	b.w	8002b12 <HAL_RCC_OscConfig+0x100e>
 8002182:	2302      	movs	r3, #2
 8002184:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002198:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800219c:	2202      	movs	r2, #2
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	fa93 f2a3 	rbit	r2, r3
 80021ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021c0:	2202      	movs	r2, #2
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	fa93 f2a3 	rbit	r2, r3
 80021d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021dc:	4bb0      	ldr	r3, [pc, #704]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 80021de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021e8:	2102      	movs	r1, #2
 80021ea:	6019      	str	r1, [r3, #0]
 80021ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	fa93 f1a3 	rbit	r1, r3
 80021fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002202:	6019      	str	r1, [r3, #0]
  return result;
 8002204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002208:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002218:	b2db      	uxtb	r3, r3
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	2101      	movs	r1, #1
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0a0      	beq.n	800216c <HAL_RCC_OscConfig+0x668>
 800222a:	e08d      	b.n	8002348 <HAL_RCC_OscConfig+0x844>
 800222c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002230:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002234:	2201      	movs	r2, #1
 8002236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	fa93 f2a3 	rbit	r2, r3
 8002246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800224e:	601a      	str	r2, [r3, #0]
  return result;
 8002250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002254:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002258:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	4b90      	ldr	r3, [pc, #576]	@ (80024a4 <HAL_RCC_OscConfig+0x9a0>)
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	461a      	mov	r2, r3
 800226a:	2300      	movs	r3, #0
 800226c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226e:	f7fe fd11 	bl	8000c94 <HAL_GetTick>
 8002272:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002276:	e00a      	b.n	800228e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002278:	f7fe fd0c 	bl	8000c94 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d902      	bls.n	800228e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	f000 bc42 	b.w	8002b12 <HAL_RCC_OscConfig+0x100e>
 800228e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002292:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002296:	2202      	movs	r2, #2
 8002298:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	fa93 f2a3 	rbit	r2, r3
 80022a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022ba:	2202      	movs	r2, #2
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	fa93 f2a3 	rbit	r2, r3
 80022cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022de:	2202      	movs	r2, #2
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f2a3 	rbit	r2, r3
 80022f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80022f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fa:	4b69      	ldr	r3, [pc, #420]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 80022fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002302:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002306:	2102      	movs	r1, #2
 8002308:	6019      	str	r1, [r3, #0]
 800230a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	fa93 f1a3 	rbit	r1, r3
 8002318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002320:	6019      	str	r1, [r3, #0]
  return result;
 8002322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002326:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d197      	bne.n	8002278 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 819e 	beq.w	800269a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002364:	4b4e      	ldr	r3, [pc, #312]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d116      	bne.n	800239e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002370:	4b4b      	ldr	r3, [pc, #300]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	4a4a      	ldr	r2, [pc, #296]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800237a:	61d3      	str	r3, [r2, #28]
 800237c:	4b48      	ldr	r3, [pc, #288]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002388:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002392:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002396:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002398:	2301      	movs	r3, #1
 800239a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239e:	4b42      	ldr	r3, [pc, #264]	@ (80024a8 <HAL_RCC_OscConfig+0x9a4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11a      	bne.n	80023e0 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023aa:	4b3f      	ldr	r3, [pc, #252]	@ (80024a8 <HAL_RCC_OscConfig+0x9a4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a3e      	ldr	r2, [pc, #248]	@ (80024a8 <HAL_RCC_OscConfig+0x9a4>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7fe fc6d 	bl	8000c94 <HAL_GetTick>
 80023ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	e009      	b.n	80023d4 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c0:	f7fe fc68 	bl	8000c94 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b64      	cmp	r3, #100	@ 0x64
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e39e      	b.n	8002b12 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	4b34      	ldr	r3, [pc, #208]	@ (80024a8 <HAL_RCC_OscConfig+0x9a4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ef      	beq.n	80023c0 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x8fa>
 80023f0:	4b2b      	ldr	r3, [pc, #172]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a2a      	ldr	r2, [pc, #168]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6213      	str	r3, [r2, #32]
 80023fc:	e035      	b.n	800246a <HAL_RCC_OscConfig+0x966>
 80023fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002402:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0x924>
 800240e:	4b24      	ldr	r3, [pc, #144]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a23      	ldr	r2, [pc, #140]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6213      	str	r3, [r2, #32]
 800241a:	4b21      	ldr	r3, [pc, #132]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a20      	ldr	r2, [pc, #128]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	6213      	str	r3, [r2, #32]
 8002426:	e020      	b.n	800246a <HAL_RCC_OscConfig+0x966>
 8002428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b05      	cmp	r3, #5
 8002436:	d10c      	bne.n	8002452 <HAL_RCC_OscConfig+0x94e>
 8002438:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4a18      	ldr	r2, [pc, #96]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	4b16      	ldr	r3, [pc, #88]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a15      	ldr	r2, [pc, #84]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6213      	str	r3, [r2, #32]
 8002450:	e00b      	b.n	800246a <HAL_RCC_OscConfig+0x966>
 8002452:	4b13      	ldr	r3, [pc, #76]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a12      	ldr	r2, [pc, #72]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6213      	str	r3, [r2, #32]
 800245e:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4a0f      	ldr	r2, [pc, #60]	@ (80024a0 <HAL_RCC_OscConfig+0x99c>)
 8002464:	f023 0304 	bic.w	r3, r3, #4
 8002468:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800246a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8087 	beq.w	800258a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247c:	f7fe fc0a 	bl	8000c94 <HAL_GetTick>
 8002480:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002484:	e012      	b.n	80024ac <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002486:	f7fe fc05 	bl	8000c94 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d908      	bls.n	80024ac <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e339      	b.n	8002b12 <HAL_RCC_OscConfig+0x100e>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	10908120 	.word	0x10908120
 80024a8:	40007000 	.word	0x40007000
 80024ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024b4:	2202      	movs	r2, #2
 80024b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	fa93 f2a3 	rbit	r2, r3
 80024c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024d8:	2202      	movs	r2, #2
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	fa93 f2a3 	rbit	r2, r3
 80024ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80024f2:	601a      	str	r2, [r3, #0]
  return result;
 80024f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80024fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d102      	bne.n	8002514 <HAL_RCC_OscConfig+0xa10>
 800250e:	4b98      	ldr	r3, [pc, #608]	@ (8002770 <HAL_RCC_OscConfig+0xc6c>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	e013      	b.n	800253c <HAL_RCC_OscConfig+0xa38>
 8002514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002518:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800251c:	2202      	movs	r2, #2
 800251e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002524:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	fa93 f2a3 	rbit	r2, r3
 800252e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002532:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	4b8d      	ldr	r3, [pc, #564]	@ (8002770 <HAL_RCC_OscConfig+0xc6c>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002540:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002544:	2102      	movs	r1, #2
 8002546:	6011      	str	r1, [r2, #0]
 8002548:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800254c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	fa92 f1a2 	rbit	r1, r2
 8002556:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800255a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800255e:	6011      	str	r1, [r2, #0]
  return result;
 8002560:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002564:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	fab2 f282 	clz	r2, r2
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	f002 021f 	and.w	r2, r2, #31
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f202 	lsl.w	r2, r1, r2
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	f43f af7f 	beq.w	8002486 <HAL_RCC_OscConfig+0x982>
 8002588:	e07d      	b.n	8002686 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7fe fb83 	bl	8000c94 <HAL_GetTick>
 800258e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002592:	e00b      	b.n	80025ac <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002594:	f7fe fb7e 	bl	8000c94 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e2b2      	b.n	8002b12 <HAL_RCC_OscConfig+0x100e>
 80025ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025b4:	2202      	movs	r2, #2
 80025b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025bc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	fa93 f2a3 	rbit	r2, r3
 80025c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ca:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025d8:	2202      	movs	r2, #2
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	fa93 f2a3 	rbit	r2, r3
 80025ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80025f2:	601a      	str	r2, [r3, #0]
  return result;
 80025f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80025fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d102      	bne.n	8002614 <HAL_RCC_OscConfig+0xb10>
 800260e:	4b58      	ldr	r3, [pc, #352]	@ (8002770 <HAL_RCC_OscConfig+0xc6c>)
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	e013      	b.n	800263c <HAL_RCC_OscConfig+0xb38>
 8002614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002618:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800261c:	2202      	movs	r2, #2
 800261e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002624:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	fa93 f2a3 	rbit	r2, r3
 800262e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002632:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	4b4d      	ldr	r3, [pc, #308]	@ (8002770 <HAL_RCC_OscConfig+0xc6c>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002640:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002644:	2102      	movs	r1, #2
 8002646:	6011      	str	r1, [r2, #0]
 8002648:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800264c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	fa92 f1a2 	rbit	r1, r2
 8002656:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800265a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800265e:	6011      	str	r1, [r2, #0]
  return result;
 8002660:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002664:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	fab2 f282 	clz	r2, r2
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	f002 021f 	and.w	r2, r2, #31
 800267a:	2101      	movs	r1, #1
 800267c:	fa01 f202 	lsl.w	r2, r1, r2
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d186      	bne.n	8002594 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002686:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800268a:	2b01      	cmp	r3, #1
 800268c:	d105      	bne.n	800269a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268e:	4b38      	ldr	r3, [pc, #224]	@ (8002770 <HAL_RCC_OscConfig+0xc6c>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	4a37      	ldr	r2, [pc, #220]	@ (8002770 <HAL_RCC_OscConfig+0xc6c>)
 8002694:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002698:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8232 	beq.w	8002b10 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ac:	4b30      	ldr	r3, [pc, #192]	@ (8002770 <HAL_RCC_OscConfig+0xc6c>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	f000 8201 	beq.w	8002abc <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	f040 8157 	bne.w	800297a <HAL_RCC_OscConfig+0xe76>
 80026cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80026d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026de:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	fa93 f2a3 	rbit	r2, r3
 80026e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ec:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80026f0:	601a      	str	r2, [r3, #0]
  return result;
 80026f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80026fa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002706:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	461a      	mov	r2, r3
 800270e:	2300      	movs	r3, #0
 8002710:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7fe fabf 	bl	8000c94 <HAL_GetTick>
 8002716:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271a:	e009      	b.n	8002730 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271c:	f7fe faba 	bl	8000c94 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e1f0      	b.n	8002b12 <HAL_RCC_OscConfig+0x100e>
 8002730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002734:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002738:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800273c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002742:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	fa93 f2a3 	rbit	r2, r3
 800274c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002750:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002754:	601a      	str	r2, [r3, #0]
  return result;
 8002756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800275e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b3f      	cmp	r3, #63	@ 0x3f
 8002768:	d804      	bhi.n	8002774 <HAL_RCC_OscConfig+0xc70>
 800276a:	4b01      	ldr	r3, [pc, #4]	@ (8002770 <HAL_RCC_OscConfig+0xc6c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	e029      	b.n	80027c4 <HAL_RCC_OscConfig+0xcc0>
 8002770:	40021000 	.word	0x40021000
 8002774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002778:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800277c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002786:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	fa93 f2a3 	rbit	r2, r3
 8002790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002794:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ac:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	fa93 f2a3 	rbit	r2, r3
 80027b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ba:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	4bc3      	ldr	r3, [pc, #780]	@ (8002ad0 <HAL_RCC_OscConfig+0xfcc>)
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027c8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80027cc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027d0:	6011      	str	r1, [r2, #0]
 80027d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027d6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	fa92 f1a2 	rbit	r1, r2
 80027e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027e4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80027e8:	6011      	str	r1, [r2, #0]
  return result;
 80027ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ee:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	fab2 f282 	clz	r2, r2
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f042 0220 	orr.w	r2, r2, #32
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	f002 021f 	and.w	r2, r2, #31
 8002804:	2101      	movs	r1, #1
 8002806:	fa01 f202 	lsl.w	r2, r1, r2
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d185      	bne.n	800271c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002810:	4baf      	ldr	r3, [pc, #700]	@ (8002ad0 <HAL_RCC_OscConfig+0xfcc>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002828:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	430b      	orrs	r3, r1
 8002832:	49a7      	ldr	r1, [pc, #668]	@ (8002ad0 <HAL_RCC_OscConfig+0xfcc>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
 8002838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002840:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	fa93 f2a3 	rbit	r2, r3
 8002854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002858:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800285c:	601a      	str	r2, [r3, #0]
  return result;
 800285e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002862:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002866:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002872:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	461a      	mov	r2, r3
 800287a:	2301      	movs	r3, #1
 800287c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe fa09 	bl	8000c94 <HAL_GetTick>
 8002882:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002886:	e009      	b.n	800289c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe fa04 	bl	8000c94 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e13a      	b.n	8002b12 <HAL_RCC_OscConfig+0x100e>
 800289c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ae:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	fa93 f2a3 	rbit	r2, r3
 80028b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028bc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028c0:	601a      	str	r2, [r3, #0]
  return result;
 80028c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80028d4:	d802      	bhi.n	80028dc <HAL_RCC_OscConfig+0xdd8>
 80028d6:	4b7e      	ldr	r3, [pc, #504]	@ (8002ad0 <HAL_RCC_OscConfig+0xfcc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	e027      	b.n	800292c <HAL_RCC_OscConfig+0xe28>
 80028dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80028e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ee:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	fa93 f2a3 	rbit	r2, r3
 80028f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002906:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800290a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002914:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	fa93 f2a3 	rbit	r2, r3
 800291e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002922:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	4b69      	ldr	r3, [pc, #420]	@ (8002ad0 <HAL_RCC_OscConfig+0xfcc>)
 800292a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002930:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002934:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002938:	6011      	str	r1, [r2, #0]
 800293a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800293e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	fa92 f1a2 	rbit	r1, r2
 8002948:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800294c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002950:	6011      	str	r1, [r2, #0]
  return result;
 8002952:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002956:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	fab2 f282 	clz	r2, r2
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	f042 0220 	orr.w	r2, r2, #32
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f002 021f 	and.w	r2, r2, #31
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f202 	lsl.w	r2, r1, r2
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d087      	beq.n	8002888 <HAL_RCC_OscConfig+0xd84>
 8002978:	e0ca      	b.n	8002b10 <HAL_RCC_OscConfig+0x100c>
 800297a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002982:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002986:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	fa93 f2a3 	rbit	r2, r3
 8002996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800299e:	601a      	str	r2, [r3, #0]
  return result;
 80029a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	461a      	mov	r2, r3
 80029bc:	2300      	movs	r3, #0
 80029be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe f968 	bl	8000c94 <HAL_GetTick>
 80029c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c8:	e009      	b.n	80029de <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ca:	f7fe f963 	bl	8000c94 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e099      	b.n	8002b12 <HAL_RCC_OscConfig+0x100e>
 80029de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80029e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	fa93 f2a3 	rbit	r2, r3
 80029fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fe:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a02:	601a      	str	r2, [r3, #0]
  return result;
 8002a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a08:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a16:	d802      	bhi.n	8002a1e <HAL_RCC_OscConfig+0xf1a>
 8002a18:	4b2d      	ldr	r3, [pc, #180]	@ (8002ad0 <HAL_RCC_OscConfig+0xfcc>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	e027      	b.n	8002a6e <HAL_RCC_OscConfig+0xf6a>
 8002a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a22:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a30:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	fa93 f2a3 	rbit	r2, r3
 8002a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a48:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a56:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	fa93 f2a3 	rbit	r2, r3
 8002a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a64:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	4b19      	ldr	r3, [pc, #100]	@ (8002ad0 <HAL_RCC_OscConfig+0xfcc>)
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a72:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a76:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a7a:	6011      	str	r1, [r2, #0]
 8002a7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a80:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	fa92 f1a2 	rbit	r1, r2
 8002a8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a8e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a92:	6011      	str	r1, [r2, #0]
  return result;
 8002a94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a98:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	fab2 f282 	clz	r2, r2
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	f042 0220 	orr.w	r2, r2, #32
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	f002 021f 	and.w	r2, r2, #31
 8002aae:	2101      	movs	r1, #1
 8002ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d187      	bne.n	80029ca <HAL_RCC_OscConfig+0xec6>
 8002aba:	e029      	b.n	8002b10 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d103      	bne.n	8002ad4 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e020      	b.n	8002b12 <HAL_RCC_OscConfig+0x100e>
 8002ad0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ad4:	4b11      	ldr	r3, [pc, #68]	@ (8002b1c <HAL_RCC_OscConfig+0x1018>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002adc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002ae0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d10b      	bne.n	8002b0c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002af4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002af8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40021000 	.word	0x40021000

08002b20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b09e      	sub	sp, #120	@ 0x78
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e154      	b.n	8002de2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b89      	ldr	r3, [pc, #548]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d910      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b86      	ldr	r3, [pc, #536]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 0207 	bic.w	r2, r3, #7
 8002b4e:	4984      	ldr	r1, [pc, #528]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b82      	ldr	r3, [pc, #520]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e13c      	b.n	8002de2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b74:	4b7b      	ldr	r3, [pc, #492]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4978      	ldr	r1, [pc, #480]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80cd 	beq.w	8002d2e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d137      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xec>
 8002b9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ba0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002baa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bb4:	d802      	bhi.n	8002bbc <HAL_RCC_ClockConfig+0x9c>
 8002bb6:	4b6b      	ldr	r3, [pc, #428]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	e00f      	b.n	8002bdc <HAL_RCC_ClockConfig+0xbc>
 8002bbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bce:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bd8:	4b62      	ldr	r3, [pc, #392]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002be0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002be2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002be4:	fa92 f2a2 	rbit	r2, r2
 8002be8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002bea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002bec:	fab2 f282 	clz	r2, r2
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	f042 0220 	orr.w	r2, r2, #32
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	f002 021f 	and.w	r2, r2, #31
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d171      	bne.n	8002cec <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0ea      	b.n	8002de2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d137      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x164>
 8002c14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c18:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c2c:	d802      	bhi.n	8002c34 <HAL_RCC_ClockConfig+0x114>
 8002c2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	e00f      	b.n	8002c54 <HAL_RCC_ClockConfig+0x134>
 8002c34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c46:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c50:	4b44      	ldr	r3, [pc, #272]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c58:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002c5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c5c:	fa92 f2a2 	rbit	r2, r2
 8002c60:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002c62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c64:	fab2 f282 	clz	r2, r2
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	f042 0220 	orr.w	r2, r2, #32
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	f002 021f 	and.w	r2, r2, #31
 8002c74:	2101      	movs	r1, #1
 8002c76:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d135      	bne.n	8002cec <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0ae      	b.n	8002de2 <HAL_RCC_ClockConfig+0x2c2>
 8002c84:	2302      	movs	r3, #2
 8002c86:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c9a:	d802      	bhi.n	8002ca2 <HAL_RCC_ClockConfig+0x182>
 8002c9c:	4b31      	ldr	r3, [pc, #196]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	e00d      	b.n	8002cbe <HAL_RCC_ClockConfig+0x19e>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cae:	2302      	movs	r3, #2
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	4b2a      	ldr	r3, [pc, #168]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	61ba      	str	r2, [r7, #24]
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	fa92 f2a2 	rbit	r2, r2
 8002cc8:	617a      	str	r2, [r7, #20]
  return result;
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	fab2 f282 	clz	r2, r2
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	f042 0220 	orr.w	r2, r2, #32
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	f002 021f 	and.w	r2, r2, #31
 8002cdc:	2101      	movs	r1, #1
 8002cde:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e07a      	b.n	8002de2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cec:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f023 0203 	bic.w	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	491a      	ldr	r1, [pc, #104]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cfe:	f7fd ffc9 	bl	8000c94 <HAL_GetTick>
 8002d02:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d06:	f7fd ffc5 	bl	8000c94 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e062      	b.n	8002de2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1c:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 020c 	and.w	r2, r3, #12
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d1eb      	bne.n	8002d06 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d215      	bcs.n	8002d68 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3c:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 0207 	bic.w	r2, r3, #7
 8002d44:	4906      	ldr	r1, [pc, #24]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4c:	4b04      	ldr	r3, [pc, #16]	@ (8002d60 <HAL_RCC_ClockConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d006      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e041      	b.n	8002de2 <HAL_RCC_ClockConfig+0x2c2>
 8002d5e:	bf00      	nop
 8002d60:	40022000 	.word	0x40022000
 8002d64:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d74:	4b1d      	ldr	r3, [pc, #116]	@ (8002dec <HAL_RCC_ClockConfig+0x2cc>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	491a      	ldr	r1, [pc, #104]	@ (8002dec <HAL_RCC_ClockConfig+0x2cc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d92:	4b16      	ldr	r3, [pc, #88]	@ (8002dec <HAL_RCC_ClockConfig+0x2cc>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4912      	ldr	r1, [pc, #72]	@ (8002dec <HAL_RCC_ClockConfig+0x2cc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002da6:	f000 f829 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002daa:	4601      	mov	r1, r0
 8002dac:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <HAL_RCC_ClockConfig+0x2cc>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002db4:	22f0      	movs	r2, #240	@ 0xf0
 8002db6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	fa92 f2a2 	rbit	r2, r2
 8002dbe:	60fa      	str	r2, [r7, #12]
  return result;
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	fab2 f282 	clz	r2, r2
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	40d3      	lsrs	r3, r2
 8002dca:	4a09      	ldr	r2, [pc, #36]	@ (8002df0 <HAL_RCC_ClockConfig+0x2d0>)
 8002dcc:	5cd3      	ldrb	r3, [r2, r3]
 8002dce:	fa21 f303 	lsr.w	r3, r1, r3
 8002dd2:	4a08      	ldr	r2, [pc, #32]	@ (8002df4 <HAL_RCC_ClockConfig+0x2d4>)
 8002dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002dd6:	4b08      	ldr	r3, [pc, #32]	@ (8002df8 <HAL_RCC_ClockConfig+0x2d8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fd ff16 	bl	8000c0c <HAL_InitTick>
  
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3778      	adds	r7, #120	@ 0x78
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	080059a0 	.word	0x080059a0
 8002df4:	20000004 	.word	0x20000004
 8002df8:	20000008 	.word	0x20000008

08002dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e16:	4b1e      	ldr	r3, [pc, #120]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d002      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x30>
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d003      	beq.n	8002e32 <HAL_RCC_GetSysClockFreq+0x36>
 8002e2a:	e026      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e2c:	4b19      	ldr	r3, [pc, #100]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e2e:	613b      	str	r3, [r7, #16]
      break;
 8002e30:	e026      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	0c9b      	lsrs	r3, r3, #18
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	4a17      	ldr	r2, [pc, #92]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e3c:	5cd3      	ldrb	r3, [r2, r3]
 8002e3e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002e40:	4b13      	ldr	r3, [pc, #76]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	4a14      	ldr	r2, [pc, #80]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e4a:	5cd3      	ldrb	r3, [r2, r3]
 8002e4c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e58:	4a0e      	ldr	r2, [pc, #56]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	fb02 f303 	mul.w	r3, r2, r3
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	e004      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	613b      	str	r3, [r7, #16]
      break;
 8002e78:	e002      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e7a:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e7c:	613b      	str	r3, [r7, #16]
      break;
 8002e7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e80:	693b      	ldr	r3, [r7, #16]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	007a1200 	.word	0x007a1200
 8002e98:	080059b8 	.word	0x080059b8
 8002e9c:	080059c8 	.word	0x080059c8
 8002ea0:	003d0900 	.word	0x003d0900

08002ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea8:	4b03      	ldr	r3, [pc, #12]	@ (8002eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20000004 	.word	0x20000004

08002ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ec2:	f7ff ffef 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002ec6:	4601      	mov	r1, r0
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ed0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002ed4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	fa92 f2a2 	rbit	r2, r2
 8002edc:	603a      	str	r2, [r7, #0]
  return result;
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	fab2 f282 	clz	r2, r2
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	40d3      	lsrs	r3, r2
 8002ee8:	4a04      	ldr	r2, [pc, #16]	@ (8002efc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002eea:	5cd3      	ldrb	r3, [r2, r3]
 8002eec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	080059b0 	.word	0x080059b0

08002f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f06:	f7ff ffcd 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002f0a:	4601      	mov	r1, r0
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002f14:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002f18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	fa92 f2a2 	rbit	r2, r2
 8002f20:	603a      	str	r2, [r7, #0]
  return result;
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	fab2 f282 	clz	r2, r2
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	40d3      	lsrs	r3, r2
 8002f2c:	4a04      	ldr	r2, [pc, #16]	@ (8002f40 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f2e:	5cd3      	ldrb	r3, [r2, r3]
 8002f30:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	080059b0 	.word	0x080059b0

08002f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b092      	sub	sp, #72	@ 0x48
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80d2 	beq.w	800310c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f68:	4b4d      	ldr	r3, [pc, #308]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10e      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f74:	4b4a      	ldr	r3, [pc, #296]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4a49      	ldr	r2, [pc, #292]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f7e:	61d3      	str	r3, [r2, #28]
 8002f80:	4b47      	ldr	r3, [pc, #284]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b44      	ldr	r3, [pc, #272]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d118      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9e:	4b41      	ldr	r3, [pc, #260]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a40      	ldr	r2, [pc, #256]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7fd fe73 	bl	8000c94 <HAL_GetTick>
 8002fae:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7fd fe6f 	bl	8000c94 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b64      	cmp	r3, #100	@ 0x64
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e167      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b37      	ldr	r3, [pc, #220]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fd0:	4b33      	ldr	r3, [pc, #204]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8082 	beq.w	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d07a      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ffa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ffe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	4b25      	ldr	r3, [pc, #148]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	461a      	mov	r2, r3
 800301a:	2301      	movs	r3, #1
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003022:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800302c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	4b1c      	ldr	r3, [pc, #112]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	461a      	mov	r2, r3
 800303e:	2300      	movs	r3, #0
 8003040:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003042:	4a17      	ldr	r2, [pc, #92]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003046:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d049      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fd fe1f 	bl	8000c94 <HAL_GetTick>
 8003056:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003058:	e00a      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fd fe1b 	bl	8000c94 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e111      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003070:	2302      	movs	r3, #2
 8003072:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	627b      	str	r3, [r7, #36]	@ 0x24
 800307c:	2302      	movs	r3, #2
 800307e:	623b      	str	r3, [r7, #32]
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	61fb      	str	r3, [r7, #28]
  return result;
 8003088:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d108      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x168>
 800309a:	4b01      	ldr	r3, [pc, #4]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	e00d      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40007000 	.word	0x40007000
 80030a8:	10908100 	.word	0x10908100
 80030ac:	2302      	movs	r3, #2
 80030ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	4b78      	ldr	r3, [pc, #480]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	2202      	movs	r2, #2
 80030be:	613a      	str	r2, [r7, #16]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	fa92 f2a2 	rbit	r2, r2
 80030c6:	60fa      	str	r2, [r7, #12]
  return result;
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	fab2 f282 	clz	r2, r2
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	f002 021f 	and.w	r2, r2, #31
 80030da:	2101      	movs	r1, #1
 80030dc:	fa01 f202 	lsl.w	r2, r1, r2
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0b9      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80030e6:	4b6d      	ldr	r3, [pc, #436]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	496a      	ldr	r1, [pc, #424]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d105      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003100:	4b66      	ldr	r3, [pc, #408]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	4a65      	ldr	r2, [pc, #404]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003106:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800310a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003118:	4b60      	ldr	r3, [pc, #384]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311c:	f023 0203 	bic.w	r2, r3, #3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	495d      	ldr	r1, [pc, #372]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003126:	4313      	orrs	r3, r2
 8003128:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d008      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003136:	4b59      	ldr	r3, [pc, #356]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	4956      	ldr	r1, [pc, #344]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003144:	4313      	orrs	r3, r2
 8003146:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003154:	4b51      	ldr	r3, [pc, #324]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	494e      	ldr	r1, [pc, #312]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003162:	4313      	orrs	r3, r2
 8003164:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003172:	4b4a      	ldr	r3, [pc, #296]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	f023 0210 	bic.w	r2, r3, #16
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4947      	ldr	r1, [pc, #284]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003180:	4313      	orrs	r3, r2
 8003182:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003190:	4b42      	ldr	r3, [pc, #264]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319c:	493f      	ldr	r1, [pc, #252]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d008      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031ae:	4b3b      	ldr	r3, [pc, #236]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	f023 0220 	bic.w	r2, r3, #32
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4938      	ldr	r1, [pc, #224]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031cc:	4b33      	ldr	r3, [pc, #204]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	4930      	ldr	r1, [pc, #192]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031ea:	4b2c      	ldr	r3, [pc, #176]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	4929      	ldr	r1, [pc, #164]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003208:	4b24      	ldr	r3, [pc, #144]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003214:	4921      	ldr	r1, [pc, #132]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003226:	4b1d      	ldr	r3, [pc, #116]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003232:	491a      	ldr	r1, [pc, #104]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003234:	4313      	orrs	r3, r2
 8003236:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003244:	4b15      	ldr	r3, [pc, #84]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003248:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003250:	4912      	ldr	r1, [pc, #72]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003252:	4313      	orrs	r3, r2
 8003254:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d008      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003262:	4b0e      	ldr	r3, [pc, #56]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	490b      	ldr	r1, [pc, #44]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003270:	4313      	orrs	r3, r2
 8003272:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003280:	4b06      	ldr	r3, [pc, #24]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003284:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800328c:	4903      	ldr	r1, [pc, #12]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800328e:	4313      	orrs	r3, r2
 8003290:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3748      	adds	r7, #72	@ 0x48
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40021000 	.word	0x40021000

080032a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e040      	b.n	8003334 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd faf0 	bl	80008a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	@ 0x24
 80032cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fe0a 	bl	8003f00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fc33 	bl	8003b58 <UART_SetConfig>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e01b      	b.n	8003334 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800330a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800331a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fe89 	bl	8004044 <UART_CheckIdleState>
 8003332:	4603      	mov	r3, r0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e02f      	b.n	80033ae <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2224      	movs	r2, #36	@ 0x24
 8003352:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2200      	movs	r2, #0
 8003372:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7fd fb35 	bl	80009ec <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	@ 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	4613      	mov	r3, r2
 80033c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d165      	bne.n	800349a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <HAL_UART_Transmit_DMA+0x22>
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e05e      	b.n	800349c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	88fa      	ldrh	r2, [r7, #6]
 80033e8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	88fa      	ldrh	r2, [r7, #6]
 80033f0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2221      	movs	r2, #33	@ 0x21
 8003400:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003406:	2b00      	cmp	r3, #0
 8003408:	d027      	beq.n	800345a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340e:	4a25      	ldr	r2, [pc, #148]	@ (80034a4 <HAL_UART_Transmit_DMA+0xec>)
 8003410:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003416:	4a24      	ldr	r2, [pc, #144]	@ (80034a8 <HAL_UART_Transmit_DMA+0xf0>)
 8003418:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341e:	4a23      	ldr	r2, [pc, #140]	@ (80034ac <HAL_UART_Transmit_DMA+0xf4>)
 8003420:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003426:	2200      	movs	r2, #0
 8003428:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003432:	4619      	mov	r1, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3328      	adds	r3, #40	@ 0x28
 800343a:	461a      	mov	r2, r3
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	f7fd fe2b 	bl	8001098 <HAL_DMA_Start_IT>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2210      	movs	r2, #16
 800344c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e020      	b.n	800349c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2240      	movs	r2, #64	@ 0x40
 8003460:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3308      	adds	r3, #8
 8003468:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	613b      	str	r3, [r7, #16]
   return(result);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3308      	adds	r3, #8
 8003480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003482:	623a      	str	r2, [r7, #32]
 8003484:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	69f9      	ldr	r1, [r7, #28]
 8003488:	6a3a      	ldr	r2, [r7, #32]
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e5      	bne.n	8003462 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	e000      	b.n	800349c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800349a:	2302      	movs	r3, #2
  }
}
 800349c:	4618      	mov	r0, r3
 800349e:	3728      	adds	r7, #40	@ 0x28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	080044c5 	.word	0x080044c5
 80034a8:	08004559 	.word	0x08004559
 80034ac:	080046d9 	.word	0x080046d9

080034b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	@ 0x28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	4613      	mov	r3, r2
 80034bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d132      	bne.n	800352e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_UART_Receive_DMA+0x24>
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e02b      	b.n	8003530 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d018      	beq.n	800351e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	e853 3f00 	ldrex	r3, [r3]
 80034f8:	613b      	str	r3, [r7, #16]
   return(result);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	623b      	str	r3, [r7, #32]
 800350c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350e:	69f9      	ldr	r1, [r7, #28]
 8003510:	6a3a      	ldr	r2, [r7, #32]
 8003512:	e841 2300 	strex	r3, r2, [r1]
 8003516:	61bb      	str	r3, [r7, #24]
   return(result);
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1e6      	bne.n	80034ec <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	461a      	mov	r2, r3
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 fea3 	bl	8004270 <UART_Start_Receive_DMA>
 800352a:	4603      	mov	r3, r0
 800352c:	e000      	b.n	8003530 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800352e:	2302      	movs	r3, #2
  }
}
 8003530:	4618      	mov	r0, r3
 8003532:	3728      	adds	r7, #40	@ 0x28
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b0ba      	sub	sp, #232	@ 0xe8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800355e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003562:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003566:	4013      	ands	r3, r2
 8003568:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800356c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d115      	bne.n	80035a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00f      	beq.n	80035a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	2b00      	cmp	r3, #0
 800358a:	d009      	beq.n	80035a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 82ab 	beq.w	8003aec <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	4798      	blx	r3
      }
      return;
 800359e:	e2a5      	b.n	8003aec <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8117 	beq.w	80037d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80035ba:	4b85      	ldr	r3, [pc, #532]	@ (80037d0 <HAL_UART_IRQHandler+0x298>)
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 810a 	beq.w	80037d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d011      	beq.n	80035f4 <HAL_UART_IRQHandler+0xbc>
 80035d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00b      	beq.n	80035f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2201      	movs	r2, #1
 80035e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ea:	f043 0201 	orr.w	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d011      	beq.n	8003624 <HAL_UART_IRQHandler+0xec>
 8003600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00b      	beq.n	8003624 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2202      	movs	r2, #2
 8003612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800361a:	f043 0204 	orr.w	r2, r3, #4
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d011      	beq.n	8003654 <HAL_UART_IRQHandler+0x11c>
 8003630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2204      	movs	r2, #4
 8003642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800364a:	f043 0202 	orr.w	r2, r3, #2
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d017      	beq.n	8003690 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d105      	bne.n	8003678 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800366c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003670:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00b      	beq.n	8003690 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2208      	movs	r2, #8
 800367e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003686:	f043 0208 	orr.w	r2, r3, #8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003698:	2b00      	cmp	r3, #0
 800369a:	d012      	beq.n	80036c2 <HAL_UART_IRQHandler+0x18a>
 800369c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00c      	beq.n	80036c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8211 	beq.w	8003af0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80036ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00d      	beq.n	80036f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370a:	2b40      	cmp	r3, #64	@ 0x40
 800370c:	d005      	beq.n	800371a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800370e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003712:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003716:	2b00      	cmp	r3, #0
 8003718:	d04f      	beq.n	80037ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fe6e 	bl	80043fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372a:	2b40      	cmp	r3, #64	@ 0x40
 800372c:	d141      	bne.n	80037b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3308      	adds	r3, #8
 8003734:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003738:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800373c:	e853 3f00 	ldrex	r3, [r3]
 8003740:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003744:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003748:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800374c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3308      	adds	r3, #8
 8003756:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800375a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800375e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003762:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003766:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003772:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1d9      	bne.n	800372e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800377e:	2b00      	cmp	r3, #0
 8003780:	d013      	beq.n	80037aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003786:	4a13      	ldr	r2, [pc, #76]	@ (80037d4 <HAL_UART_IRQHandler+0x29c>)
 8003788:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800378e:	4618      	mov	r0, r3
 8003790:	f7fd fd1f 	bl	80011d2 <HAL_DMA_Abort_IT>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d017      	beq.n	80037ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800379e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80037a4:	4610      	mov	r0, r2
 80037a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a8:	e00f      	b.n	80037ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f9be 	bl	8003b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b0:	e00b      	b.n	80037ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f9ba 	bl	8003b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b8:	e007      	b.n	80037ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f9b6 	bl	8003b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80037c8:	e192      	b.n	8003af0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ca:	bf00      	nop
    return;
 80037cc:	e190      	b.n	8003af0 <HAL_UART_IRQHandler+0x5b8>
 80037ce:	bf00      	nop
 80037d0:	04000120 	.word	0x04000120
 80037d4:	08004757 	.word	0x08004757

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037dc:	2b01      	cmp	r3, #1
 80037de:	f040 814b 	bne.w	8003a78 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8144 	beq.w	8003a78 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 813d 	beq.w	8003a78 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2210      	movs	r2, #16
 8003804:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003810:	2b40      	cmp	r3, #64	@ 0x40
 8003812:	f040 80b5 	bne.w	8003980 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003822:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 8164 	beq.w	8003af4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003836:	429a      	cmp	r2, r3
 8003838:	f080 815c 	bcs.w	8003af4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003842:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b20      	cmp	r3, #32
 800384e:	f000 8086 	beq.w	800395e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003866:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800386a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800386e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800387c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003880:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003888:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003894:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1da      	bne.n	8003852 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3308      	adds	r3, #8
 80038a2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3308      	adds	r3, #8
 80038bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038c0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80038c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80038c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80038d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e1      	bne.n	800389c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3308      	adds	r3, #8
 80038de:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80038e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3308      	adds	r3, #8
 80038f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80038fc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038fe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003902:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800390a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e3      	bne.n	80038d8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800392c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800392e:	f023 0310 	bic.w	r3, r3, #16
 8003932:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003940:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003942:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003946:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800394e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e4      	bne.n	800391e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003958:	4618      	mov	r0, r3
 800395a:	f7fd fbfc 	bl	8001156 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003970:	b29b      	uxth	r3, r3
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	b29b      	uxth	r3, r3
 8003976:	4619      	mov	r1, r3
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f8e1 	bl	8003b40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800397e:	e0b9      	b.n	8003af4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800398c:	b29b      	uxth	r3, r3
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80ab 	beq.w	8003af8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80039a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 80a6 	beq.w	8003af8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80039d0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039d6:	e841 2300 	strex	r3, r2, [r1]
 80039da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1e4      	bne.n	80039ac <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3308      	adds	r3, #8
 80039e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	623b      	str	r3, [r7, #32]
   return(result);
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3308      	adds	r3, #8
 8003a02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a06:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e3      	bne.n	80039e2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	e853 3f00 	ldrex	r3, [r3]
 8003a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0310 	bic.w	r3, r3, #16
 8003a42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	69b9      	ldr	r1, [r7, #24]
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e4      	bne.n	8003a2e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a6e:	4619      	mov	r1, r3
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f865 	bl	8003b40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a76:	e03f      	b.n	8003af8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00e      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x56a>
 8003a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fe9b 	bl	80047d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003aa0:	e02d      	b.n	8003afe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00e      	beq.n	8003acc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01c      	beq.n	8003afc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	4798      	blx	r3
    }
    return;
 8003aca:	e017      	b.n	8003afc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d012      	beq.n	8003afe <HAL_UART_IRQHandler+0x5c6>
 8003ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00c      	beq.n	8003afe <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fe4c 	bl	8004782 <UART_EndTransmit_IT>
    return;
 8003aea:	e008      	b.n	8003afe <HAL_UART_IRQHandler+0x5c6>
      return;
 8003aec:	bf00      	nop
 8003aee:	e006      	b.n	8003afe <HAL_UART_IRQHandler+0x5c6>
    return;
 8003af0:	bf00      	nop
 8003af2:	e004      	b.n	8003afe <HAL_UART_IRQHandler+0x5c6>
      return;
 8003af4:	bf00      	nop
 8003af6:	e002      	b.n	8003afe <HAL_UART_IRQHandler+0x5c6>
      return;
 8003af8:	bf00      	nop
 8003afa:	e000      	b.n	8003afe <HAL_UART_IRQHandler+0x5c6>
    return;
 8003afc:	bf00      	nop
  }

}
 8003afe:	37e8      	adds	r7, #232	@ 0xe8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003b86:	f023 030c 	bic.w	r3, r3, #12
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	6979      	ldr	r1, [r7, #20]
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4aa7      	ldr	r2, [pc, #668]	@ (8003e70 <UART_SetConfig+0x318>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d120      	bne.n	8003c1a <UART_SetConfig+0xc2>
 8003bd8:	4ba6      	ldr	r3, [pc, #664]	@ (8003e74 <UART_SetConfig+0x31c>)
 8003bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d817      	bhi.n	8003c14 <UART_SetConfig+0xbc>
 8003be4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bec <UART_SetConfig+0x94>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003bfd 	.word	0x08003bfd
 8003bf0:	08003c09 	.word	0x08003c09
 8003bf4:	08003c0f 	.word	0x08003c0f
 8003bf8:	08003c03 	.word	0x08003c03
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	77fb      	strb	r3, [r7, #31]
 8003c00:	e0b5      	b.n	8003d6e <UART_SetConfig+0x216>
 8003c02:	2302      	movs	r3, #2
 8003c04:	77fb      	strb	r3, [r7, #31]
 8003c06:	e0b2      	b.n	8003d6e <UART_SetConfig+0x216>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e0af      	b.n	8003d6e <UART_SetConfig+0x216>
 8003c0e:	2308      	movs	r3, #8
 8003c10:	77fb      	strb	r3, [r7, #31]
 8003c12:	e0ac      	b.n	8003d6e <UART_SetConfig+0x216>
 8003c14:	2310      	movs	r3, #16
 8003c16:	77fb      	strb	r3, [r7, #31]
 8003c18:	e0a9      	b.n	8003d6e <UART_SetConfig+0x216>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a96      	ldr	r2, [pc, #600]	@ (8003e78 <UART_SetConfig+0x320>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d124      	bne.n	8003c6e <UART_SetConfig+0x116>
 8003c24:	4b93      	ldr	r3, [pc, #588]	@ (8003e74 <UART_SetConfig+0x31c>)
 8003c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c30:	d011      	beq.n	8003c56 <UART_SetConfig+0xfe>
 8003c32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c36:	d817      	bhi.n	8003c68 <UART_SetConfig+0x110>
 8003c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c3c:	d011      	beq.n	8003c62 <UART_SetConfig+0x10a>
 8003c3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c42:	d811      	bhi.n	8003c68 <UART_SetConfig+0x110>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <UART_SetConfig+0xf8>
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c4c:	d006      	beq.n	8003c5c <UART_SetConfig+0x104>
 8003c4e:	e00b      	b.n	8003c68 <UART_SetConfig+0x110>
 8003c50:	2300      	movs	r3, #0
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e08b      	b.n	8003d6e <UART_SetConfig+0x216>
 8003c56:	2302      	movs	r3, #2
 8003c58:	77fb      	strb	r3, [r7, #31]
 8003c5a:	e088      	b.n	8003d6e <UART_SetConfig+0x216>
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e085      	b.n	8003d6e <UART_SetConfig+0x216>
 8003c62:	2308      	movs	r3, #8
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e082      	b.n	8003d6e <UART_SetConfig+0x216>
 8003c68:	2310      	movs	r3, #16
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e07f      	b.n	8003d6e <UART_SetConfig+0x216>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a82      	ldr	r2, [pc, #520]	@ (8003e7c <UART_SetConfig+0x324>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d124      	bne.n	8003cc2 <UART_SetConfig+0x16a>
 8003c78:	4b7e      	ldr	r3, [pc, #504]	@ (8003e74 <UART_SetConfig+0x31c>)
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003c80:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c84:	d011      	beq.n	8003caa <UART_SetConfig+0x152>
 8003c86:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c8a:	d817      	bhi.n	8003cbc <UART_SetConfig+0x164>
 8003c8c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c90:	d011      	beq.n	8003cb6 <UART_SetConfig+0x15e>
 8003c92:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c96:	d811      	bhi.n	8003cbc <UART_SetConfig+0x164>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <UART_SetConfig+0x14c>
 8003c9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ca0:	d006      	beq.n	8003cb0 <UART_SetConfig+0x158>
 8003ca2:	e00b      	b.n	8003cbc <UART_SetConfig+0x164>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	e061      	b.n	8003d6e <UART_SetConfig+0x216>
 8003caa:	2302      	movs	r3, #2
 8003cac:	77fb      	strb	r3, [r7, #31]
 8003cae:	e05e      	b.n	8003d6e <UART_SetConfig+0x216>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	77fb      	strb	r3, [r7, #31]
 8003cb4:	e05b      	b.n	8003d6e <UART_SetConfig+0x216>
 8003cb6:	2308      	movs	r3, #8
 8003cb8:	77fb      	strb	r3, [r7, #31]
 8003cba:	e058      	b.n	8003d6e <UART_SetConfig+0x216>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	77fb      	strb	r3, [r7, #31]
 8003cc0:	e055      	b.n	8003d6e <UART_SetConfig+0x216>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a6e      	ldr	r2, [pc, #440]	@ (8003e80 <UART_SetConfig+0x328>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d124      	bne.n	8003d16 <UART_SetConfig+0x1be>
 8003ccc:	4b69      	ldr	r3, [pc, #420]	@ (8003e74 <UART_SetConfig+0x31c>)
 8003cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003cd4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cd8:	d011      	beq.n	8003cfe <UART_SetConfig+0x1a6>
 8003cda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cde:	d817      	bhi.n	8003d10 <UART_SetConfig+0x1b8>
 8003ce0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ce4:	d011      	beq.n	8003d0a <UART_SetConfig+0x1b2>
 8003ce6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cea:	d811      	bhi.n	8003d10 <UART_SetConfig+0x1b8>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <UART_SetConfig+0x1a0>
 8003cf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cf4:	d006      	beq.n	8003d04 <UART_SetConfig+0x1ac>
 8003cf6:	e00b      	b.n	8003d10 <UART_SetConfig+0x1b8>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	77fb      	strb	r3, [r7, #31]
 8003cfc:	e037      	b.n	8003d6e <UART_SetConfig+0x216>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	77fb      	strb	r3, [r7, #31]
 8003d02:	e034      	b.n	8003d6e <UART_SetConfig+0x216>
 8003d04:	2304      	movs	r3, #4
 8003d06:	77fb      	strb	r3, [r7, #31]
 8003d08:	e031      	b.n	8003d6e <UART_SetConfig+0x216>
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	77fb      	strb	r3, [r7, #31]
 8003d0e:	e02e      	b.n	8003d6e <UART_SetConfig+0x216>
 8003d10:	2310      	movs	r3, #16
 8003d12:	77fb      	strb	r3, [r7, #31]
 8003d14:	e02b      	b.n	8003d6e <UART_SetConfig+0x216>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a5a      	ldr	r2, [pc, #360]	@ (8003e84 <UART_SetConfig+0x32c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d124      	bne.n	8003d6a <UART_SetConfig+0x212>
 8003d20:	4b54      	ldr	r3, [pc, #336]	@ (8003e74 <UART_SetConfig+0x31c>)
 8003d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d24:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003d28:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d2c:	d011      	beq.n	8003d52 <UART_SetConfig+0x1fa>
 8003d2e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d32:	d817      	bhi.n	8003d64 <UART_SetConfig+0x20c>
 8003d34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d38:	d011      	beq.n	8003d5e <UART_SetConfig+0x206>
 8003d3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d3e:	d811      	bhi.n	8003d64 <UART_SetConfig+0x20c>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <UART_SetConfig+0x1f4>
 8003d44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d48:	d006      	beq.n	8003d58 <UART_SetConfig+0x200>
 8003d4a:	e00b      	b.n	8003d64 <UART_SetConfig+0x20c>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e00d      	b.n	8003d6e <UART_SetConfig+0x216>
 8003d52:	2302      	movs	r3, #2
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	e00a      	b.n	8003d6e <UART_SetConfig+0x216>
 8003d58:	2304      	movs	r3, #4
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	e007      	b.n	8003d6e <UART_SetConfig+0x216>
 8003d5e:	2308      	movs	r3, #8
 8003d60:	77fb      	strb	r3, [r7, #31]
 8003d62:	e004      	b.n	8003d6e <UART_SetConfig+0x216>
 8003d64:	2310      	movs	r3, #16
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e001      	b.n	8003d6e <UART_SetConfig+0x216>
 8003d6a:	2310      	movs	r3, #16
 8003d6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d76:	d15b      	bne.n	8003e30 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003d78:	7ffb      	ldrb	r3, [r7, #31]
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d827      	bhi.n	8003dce <UART_SetConfig+0x276>
 8003d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d84 <UART_SetConfig+0x22c>)
 8003d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d84:	08003da9 	.word	0x08003da9
 8003d88:	08003db1 	.word	0x08003db1
 8003d8c:	08003db9 	.word	0x08003db9
 8003d90:	08003dcf 	.word	0x08003dcf
 8003d94:	08003dbf 	.word	0x08003dbf
 8003d98:	08003dcf 	.word	0x08003dcf
 8003d9c:	08003dcf 	.word	0x08003dcf
 8003da0:	08003dcf 	.word	0x08003dcf
 8003da4:	08003dc7 	.word	0x08003dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da8:	f7ff f888 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 8003dac:	61b8      	str	r0, [r7, #24]
        break;
 8003dae:	e013      	b.n	8003dd8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003db0:	f7ff f8a6 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 8003db4:	61b8      	str	r0, [r7, #24]
        break;
 8003db6:	e00f      	b.n	8003dd8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db8:	4b33      	ldr	r3, [pc, #204]	@ (8003e88 <UART_SetConfig+0x330>)
 8003dba:	61bb      	str	r3, [r7, #24]
        break;
 8003dbc:	e00c      	b.n	8003dd8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dbe:	f7ff f81d 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8003dc2:	61b8      	str	r0, [r7, #24]
        break;
 8003dc4:	e008      	b.n	8003dd8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dca:	61bb      	str	r3, [r7, #24]
        break;
 8003dcc:	e004      	b.n	8003dd8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	77bb      	strb	r3, [r7, #30]
        break;
 8003dd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8082 	beq.w	8003ee4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	005a      	lsls	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	085b      	lsrs	r3, r3, #1
 8003dea:	441a      	add	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b0f      	cmp	r3, #15
 8003dfa:	d916      	bls.n	8003e2a <UART_SetConfig+0x2d2>
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e02:	d212      	bcs.n	8003e2a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f023 030f 	bic.w	r3, r3, #15
 8003e0c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	085b      	lsrs	r3, r3, #1
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	89fb      	ldrh	r3, [r7, #14]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	89fa      	ldrh	r2, [r7, #14]
 8003e26:	60da      	str	r2, [r3, #12]
 8003e28:	e05c      	b.n	8003ee4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	77bb      	strb	r3, [r7, #30]
 8003e2e:	e059      	b.n	8003ee4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e30:	7ffb      	ldrb	r3, [r7, #31]
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d835      	bhi.n	8003ea2 <UART_SetConfig+0x34a>
 8003e36:	a201      	add	r2, pc, #4	@ (adr r2, 8003e3c <UART_SetConfig+0x2e4>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e61 	.word	0x08003e61
 8003e40:	08003e69 	.word	0x08003e69
 8003e44:	08003e8d 	.word	0x08003e8d
 8003e48:	08003ea3 	.word	0x08003ea3
 8003e4c:	08003e93 	.word	0x08003e93
 8003e50:	08003ea3 	.word	0x08003ea3
 8003e54:	08003ea3 	.word	0x08003ea3
 8003e58:	08003ea3 	.word	0x08003ea3
 8003e5c:	08003e9b 	.word	0x08003e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e60:	f7ff f82c 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 8003e64:	61b8      	str	r0, [r7, #24]
        break;
 8003e66:	e021      	b.n	8003eac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e68:	f7ff f84a 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 8003e6c:	61b8      	str	r0, [r7, #24]
        break;
 8003e6e:	e01d      	b.n	8003eac <UART_SetConfig+0x354>
 8003e70:	40013800 	.word	0x40013800
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40004400 	.word	0x40004400
 8003e7c:	40004800 	.word	0x40004800
 8003e80:	40004c00 	.word	0x40004c00
 8003e84:	40005000 	.word	0x40005000
 8003e88:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003efc <UART_SetConfig+0x3a4>)
 8003e8e:	61bb      	str	r3, [r7, #24]
        break;
 8003e90:	e00c      	b.n	8003eac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e92:	f7fe ffb3 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8003e96:	61b8      	str	r0, [r7, #24]
        break;
 8003e98:	e008      	b.n	8003eac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e9e:	61bb      	str	r3, [r7, #24]
        break;
 8003ea0:	e004      	b.n	8003eac <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	77bb      	strb	r3, [r7, #30]
        break;
 8003eaa:	bf00      	nop
    }

    if (pclk != 0U)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d018      	beq.n	8003ee4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	085a      	lsrs	r2, r3, #1
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	441a      	add	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b0f      	cmp	r3, #15
 8003eca:	d909      	bls.n	8003ee0 <UART_SetConfig+0x388>
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed2:	d205      	bcs.n	8003ee0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60da      	str	r2, [r3, #12]
 8003ede:	e001      	b.n	8003ee4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ef0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	007a1200 	.word	0x007a1200

08003f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01a      	beq.n	8004016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffe:	d10a      	bne.n	8004016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	605a      	str	r2, [r3, #4]
  }
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b098      	sub	sp, #96	@ 0x60
 8004048:	af02      	add	r7, sp, #8
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004054:	f7fc fe1e 	bl	8000c94 <HAL_GetTick>
 8004058:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b08      	cmp	r3, #8
 8004066:	d12e      	bne.n	80040c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004068:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004070:	2200      	movs	r2, #0
 8004072:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f88c 	bl	8004194 <UART_WaitOnFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d021      	beq.n	80040c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004096:	653b      	str	r3, [r7, #80]	@ 0x50
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e6      	bne.n	8004082 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e062      	b.n	800418c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d149      	bne.n	8004168 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040dc:	2200      	movs	r2, #0
 80040de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f856 	bl	8004194 <UART_WaitOnFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d03c      	beq.n	8004168 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	623b      	str	r3, [r7, #32]
   return(result);
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800410c:	633b      	str	r3, [r7, #48]	@ 0x30
 800410e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800411a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e6      	bne.n	80040ee <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3308      	adds	r3, #8
 8004126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3308      	adds	r3, #8
 800413e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004140:	61fa      	str	r2, [r7, #28]
 8004142:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004144:	69b9      	ldr	r1, [r7, #24]
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	e841 2300 	strex	r3, r2, [r1]
 800414c:	617b      	str	r3, [r7, #20]
   return(result);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e5      	bne.n	8004120 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e011      	b.n	800418c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3758      	adds	r7, #88	@ 0x58
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	4613      	mov	r3, r2
 80041a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a4:	e04f      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d04b      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ae:	f7fc fd71 	bl	8000c94 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d302      	bcc.n	80041c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e04e      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d037      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b80      	cmp	r3, #128	@ 0x80
 80041da:	d034      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b40      	cmp	r3, #64	@ 0x40
 80041e0:	d031      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d110      	bne.n	8004212 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2208      	movs	r2, #8
 80041f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f8ff 	bl	80043fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2208      	movs	r2, #8
 8004202:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e029      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800421c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004220:	d111      	bne.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800422a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f8e5 	bl	80043fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e00f      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4013      	ands	r3, r2
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	429a      	cmp	r2, r3
 8004254:	bf0c      	ite	eq
 8004256:	2301      	moveq	r3, #1
 8004258:	2300      	movne	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	429a      	cmp	r2, r3
 8004262:	d0a0      	beq.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b096      	sub	sp, #88	@ 0x58
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	4613      	mov	r3, r2
 800427c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	88fa      	ldrh	r2, [r7, #6]
 8004288:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2222      	movs	r2, #34	@ 0x22
 8004298:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d028      	beq.n	80042f6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042a8:	4a3e      	ldr	r2, [pc, #248]	@ (80043a4 <UART_Start_Receive_DMA+0x134>)
 80042aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b0:	4a3d      	ldr	r2, [pc, #244]	@ (80043a8 <UART_Start_Receive_DMA+0x138>)
 80042b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b8:	4a3c      	ldr	r2, [pc, #240]	@ (80043ac <UART_Start_Receive_DMA+0x13c>)
 80042ba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c0:	2200      	movs	r2, #0
 80042c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3324      	adds	r3, #36	@ 0x24
 80042ce:	4619      	mov	r1, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d4:	461a      	mov	r2, r3
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	f7fc fede 	bl	8001098 <HAL_DMA_Start_IT>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2210      	movs	r2, #16
 80042e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e051      	b.n	800439a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d018      	beq.n	8004330 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800430c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004312:	657b      	str	r3, [r7, #84]	@ 0x54
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800431e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800432a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e6      	bne.n	80042fe <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3308      	adds	r3, #8
 8004336:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	653b      	str	r3, [r7, #80]	@ 0x50
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3308      	adds	r3, #8
 800434e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004350:	637a      	str	r2, [r7, #52]	@ 0x34
 8004352:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004356:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800435e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e5      	bne.n	8004330 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3308      	adds	r3, #8
 800436a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	613b      	str	r3, [r7, #16]
   return(result);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800437a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3308      	adds	r3, #8
 8004382:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004384:	623a      	str	r2, [r7, #32]
 8004386:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	69f9      	ldr	r1, [r7, #28]
 800438a:	6a3a      	ldr	r2, [r7, #32]
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	61bb      	str	r3, [r7, #24]
   return(result);
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e5      	bne.n	8004364 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3758      	adds	r7, #88	@ 0x58
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	08004575 	.word	0x08004575
 80043a8:	0800469b 	.word	0x0800469b
 80043ac:	080046d9 	.word	0x080046d9

080043b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b089      	sub	sp, #36	@ 0x24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	e853 3f00 	ldrex	r3, [r3]
 80043c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	61bb      	str	r3, [r7, #24]
 80043d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	6979      	ldr	r1, [r7, #20]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	613b      	str	r3, [r7, #16]
   return(result);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1e6      	bne.n	80043b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80043f0:	bf00      	nop
 80043f2:	3724      	adds	r7, #36	@ 0x24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b095      	sub	sp, #84	@ 0x54
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004414:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004418:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004422:	643b      	str	r3, [r7, #64]	@ 0x40
 8004424:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004428:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e6      	bne.n	8004404 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3308      	adds	r3, #8
 800443c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	61fb      	str	r3, [r7, #28]
   return(result);
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f023 0301 	bic.w	r3, r3, #1
 800444c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3308      	adds	r3, #8
 8004454:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004456:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800445c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e5      	bne.n	8004436 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800446e:	2b01      	cmp	r3, #1
 8004470:	d118      	bne.n	80044a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	e853 3f00 	ldrex	r3, [r3]
 800447e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f023 0310 	bic.w	r3, r3, #16
 8004486:	647b      	str	r3, [r7, #68]	@ 0x44
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	6979      	ldr	r1, [r7, #20]
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	613b      	str	r3, [r7, #16]
   return(result);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e6      	bne.n	8004472 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044b8:	bf00      	nop
 80044ba:	3754      	adds	r7, #84	@ 0x54
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b090      	sub	sp, #64	@ 0x40
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d037      	beq.n	800454a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80044da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044dc:	2200      	movs	r2, #0
 80044de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80044e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3308      	adds	r3, #8
 80044e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	623b      	str	r3, [r7, #32]
   return(result);
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3308      	adds	r3, #8
 8004500:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004502:	633a      	str	r2, [r7, #48]	@ 0x30
 8004504:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e5      	bne.n	80044e2 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	60fb      	str	r3, [r7, #12]
   return(result);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800452a:	637b      	str	r3, [r7, #52]	@ 0x34
 800452c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	69b9      	ldr	r1, [r7, #24]
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	617b      	str	r3, [r7, #20]
   return(result);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e6      	bne.n	8004516 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004548:	e002      	b.n	8004550 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800454a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800454c:	f7fc f972 	bl	8000834 <HAL_UART_TxCpltCallback>
}
 8004550:	bf00      	nop
 8004552:	3740      	adds	r7, #64	@ 0x40
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7ff facc 	bl	8003b04 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b09c      	sub	sp, #112	@ 0x70
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b20      	cmp	r3, #32
 8004588:	d071      	beq.n	800466e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800458a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800458c:	2200      	movs	r2, #0
 800458e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045b2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e6      	bne.n	8004592 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3308      	adds	r3, #8
 80045ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	667b      	str	r3, [r7, #100]	@ 0x64
 80045dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3308      	adds	r3, #8
 80045e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80045e4:	647a      	str	r2, [r7, #68]	@ 0x44
 80045e6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e5      	bne.n	80045c4 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3308      	adds	r3, #8
 80045fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	623b      	str	r3, [r7, #32]
   return(result);
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800460e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3308      	adds	r3, #8
 8004616:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004618:	633a      	str	r2, [r7, #48]	@ 0x30
 800461a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800461e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004620:	e841 2300 	strex	r3, r2, [r1]
 8004624:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e5      	bne.n	80045f8 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800462c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800462e:	2220      	movs	r2, #32
 8004630:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004634:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004638:	2b01      	cmp	r3, #1
 800463a:	d118      	bne.n	800466e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800463c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	60fb      	str	r3, [r7, #12]
   return(result);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f023 0310 	bic.w	r3, r3, #16
 8004650:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	69b9      	ldr	r1, [r7, #24]
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	e841 2300 	strex	r3, r2, [r1]
 8004666:	617b      	str	r3, [r7, #20]
   return(result);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1e6      	bne.n	800463c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800466e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004670:	2200      	movs	r2, #0
 8004672:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004678:	2b01      	cmp	r3, #1
 800467a:	d107      	bne.n	800468c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800467c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800467e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004682:	4619      	mov	r1, r3
 8004684:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004686:	f7ff fa5b 	bl	8003b40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800468a:	e002      	b.n	8004692 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800468c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800468e:	f7fc f89b 	bl	80007c8 <HAL_UART_RxCpltCallback>
}
 8004692:	bf00      	nop
 8004694:	3770      	adds	r7, #112	@ 0x70
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d109      	bne.n	80046ca <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	b29b      	uxth	r3, r3
 80046c0:	4619      	mov	r1, r3
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff fa3c 	bl	8003b40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046c8:	e002      	b.n	80046d0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7ff fa24 	bl	8003b18 <HAL_UART_RxHalfCpltCallback>
}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fe:	2b80      	cmp	r3, #128	@ 0x80
 8004700:	d109      	bne.n	8004716 <UART_DMAError+0x3e>
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	2b21      	cmp	r3, #33	@ 0x21
 8004706:	d106      	bne.n	8004716 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004710:	6978      	ldr	r0, [r7, #20]
 8004712:	f7ff fe4d 	bl	80043b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004720:	2b40      	cmp	r3, #64	@ 0x40
 8004722:	d109      	bne.n	8004738 <UART_DMAError+0x60>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b22      	cmp	r3, #34	@ 0x22
 8004728:	d106      	bne.n	8004738 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2200      	movs	r2, #0
 800472e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004732:	6978      	ldr	r0, [r7, #20]
 8004734:	f7ff fe62 	bl	80043fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800473e:	f043 0210 	orr.w	r2, r3, #16
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004748:	6978      	ldr	r0, [r7, #20]
 800474a:	f7ff f9ef 	bl	8003b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800474e:	bf00      	nop
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f7ff f9d9 	bl	8003b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b088      	sub	sp, #32
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	60bb      	str	r3, [r7, #8]
   return(result);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	6979      	ldr	r1, [r7, #20]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	613b      	str	r3, [r7, #16]
   return(result);
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e6      	bne.n	800478a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7fc f833 	bl	8000834 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ce:	bf00      	nop
 80047d0:	3720      	adds	r7, #32
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047f2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80047f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	b29b      	uxth	r3, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	b29b      	uxth	r3, r3
 8004808:	4013      	ands	r3, r2
 800480a:	b29a      	uxth	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	1d3b      	adds	r3, r7, #4
 800482a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <arm_fft>:
 800485c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004860:	ed2d 8b02 	vpush	{d8}
 8004864:	2a01      	cmp	r2, #1
 8004866:	b087      	sub	sp, #28
 8004868:	460d      	mov	r5, r1
 800486a:	af00      	add	r7, sp, #0
 800486c:	d079      	beq.n	8004962 <arm_fft+0x106>
 800486e:	4693      	mov	fp, r2
 8004870:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8004874:	ea4f 0a62 	mov.w	sl, r2, asr #1
 8004878:	dd7c      	ble.n	8004974 <arm_fft+0x118>
 800487a:	f8df e128 	ldr.w	lr, [pc, #296]	@ 80049a4 <arm_fft+0x148>
 800487e:	4a48      	ldr	r2, [pc, #288]	@ (80049a0 <arm_fft+0x144>)
 8004880:	4603      	mov	r3, r0
 8004882:	2400      	movs	r4, #0
 8004884:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004888:	eb0e 06c4 	add.w	r6, lr, r4, lsl #3
 800488c:	e886 0003 	stmia.w	r6, {r0, r1}
 8004890:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004894:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
 8004898:	3401      	adds	r4, #1
 800489a:	4554      	cmp	r4, sl
 800489c:	e886 0003 	stmia.w	r6, {r0, r1}
 80048a0:	f103 0310 	add.w	r3, r3, #16
 80048a4:	dbee      	blt.n	8004884 <arm_fft+0x28>
 80048a6:	466b      	mov	r3, sp
 80048a8:	ee08 3a10 	vmov	s16, r3
 80048ac:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 80048b0:	469d      	mov	sp, r3
 80048b2:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 80048b6:	46e8      	mov	r8, sp
 80048b8:	469d      	mov	sp, r3
 80048ba:	483a      	ldr	r0, [pc, #232]	@ (80049a4 <arm_fft+0x148>)
 80048bc:	4641      	mov	r1, r8
 80048be:	4652      	mov	r2, sl
 80048c0:	466e      	mov	r6, sp
 80048c2:	f7ff ffcb 	bl	800485c <arm_fft>
 80048c6:	4836      	ldr	r0, [pc, #216]	@ (80049a0 <arm_fft+0x144>)
 80048c8:	4652      	mov	r2, sl
 80048ca:	4631      	mov	r1, r6
 80048cc:	f7ff ffc6 	bl	800485c <arm_fft>
 80048d0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80048d4:	607b      	str	r3, [r7, #4]
 80048d6:	f04f 0900 	mov.w	r9, #0
 80048da:	4648      	mov	r0, r9
 80048dc:	4659      	mov	r1, fp
 80048de:	f000 f8e5 	bl	8004aac <esponenziale_negj>
 80048e2:	eb06 03c9 	add.w	r3, r6, r9, lsl #3
 80048e6:	ed93 1a00 	vldr	s2, [r3]
 80048ea:	edd3 1a01 	vldr	s3, [r3, #4]
 80048ee:	ed87 0a02 	vstr	s0, [r7, #8]
 80048f2:	edc7 0a03 	vstr	s1, [r7, #12]
 80048f6:	f000 f8cb 	bl	8004a90 <prodotto_c>
 80048fa:	ea4f 04c9 	mov.w	r4, r9, lsl #3
 80048fe:	4444      	add	r4, r8
 8004900:	eeb0 1a40 	vmov.f32	s2, s0
 8004904:	eef0 1a60 	vmov.f32	s3, s1
 8004908:	ed94 0a00 	vldr	s0, [r4]
 800490c:	edd4 0a01 	vldr	s1, [r4, #4]
 8004910:	edc7 1a05 	vstr	s3, [r7, #20]
 8004914:	ed87 1a04 	vstr	s2, [r7, #16]
 8004918:	f000 f8aa 	bl	8004a70 <somma_c>
 800491c:	ed97 1a04 	vldr	s2, [r7, #16]
 8004920:	ed85 0a00 	vstr	s0, [r5]
 8004924:	edc5 0a01 	vstr	s1, [r5, #4]
 8004928:	ed94 0a00 	vldr	s0, [r4]
 800492c:	edd4 0a01 	vldr	s1, [r4, #4]
 8004930:	edd7 1a05 	vldr	s3, [r7, #20]
 8004934:	f000 f8a4 	bl	8004a80 <sottrazione_c>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f109 0901 	add.w	r9, r9, #1
 800493e:	442b      	add	r3, r5
 8004940:	45d1      	cmp	r9, sl
 8004942:	ed83 0a00 	vstr	s0, [r3]
 8004946:	f105 0508 	add.w	r5, r5, #8
 800494a:	edc3 0a01 	vstr	s1, [r3, #4]
 800494e:	dbc4      	blt.n	80048da <arm_fft+0x7e>
 8004950:	ee18 3a10 	vmov	r3, s16
 8004954:	371c      	adds	r7, #28
 8004956:	469d      	mov	sp, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	ecbd 8b02 	vpop	{d8}
 800495e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004962:	c803      	ldmia	r0, {r0, r1}
 8004964:	371c      	adds	r7, #28
 8004966:	e885 0003 	stmia.w	r5, {r0, r1}
 800496a:	46bd      	mov	sp, r7
 800496c:	ecbd 8b02 	vpop	{d8}
 8004970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004974:	466b      	mov	r3, sp
 8004976:	ee08 3a10 	vmov	s16, r3
 800497a:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 800497e:	469d      	mov	sp, r3
 8004980:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8004984:	4669      	mov	r1, sp
 8004986:	469d      	mov	sp, r3
 8004988:	4652      	mov	r2, sl
 800498a:	4806      	ldr	r0, [pc, #24]	@ (80049a4 <arm_fft+0x148>)
 800498c:	466c      	mov	r4, sp
 800498e:	f7ff ff65 	bl	800485c <arm_fft>
 8004992:	4803      	ldr	r0, [pc, #12]	@ (80049a0 <arm_fft+0x144>)
 8004994:	4652      	mov	r2, sl
 8004996:	4621      	mov	r1, r4
 8004998:	f7ff ff60 	bl	800485c <arm_fft>
 800499c:	e7d8      	b.n	8004950 <arm_fft+0xf4>
 800499e:	bf00      	nop
 80049a0:	20003978 	.word	0x20003978
 80049a4:	20005978 	.word	0x20005978

080049a8 <fft_to_spectrogram>:
 80049a8:	2a00      	cmp	r2, #0
 80049aa:	dd50      	ble.n	8004a4e <fft_to_spectrogram+0xa6>
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	ed2d 8b04 	vpush	{d8-d9}
 80049b2:	eddf 8a2d 	vldr	s17, [pc, #180]	@ 8004a68 <fft_to_spectrogram+0xc0>
 80049b6:	b084      	sub	sp, #16
 80049b8:	eeb0 8a40 	vmov.f32	s16, s0
 80049bc:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80049c0:	460c      	mov	r4, r1
 80049c2:	460d      	mov	r5, r1
 80049c4:	edd0 7a01 	vldr	s15, [r0, #4]
 80049c8:	ed90 7a00 	vldr	s14, [r0]
 80049cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80049d0:	3008      	adds	r0, #8
 80049d2:	eee7 7a07 	vfma.f32	s15, s14, s14
 80049d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049de:	eeb1 9ae7 	vsqrt.f32	s18, s15
 80049e2:	d435      	bmi.n	8004a50 <fft_to_spectrogram+0xa8>
 80049e4:	eeb4 9a68 	vcmp.f32	s18, s17
 80049e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ec:	bfc8      	it	gt
 80049ee:	eef0 8a49 	vmovgt.f32	s17, s18
 80049f2:	42b0      	cmp	r0, r6
 80049f4:	eca5 9a01 	vstmia	r5!, {s18}
 80049f8:	d1e4      	bne.n	80049c4 <fft_to_spectrogram+0x1c>
 80049fa:	ed9f 9a1c 	vldr	s18, [pc, #112]	@ 8004a6c <fft_to_spectrogram+0xc4>
 80049fe:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8004a02:	eef3 9a04 	vmov.f32	s19, #52	@ 0x41a00000  20.0
 8004a06:	ed94 0a00 	vldr	s0, [r4]
 8004a0a:	eeb4 0a49 	vcmp.f32	s0, s18
 8004a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a12:	bf48      	it	mi
 8004a14:	eeb0 0a49 	vmovmi.f32	s0, s18
 8004a18:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8004a1c:	f000 f8a0 	bl	8004b60 <log10f>
 8004a20:	ee20 0a29 	vmul.f32	s0, s0, s19
 8004a24:	eeb4 0a48 	vcmp.f32	s0, s16
 8004a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a2c:	bf48      	it	mi
 8004a2e:	eeb0 0a48 	vmovmi.f32	s0, s16
 8004a32:	ee70 7a48 	vsub.f32	s15, s0, s16
 8004a36:	eef1 7a67 	vneg.f32	s15, s15
 8004a3a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8004a3e:	eca4 7a01 	vstmia	r4!, {s14}
 8004a42:	42a5      	cmp	r5, r4
 8004a44:	d1df      	bne.n	8004a06 <fft_to_spectrogram+0x5e>
 8004a46:	b004      	add	sp, #16
 8004a48:	ecbd 8b04 	vpop	{d8-d9}
 8004a4c:	bd70      	pop	{r4, r5, r6, pc}
 8004a4e:	4770      	bx	lr
 8004a50:	eeb0 0a67 	vmov.f32	s0, s15
 8004a54:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004a58:	9001      	str	r0, [sp, #4]
 8004a5a:	f000 f8af 	bl	8004bbc <sqrtf>
 8004a5e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004a62:	9801      	ldr	r0, [sp, #4]
 8004a64:	e7be      	b.n	80049e4 <fft_to_spectrogram+0x3c>
 8004a66:	bf00      	nop
 8004a68:	00000000 	.word	0x00000000
 8004a6c:	2b8cbccc 	.word	0x2b8cbccc

08004a70 <somma_c>:
 8004a70:	ee30 0a01 	vadd.f32	s0, s0, s2
 8004a74:	ee70 0aa1 	vadd.f32	s1, s1, s3
 8004a78:	b088      	sub	sp, #32
 8004a7a:	b008      	add	sp, #32
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop

08004a80 <sottrazione_c>:
 8004a80:	ee30 0a41 	vsub.f32	s0, s0, s2
 8004a84:	ee70 0ae1 	vsub.f32	s1, s1, s3
 8004a88:	b088      	sub	sp, #32
 8004a8a:	b008      	add	sp, #32
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop

08004a90 <prodotto_c>:
 8004a90:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8004a94:	ee60 0a81 	vmul.f32	s1, s1, s2
 8004a98:	eee0 7a01 	vfma.f32	s15, s0, s2
 8004a9c:	b088      	sub	sp, #32
 8004a9e:	eee0 0a21 	vfma.f32	s1, s0, s3
 8004aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8004aa6:	b008      	add	sp, #32
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop

08004aac <esponenziale_negj>:
 8004aac:	ee07 0a90 	vmov	s15, r0
 8004ab0:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004af8 <esponenziale_negj+0x4c>
 8004ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ab8:	b500      	push	{lr}
 8004aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004abe:	ee07 1a10 	vmov	s14, r1
 8004ac2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004ac6:	ed2d 8b02 	vpush	{d8}
 8004aca:	eec7 8a87 	vdiv.f32	s17, s15, s14
 8004ace:	b085      	sub	sp, #20
 8004ad0:	eeb0 0a68 	vmov.f32	s0, s17
 8004ad4:	f000 f890 	bl	8004bf8 <cosf>
 8004ad8:	eeb0 8a40 	vmov.f32	s16, s0
 8004adc:	eeb0 0a68 	vmov.f32	s0, s17
 8004ae0:	f000 f8ce 	bl	8004c80 <sinf>
 8004ae4:	eef0 0a40 	vmov.f32	s1, s0
 8004ae8:	eeb0 0a48 	vmov.f32	s0, s16
 8004aec:	b005      	add	sp, #20
 8004aee:	ecbd 8b02 	vpop	{d8}
 8004af2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004af6:	bf00      	nop
 8004af8:	c0c90fdb 	.word	0xc0c90fdb

08004afc <memset>:
 8004afc:	4402      	add	r2, r0
 8004afe:	4603      	mov	r3, r0
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d100      	bne.n	8004b06 <memset+0xa>
 8004b04:	4770      	bx	lr
 8004b06:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0a:	e7f9      	b.n	8004b00 <memset+0x4>

08004b0c <__errno>:
 8004b0c:	4b01      	ldr	r3, [pc, #4]	@ (8004b14 <__errno+0x8>)
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000010 	.word	0x20000010

08004b18 <__libc_init_array>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8004b50 <__libc_init_array+0x38>)
 8004b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8004b54 <__libc_init_array+0x3c>)
 8004b1e:	1b64      	subs	r4, r4, r5
 8004b20:	10a4      	asrs	r4, r4, #2
 8004b22:	2600      	movs	r6, #0
 8004b24:	42a6      	cmp	r6, r4
 8004b26:	d109      	bne.n	8004b3c <__libc_init_array+0x24>
 8004b28:	4d0b      	ldr	r5, [pc, #44]	@ (8004b58 <__libc_init_array+0x40>)
 8004b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8004b5c <__libc_init_array+0x44>)
 8004b2c:	f000 ff2c 	bl	8005988 <_init>
 8004b30:	1b64      	subs	r4, r4, r5
 8004b32:	10a4      	asrs	r4, r4, #2
 8004b34:	2600      	movs	r6, #0
 8004b36:	42a6      	cmp	r6, r4
 8004b38:	d105      	bne.n	8004b46 <__libc_init_array+0x2e>
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b40:	4798      	blx	r3
 8004b42:	3601      	adds	r6, #1
 8004b44:	e7ee      	b.n	8004b24 <__libc_init_array+0xc>
 8004b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4a:	4798      	blx	r3
 8004b4c:	3601      	adds	r6, #1
 8004b4e:	e7f2      	b.n	8004b36 <__libc_init_array+0x1e>
 8004b50:	08005dac 	.word	0x08005dac
 8004b54:	08005dac 	.word	0x08005dac
 8004b58:	08005dac 	.word	0x08005dac
 8004b5c:	08005db0 	.word	0x08005db0

08004b60 <log10f>:
 8004b60:	b508      	push	{r3, lr}
 8004b62:	ed2d 8b02 	vpush	{d8}
 8004b66:	eeb0 8a40 	vmov.f32	s16, s0
 8004b6a:	f000 f979 	bl	8004e60 <__ieee754_log10f>
 8004b6e:	eeb4 8a48 	vcmp.f32	s16, s16
 8004b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b76:	d60f      	bvs.n	8004b98 <log10f+0x38>
 8004b78:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b80:	d80a      	bhi.n	8004b98 <log10f+0x38>
 8004b82:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8a:	d108      	bne.n	8004b9e <log10f+0x3e>
 8004b8c:	f7ff ffbe 	bl	8004b0c <__errno>
 8004b90:	2322      	movs	r3, #34	@ 0x22
 8004b92:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8004bb4 <log10f+0x54>
 8004b96:	6003      	str	r3, [r0, #0]
 8004b98:	ecbd 8b02 	vpop	{d8}
 8004b9c:	bd08      	pop	{r3, pc}
 8004b9e:	f7ff ffb5 	bl	8004b0c <__errno>
 8004ba2:	ecbd 8b02 	vpop	{d8}
 8004ba6:	2321      	movs	r3, #33	@ 0x21
 8004ba8:	6003      	str	r3, [r0, #0]
 8004baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004bae:	4802      	ldr	r0, [pc, #8]	@ (8004bb8 <log10f+0x58>)
 8004bb0:	f000 b8ac 	b.w	8004d0c <nanf>
 8004bb4:	ff800000 	.word	0xff800000
 8004bb8:	080059d8 	.word	0x080059d8

08004bbc <sqrtf>:
 8004bbc:	b508      	push	{r3, lr}
 8004bbe:	ed2d 8b02 	vpush	{d8}
 8004bc2:	eeb0 8a40 	vmov.f32	s16, s0
 8004bc6:	f000 f8a7 	bl	8004d18 <__ieee754_sqrtf>
 8004bca:	eeb4 8a48 	vcmp.f32	s16, s16
 8004bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd2:	d60c      	bvs.n	8004bee <sqrtf+0x32>
 8004bd4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8004bf4 <sqrtf+0x38>
 8004bd8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be0:	d505      	bpl.n	8004bee <sqrtf+0x32>
 8004be2:	f7ff ff93 	bl	8004b0c <__errno>
 8004be6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004bea:	2321      	movs	r3, #33	@ 0x21
 8004bec:	6003      	str	r3, [r0, #0]
 8004bee:	ecbd 8b02 	vpop	{d8}
 8004bf2:	bd08      	pop	{r3, pc}
 8004bf4:	00000000 	.word	0x00000000

08004bf8 <cosf>:
 8004bf8:	ee10 3a10 	vmov	r3, s0
 8004bfc:	b507      	push	{r0, r1, r2, lr}
 8004bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004c78 <cosf+0x80>)
 8004c00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d806      	bhi.n	8004c16 <cosf+0x1e>
 8004c08:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8004c7c <cosf+0x84>
 8004c0c:	b003      	add	sp, #12
 8004c0e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c12:	f000 b885 	b.w	8004d20 <__kernel_cosf>
 8004c16:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004c1a:	d304      	bcc.n	8004c26 <cosf+0x2e>
 8004c1c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004c20:	b003      	add	sp, #12
 8004c22:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c26:	4668      	mov	r0, sp
 8004c28:	f000 f972 	bl	8004f10 <__ieee754_rem_pio2f>
 8004c2c:	f000 0003 	and.w	r0, r0, #3
 8004c30:	2801      	cmp	r0, #1
 8004c32:	d009      	beq.n	8004c48 <cosf+0x50>
 8004c34:	2802      	cmp	r0, #2
 8004c36:	d010      	beq.n	8004c5a <cosf+0x62>
 8004c38:	b9b0      	cbnz	r0, 8004c68 <cosf+0x70>
 8004c3a:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c3e:	ed9d 0a00 	vldr	s0, [sp]
 8004c42:	f000 f86d 	bl	8004d20 <__kernel_cosf>
 8004c46:	e7eb      	b.n	8004c20 <cosf+0x28>
 8004c48:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c4c:	ed9d 0a00 	vldr	s0, [sp]
 8004c50:	f000 f8be 	bl	8004dd0 <__kernel_sinf>
 8004c54:	eeb1 0a40 	vneg.f32	s0, s0
 8004c58:	e7e2      	b.n	8004c20 <cosf+0x28>
 8004c5a:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c5e:	ed9d 0a00 	vldr	s0, [sp]
 8004c62:	f000 f85d 	bl	8004d20 <__kernel_cosf>
 8004c66:	e7f5      	b.n	8004c54 <cosf+0x5c>
 8004c68:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c6c:	ed9d 0a00 	vldr	s0, [sp]
 8004c70:	2001      	movs	r0, #1
 8004c72:	f000 f8ad 	bl	8004dd0 <__kernel_sinf>
 8004c76:	e7d3      	b.n	8004c20 <cosf+0x28>
 8004c78:	3f490fd8 	.word	0x3f490fd8
 8004c7c:	00000000 	.word	0x00000000

08004c80 <sinf>:
 8004c80:	ee10 3a10 	vmov	r3, s0
 8004c84:	b507      	push	{r0, r1, r2, lr}
 8004c86:	4a1f      	ldr	r2, [pc, #124]	@ (8004d04 <sinf+0x84>)
 8004c88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d807      	bhi.n	8004ca0 <sinf+0x20>
 8004c90:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8004d08 <sinf+0x88>
 8004c94:	2000      	movs	r0, #0
 8004c96:	b003      	add	sp, #12
 8004c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c9c:	f000 b898 	b.w	8004dd0 <__kernel_sinf>
 8004ca0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004ca4:	d304      	bcc.n	8004cb0 <sinf+0x30>
 8004ca6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004caa:	b003      	add	sp, #12
 8004cac:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cb0:	4668      	mov	r0, sp
 8004cb2:	f000 f92d 	bl	8004f10 <__ieee754_rem_pio2f>
 8004cb6:	f000 0003 	and.w	r0, r0, #3
 8004cba:	2801      	cmp	r0, #1
 8004cbc:	d00a      	beq.n	8004cd4 <sinf+0x54>
 8004cbe:	2802      	cmp	r0, #2
 8004cc0:	d00f      	beq.n	8004ce2 <sinf+0x62>
 8004cc2:	b9c0      	cbnz	r0, 8004cf6 <sinf+0x76>
 8004cc4:	eddd 0a01 	vldr	s1, [sp, #4]
 8004cc8:	ed9d 0a00 	vldr	s0, [sp]
 8004ccc:	2001      	movs	r0, #1
 8004cce:	f000 f87f 	bl	8004dd0 <__kernel_sinf>
 8004cd2:	e7ea      	b.n	8004caa <sinf+0x2a>
 8004cd4:	eddd 0a01 	vldr	s1, [sp, #4]
 8004cd8:	ed9d 0a00 	vldr	s0, [sp]
 8004cdc:	f000 f820 	bl	8004d20 <__kernel_cosf>
 8004ce0:	e7e3      	b.n	8004caa <sinf+0x2a>
 8004ce2:	eddd 0a01 	vldr	s1, [sp, #4]
 8004ce6:	ed9d 0a00 	vldr	s0, [sp]
 8004cea:	2001      	movs	r0, #1
 8004cec:	f000 f870 	bl	8004dd0 <__kernel_sinf>
 8004cf0:	eeb1 0a40 	vneg.f32	s0, s0
 8004cf4:	e7d9      	b.n	8004caa <sinf+0x2a>
 8004cf6:	eddd 0a01 	vldr	s1, [sp, #4]
 8004cfa:	ed9d 0a00 	vldr	s0, [sp]
 8004cfe:	f000 f80f 	bl	8004d20 <__kernel_cosf>
 8004d02:	e7f5      	b.n	8004cf0 <sinf+0x70>
 8004d04:	3f490fd8 	.word	0x3f490fd8
 8004d08:	00000000 	.word	0x00000000

08004d0c <nanf>:
 8004d0c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004d14 <nanf+0x8>
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	7fc00000 	.word	0x7fc00000

08004d18 <__ieee754_sqrtf>:
 8004d18:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004d1c:	4770      	bx	lr
	...

08004d20 <__kernel_cosf>:
 8004d20:	ee10 3a10 	vmov	r3, s0
 8004d24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d28:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004d2c:	eef0 6a40 	vmov.f32	s13, s0
 8004d30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004d34:	d204      	bcs.n	8004d40 <__kernel_cosf+0x20>
 8004d36:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8004d3a:	ee17 2a90 	vmov	r2, s15
 8004d3e:	b342      	cbz	r2, 8004d92 <__kernel_cosf+0x72>
 8004d40:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8004d44:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8004db0 <__kernel_cosf+0x90>
 8004d48:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8004db4 <__kernel_cosf+0x94>
 8004d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004db8 <__kernel_cosf+0x98>)
 8004d4e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004d52:	4293      	cmp	r3, r2
 8004d54:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004dbc <__kernel_cosf+0x9c>
 8004d58:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004d5c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8004dc0 <__kernel_cosf+0xa0>
 8004d60:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004d64:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8004dc4 <__kernel_cosf+0xa4>
 8004d68:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004d6c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8004dc8 <__kernel_cosf+0xa8>
 8004d70:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004d74:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8004d78:	ee26 6a07 	vmul.f32	s12, s12, s14
 8004d7c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004d80:	eee7 0a06 	vfma.f32	s1, s14, s12
 8004d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d88:	d804      	bhi.n	8004d94 <__kernel_cosf+0x74>
 8004d8a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004d8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004d92:	4770      	bx	lr
 8004d94:	4a0d      	ldr	r2, [pc, #52]	@ (8004dcc <__kernel_cosf+0xac>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	bf9a      	itte	ls
 8004d9a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8004d9e:	ee07 3a10 	vmovls	s14, r3
 8004da2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8004da6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004daa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004dae:	e7ec      	b.n	8004d8a <__kernel_cosf+0x6a>
 8004db0:	ad47d74e 	.word	0xad47d74e
 8004db4:	310f74f6 	.word	0x310f74f6
 8004db8:	3e999999 	.word	0x3e999999
 8004dbc:	b493f27c 	.word	0xb493f27c
 8004dc0:	37d00d01 	.word	0x37d00d01
 8004dc4:	bab60b61 	.word	0xbab60b61
 8004dc8:	3d2aaaab 	.word	0x3d2aaaab
 8004dcc:	3f480000 	.word	0x3f480000

08004dd0 <__kernel_sinf>:
 8004dd0:	ee10 3a10 	vmov	r3, s0
 8004dd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dd8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004ddc:	d204      	bcs.n	8004de8 <__kernel_sinf+0x18>
 8004dde:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004de2:	ee17 3a90 	vmov	r3, s15
 8004de6:	b35b      	cbz	r3, 8004e40 <__kernel_sinf+0x70>
 8004de8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004dec:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8004e44 <__kernel_sinf+0x74>
 8004df0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8004e48 <__kernel_sinf+0x78>
 8004df4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004df8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8004e4c <__kernel_sinf+0x7c>
 8004dfc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004e00:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8004e50 <__kernel_sinf+0x80>
 8004e04:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004e08:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8004e54 <__kernel_sinf+0x84>
 8004e0c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004e10:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004e14:	b930      	cbnz	r0, 8004e24 <__kernel_sinf+0x54>
 8004e16:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8004e58 <__kernel_sinf+0x88>
 8004e1a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004e1e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004e22:	4770      	bx	lr
 8004e24:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004e28:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8004e2c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004e30:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004e34:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8004e5c <__kernel_sinf+0x8c>
 8004e38:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004e3c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	2f2ec9d3 	.word	0x2f2ec9d3
 8004e48:	b2d72f34 	.word	0xb2d72f34
 8004e4c:	3638ef1b 	.word	0x3638ef1b
 8004e50:	b9500d01 	.word	0xb9500d01
 8004e54:	3c088889 	.word	0x3c088889
 8004e58:	be2aaaab 	.word	0xbe2aaaab
 8004e5c:	3e2aaaab 	.word	0x3e2aaaab

08004e60 <__ieee754_log10f>:
 8004e60:	b508      	push	{r3, lr}
 8004e62:	ee10 3a10 	vmov	r3, s0
 8004e66:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8004e6a:	ed2d 8b02 	vpush	{d8}
 8004e6e:	d108      	bne.n	8004e82 <__ieee754_log10f+0x22>
 8004e70:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004ef8 <__ieee754_log10f+0x98>
 8004e74:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8004efc <__ieee754_log10f+0x9c>
 8004e78:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8004e7c:	ecbd 8b02 	vpop	{d8}
 8004e80:	bd08      	pop	{r3, pc}
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	461a      	mov	r2, r3
 8004e86:	da02      	bge.n	8004e8e <__ieee754_log10f+0x2e>
 8004e88:	ee30 7a40 	vsub.f32	s14, s0, s0
 8004e8c:	e7f2      	b.n	8004e74 <__ieee754_log10f+0x14>
 8004e8e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004e92:	db02      	blt.n	8004e9a <__ieee754_log10f+0x3a>
 8004e94:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004e98:	e7f0      	b.n	8004e7c <__ieee754_log10f+0x1c>
 8004e9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e9e:	bfbf      	itttt	lt
 8004ea0:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 8004f00 <__ieee754_log10f+0xa0>
 8004ea4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8004ea8:	f06f 0118 	mvnlt.w	r1, #24
 8004eac:	ee17 2a90 	vmovlt	r2, s15
 8004eb0:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8004eb4:	bfa8      	it	ge
 8004eb6:	2100      	movge	r1, #0
 8004eb8:	3b7f      	subs	r3, #127	@ 0x7f
 8004eba:	440b      	add	r3, r1
 8004ebc:	0fd9      	lsrs	r1, r3, #31
 8004ebe:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8004eca:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 8004ece:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8004ed2:	ee00 3a10 	vmov	s0, r3
 8004ed6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8004eda:	f000 fbb9 	bl	8005650 <__ieee754_logf>
 8004ede:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8004f04 <__ieee754_log10f+0xa4>
 8004ee2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004ee6:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8004f08 <__ieee754_log10f+0xa8>
 8004eea:	eea8 0a27 	vfma.f32	s0, s16, s15
 8004eee:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8004f0c <__ieee754_log10f+0xac>
 8004ef2:	eea8 0a27 	vfma.f32	s0, s16, s15
 8004ef6:	e7c1      	b.n	8004e7c <__ieee754_log10f+0x1c>
 8004ef8:	cc000000 	.word	0xcc000000
 8004efc:	00000000 	.word	0x00000000
 8004f00:	4c000000 	.word	0x4c000000
 8004f04:	3ede5bd9 	.word	0x3ede5bd9
 8004f08:	355427db 	.word	0x355427db
 8004f0c:	3e9a2080 	.word	0x3e9a2080

08004f10 <__ieee754_rem_pio2f>:
 8004f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f12:	ee10 6a10 	vmov	r6, s0
 8004f16:	4b88      	ldr	r3, [pc, #544]	@ (8005138 <__ieee754_rem_pio2f+0x228>)
 8004f18:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8004f1c:	429d      	cmp	r5, r3
 8004f1e:	b087      	sub	sp, #28
 8004f20:	4604      	mov	r4, r0
 8004f22:	d805      	bhi.n	8004f30 <__ieee754_rem_pio2f+0x20>
 8004f24:	2300      	movs	r3, #0
 8004f26:	ed80 0a00 	vstr	s0, [r0]
 8004f2a:	6043      	str	r3, [r0, #4]
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	e022      	b.n	8004f76 <__ieee754_rem_pio2f+0x66>
 8004f30:	4b82      	ldr	r3, [pc, #520]	@ (800513c <__ieee754_rem_pio2f+0x22c>)
 8004f32:	429d      	cmp	r5, r3
 8004f34:	d83a      	bhi.n	8004fac <__ieee754_rem_pio2f+0x9c>
 8004f36:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8004f3a:	2e00      	cmp	r6, #0
 8004f3c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8005140 <__ieee754_rem_pio2f+0x230>
 8004f40:	4a80      	ldr	r2, [pc, #512]	@ (8005144 <__ieee754_rem_pio2f+0x234>)
 8004f42:	f023 030f 	bic.w	r3, r3, #15
 8004f46:	dd18      	ble.n	8004f7a <__ieee754_rem_pio2f+0x6a>
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8004f4e:	bf09      	itett	eq
 8004f50:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8005148 <__ieee754_rem_pio2f+0x238>
 8004f54:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800514c <__ieee754_rem_pio2f+0x23c>
 8004f58:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8005150 <__ieee754_rem_pio2f+0x240>
 8004f5c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004f60:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8004f64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f68:	ed80 7a00 	vstr	s14, [r0]
 8004f6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004f70:	edc0 7a01 	vstr	s15, [r0, #4]
 8004f74:	2001      	movs	r0, #1
 8004f76:	b007      	add	sp, #28
 8004f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004f80:	bf09      	itett	eq
 8004f82:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8005148 <__ieee754_rem_pio2f+0x238>
 8004f86:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800514c <__ieee754_rem_pio2f+0x23c>
 8004f8a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8005150 <__ieee754_rem_pio2f+0x240>
 8004f8e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8004f92:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004f96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f9a:	ed80 7a00 	vstr	s14, [r0]
 8004f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fa2:	edc0 7a01 	vstr	s15, [r0, #4]
 8004fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8004faa:	e7e4      	b.n	8004f76 <__ieee754_rem_pio2f+0x66>
 8004fac:	4b69      	ldr	r3, [pc, #420]	@ (8005154 <__ieee754_rem_pio2f+0x244>)
 8004fae:	429d      	cmp	r5, r3
 8004fb0:	d873      	bhi.n	800509a <__ieee754_rem_pio2f+0x18a>
 8004fb2:	f000 f8dd 	bl	8005170 <fabsf>
 8004fb6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8005158 <__ieee754_rem_pio2f+0x248>
 8004fba:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004fbe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fca:	ee17 0a90 	vmov	r0, s15
 8004fce:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005140 <__ieee754_rem_pio2f+0x230>
 8004fd2:	eea7 0a67 	vfms.f32	s0, s14, s15
 8004fd6:	281f      	cmp	r0, #31
 8004fd8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800514c <__ieee754_rem_pio2f+0x23c>
 8004fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe0:	eeb1 6a47 	vneg.f32	s12, s14
 8004fe4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004fe8:	ee16 1a90 	vmov	r1, s13
 8004fec:	dc09      	bgt.n	8005002 <__ieee754_rem_pio2f+0xf2>
 8004fee:	4a5b      	ldr	r2, [pc, #364]	@ (800515c <__ieee754_rem_pio2f+0x24c>)
 8004ff0:	1e47      	subs	r7, r0, #1
 8004ff2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8004ff6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8004ffa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d107      	bne.n	8005012 <__ieee754_rem_pio2f+0x102>
 8005002:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8005006:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800500a:	2a08      	cmp	r2, #8
 800500c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8005010:	dc14      	bgt.n	800503c <__ieee754_rem_pio2f+0x12c>
 8005012:	6021      	str	r1, [r4, #0]
 8005014:	ed94 7a00 	vldr	s14, [r4]
 8005018:	ee30 0a47 	vsub.f32	s0, s0, s14
 800501c:	2e00      	cmp	r6, #0
 800501e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005022:	ed84 0a01 	vstr	s0, [r4, #4]
 8005026:	daa6      	bge.n	8004f76 <__ieee754_rem_pio2f+0x66>
 8005028:	eeb1 7a47 	vneg.f32	s14, s14
 800502c:	eeb1 0a40 	vneg.f32	s0, s0
 8005030:	ed84 7a00 	vstr	s14, [r4]
 8005034:	ed84 0a01 	vstr	s0, [r4, #4]
 8005038:	4240      	negs	r0, r0
 800503a:	e79c      	b.n	8004f76 <__ieee754_rem_pio2f+0x66>
 800503c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8005148 <__ieee754_rem_pio2f+0x238>
 8005040:	eef0 6a40 	vmov.f32	s13, s0
 8005044:	eee6 6a25 	vfma.f32	s13, s12, s11
 8005048:	ee70 7a66 	vsub.f32	s15, s0, s13
 800504c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005050:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005150 <__ieee754_rem_pio2f+0x240>
 8005054:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8005058:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800505c:	ee15 2a90 	vmov	r2, s11
 8005060:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005064:	1a5b      	subs	r3, r3, r1
 8005066:	2b19      	cmp	r3, #25
 8005068:	dc04      	bgt.n	8005074 <__ieee754_rem_pio2f+0x164>
 800506a:	edc4 5a00 	vstr	s11, [r4]
 800506e:	eeb0 0a66 	vmov.f32	s0, s13
 8005072:	e7cf      	b.n	8005014 <__ieee754_rem_pio2f+0x104>
 8005074:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8005160 <__ieee754_rem_pio2f+0x250>
 8005078:	eeb0 0a66 	vmov.f32	s0, s13
 800507c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8005080:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005084:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8005164 <__ieee754_rem_pio2f+0x254>
 8005088:	eee6 7a25 	vfma.f32	s15, s12, s11
 800508c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005090:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005094:	ed84 7a00 	vstr	s14, [r4]
 8005098:	e7bc      	b.n	8005014 <__ieee754_rem_pio2f+0x104>
 800509a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800509e:	d306      	bcc.n	80050ae <__ieee754_rem_pio2f+0x19e>
 80050a0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80050a4:	edc0 7a01 	vstr	s15, [r0, #4]
 80050a8:	edc0 7a00 	vstr	s15, [r0]
 80050ac:	e73e      	b.n	8004f2c <__ieee754_rem_pio2f+0x1c>
 80050ae:	15ea      	asrs	r2, r5, #23
 80050b0:	3a86      	subs	r2, #134	@ 0x86
 80050b2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80050b6:	ee07 3a90 	vmov	s15, r3
 80050ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80050be:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8005168 <__ieee754_rem_pio2f+0x258>
 80050c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80050c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050ca:	ed8d 7a03 	vstr	s14, [sp, #12]
 80050ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80050d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80050d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80050da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050de:	ed8d 7a04 	vstr	s14, [sp, #16]
 80050e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80050e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80050ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ee:	edcd 7a05 	vstr	s15, [sp, #20]
 80050f2:	d11e      	bne.n	8005132 <__ieee754_rem_pio2f+0x222>
 80050f4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80050f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050fc:	bf0c      	ite	eq
 80050fe:	2301      	moveq	r3, #1
 8005100:	2302      	movne	r3, #2
 8005102:	491a      	ldr	r1, [pc, #104]	@ (800516c <__ieee754_rem_pio2f+0x25c>)
 8005104:	9101      	str	r1, [sp, #4]
 8005106:	2102      	movs	r1, #2
 8005108:	9100      	str	r1, [sp, #0]
 800510a:	a803      	add	r0, sp, #12
 800510c:	4621      	mov	r1, r4
 800510e:	f000 f837 	bl	8005180 <__kernel_rem_pio2f>
 8005112:	2e00      	cmp	r6, #0
 8005114:	f6bf af2f 	bge.w	8004f76 <__ieee754_rem_pio2f+0x66>
 8005118:	edd4 7a00 	vldr	s15, [r4]
 800511c:	eef1 7a67 	vneg.f32	s15, s15
 8005120:	edc4 7a00 	vstr	s15, [r4]
 8005124:	edd4 7a01 	vldr	s15, [r4, #4]
 8005128:	eef1 7a67 	vneg.f32	s15, s15
 800512c:	edc4 7a01 	vstr	s15, [r4, #4]
 8005130:	e782      	b.n	8005038 <__ieee754_rem_pio2f+0x128>
 8005132:	2303      	movs	r3, #3
 8005134:	e7e5      	b.n	8005102 <__ieee754_rem_pio2f+0x1f2>
 8005136:	bf00      	nop
 8005138:	3f490fd8 	.word	0x3f490fd8
 800513c:	4016cbe3 	.word	0x4016cbe3
 8005140:	3fc90f80 	.word	0x3fc90f80
 8005144:	3fc90fd0 	.word	0x3fc90fd0
 8005148:	37354400 	.word	0x37354400
 800514c:	37354443 	.word	0x37354443
 8005150:	2e85a308 	.word	0x2e85a308
 8005154:	43490f80 	.word	0x43490f80
 8005158:	3f22f984 	.word	0x3f22f984
 800515c:	080059dc 	.word	0x080059dc
 8005160:	2e85a300 	.word	0x2e85a300
 8005164:	248d3132 	.word	0x248d3132
 8005168:	43800000 	.word	0x43800000
 800516c:	08005a5c 	.word	0x08005a5c

08005170 <fabsf>:
 8005170:	ee10 3a10 	vmov	r3, s0
 8005174:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005178:	ee00 3a10 	vmov	s0, r3
 800517c:	4770      	bx	lr
	...

08005180 <__kernel_rem_pio2f>:
 8005180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	ed2d 8b04 	vpush	{d8-d9}
 8005188:	b0d9      	sub	sp, #356	@ 0x164
 800518a:	4690      	mov	r8, r2
 800518c:	9001      	str	r0, [sp, #4]
 800518e:	4ab6      	ldr	r2, [pc, #728]	@ (8005468 <__kernel_rem_pio2f+0x2e8>)
 8005190:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8005192:	f118 0f04 	cmn.w	r8, #4
 8005196:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800519a:	460f      	mov	r7, r1
 800519c:	f103 3bff 	add.w	fp, r3, #4294967295
 80051a0:	db26      	blt.n	80051f0 <__kernel_rem_pio2f+0x70>
 80051a2:	f1b8 0203 	subs.w	r2, r8, #3
 80051a6:	bf48      	it	mi
 80051a8:	f108 0204 	addmi.w	r2, r8, #4
 80051ac:	10d2      	asrs	r2, r2, #3
 80051ae:	1c55      	adds	r5, r2, #1
 80051b0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80051b2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8005478 <__kernel_rem_pio2f+0x2f8>
 80051b6:	00e8      	lsls	r0, r5, #3
 80051b8:	eba2 060b 	sub.w	r6, r2, fp
 80051bc:	9002      	str	r0, [sp, #8]
 80051be:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80051c2:	eb0a 0c0b 	add.w	ip, sl, fp
 80051c6:	ac1c      	add	r4, sp, #112	@ 0x70
 80051c8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80051cc:	2000      	movs	r0, #0
 80051ce:	4560      	cmp	r0, ip
 80051d0:	dd10      	ble.n	80051f4 <__kernel_rem_pio2f+0x74>
 80051d2:	a91c      	add	r1, sp, #112	@ 0x70
 80051d4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80051d8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80051dc:	2600      	movs	r6, #0
 80051de:	4556      	cmp	r6, sl
 80051e0:	dc24      	bgt.n	800522c <__kernel_rem_pio2f+0xac>
 80051e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80051e6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8005478 <__kernel_rem_pio2f+0x2f8>
 80051ea:	4684      	mov	ip, r0
 80051ec:	2400      	movs	r4, #0
 80051ee:	e016      	b.n	800521e <__kernel_rem_pio2f+0x9e>
 80051f0:	2200      	movs	r2, #0
 80051f2:	e7dc      	b.n	80051ae <__kernel_rem_pio2f+0x2e>
 80051f4:	42c6      	cmn	r6, r0
 80051f6:	bf5d      	ittte	pl
 80051f8:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80051fc:	ee07 1a90 	vmovpl	s15, r1
 8005200:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005204:	eef0 7a47 	vmovmi.f32	s15, s14
 8005208:	ece4 7a01 	vstmia	r4!, {s15}
 800520c:	3001      	adds	r0, #1
 800520e:	e7de      	b.n	80051ce <__kernel_rem_pio2f+0x4e>
 8005210:	ecfe 6a01 	vldmia	lr!, {s13}
 8005214:	ed3c 7a01 	vldmdb	ip!, {s14}
 8005218:	eee6 7a87 	vfma.f32	s15, s13, s14
 800521c:	3401      	adds	r4, #1
 800521e:	455c      	cmp	r4, fp
 8005220:	ddf6      	ble.n	8005210 <__kernel_rem_pio2f+0x90>
 8005222:	ece9 7a01 	vstmia	r9!, {s15}
 8005226:	3601      	adds	r6, #1
 8005228:	3004      	adds	r0, #4
 800522a:	e7d8      	b.n	80051de <__kernel_rem_pio2f+0x5e>
 800522c:	a908      	add	r1, sp, #32
 800522e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005232:	9104      	str	r1, [sp, #16]
 8005234:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8005236:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8005474 <__kernel_rem_pio2f+0x2f4>
 800523a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8005470 <__kernel_rem_pio2f+0x2f0>
 800523e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005242:	9203      	str	r2, [sp, #12]
 8005244:	4654      	mov	r4, sl
 8005246:	00a2      	lsls	r2, r4, #2
 8005248:	9205      	str	r2, [sp, #20]
 800524a:	aa58      	add	r2, sp, #352	@ 0x160
 800524c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005250:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8005254:	a944      	add	r1, sp, #272	@ 0x110
 8005256:	aa08      	add	r2, sp, #32
 8005258:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800525c:	4694      	mov	ip, r2
 800525e:	4626      	mov	r6, r4
 8005260:	2e00      	cmp	r6, #0
 8005262:	dc4c      	bgt.n	80052fe <__kernel_rem_pio2f+0x17e>
 8005264:	4628      	mov	r0, r5
 8005266:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800526a:	f000 fae3 	bl	8005834 <scalbnf>
 800526e:	eeb0 8a40 	vmov.f32	s16, s0
 8005272:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8005276:	ee28 0a00 	vmul.f32	s0, s16, s0
 800527a:	f000 fb41 	bl	8005900 <floorf>
 800527e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8005282:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005286:	2d00      	cmp	r5, #0
 8005288:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800528c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005290:	ee17 9a90 	vmov	r9, s15
 8005294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005298:	ee38 8a67 	vsub.f32	s16, s16, s15
 800529c:	dd41      	ble.n	8005322 <__kernel_rem_pio2f+0x1a2>
 800529e:	f104 3cff 	add.w	ip, r4, #4294967295
 80052a2:	a908      	add	r1, sp, #32
 80052a4:	f1c5 0e08 	rsb	lr, r5, #8
 80052a8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80052ac:	fa46 f00e 	asr.w	r0, r6, lr
 80052b0:	4481      	add	r9, r0
 80052b2:	fa00 f00e 	lsl.w	r0, r0, lr
 80052b6:	1a36      	subs	r6, r6, r0
 80052b8:	f1c5 0007 	rsb	r0, r5, #7
 80052bc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80052c0:	4106      	asrs	r6, r0
 80052c2:	2e00      	cmp	r6, #0
 80052c4:	dd3c      	ble.n	8005340 <__kernel_rem_pio2f+0x1c0>
 80052c6:	f04f 0e00 	mov.w	lr, #0
 80052ca:	f109 0901 	add.w	r9, r9, #1
 80052ce:	4670      	mov	r0, lr
 80052d0:	4574      	cmp	r4, lr
 80052d2:	dc68      	bgt.n	80053a6 <__kernel_rem_pio2f+0x226>
 80052d4:	2d00      	cmp	r5, #0
 80052d6:	dd03      	ble.n	80052e0 <__kernel_rem_pio2f+0x160>
 80052d8:	2d01      	cmp	r5, #1
 80052da:	d074      	beq.n	80053c6 <__kernel_rem_pio2f+0x246>
 80052dc:	2d02      	cmp	r5, #2
 80052de:	d07d      	beq.n	80053dc <__kernel_rem_pio2f+0x25c>
 80052e0:	2e02      	cmp	r6, #2
 80052e2:	d12d      	bne.n	8005340 <__kernel_rem_pio2f+0x1c0>
 80052e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80052e8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80052ec:	b340      	cbz	r0, 8005340 <__kernel_rem_pio2f+0x1c0>
 80052ee:	4628      	mov	r0, r5
 80052f0:	9306      	str	r3, [sp, #24]
 80052f2:	f000 fa9f 	bl	8005834 <scalbnf>
 80052f6:	9b06      	ldr	r3, [sp, #24]
 80052f8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80052fc:	e020      	b.n	8005340 <__kernel_rem_pio2f+0x1c0>
 80052fe:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005302:	3e01      	subs	r6, #1
 8005304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800530c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005310:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005314:	ecac 0a01 	vstmia	ip!, {s0}
 8005318:	ed30 0a01 	vldmdb	r0!, {s0}
 800531c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005320:	e79e      	b.n	8005260 <__kernel_rem_pio2f+0xe0>
 8005322:	d105      	bne.n	8005330 <__kernel_rem_pio2f+0x1b0>
 8005324:	1e60      	subs	r0, r4, #1
 8005326:	a908      	add	r1, sp, #32
 8005328:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800532c:	11f6      	asrs	r6, r6, #7
 800532e:	e7c8      	b.n	80052c2 <__kernel_rem_pio2f+0x142>
 8005330:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005334:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533c:	da31      	bge.n	80053a2 <__kernel_rem_pio2f+0x222>
 800533e:	2600      	movs	r6, #0
 8005340:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005348:	f040 8098 	bne.w	800547c <__kernel_rem_pio2f+0x2fc>
 800534c:	1e60      	subs	r0, r4, #1
 800534e:	2200      	movs	r2, #0
 8005350:	4550      	cmp	r0, sl
 8005352:	da4b      	bge.n	80053ec <__kernel_rem_pio2f+0x26c>
 8005354:	2a00      	cmp	r2, #0
 8005356:	d065      	beq.n	8005424 <__kernel_rem_pio2f+0x2a4>
 8005358:	3c01      	subs	r4, #1
 800535a:	ab08      	add	r3, sp, #32
 800535c:	3d08      	subs	r5, #8
 800535e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0f8      	beq.n	8005358 <__kernel_rem_pio2f+0x1d8>
 8005366:	4628      	mov	r0, r5
 8005368:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800536c:	f000 fa62 	bl	8005834 <scalbnf>
 8005370:	1c63      	adds	r3, r4, #1
 8005372:	aa44      	add	r2, sp, #272	@ 0x110
 8005374:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8005474 <__kernel_rem_pio2f+0x2f4>
 8005378:	0099      	lsls	r1, r3, #2
 800537a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800537e:	4623      	mov	r3, r4
 8005380:	2b00      	cmp	r3, #0
 8005382:	f280 80a9 	bge.w	80054d8 <__kernel_rem_pio2f+0x358>
 8005386:	4623      	mov	r3, r4
 8005388:	2b00      	cmp	r3, #0
 800538a:	f2c0 80c7 	blt.w	800551c <__kernel_rem_pio2f+0x39c>
 800538e:	aa44      	add	r2, sp, #272	@ 0x110
 8005390:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005394:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800546c <__kernel_rem_pio2f+0x2ec>
 8005398:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8005478 <__kernel_rem_pio2f+0x2f8>
 800539c:	2000      	movs	r0, #0
 800539e:	1ae2      	subs	r2, r4, r3
 80053a0:	e0b1      	b.n	8005506 <__kernel_rem_pio2f+0x386>
 80053a2:	2602      	movs	r6, #2
 80053a4:	e78f      	b.n	80052c6 <__kernel_rem_pio2f+0x146>
 80053a6:	f852 1b04 	ldr.w	r1, [r2], #4
 80053aa:	b948      	cbnz	r0, 80053c0 <__kernel_rem_pio2f+0x240>
 80053ac:	b121      	cbz	r1, 80053b8 <__kernel_rem_pio2f+0x238>
 80053ae:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80053b2:	f842 1c04 	str.w	r1, [r2, #-4]
 80053b6:	2101      	movs	r1, #1
 80053b8:	f10e 0e01 	add.w	lr, lr, #1
 80053bc:	4608      	mov	r0, r1
 80053be:	e787      	b.n	80052d0 <__kernel_rem_pio2f+0x150>
 80053c0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80053c4:	e7f5      	b.n	80053b2 <__kernel_rem_pio2f+0x232>
 80053c6:	f104 3cff 	add.w	ip, r4, #4294967295
 80053ca:	aa08      	add	r2, sp, #32
 80053cc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80053d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053d4:	a908      	add	r1, sp, #32
 80053d6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80053da:	e781      	b.n	80052e0 <__kernel_rem_pio2f+0x160>
 80053dc:	f104 3cff 	add.w	ip, r4, #4294967295
 80053e0:	aa08      	add	r2, sp, #32
 80053e2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80053e6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80053ea:	e7f3      	b.n	80053d4 <__kernel_rem_pio2f+0x254>
 80053ec:	a908      	add	r1, sp, #32
 80053ee:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80053f2:	3801      	subs	r0, #1
 80053f4:	430a      	orrs	r2, r1
 80053f6:	e7ab      	b.n	8005350 <__kernel_rem_pio2f+0x1d0>
 80053f8:	3201      	adds	r2, #1
 80053fa:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80053fe:	2e00      	cmp	r6, #0
 8005400:	d0fa      	beq.n	80053f8 <__kernel_rem_pio2f+0x278>
 8005402:	9905      	ldr	r1, [sp, #20]
 8005404:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8005408:	eb0d 0001 	add.w	r0, sp, r1
 800540c:	18e6      	adds	r6, r4, r3
 800540e:	a91c      	add	r1, sp, #112	@ 0x70
 8005410:	f104 0c01 	add.w	ip, r4, #1
 8005414:	384c      	subs	r0, #76	@ 0x4c
 8005416:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800541a:	4422      	add	r2, r4
 800541c:	4562      	cmp	r2, ip
 800541e:	da04      	bge.n	800542a <__kernel_rem_pio2f+0x2aa>
 8005420:	4614      	mov	r4, r2
 8005422:	e710      	b.n	8005246 <__kernel_rem_pio2f+0xc6>
 8005424:	9804      	ldr	r0, [sp, #16]
 8005426:	2201      	movs	r2, #1
 8005428:	e7e7      	b.n	80053fa <__kernel_rem_pio2f+0x27a>
 800542a:	9903      	ldr	r1, [sp, #12]
 800542c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005430:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8005434:	9105      	str	r1, [sp, #20]
 8005436:	ee07 1a90 	vmov	s15, r1
 800543a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800543e:	2400      	movs	r4, #0
 8005440:	ece6 7a01 	vstmia	r6!, {s15}
 8005444:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8005478 <__kernel_rem_pio2f+0x2f8>
 8005448:	46b1      	mov	r9, r6
 800544a:	455c      	cmp	r4, fp
 800544c:	dd04      	ble.n	8005458 <__kernel_rem_pio2f+0x2d8>
 800544e:	ece0 7a01 	vstmia	r0!, {s15}
 8005452:	f10c 0c01 	add.w	ip, ip, #1
 8005456:	e7e1      	b.n	800541c <__kernel_rem_pio2f+0x29c>
 8005458:	ecfe 6a01 	vldmia	lr!, {s13}
 800545c:	ed39 7a01 	vldmdb	r9!, {s14}
 8005460:	3401      	adds	r4, #1
 8005462:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005466:	e7f0      	b.n	800544a <__kernel_rem_pio2f+0x2ca>
 8005468:	08005da0 	.word	0x08005da0
 800546c:	08005d74 	.word	0x08005d74
 8005470:	43800000 	.word	0x43800000
 8005474:	3b800000 	.word	0x3b800000
 8005478:	00000000 	.word	0x00000000
 800547c:	9b02      	ldr	r3, [sp, #8]
 800547e:	eeb0 0a48 	vmov.f32	s0, s16
 8005482:	eba3 0008 	sub.w	r0, r3, r8
 8005486:	f000 f9d5 	bl	8005834 <scalbnf>
 800548a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8005470 <__kernel_rem_pio2f+0x2f0>
 800548e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005496:	db19      	blt.n	80054cc <__kernel_rem_pio2f+0x34c>
 8005498:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8005474 <__kernel_rem_pio2f+0x2f4>
 800549c:	ee60 7a27 	vmul.f32	s15, s0, s15
 80054a0:	aa08      	add	r2, sp, #32
 80054a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054a6:	3508      	adds	r5, #8
 80054a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054ac:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80054b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80054b8:	ee10 3a10 	vmov	r3, s0
 80054bc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80054c0:	ee17 3a90 	vmov	r3, s15
 80054c4:	3401      	adds	r4, #1
 80054c6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80054ca:	e74c      	b.n	8005366 <__kernel_rem_pio2f+0x1e6>
 80054cc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80054d0:	aa08      	add	r2, sp, #32
 80054d2:	ee10 3a10 	vmov	r3, s0
 80054d6:	e7f6      	b.n	80054c6 <__kernel_rem_pio2f+0x346>
 80054d8:	a808      	add	r0, sp, #32
 80054da:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80054de:	9001      	str	r0, [sp, #4]
 80054e0:	ee07 0a90 	vmov	s15, r0
 80054e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054e8:	3b01      	subs	r3, #1
 80054ea:	ee67 7a80 	vmul.f32	s15, s15, s0
 80054ee:	ee20 0a07 	vmul.f32	s0, s0, s14
 80054f2:	ed62 7a01 	vstmdb	r2!, {s15}
 80054f6:	e743      	b.n	8005380 <__kernel_rem_pio2f+0x200>
 80054f8:	ecfc 6a01 	vldmia	ip!, {s13}
 80054fc:	ecb5 7a01 	vldmia	r5!, {s14}
 8005500:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005504:	3001      	adds	r0, #1
 8005506:	4550      	cmp	r0, sl
 8005508:	dc01      	bgt.n	800550e <__kernel_rem_pio2f+0x38e>
 800550a:	4290      	cmp	r0, r2
 800550c:	ddf4      	ble.n	80054f8 <__kernel_rem_pio2f+0x378>
 800550e:	a858      	add	r0, sp, #352	@ 0x160
 8005510:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005514:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8005518:	3b01      	subs	r3, #1
 800551a:	e735      	b.n	8005388 <__kernel_rem_pio2f+0x208>
 800551c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800551e:	2b02      	cmp	r3, #2
 8005520:	dc09      	bgt.n	8005536 <__kernel_rem_pio2f+0x3b6>
 8005522:	2b00      	cmp	r3, #0
 8005524:	dc27      	bgt.n	8005576 <__kernel_rem_pio2f+0x3f6>
 8005526:	d040      	beq.n	80055aa <__kernel_rem_pio2f+0x42a>
 8005528:	f009 0007 	and.w	r0, r9, #7
 800552c:	b059      	add	sp, #356	@ 0x164
 800552e:	ecbd 8b04 	vpop	{d8-d9}
 8005532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005536:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005538:	2b03      	cmp	r3, #3
 800553a:	d1f5      	bne.n	8005528 <__kernel_rem_pio2f+0x3a8>
 800553c:	aa30      	add	r2, sp, #192	@ 0xc0
 800553e:	1f0b      	subs	r3, r1, #4
 8005540:	4413      	add	r3, r2
 8005542:	461a      	mov	r2, r3
 8005544:	4620      	mov	r0, r4
 8005546:	2800      	cmp	r0, #0
 8005548:	dc50      	bgt.n	80055ec <__kernel_rem_pio2f+0x46c>
 800554a:	4622      	mov	r2, r4
 800554c:	2a01      	cmp	r2, #1
 800554e:	dc5d      	bgt.n	800560c <__kernel_rem_pio2f+0x48c>
 8005550:	ab30      	add	r3, sp, #192	@ 0xc0
 8005552:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8005478 <__kernel_rem_pio2f+0x2f8>
 8005556:	440b      	add	r3, r1
 8005558:	2c01      	cmp	r4, #1
 800555a:	dc67      	bgt.n	800562c <__kernel_rem_pio2f+0x4ac>
 800555c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8005560:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8005564:	2e00      	cmp	r6, #0
 8005566:	d167      	bne.n	8005638 <__kernel_rem_pio2f+0x4b8>
 8005568:	edc7 6a00 	vstr	s13, [r7]
 800556c:	ed87 7a01 	vstr	s14, [r7, #4]
 8005570:	edc7 7a02 	vstr	s15, [r7, #8]
 8005574:	e7d8      	b.n	8005528 <__kernel_rem_pio2f+0x3a8>
 8005576:	ab30      	add	r3, sp, #192	@ 0xc0
 8005578:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8005478 <__kernel_rem_pio2f+0x2f8>
 800557c:	440b      	add	r3, r1
 800557e:	4622      	mov	r2, r4
 8005580:	2a00      	cmp	r2, #0
 8005582:	da24      	bge.n	80055ce <__kernel_rem_pio2f+0x44e>
 8005584:	b34e      	cbz	r6, 80055da <__kernel_rem_pio2f+0x45a>
 8005586:	eef1 7a47 	vneg.f32	s15, s14
 800558a:	edc7 7a00 	vstr	s15, [r7]
 800558e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8005592:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005596:	aa31      	add	r2, sp, #196	@ 0xc4
 8005598:	2301      	movs	r3, #1
 800559a:	429c      	cmp	r4, r3
 800559c:	da20      	bge.n	80055e0 <__kernel_rem_pio2f+0x460>
 800559e:	b10e      	cbz	r6, 80055a4 <__kernel_rem_pio2f+0x424>
 80055a0:	eef1 7a67 	vneg.f32	s15, s15
 80055a4:	edc7 7a01 	vstr	s15, [r7, #4]
 80055a8:	e7be      	b.n	8005528 <__kernel_rem_pio2f+0x3a8>
 80055aa:	ab30      	add	r3, sp, #192	@ 0xc0
 80055ac:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8005478 <__kernel_rem_pio2f+0x2f8>
 80055b0:	440b      	add	r3, r1
 80055b2:	2c00      	cmp	r4, #0
 80055b4:	da05      	bge.n	80055c2 <__kernel_rem_pio2f+0x442>
 80055b6:	b10e      	cbz	r6, 80055bc <__kernel_rem_pio2f+0x43c>
 80055b8:	eef1 7a67 	vneg.f32	s15, s15
 80055bc:	edc7 7a00 	vstr	s15, [r7]
 80055c0:	e7b2      	b.n	8005528 <__kernel_rem_pio2f+0x3a8>
 80055c2:	ed33 7a01 	vldmdb	r3!, {s14}
 80055c6:	3c01      	subs	r4, #1
 80055c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055cc:	e7f1      	b.n	80055b2 <__kernel_rem_pio2f+0x432>
 80055ce:	ed73 7a01 	vldmdb	r3!, {s15}
 80055d2:	3a01      	subs	r2, #1
 80055d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055d8:	e7d2      	b.n	8005580 <__kernel_rem_pio2f+0x400>
 80055da:	eef0 7a47 	vmov.f32	s15, s14
 80055de:	e7d4      	b.n	800558a <__kernel_rem_pio2f+0x40a>
 80055e0:	ecb2 7a01 	vldmia	r2!, {s14}
 80055e4:	3301      	adds	r3, #1
 80055e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055ea:	e7d6      	b.n	800559a <__kernel_rem_pio2f+0x41a>
 80055ec:	ed72 7a01 	vldmdb	r2!, {s15}
 80055f0:	edd2 6a01 	vldr	s13, [r2, #4]
 80055f4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80055f8:	3801      	subs	r0, #1
 80055fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80055fe:	ed82 7a00 	vstr	s14, [r2]
 8005602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005606:	edc2 7a01 	vstr	s15, [r2, #4]
 800560a:	e79c      	b.n	8005546 <__kernel_rem_pio2f+0x3c6>
 800560c:	ed73 7a01 	vldmdb	r3!, {s15}
 8005610:	edd3 6a01 	vldr	s13, [r3, #4]
 8005614:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005618:	3a01      	subs	r2, #1
 800561a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800561e:	ed83 7a00 	vstr	s14, [r3]
 8005622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005626:	edc3 7a01 	vstr	s15, [r3, #4]
 800562a:	e78f      	b.n	800554c <__kernel_rem_pio2f+0x3cc>
 800562c:	ed33 7a01 	vldmdb	r3!, {s14}
 8005630:	3c01      	subs	r4, #1
 8005632:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005636:	e78f      	b.n	8005558 <__kernel_rem_pio2f+0x3d8>
 8005638:	eef1 6a66 	vneg.f32	s13, s13
 800563c:	eeb1 7a47 	vneg.f32	s14, s14
 8005640:	edc7 6a00 	vstr	s13, [r7]
 8005644:	ed87 7a01 	vstr	s14, [r7, #4]
 8005648:	eef1 7a67 	vneg.f32	s15, s15
 800564c:	e790      	b.n	8005570 <__kernel_rem_pio2f+0x3f0>
 800564e:	bf00      	nop

08005650 <__ieee754_logf>:
 8005650:	ee10 3a10 	vmov	r3, s0
 8005654:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8005658:	d106      	bne.n	8005668 <__ieee754_logf+0x18>
 800565a:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80057f4 <__ieee754_logf+0x1a4>
 800565e:	eddf 7a66 	vldr	s15, [pc, #408]	@ 80057f8 <__ieee754_logf+0x1a8>
 8005662:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8005666:	4770      	bx	lr
 8005668:	2b00      	cmp	r3, #0
 800566a:	461a      	mov	r2, r3
 800566c:	da02      	bge.n	8005674 <__ieee754_logf+0x24>
 800566e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8005672:	e7f4      	b.n	800565e <__ieee754_logf+0xe>
 8005674:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005678:	db02      	blt.n	8005680 <__ieee754_logf+0x30>
 800567a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800567e:	4770      	bx	lr
 8005680:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005684:	bfb8      	it	lt
 8005686:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 80057fc <__ieee754_logf+0x1ac>
 800568a:	485d      	ldr	r0, [pc, #372]	@ (8005800 <__ieee754_logf+0x1b0>)
 800568c:	bfbe      	ittt	lt
 800568e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005692:	f06f 0118 	mvnlt.w	r1, #24
 8005696:	ee17 2a90 	vmovlt	r2, s15
 800569a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800569e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80056a2:	4410      	add	r0, r2
 80056a4:	bfa8      	it	ge
 80056a6:	2100      	movge	r1, #0
 80056a8:	3b7f      	subs	r3, #127	@ 0x7f
 80056aa:	440b      	add	r3, r1
 80056ac:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 80056b0:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 80056b4:	4311      	orrs	r1, r2
 80056b6:	ee00 1a10 	vmov	s0, r1
 80056ba:	4952      	ldr	r1, [pc, #328]	@ (8005804 <__ieee754_logf+0x1b4>)
 80056bc:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 80056c0:	f102 000f 	add.w	r0, r2, #15
 80056c4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80056c8:	4001      	ands	r1, r0
 80056ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80056ce:	bb89      	cbnz	r1, 8005734 <__ieee754_logf+0xe4>
 80056d0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80056d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d8:	d10f      	bne.n	80056fa <__ieee754_logf+0xaa>
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 8087 	beq.w	80057ee <__ieee754_logf+0x19e>
 80056e0:	ee07 3a90 	vmov	s15, r3
 80056e4:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8005808 <__ieee754_logf+0x1b8>
 80056e8:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800580c <__ieee754_logf+0x1bc>
 80056ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056f0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80056f4:	eea7 0a87 	vfma.f32	s0, s15, s14
 80056f8:	4770      	bx	lr
 80056fa:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8005810 <__ieee754_logf+0x1c0>
 80056fe:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005702:	eee0 7a66 	vfms.f32	s15, s0, s13
 8005706:	ee20 7a00 	vmul.f32	s14, s0, s0
 800570a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800570e:	b913      	cbnz	r3, 8005716 <__ieee754_logf+0xc6>
 8005710:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005714:	4770      	bx	lr
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8005808 <__ieee754_logf+0x1b8>
 800571e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005722:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8005726:	ee37 0a40 	vsub.f32	s0, s14, s0
 800572a:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800580c <__ieee754_logf+0x1bc>
 800572e:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8005732:	4770      	bx	lr
 8005734:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8005738:	ee70 7a27 	vadd.f32	s15, s0, s15
 800573c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8005814 <__ieee754_logf+0x1c4>
 8005740:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8005818 <__ieee754_logf+0x1c8>
 8005744:	4935      	ldr	r1, [pc, #212]	@ (800581c <__ieee754_logf+0x1cc>)
 8005746:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800574a:	4411      	add	r1, r2
 800574c:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8005750:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8005754:	430a      	orrs	r2, r1
 8005756:	2a00      	cmp	r2, #0
 8005758:	ee07 3a90 	vmov	s15, r3
 800575c:	ee26 5a06 	vmul.f32	s10, s12, s12
 8005760:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005764:	ee25 7a05 	vmul.f32	s14, s10, s10
 8005768:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8005820 <__ieee754_logf+0x1d0>
 800576c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005770:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005824 <__ieee754_logf+0x1d4>
 8005774:	eee7 5a87 	vfma.f32	s11, s15, s14
 8005778:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8005828 <__ieee754_logf+0x1d8>
 800577c:	eee7 7a24 	vfma.f32	s15, s14, s9
 8005780:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800582c <__ieee754_logf+0x1dc>
 8005784:	eee7 4a87 	vfma.f32	s9, s15, s14
 8005788:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8005830 <__ieee754_logf+0x1e0>
 800578c:	eee4 7a87 	vfma.f32	s15, s9, s14
 8005790:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005794:	eee5 7a87 	vfma.f32	s15, s11, s14
 8005798:	dd1a      	ble.n	80057d0 <__ieee754_logf+0x180>
 800579a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800579e:	ee20 7a07 	vmul.f32	s14, s0, s14
 80057a2:	ee27 7a00 	vmul.f32	s14, s14, s0
 80057a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80057ae:	b913      	cbnz	r3, 80057b6 <__ieee754_logf+0x166>
 80057b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057b4:	e7ac      	b.n	8005710 <__ieee754_logf+0xc0>
 80057b6:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8005808 <__ieee754_logf+0x1b8>
 80057ba:	eee6 7a86 	vfma.f32	s15, s13, s12
 80057be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057c2:	ee37 0a40 	vsub.f32	s0, s14, s0
 80057c6:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800580c <__ieee754_logf+0x1bc>
 80057ca:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80057ce:	4770      	bx	lr
 80057d0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80057d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80057d8:	b913      	cbnz	r3, 80057e0 <__ieee754_logf+0x190>
 80057da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80057de:	4770      	bx	lr
 80057e0:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8005808 <__ieee754_logf+0x1b8>
 80057e4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80057e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80057ec:	e7eb      	b.n	80057c6 <__ieee754_logf+0x176>
 80057ee:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80057f8 <__ieee754_logf+0x1a8>
 80057f2:	4770      	bx	lr
 80057f4:	cc000000 	.word	0xcc000000
 80057f8:	00000000 	.word	0x00000000
 80057fc:	4c000000 	.word	0x4c000000
 8005800:	004afb20 	.word	0x004afb20
 8005804:	007ffff0 	.word	0x007ffff0
 8005808:	3717f7d1 	.word	0x3717f7d1
 800580c:	3f317180 	.word	0x3f317180
 8005810:	3eaaaaab 	.word	0x3eaaaaab
 8005814:	3e1cd04f 	.word	0x3e1cd04f
 8005818:	3e178897 	.word	0x3e178897
 800581c:	ffcf5c30 	.word	0xffcf5c30
 8005820:	3e638e29 	.word	0x3e638e29
 8005824:	3ecccccd 	.word	0x3ecccccd
 8005828:	3e3a3325 	.word	0x3e3a3325
 800582c:	3e924925 	.word	0x3e924925
 8005830:	3f2aaaab 	.word	0x3f2aaaab

08005834 <scalbnf>:
 8005834:	ee10 3a10 	vmov	r3, s0
 8005838:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800583c:	d02b      	beq.n	8005896 <scalbnf+0x62>
 800583e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8005842:	d302      	bcc.n	800584a <scalbnf+0x16>
 8005844:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005848:	4770      	bx	lr
 800584a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800584e:	d123      	bne.n	8005898 <scalbnf+0x64>
 8005850:	4b24      	ldr	r3, [pc, #144]	@ (80058e4 <scalbnf+0xb0>)
 8005852:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80058e8 <scalbnf+0xb4>
 8005856:	4298      	cmp	r0, r3
 8005858:	ee20 0a27 	vmul.f32	s0, s0, s15
 800585c:	db17      	blt.n	800588e <scalbnf+0x5a>
 800585e:	ee10 3a10 	vmov	r3, s0
 8005862:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005866:	3a19      	subs	r2, #25
 8005868:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800586c:	4288      	cmp	r0, r1
 800586e:	dd15      	ble.n	800589c <scalbnf+0x68>
 8005870:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80058ec <scalbnf+0xb8>
 8005874:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80058f0 <scalbnf+0xbc>
 8005878:	ee10 3a10 	vmov	r3, s0
 800587c:	eeb0 7a67 	vmov.f32	s14, s15
 8005880:	2b00      	cmp	r3, #0
 8005882:	bfb8      	it	lt
 8005884:	eef0 7a66 	vmovlt.f32	s15, s13
 8005888:	ee27 0a87 	vmul.f32	s0, s15, s14
 800588c:	4770      	bx	lr
 800588e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80058f4 <scalbnf+0xc0>
 8005892:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005896:	4770      	bx	lr
 8005898:	0dd2      	lsrs	r2, r2, #23
 800589a:	e7e5      	b.n	8005868 <scalbnf+0x34>
 800589c:	4410      	add	r0, r2
 800589e:	28fe      	cmp	r0, #254	@ 0xfe
 80058a0:	dce6      	bgt.n	8005870 <scalbnf+0x3c>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	dd06      	ble.n	80058b4 <scalbnf+0x80>
 80058a6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80058aa:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80058ae:	ee00 3a10 	vmov	s0, r3
 80058b2:	4770      	bx	lr
 80058b4:	f110 0f16 	cmn.w	r0, #22
 80058b8:	da09      	bge.n	80058ce <scalbnf+0x9a>
 80058ba:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80058f4 <scalbnf+0xc0>
 80058be:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80058f8 <scalbnf+0xc4>
 80058c2:	ee10 3a10 	vmov	r3, s0
 80058c6:	eeb0 7a67 	vmov.f32	s14, s15
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	e7d9      	b.n	8005882 <scalbnf+0x4e>
 80058ce:	3019      	adds	r0, #25
 80058d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80058d4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80058d8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80058fc <scalbnf+0xc8>
 80058dc:	ee07 3a90 	vmov	s15, r3
 80058e0:	e7d7      	b.n	8005892 <scalbnf+0x5e>
 80058e2:	bf00      	nop
 80058e4:	ffff3cb0 	.word	0xffff3cb0
 80058e8:	4c000000 	.word	0x4c000000
 80058ec:	7149f2ca 	.word	0x7149f2ca
 80058f0:	f149f2ca 	.word	0xf149f2ca
 80058f4:	0da24260 	.word	0x0da24260
 80058f8:	8da24260 	.word	0x8da24260
 80058fc:	33000000 	.word	0x33000000

08005900 <floorf>:
 8005900:	ee10 3a10 	vmov	r3, s0
 8005904:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005908:	3a7f      	subs	r2, #127	@ 0x7f
 800590a:	2a16      	cmp	r2, #22
 800590c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005910:	dc2b      	bgt.n	800596a <floorf+0x6a>
 8005912:	2a00      	cmp	r2, #0
 8005914:	da12      	bge.n	800593c <floorf+0x3c>
 8005916:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800597c <floorf+0x7c>
 800591a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800591e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005926:	dd06      	ble.n	8005936 <floorf+0x36>
 8005928:	2b00      	cmp	r3, #0
 800592a:	da24      	bge.n	8005976 <floorf+0x76>
 800592c:	2900      	cmp	r1, #0
 800592e:	4b14      	ldr	r3, [pc, #80]	@ (8005980 <floorf+0x80>)
 8005930:	bf08      	it	eq
 8005932:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8005936:	ee00 3a10 	vmov	s0, r3
 800593a:	4770      	bx	lr
 800593c:	4911      	ldr	r1, [pc, #68]	@ (8005984 <floorf+0x84>)
 800593e:	4111      	asrs	r1, r2
 8005940:	420b      	tst	r3, r1
 8005942:	d0fa      	beq.n	800593a <floorf+0x3a>
 8005944:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800597c <floorf+0x7c>
 8005948:	ee30 0a27 	vadd.f32	s0, s0, s15
 800594c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005954:	ddef      	ble.n	8005936 <floorf+0x36>
 8005956:	2b00      	cmp	r3, #0
 8005958:	bfbe      	ittt	lt
 800595a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800595e:	fa40 f202 	asrlt.w	r2, r0, r2
 8005962:	189b      	addlt	r3, r3, r2
 8005964:	ea23 0301 	bic.w	r3, r3, r1
 8005968:	e7e5      	b.n	8005936 <floorf+0x36>
 800596a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800596e:	d3e4      	bcc.n	800593a <floorf+0x3a>
 8005970:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005974:	4770      	bx	lr
 8005976:	2300      	movs	r3, #0
 8005978:	e7dd      	b.n	8005936 <floorf+0x36>
 800597a:	bf00      	nop
 800597c:	7149f2ca 	.word	0x7149f2ca
 8005980:	bf800000 	.word	0xbf800000
 8005984:	007fffff 	.word	0x007fffff

08005988 <_init>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	bf00      	nop
 800598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598e:	bc08      	pop	{r3}
 8005990:	469e      	mov	lr, r3
 8005992:	4770      	bx	lr

08005994 <_fini>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	bf00      	nop
 8005998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599a:	bc08      	pop	{r3}
 800599c:	469e      	mov	lr, r3
 800599e:	4770      	bx	lr
