
USART_receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08005278  08005278  00006278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005684  08005684  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005684  08005684  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005684  08005684  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005684  08005684  00006684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005688  08005688  00006688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800568c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          0000456c  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200045c8  200045c8  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d09  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000213a  00000000  00000000  00017d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  00019ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a84  00000000  00000000  0001ac48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001deb4  00000000  00000000  0001b6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ffb  00000000  00000000  00039580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3a7a  00000000  00000000  0004b57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000009c  00000000  00000000  000feff5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e04  00000000  00000000  000ff094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00102e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005260 	.word	0x08005260

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08005260 	.word	0x08005260

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	0000      	movs	r0, r0
	...

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	f5ad 5db0 	sub.w	sp, sp, #5632	@ 0x1600
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a12:	f000 fc65 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a16:	f000 f8f7 	bl	8000c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1a:	f000 fa29 	bl	8000e70 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a1e:	f000 f957 	bl	8000cd0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a22:	f000 f995 	bl	8000d50 <MX_SPI1_Init>
  MX_UART4_Init();
 8000a26:	f000 f9d1 	bl	8000dcc <MX_UART4_Init>
  MX_USB_PCD_Init();
 8000a2a:	f000 f9ff 	bl	8000e2c <MX_USB_PCD_Init>
  Complesso x[256];
  Complesso X[256];
  float magnitude[256];
  uint8_t indici[256];

  HAL_UART_Receive(&huart4, elements, 256, 100000);
 8000a2e:	f507 51a8 	add.w	r1, r7, #5376	@ 0x1500
 8000a32:	f101 0108 	add.w	r1, r1, #8
 8000a36:	4b6e      	ldr	r3, [pc, #440]	@ (8000bf0 <main+0x1e8>)
 8000a38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a3c:	486d      	ldr	r0, [pc, #436]	@ (8000bf4 <main+0x1ec>)
 8000a3e:	f002 fe9b 	bl	8003778 <HAL_UART_Receive>

  // scriviamo il codice per ricostruire il segnale compresso
  for(int i=0; i<256; i++){
 8000a42:	2300      	movs	r3, #0
 8000a44:	f507 52b0 	add.w	r2, r7, #5632	@ 0x1600
 8000a48:	f102 020c 	add.w	r2, r2, #12
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	e042      	b.n	8000ad6 <main+0xce>
	  x[i].re = ((float)elements[i] / 127.5)-1;
 8000a50:	f507 53b0 	add.w	r3, r7, #5632	@ 0x1600
 8000a54:	f103 0310 	add.w	r3, r3, #16
 8000a58:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8000a5c:	f507 53b0 	add.w	r3, r7, #5632	@ 0x1600
 8000a60:	f103 030c 	add.w	r3, r3, #12
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	ee07 3a90 	vmov	s15, r3
 8000a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a72:	ee17 0a90 	vmov	r0, s15
 8000a76:	f7ff fd0b 	bl	8000490 <__aeabi_f2d>
 8000a7a:	a35b      	add	r3, pc, #364	@ (adr r3, 8000be8 <main+0x1e0>)
 8000a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a80:	f7ff fe88 	bl	8000794 <__aeabi_ddiv>
 8000a84:	4602      	mov	r2, r0
 8000a86:	460b      	mov	r3, r1
 8000a88:	4610      	mov	r0, r2
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f04f 0200 	mov.w	r2, #0
 8000a90:	4b59      	ldr	r3, [pc, #356]	@ (8000bf8 <main+0x1f0>)
 8000a92:	f7ff fb9d 	bl	80001d0 <__aeabi_dsub>
 8000a96:	4602      	mov	r2, r0
 8000a98:	460b      	mov	r3, r1
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f7ff ff61 	bl	8000964 <__aeabi_d2f>
 8000aa2:	4601      	mov	r1, r0
 8000aa4:	f507 53b0 	add.w	r3, r7, #5632	@ 0x1600
 8000aa8:	f103 0310 	add.w	r3, r3, #16
 8000aac:	f6a3 1208 	subw	r2, r3, #2312	@ 0x908
 8000ab0:	f507 53b0 	add.w	r3, r7, #5632	@ 0x1600
 8000ab4:	f103 030c 	add.w	r3, r3, #12
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	4413      	add	r3, r2
 8000abe:	6019      	str	r1, [r3, #0]
  for(int i=0; i<256; i++){
 8000ac0:	f507 53b0 	add.w	r3, r7, #5632	@ 0x1600
 8000ac4:	f103 030c 	add.w	r3, r3, #12
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	3301      	adds	r3, #1
 8000acc:	f507 52b0 	add.w	r2, r7, #5632	@ 0x1600
 8000ad0:	f102 020c 	add.w	r2, r2, #12
 8000ad4:	6013      	str	r3, [r2, #0]
 8000ad6:	f507 53b0 	add.w	r3, r7, #5632	@ 0x1600
 8000ada:	f103 030c 	add.w	r3, r3, #12
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2bff      	cmp	r3, #255	@ 0xff
 8000ae2:	ddb5      	ble.n	8000a50 <main+0x48>
  }

  arm_fft(x,X,256);
 8000ae4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000ae8:	3b08      	subs	r3, #8
 8000aea:	f607 5008 	addw	r0, r7, #3336	@ 0xd08
 8000aee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000af2:	4619      	mov	r1, r3
 8000af4:	f003 fb1e 	bl	8004134 <arm_fft>
  fft_to_spectrogram(X, magnitude, 256, -80.0f);
 8000af8:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000afc:	3908      	subs	r1, #8
 8000afe:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000b02:	3b08      	subs	r3, #8
 8000b04:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8000bfc <main+0x1f4>
 8000b08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f003 fbb7 	bl	8004280 <fft_to_spectrogram>

  for(int i=0; i<256; i++){
 8000b12:	2300      	movs	r3, #0
 8000b14:	f507 52b0 	add.w	r2, r7, #5632	@ 0x1600
 8000b18:	f102 0208 	add.w	r2, r2, #8
 8000b1c:	6013      	str	r3, [r2, #0]
 8000b1e:	e02d      	b.n	8000b7c <main+0x174>
	  indici[i] = (uint8_t)(magnitude[i]*255);
 8000b20:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 8000b24:	f5a3 62a1 	sub.w	r2, r3, #1288	@ 0x508
 8000b28:	f507 53b0 	add.w	r3, r7, #5632	@ 0x1600
 8000b2c:	f103 0308 	add.w	r3, r3, #8
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	4413      	add	r3, r2
 8000b36:	edd3 7a00 	vldr	s15, [r3]
 8000b3a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8000c00 <main+0x1f8>
 8000b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b46:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b4a:	793b      	ldrb	r3, [r7, #4]
 8000b4c:	b2d9      	uxtb	r1, r3
 8000b4e:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 8000b52:	f5a3 62c1 	sub.w	r2, r3, #1544	@ 0x608
 8000b56:	f507 53b0 	add.w	r3, r7, #5632	@ 0x1600
 8000b5a:	f103 0308 	add.w	r3, r3, #8
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4413      	add	r3, r2
 8000b62:	460a      	mov	r2, r1
 8000b64:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<256; i++){
 8000b66:	f507 53b0 	add.w	r3, r7, #5632	@ 0x1600
 8000b6a:	f103 0308 	add.w	r3, r3, #8
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	3301      	adds	r3, #1
 8000b72:	f507 52b0 	add.w	r2, r7, #5632	@ 0x1600
 8000b76:	f102 0208 	add.w	r2, r2, #8
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	f507 53b0 	add.w	r3, r7, #5632	@ 0x1600
 8000b80:	f103 0308 	add.w	r3, r3, #8
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2bff      	cmp	r3, #255	@ 0xff
 8000b88:	ddca      	ble.n	8000b20 <main+0x118>
  }

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2110      	movs	r1, #16
 8000b8e:	481d      	ldr	r0, [pc, #116]	@ (8000c04 <main+0x1fc>)
 8000b90:	f000 fe90 	bl	80018b4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000b94:	2064      	movs	r0, #100	@ 0x64
 8000b96:	f000 fc09 	bl	80013ac <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2110      	movs	r1, #16
 8000b9e:	4819      	ldr	r0, [pc, #100]	@ (8000c04 <main+0x1fc>)
 8000ba0:	f000 fe88 	bl	80018b4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000ba4:	2064      	movs	r0, #100	@ 0x64
 8000ba6:	f000 fc01 	bl	80013ac <HAL_Delay>

  HAL_UART_Transmit(&huart4, indici, 256, 1000);
 8000baa:	f107 0110 	add.w	r1, r7, #16
 8000bae:	3908      	subs	r1, #8
 8000bb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bb8:	480e      	ldr	r0, [pc, #56]	@ (8000bf4 <main+0x1ec>)
 8000bba:	f002 fd54 	bl	8003666 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2110      	movs	r1, #16
 8000bc2:	4810      	ldr	r0, [pc, #64]	@ (8000c04 <main+0x1fc>)
 8000bc4:	f000 fe76 	bl	80018b4 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000bc8:	2064      	movs	r0, #100	@ 0x64
 8000bca:	f000 fbef 	bl	80013ac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2110      	movs	r1, #16
 8000bd2:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <main+0x1fc>)
 8000bd4:	f000 fe6e 	bl	80018b4 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000bd8:	2064      	movs	r0, #100	@ 0x64
 8000bda:	f000 fbe7 	bl	80013ac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000bde:	bf00      	nop
 8000be0:	e7ed      	b.n	8000bbe <main+0x1b6>
 8000be2:	bf00      	nop
 8000be4:	f3af 8000 	nop.w
 8000be8:	00000000 	.word	0x00000000
 8000bec:	405fe000 	.word	0x405fe000
 8000bf0:	000186a0 	.word	0x000186a0
 8000bf4:	20000130 	.word	0x20000130
 8000bf8:	3ff00000 	.word	0x3ff00000
 8000bfc:	c2a00000 	.word	0xc2a00000
 8000c00:	437f0000 	.word	0x437f0000
 8000c04:	48000800 	.word	0x48000800

08000c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b09e      	sub	sp, #120	@ 0x78
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c12:	2228      	movs	r2, #40	@ 0x28
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f003 fbdc 	bl	80043d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	223c      	movs	r2, #60	@ 0x3c
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 fbce 	bl	80043d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c3c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c40:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c46:	2301      	movs	r3, #1
 8000c48:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c56:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c5c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 f838 	bl	8001cd8 <HAL_RCC_OscConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c6e:	f000 f993 	bl	8000f98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c72:	230f      	movs	r3, #15
 8000c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c76:	2302      	movs	r3, #2
 8000c78:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c88:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f002 f830 	bl	8002cf4 <HAL_RCC_ClockConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c9a:	f000 f97d 	bl	8000f98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART4
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <SystemClock_Config+0xc4>)
 8000ca0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000caa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f002 fa30 	bl	8003118 <HAL_RCCEx_PeriphCLKConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000cbe:	f000 f96b 	bl	8000f98 <Error_Handler>
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3778      	adds	r7, #120	@ 0x78
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	00020028 	.word	0x00020028

08000cd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d44 <MX_I2C1_Init+0x74>)
 8000cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d48 <MX_I2C1_Init+0x78>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <MX_I2C1_Init+0x74>)
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d4c <MX_I2C1_Init+0x7c>)
 8000cde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <MX_I2C1_Init+0x74>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cec:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <MX_I2C1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <MX_I2C1_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <MX_I2C1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d0a:	480e      	ldr	r0, [pc, #56]	@ (8000d44 <MX_I2C1_Init+0x74>)
 8000d0c:	f000 fdea 	bl	80018e4 <HAL_I2C_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d16:	f000 f93f 	bl	8000f98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4809      	ldr	r0, [pc, #36]	@ (8000d44 <MX_I2C1_Init+0x74>)
 8000d1e:	f000 fe7c 	bl	8001a1a <HAL_I2CEx_ConfigAnalogFilter>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d28:	f000 f936 	bl	8000f98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_I2C1_Init+0x74>)
 8000d30:	f000 febe 	bl	8001ab0 <HAL_I2CEx_ConfigDigitalFilter>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d3a:	f000 f92d 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000078 	.word	0x20000078
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	2000090e 	.word	0x2000090e

08000d50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d56:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc8 <MX_SPI1_Init+0x78>)
 8000d58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d62:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d68:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d6a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d70:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d86:	2208      	movs	r2, #8
 8000d88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000d9e:	2207      	movs	r2, #7
 8000da0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000daa:	2208      	movs	r2, #8
 8000dac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_SPI1_Init+0x74>)
 8000db0:	f002 fb60 	bl	8003474 <HAL_SPI_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000dba:	f000 f8ed 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000cc 	.word	0x200000cc
 8000dc8:	40013000 	.word	0x40013000

08000dcc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <MX_UART4_Init+0x58>)
 8000dd2:	4a15      	ldr	r2, [pc, #84]	@ (8000e28 <MX_UART4_Init+0x5c>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <MX_UART4_Init+0x58>)
 8000dd8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ddc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_UART4_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <MX_UART4_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <MX_UART4_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <MX_UART4_Init+0x58>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <MX_UART4_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <MX_UART4_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <MX_UART4_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <MX_UART4_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_UART4_Init+0x58>)
 8000e10:	f002 fbdb 	bl	80035ca <HAL_UART_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000e1a:	f000 f8bd 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000130 	.word	0x20000130
 8000e28:	40004c00 	.word	0x40004c00

08000e2c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000e30:	4b0d      	ldr	r3, [pc, #52]	@ (8000e68 <MX_USB_PCD_Init+0x3c>)
 8000e32:	4a0e      	ldr	r2, [pc, #56]	@ (8000e6c <MX_USB_PCD_Init+0x40>)
 8000e34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <MX_USB_PCD_Init+0x3c>)
 8000e38:	2208      	movs	r2, #8
 8000e3a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <MX_USB_PCD_Init+0x3c>)
 8000e3e:	2202      	movs	r2, #2
 8000e40:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <MX_USB_PCD_Init+0x3c>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e48:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <MX_USB_PCD_Init+0x3c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <MX_USB_PCD_Init+0x3c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e54:	4804      	ldr	r0, [pc, #16]	@ (8000e68 <MX_USB_PCD_Init+0x3c>)
 8000e56:	f000 fe77 	bl	8001b48 <HAL_PCD_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000e60:	f000 f89a 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200001b8 	.word	0x200001b8
 8000e6c:	40005c00 	.word	0x40005c00

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e86:	4b41      	ldr	r3, [pc, #260]	@ (8000f8c <MX_GPIO_Init+0x11c>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a40      	ldr	r2, [pc, #256]	@ (8000f8c <MX_GPIO_Init+0x11c>)
 8000e8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e90:	6153      	str	r3, [r2, #20]
 8000e92:	4b3e      	ldr	r3, [pc, #248]	@ (8000f8c <MX_GPIO_Init+0x11c>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f8c <MX_GPIO_Init+0x11c>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4a3a      	ldr	r2, [pc, #232]	@ (8000f8c <MX_GPIO_Init+0x11c>)
 8000ea4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ea8:	6153      	str	r3, [r2, #20]
 8000eaa:	4b38      	ldr	r3, [pc, #224]	@ (8000f8c <MX_GPIO_Init+0x11c>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eb6:	4b35      	ldr	r3, [pc, #212]	@ (8000f8c <MX_GPIO_Init+0x11c>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	4a34      	ldr	r2, [pc, #208]	@ (8000f8c <MX_GPIO_Init+0x11c>)
 8000ebc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ec0:	6153      	str	r3, [r2, #20]
 8000ec2:	4b32      	ldr	r3, [pc, #200]	@ (8000f8c <MX_GPIO_Init+0x11c>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	4b2f      	ldr	r3, [pc, #188]	@ (8000f8c <MX_GPIO_Init+0x11c>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a2e      	ldr	r2, [pc, #184]	@ (8000f8c <MX_GPIO_Init+0x11c>)
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b2c      	ldr	r3, [pc, #176]	@ (8000f8c <MX_GPIO_Init+0x11c>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	4b29      	ldr	r3, [pc, #164]	@ (8000f8c <MX_GPIO_Init+0x11c>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4a28      	ldr	r2, [pc, #160]	@ (8000f8c <MX_GPIO_Init+0x11c>)
 8000eec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ef0:	6153      	str	r3, [r2, #20]
 8000ef2:	4b26      	ldr	r3, [pc, #152]	@ (8000f8c <MX_GPIO_Init+0x11c>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000efe:	2200      	movs	r2, #0
 8000f00:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000f04:	4822      	ldr	r0, [pc, #136]	@ (8000f90 <MX_GPIO_Init+0x120>)
 8000f06:	f000 fcd5 	bl	80018b4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	4821      	ldr	r0, [pc, #132]	@ (8000f94 <MX_GPIO_Init+0x124>)
 8000f10:	f000 fcd0 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000f14:	2337      	movs	r3, #55	@ 0x37
 8000f16:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f18:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4819      	ldr	r0, [pc, #100]	@ (8000f90 <MX_GPIO_Init+0x120>)
 8000f2a:	f000 fb49 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000f2e:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000f32:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4812      	ldr	r0, [pc, #72]	@ (8000f90 <MX_GPIO_Init+0x120>)
 8000f48:	f000 fb3a 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f62:	f000 fb2d 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f66:	2310      	movs	r3, #16
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <MX_GPIO_Init+0x124>)
 8000f7e:	f000 fb1f 	bl	80015c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	@ 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	48001000 	.word	0x48001000
 8000f94:	48000800 	.word	0x48000800

08000f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9c:	b672      	cpsid	i
}
 8000f9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <Error_Handler+0x8>

08000fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_MspInit+0x44>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe8 <HAL_MspInit+0x44>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6193      	str	r3, [r2, #24]
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <HAL_MspInit+0x44>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <HAL_MspInit+0x44>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a08      	ldr	r2, [pc, #32]	@ (8000fe8 <HAL_MspInit+0x44>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fcc:	61d3      	str	r3, [r2, #28]
 8000fce:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <HAL_MspInit+0x44>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fda:	2007      	movs	r0, #7
 8000fdc:	f000 fabc 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	@ 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a17      	ldr	r2, [pc, #92]	@ (8001068 <HAL_I2C_MspInit+0x7c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d127      	bne.n	800105e <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4b17      	ldr	r3, [pc, #92]	@ (800106c <HAL_I2C_MspInit+0x80>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	4a16      	ldr	r2, [pc, #88]	@ (800106c <HAL_I2C_MspInit+0x80>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001018:	6153      	str	r3, [r2, #20]
 800101a:	4b14      	ldr	r3, [pc, #80]	@ (800106c <HAL_I2C_MspInit+0x80>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001026:	23c0      	movs	r3, #192	@ 0xc0
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102a:	2312      	movs	r3, #18
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102e:	2301      	movs	r3, #1
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001036:	2304      	movs	r3, #4
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	480b      	ldr	r0, [pc, #44]	@ (8001070 <HAL_I2C_MspInit+0x84>)
 8001042:	f000 fabd 	bl	80015c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <HAL_I2C_MspInit+0x80>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4a08      	ldr	r2, [pc, #32]	@ (800106c <HAL_I2C_MspInit+0x80>)
 800104c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001050:	61d3      	str	r3, [r2, #28]
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_I2C_MspInit+0x80>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	@ 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40005400 	.word	0x40005400
 800106c:	40021000 	.word	0x40021000
 8001070:	48000400 	.word	0x48000400

08001074 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	@ 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a17      	ldr	r2, [pc, #92]	@ (80010f0 <HAL_SPI_MspInit+0x7c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d128      	bne.n	80010e8 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001096:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <HAL_SPI_MspInit+0x80>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4a16      	ldr	r2, [pc, #88]	@ (80010f4 <HAL_SPI_MspInit+0x80>)
 800109c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010a0:	6193      	str	r3, [r2, #24]
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <HAL_SPI_MspInit+0x80>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <HAL_SPI_MspInit+0x80>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a10      	ldr	r2, [pc, #64]	@ (80010f4 <HAL_SPI_MspInit+0x80>)
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b8:	6153      	str	r3, [r2, #20]
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <HAL_SPI_MspInit+0x80>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80010c6:	23e0      	movs	r3, #224	@ 0xe0
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010d6:	2305      	movs	r3, #5
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e4:	f000 fa6c 	bl	80015c0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	@ 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40013000 	.word	0x40013000
 80010f4:	40021000 	.word	0x40021000

080010f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	@ 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a17      	ldr	r2, [pc, #92]	@ (8001174 <HAL_UART_MspInit+0x7c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d128      	bne.n	800116c <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800111a:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <HAL_UART_MspInit+0x80>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a16      	ldr	r2, [pc, #88]	@ (8001178 <HAL_UART_MspInit+0x80>)
 8001120:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <HAL_UART_MspInit+0x80>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <HAL_UART_MspInit+0x80>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	4a10      	ldr	r2, [pc, #64]	@ (8001178 <HAL_UART_MspInit+0x80>)
 8001138:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800113c:	6153      	str	r3, [r2, #20]
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <HAL_UART_MspInit+0x80>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800114a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800114e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800115c:	2305      	movs	r3, #5
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <HAL_UART_MspInit+0x84>)
 8001168:	f000 fa2a 	bl	80015c0 <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 800116c:	bf00      	nop
 800116e:	3728      	adds	r7, #40	@ 0x28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40004c00 	.word	0x40004c00
 8001178:	40021000 	.word	0x40021000
 800117c:	48000800 	.word	0x48000800

08001180 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a18      	ldr	r2, [pc, #96]	@ (8001200 <HAL_PCD_MspInit+0x80>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d129      	bne.n	80011f6 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <HAL_PCD_MspInit+0x84>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <HAL_PCD_MspInit+0x84>)
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ac:	6153      	str	r3, [r2, #20]
 80011ae:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <HAL_PCD_MspInit+0x84>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80011ba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80011cc:	230e      	movs	r3, #14
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011da:	f000 f9f1 	bl	80015c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011de:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <HAL_PCD_MspInit+0x84>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <HAL_PCD_MspInit+0x84>)
 80011e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_PCD_MspInit+0x84>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	@ 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40005c00 	.word	0x40005c00
 8001204:	40021000 	.word	0x40021000

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <NMI_Handler+0x4>

08001210 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <MemManage_Handler+0x4>

08001220 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <UsageFault_Handler+0x4>

08001230 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125e:	f000 f885 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001290:	f7ff ffea 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001294:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001296:	490d      	ldr	r1, [pc, #52]	@ (80012cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001298:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <LoopForever+0xe>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800129c:	e002      	b.n	80012a4 <LoopCopyDataInit>

0800129e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a2:	3304      	adds	r3, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a8:	d3f9      	bcc.n	800129e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012aa:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012ac:	4c0a      	ldr	r4, [pc, #40]	@ (80012d8 <LoopForever+0x16>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b0:	e001      	b.n	80012b6 <LoopFillZerobss>

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b4:	3204      	adds	r2, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ba:	f003 f899 	bl	80043f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012be:	f7ff fba3 	bl	8000a08 <main>

080012c2 <LoopForever>:

LoopForever:
    b LoopForever
 80012c2:	e7fe      	b.n	80012c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012c4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012d0:	0800568c 	.word	0x0800568c
  ldr r2, =_sbss
 80012d4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012d8:	200045c8 	.word	0x200045c8

080012dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC1_2_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e4:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <HAL_Init+0x28>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a07      	ldr	r2, [pc, #28]	@ (8001308 <HAL_Init+0x28>)
 80012ea:	f043 0310 	orr.w	r3, r3, #16
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 f931 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f000 f808 	bl	800130c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012fc:	f7ff fe52 	bl	8000fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40022000 	.word	0x40022000

0800130c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_InitTick+0x54>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_InitTick+0x58>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f93b 	bl	80015a6 <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00e      	b.n	8001358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f000 f911 	bl	800156e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134c:	4a06      	ldr	r2, [pc, #24]	@ (8001368 <HAL_InitTick+0x5c>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000000 	.word	0x20000000
 8001364:	20000008 	.word	0x20000008
 8001368:	20000004 	.word	0x20000004

0800136c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_IncTick+0x20>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_IncTick+0x24>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <HAL_IncTick+0x24>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008
 8001390:	2000048c 	.word	0x2000048c

08001394 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;  
 8001398:	4b03      	ldr	r3, [pc, #12]	@ (80013a8 <HAL_GetTick+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	2000048c 	.word	0x2000048c

080013ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff ffee 	bl	8001394 <HAL_GetTick>
 80013b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d005      	beq.n	80013d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c6:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <HAL_Delay+0x44>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013d2:	bf00      	nop
 80013d4:	f7ff ffde 	bl	8001394 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f7      	bhi.n	80013d4 <HAL_Delay+0x28>
  {
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	@ (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db0a      	blt.n	8001482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	490c      	ldr	r1, [pc, #48]	@ (80014a4 <__NVIC_SetPriority+0x4c>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	440b      	add	r3, r1
 800147c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001480:	e00a      	b.n	8001498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4908      	ldr	r1, [pc, #32]	@ (80014a8 <__NVIC_SetPriority+0x50>)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	3b04      	subs	r3, #4
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	440b      	add	r3, r1
 8001496:	761a      	strb	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	@ 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f1c3 0307 	rsb	r3, r3, #7
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	bf28      	it	cs
 80014ca:	2304      	movcs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d902      	bls.n	80014dc <NVIC_EncodePriority+0x30>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3b03      	subs	r3, #3
 80014da:	e000      	b.n	80014de <NVIC_EncodePriority+0x32>
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	4313      	orrs	r3, r2
         );
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	@ 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001524:	d301      	bcc.n	800152a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001526:	2301      	movs	r3, #1
 8001528:	e00f      	b.n	800154a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152a:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <SysTick_Config+0x40>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001532:	210f      	movs	r1, #15
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f7ff ff8e 	bl	8001458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800153c:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <SysTick_Config+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <SysTick_Config+0x40>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010

08001558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff47 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001580:	f7ff ff5c 	bl	800143c <__NVIC_GetPriorityGrouping>
 8001584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff ff8e 	bl	80014ac <NVIC_EncodePriority>
 8001590:	4602      	mov	r2, r0
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff5d 	bl	8001458 <__NVIC_SetPriority>
}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffb0 	bl	8001514 <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ce:	e154      	b.n	800187a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2101      	movs	r1, #1
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	4013      	ands	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8146 	beq.w	8001874 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d005      	beq.n	8001600 <HAL_GPIO_Init+0x40>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d130      	bne.n	8001662 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	2203      	movs	r2, #3
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001636:	2201      	movs	r2, #1
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	f003 0201 	and.w	r2, r3, #1
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b03      	cmp	r3, #3
 800166c:	d017      	beq.n	800169e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d123      	bne.n	80016f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	08da      	lsrs	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3208      	adds	r2, #8
 80016b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	08da      	lsrs	r2, r3, #3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3208      	adds	r2, #8
 80016ec:	6939      	ldr	r1, [r7, #16]
 80016ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	2203      	movs	r2, #3
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0203 	and.w	r2, r3, #3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 80a0 	beq.w	8001874 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001734:	4b58      	ldr	r3, [pc, #352]	@ (8001898 <HAL_GPIO_Init+0x2d8>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a57      	ldr	r2, [pc, #348]	@ (8001898 <HAL_GPIO_Init+0x2d8>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b55      	ldr	r3, [pc, #340]	@ (8001898 <HAL_GPIO_Init+0x2d8>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800174c:	4a53      	ldr	r2, [pc, #332]	@ (800189c <HAL_GPIO_Init+0x2dc>)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	089b      	lsrs	r3, r3, #2
 8001752:	3302      	adds	r3, #2
 8001754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	220f      	movs	r2, #15
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001776:	d019      	beq.n	80017ac <HAL_GPIO_Init+0x1ec>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a49      	ldr	r2, [pc, #292]	@ (80018a0 <HAL_GPIO_Init+0x2e0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d013      	beq.n	80017a8 <HAL_GPIO_Init+0x1e8>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a48      	ldr	r2, [pc, #288]	@ (80018a4 <HAL_GPIO_Init+0x2e4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d00d      	beq.n	80017a4 <HAL_GPIO_Init+0x1e4>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a47      	ldr	r2, [pc, #284]	@ (80018a8 <HAL_GPIO_Init+0x2e8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d007      	beq.n	80017a0 <HAL_GPIO_Init+0x1e0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a46      	ldr	r2, [pc, #280]	@ (80018ac <HAL_GPIO_Init+0x2ec>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d101      	bne.n	800179c <HAL_GPIO_Init+0x1dc>
 8001798:	2304      	movs	r3, #4
 800179a:	e008      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 800179c:	2305      	movs	r3, #5
 800179e:	e006      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 80017a0:	2303      	movs	r3, #3
 80017a2:	e004      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e002      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <HAL_GPIO_Init+0x1ee>
 80017ac:	2300      	movs	r3, #0
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	f002 0203 	and.w	r2, r2, #3
 80017b4:	0092      	lsls	r2, r2, #2
 80017b6:	4093      	lsls	r3, r2
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017be:	4937      	ldr	r1, [pc, #220]	@ (800189c <HAL_GPIO_Init+0x2dc>)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017cc:	4b38      	ldr	r3, [pc, #224]	@ (80018b0 <HAL_GPIO_Init+0x2f0>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017f0:	4a2f      	ldr	r2, [pc, #188]	@ (80018b0 <HAL_GPIO_Init+0x2f0>)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f6:	4b2e      	ldr	r3, [pc, #184]	@ (80018b0 <HAL_GPIO_Init+0x2f0>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800181a:	4a25      	ldr	r2, [pc, #148]	@ (80018b0 <HAL_GPIO_Init+0x2f0>)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001820:	4b23      	ldr	r3, [pc, #140]	@ (80018b0 <HAL_GPIO_Init+0x2f0>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001844:	4a1a      	ldr	r2, [pc, #104]	@ (80018b0 <HAL_GPIO_Init+0x2f0>)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800184a:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <HAL_GPIO_Init+0x2f0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800186e:	4a10      	ldr	r2, [pc, #64]	@ (80018b0 <HAL_GPIO_Init+0x2f0>)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	3301      	adds	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	f47f aea3 	bne.w	80015d0 <HAL_GPIO_Init+0x10>
  }
}
 800188a:	bf00      	nop
 800188c:	bf00      	nop
 800188e:	371c      	adds	r7, #28
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40021000 	.word	0x40021000
 800189c:	40010000 	.word	0x40010000
 80018a0:	48000400 	.word	0x48000400
 80018a4:	48000800 	.word	0x48000800
 80018a8:	48000c00 	.word	0x48000c00
 80018ac:	48001000 	.word	0x48001000
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
 80018c0:	4613      	mov	r3, r2
 80018c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c4:	787b      	ldrb	r3, [r7, #1]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ca:	887a      	ldrh	r2, [r7, #2]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018d0:	e002      	b.n	80018d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e08d      	b.n	8001a12 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fb6e 	bl	8000fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2224      	movs	r2, #36	@ 0x24
 8001914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001934:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001944:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d107      	bne.n	800195e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	e006      	b.n	800196c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800196a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d108      	bne.n	8001986 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	e007      	b.n	8001996 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001994:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69d9      	ldr	r1, [r3, #28]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1a      	ldr	r2, [r3, #32]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0201 	orr.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2220      	movs	r2, #32
 80019fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b20      	cmp	r3, #32
 8001a2e:	d138      	bne.n	8001aa2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e032      	b.n	8001aa4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2224      	movs	r2, #36	@ 0x24
 8001a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0201 	bic.w	r2, r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a6c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6819      	ldr	r1, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0201 	orr.w	r2, r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2220      	movs	r2, #32
 8001a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e000      	b.n	8001aa4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001aa2:	2302      	movs	r3, #2
  }
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	d139      	bne.n	8001b3a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e033      	b.n	8001b3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2224      	movs	r2, #36	@ 0x24
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0201 	bic.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b02:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0201 	orr.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b3a:	2302      	movs	r3, #2
  }
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0b9      	b.n	8001cce <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fb06 	bl	8001180 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2203      	movs	r2, #3
 8001b78:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fa9e 	bl	80040c2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	e03e      	b.n	8001c0a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	3311      	adds	r3, #17
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	3310      	adds	r3, #16
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3313      	adds	r3, #19
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3320      	adds	r3, #32
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	440b      	add	r3, r1
 8001bea:	3324      	adds	r3, #36	@ 0x24
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	440b      	add	r3, r1
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	3301      	adds	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	791b      	ldrb	r3, [r3, #4]
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d3bb      	bcc.n	8001b8c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e044      	b.n	8001ca4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	440b      	add	r3, r1
 8001c28:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	440b      	add	r3, r1
 8001c3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c46:	7bfa      	ldrb	r2, [r7, #15]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	440b      	add	r3, r1
 8001c54:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	440b      	add	r3, r1
 8001c6a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	440b      	add	r3, r1
 8001c96:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	791b      	ldrb	r3, [r3, #4]
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d3b5      	bcc.n	8001c1a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001cba:	f002 fa1d 	bl	80040f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ce8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f000 bff4 	b.w	8002ce6 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 816d 	beq.w	8001fee <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d14:	4bb4      	ldr	r3, [pc, #720]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d00c      	beq.n	8001d3a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d20:	4bb1      	ldr	r3, [pc, #708]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d157      	bne.n	8001ddc <HAL_RCC_OscConfig+0x104>
 8001d2c:	4bae      	ldr	r3, [pc, #696]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d38:	d150      	bne.n	8001ddc <HAL_RCC_OscConfig+0x104>
 8001d3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d3e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d4e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d5a:	d802      	bhi.n	8001d62 <HAL_RCC_OscConfig+0x8a>
 8001d5c:	4ba2      	ldr	r3, [pc, #648]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	e015      	b.n	8001d8e <HAL_RCC_OscConfig+0xb6>
 8001d62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d66:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001d76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d7a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001d7e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001d8a:	4b97      	ldr	r3, [pc, #604]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d92:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001d96:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001d9a:	fa92 f2a2 	rbit	r2, r2
 8001d9e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001da2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001da6:	fab2 f282 	clz	r2, r2
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	f042 0220 	orr.w	r2, r2, #32
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	f002 021f 	and.w	r2, r2, #31
 8001db6:	2101      	movs	r1, #1
 8001db8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 8114 	beq.w	8001fec <HAL_RCC_OscConfig+0x314>
 8001dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f040 810b 	bne.w	8001fec <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	f000 bf85 	b.w	8002ce6 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dec:	d106      	bne.n	8001dfc <HAL_RCC_OscConfig+0x124>
 8001dee:	4b7e      	ldr	r3, [pc, #504]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a7d      	ldr	r2, [pc, #500]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e036      	b.n	8001e6a <HAL_RCC_OscConfig+0x192>
 8001dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10c      	bne.n	8001e26 <HAL_RCC_OscConfig+0x14e>
 8001e0c:	4b76      	ldr	r3, [pc, #472]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a75      	ldr	r2, [pc, #468]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b73      	ldr	r3, [pc, #460]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a72      	ldr	r2, [pc, #456]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e021      	b.n	8001e6a <HAL_RCC_OscConfig+0x192>
 8001e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e36:	d10c      	bne.n	8001e52 <HAL_RCC_OscConfig+0x17a>
 8001e38:	4b6b      	ldr	r3, [pc, #428]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a6a      	ldr	r2, [pc, #424]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001e3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b68      	ldr	r3, [pc, #416]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a67      	ldr	r2, [pc, #412]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	e00b      	b.n	8001e6a <HAL_RCC_OscConfig+0x192>
 8001e52:	4b65      	ldr	r3, [pc, #404]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a64      	ldr	r2, [pc, #400]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001e58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b62      	ldr	r3, [pc, #392]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a61      	ldr	r2, [pc, #388]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001e64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e6a:	4b5f      	ldr	r3, [pc, #380]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6e:	f023 020f 	bic.w	r2, r3, #15
 8001e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	495a      	ldr	r1, [pc, #360]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d054      	beq.n	8001f3e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff fa7e 	bl	8001394 <HAL_GetTick>
 8001e98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e9e:	f7ff fa79 	bl	8001394 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	@ 0x64
 8001eac:	d902      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	f000 bf19 	b.w	8002ce6 <HAL_RCC_OscConfig+0x100e>
 8001eb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eb8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001ec8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ed4:	d802      	bhi.n	8001edc <HAL_RCC_OscConfig+0x204>
 8001ed6:	4b44      	ldr	r3, [pc, #272]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	e015      	b.n	8001f08 <HAL_RCC_OscConfig+0x230>
 8001edc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ee0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001ef0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ef4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001ef8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001f04:	4b38      	ldr	r3, [pc, #224]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f08:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f0c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001f10:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001f14:	fa92 f2a2 	rbit	r2, r2
 8001f18:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001f1c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001f20:	fab2 f282 	clz	r2, r2
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	f042 0220 	orr.w	r2, r2, #32
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	f002 021f 	and.w	r2, r2, #31
 8001f30:	2101      	movs	r1, #1
 8001f32:	fa01 f202 	lsl.w	r2, r1, r2
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0b0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1c6>
 8001f3c:	e057      	b.n	8001fee <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fa29 	bl	8001394 <HAL_GetTick>
 8001f42:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	e00a      	b.n	8001f5e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff fa24 	bl	8001394 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b64      	cmp	r3, #100	@ 0x64
 8001f56:	d902      	bls.n	8001f5e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	f000 bec4 	b.w	8002ce6 <HAL_RCC_OscConfig+0x100e>
 8001f5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f62:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001f72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f7e:	d802      	bhi.n	8001f86 <HAL_RCC_OscConfig+0x2ae>
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	e015      	b.n	8001fb2 <HAL_RCC_OscConfig+0x2da>
 8001f86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f8a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001f9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f9e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001fa2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <HAL_RCC_OscConfig+0x310>)
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fb6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001fba:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001fbe:	fa92 f2a2 	rbit	r2, r2
 8001fc2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001fc6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001fca:	fab2 f282 	clz	r2, r2
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	f042 0220 	orr.w	r2, r2, #32
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	f002 021f 	and.w	r2, r2, #31
 8001fda:	2101      	movs	r1, #1
 8001fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1b0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x270>
 8001fe6:	e002      	b.n	8001fee <HAL_RCC_OscConfig+0x316>
 8001fe8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 816c 	beq.w	80022dc <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002004:	4bcc      	ldr	r3, [pc, #816]	@ (8002338 <HAL_RCC_OscConfig+0x660>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00b      	beq.n	8002028 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002010:	4bc9      	ldr	r3, [pc, #804]	@ (8002338 <HAL_RCC_OscConfig+0x660>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b08      	cmp	r3, #8
 800201a:	d16d      	bne.n	80020f8 <HAL_RCC_OscConfig+0x420>
 800201c:	4bc6      	ldr	r3, [pc, #792]	@ (8002338 <HAL_RCC_OscConfig+0x660>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d167      	bne.n	80020f8 <HAL_RCC_OscConfig+0x420>
 8002028:	2302      	movs	r3, #2
 800202a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800203a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b3f      	cmp	r3, #63	@ 0x3f
 8002046:	d802      	bhi.n	800204e <HAL_RCC_OscConfig+0x376>
 8002048:	4bbb      	ldr	r3, [pc, #748]	@ (8002338 <HAL_RCC_OscConfig+0x660>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	e013      	b.n	8002076 <HAL_RCC_OscConfig+0x39e>
 800204e:	2302      	movs	r3, #2
 8002050:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002060:	2302      	movs	r3, #2
 8002062:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002066:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002072:	4bb1      	ldr	r3, [pc, #708]	@ (8002338 <HAL_RCC_OscConfig+0x660>)
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	2202      	movs	r2, #2
 8002078:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800207c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002080:	fa92 f2a2 	rbit	r2, r2
 8002084:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002088:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800208c:	fab2 f282 	clz	r2, r2
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	f042 0220 	orr.w	r2, r2, #32
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f002 021f 	and.w	r2, r2, #31
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f202 	lsl.w	r2, r1, r2
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00a      	beq.n	80020be <HAL_RCC_OscConfig+0x3e6>
 80020a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d002      	beq.n	80020be <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	f000 be14 	b.w	8002ce6 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020be:	4b9e      	ldr	r3, [pc, #632]	@ (8002338 <HAL_RCC_OscConfig+0x660>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	21f8      	movs	r1, #248	@ 0xf8
 80020d4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80020dc:	fa91 f1a1 	rbit	r1, r1
 80020e0:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80020e4:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80020e8:	fab1 f181 	clz	r1, r1
 80020ec:	b2c9      	uxtb	r1, r1
 80020ee:	408b      	lsls	r3, r1
 80020f0:	4991      	ldr	r1, [pc, #580]	@ (8002338 <HAL_RCC_OscConfig+0x660>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	e0f1      	b.n	80022dc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 8083 	beq.w	8002210 <HAL_RCC_OscConfig+0x538>
 800210a:	2301      	movs	r3, #1
 800210c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800211c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800212a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	461a      	mov	r2, r3
 8002132:	2301      	movs	r3, #1
 8002134:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7ff f92d 	bl	8001394 <HAL_GetTick>
 800213a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213e:	e00a      	b.n	8002156 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002140:	f7ff f928 	bl	8001394 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d902      	bls.n	8002156 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	f000 bdc8 	b.w	8002ce6 <HAL_RCC_OscConfig+0x100e>
 8002156:	2302      	movs	r3, #2
 8002158:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002160:	fa93 f3a3 	rbit	r3, r3
 8002164:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002168:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	fab3 f383 	clz	r3, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b3f      	cmp	r3, #63	@ 0x3f
 8002174:	d802      	bhi.n	800217c <HAL_RCC_OscConfig+0x4a4>
 8002176:	4b70      	ldr	r3, [pc, #448]	@ (8002338 <HAL_RCC_OscConfig+0x660>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	e013      	b.n	80021a4 <HAL_RCC_OscConfig+0x4cc>
 800217c:	2302      	movs	r3, #2
 800217e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800218e:	2302      	movs	r3, #2
 8002190:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002194:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80021a0:	4b65      	ldr	r3, [pc, #404]	@ (8002338 <HAL_RCC_OscConfig+0x660>)
 80021a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a4:	2202      	movs	r2, #2
 80021a6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80021aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80021ae:	fa92 f2a2 	rbit	r2, r2
 80021b2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80021b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80021ba:	fab2 f282 	clz	r2, r2
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	f042 0220 	orr.w	r2, r2, #32
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	f002 021f 	and.w	r2, r2, #31
 80021ca:	2101      	movs	r1, #1
 80021cc:	fa01 f202 	lsl.w	r2, r1, r2
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0b4      	beq.n	8002140 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d6:	4b58      	ldr	r3, [pc, #352]	@ (8002338 <HAL_RCC_OscConfig+0x660>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	21f8      	movs	r1, #248	@ 0xf8
 80021ec:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80021f4:	fa91 f1a1 	rbit	r1, r1
 80021f8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80021fc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002200:	fab1 f181 	clz	r1, r1
 8002204:	b2c9      	uxtb	r1, r1
 8002206:	408b      	lsls	r3, r1
 8002208:	494b      	ldr	r1, [pc, #300]	@ (8002338 <HAL_RCC_OscConfig+0x660>)
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
 800220e:	e065      	b.n	80022dc <HAL_RCC_OscConfig+0x604>
 8002210:	2301      	movs	r3, #1
 8002212:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002222:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002230:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	461a      	mov	r2, r3
 8002238:	2300      	movs	r3, #0
 800223a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff f8aa 	bl	8001394 <HAL_GetTick>
 8002240:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002246:	f7ff f8a5 	bl	8001394 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d902      	bls.n	800225c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	f000 bd45 	b.w	8002ce6 <HAL_RCC_OscConfig+0x100e>
 800225c:	2302      	movs	r3, #2
 800225e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800226e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b3f      	cmp	r3, #63	@ 0x3f
 800227a:	d802      	bhi.n	8002282 <HAL_RCC_OscConfig+0x5aa>
 800227c:	4b2e      	ldr	r3, [pc, #184]	@ (8002338 <HAL_RCC_OscConfig+0x660>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	e013      	b.n	80022aa <HAL_RCC_OscConfig+0x5d2>
 8002282:	2302      	movs	r3, #2
 8002284:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002294:	2302      	movs	r3, #2
 8002296:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800229a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80022a6:	4b24      	ldr	r3, [pc, #144]	@ (8002338 <HAL_RCC_OscConfig+0x660>)
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	2202      	movs	r2, #2
 80022ac:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80022b0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80022b4:	fa92 f2a2 	rbit	r2, r2
 80022b8:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80022bc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80022c0:	fab2 f282 	clz	r2, r2
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	f042 0220 	orr.w	r2, r2, #32
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	f002 021f 	and.w	r2, r2, #31
 80022d0:	2101      	movs	r1, #1
 80022d2:	fa01 f202 	lsl.w	r2, r1, r2
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1b4      	bne.n	8002246 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 8115 	beq.w	800251c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d07e      	beq.n	8002400 <HAL_RCC_OscConfig+0x728>
 8002302:	2301      	movs	r3, #1
 8002304:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_RCC_OscConfig+0x664>)
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	461a      	mov	r2, r3
 8002328:	2301      	movs	r3, #1
 800232a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232c:	f7ff f832 	bl	8001394 <HAL_GetTick>
 8002330:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002334:	e00f      	b.n	8002356 <HAL_RCC_OscConfig+0x67e>
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002340:	f7ff f828 	bl	8001394 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d902      	bls.n	8002356 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	f000 bcc8 	b.w	8002ce6 <HAL_RCC_OscConfig+0x100e>
 8002356:	2302      	movs	r3, #2
 8002358:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002370:	2202      	movs	r2, #2
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002378:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	fa93 f2a3 	rbit	r2, r3
 8002382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002386:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002394:	2202      	movs	r2, #2
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	fa93 f2a3 	rbit	r2, r3
 80023a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b0:	4bb0      	ldr	r3, [pc, #704]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 80023b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80023bc:	2102      	movs	r1, #2
 80023be:	6019      	str	r1, [r3, #0]
 80023c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	fa93 f1a3 	rbit	r1, r3
 80023ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023d6:	6019      	str	r1, [r3, #0]
  return result;
 80023d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	2101      	movs	r1, #1
 80023f4:	fa01 f303 	lsl.w	r3, r1, r3
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0a0      	beq.n	8002340 <HAL_RCC_OscConfig+0x668>
 80023fe:	e08d      	b.n	800251c <HAL_RCC_OscConfig+0x844>
 8002400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002404:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002408:	2201      	movs	r2, #1
 800240a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002410:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	fa93 f2a3 	rbit	r2, r3
 800241a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002422:	601a      	str	r2, [r3, #0]
  return result;
 8002424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002428:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800242c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	4b90      	ldr	r3, [pc, #576]	@ (8002678 <HAL_RCC_OscConfig+0x9a0>)
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	461a      	mov	r2, r3
 800243e:	2300      	movs	r3, #0
 8002440:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7fe ffa7 	bl	8001394 <HAL_GetTick>
 8002446:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244a:	e00a      	b.n	8002462 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244c:	f7fe ffa2 	bl	8001394 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d902      	bls.n	8002462 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	f000 bc42 	b.w	8002ce6 <HAL_RCC_OscConfig+0x100e>
 8002462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002466:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800246a:	2202      	movs	r2, #2
 800246c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002472:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fa93 f2a3 	rbit	r2, r3
 800247c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002480:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800248e:	2202      	movs	r2, #2
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002496:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	fa93 f2a3 	rbit	r2, r3
 80024a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80024b2:	2202      	movs	r2, #2
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	fa93 f2a3 	rbit	r2, r3
 80024c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80024cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ce:	4b69      	ldr	r3, [pc, #420]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 80024d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024da:	2102      	movs	r1, #2
 80024dc:	6019      	str	r1, [r3, #0]
 80024de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	fa93 f1a3 	rbit	r1, r3
 80024ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024f4:	6019      	str	r1, [r3, #0]
  return result;
 80024f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	2101      	movs	r1, #1
 8002512:	fa01 f303 	lsl.w	r3, r1, r3
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d197      	bne.n	800244c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002520:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 819e 	beq.w	800286e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002532:	2300      	movs	r3, #0
 8002534:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002538:	4b4e      	ldr	r3, [pc, #312]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d116      	bne.n	8002572 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	4b4b      	ldr	r3, [pc, #300]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	4a4a      	ldr	r2, [pc, #296]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 800254a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800254e:	61d3      	str	r3, [r2, #28]
 8002550:	4b48      	ldr	r3, [pc, #288]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002566:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800256a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	4b42      	ldr	r3, [pc, #264]	@ (800267c <HAL_RCC_OscConfig+0x9a4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d11a      	bne.n	80025b4 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257e:	4b3f      	ldr	r3, [pc, #252]	@ (800267c <HAL_RCC_OscConfig+0x9a4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a3e      	ldr	r2, [pc, #248]	@ (800267c <HAL_RCC_OscConfig+0x9a4>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002588:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7fe ff03 	bl	8001394 <HAL_GetTick>
 800258e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	e009      	b.n	80025a8 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002594:	f7fe fefe 	bl	8001394 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b64      	cmp	r3, #100	@ 0x64
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e39e      	b.n	8002ce6 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	4b34      	ldr	r3, [pc, #208]	@ (800267c <HAL_RCC_OscConfig+0x9a4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ef      	beq.n	8002594 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x8fa>
 80025c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6213      	str	r3, [r2, #32]
 80025d0:	e035      	b.n	800263e <HAL_RCC_OscConfig+0x966>
 80025d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10c      	bne.n	80025fc <HAL_RCC_OscConfig+0x924>
 80025e2:	4b24      	ldr	r3, [pc, #144]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4a23      	ldr	r2, [pc, #140]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	6213      	str	r3, [r2, #32]
 80025ee:	4b21      	ldr	r3, [pc, #132]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4a20      	ldr	r2, [pc, #128]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 80025f4:	f023 0304 	bic.w	r3, r3, #4
 80025f8:	6213      	str	r3, [r2, #32]
 80025fa:	e020      	b.n	800263e <HAL_RCC_OscConfig+0x966>
 80025fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002600:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b05      	cmp	r3, #5
 800260a:	d10c      	bne.n	8002626 <HAL_RCC_OscConfig+0x94e>
 800260c:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4a18      	ldr	r2, [pc, #96]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 8002612:	f043 0304 	orr.w	r3, r3, #4
 8002616:	6213      	str	r3, [r2, #32]
 8002618:	4b16      	ldr	r3, [pc, #88]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4a15      	ldr	r2, [pc, #84]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6213      	str	r3, [r2, #32]
 8002624:	e00b      	b.n	800263e <HAL_RCC_OscConfig+0x966>
 8002626:	4b13      	ldr	r3, [pc, #76]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4a12      	ldr	r2, [pc, #72]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	6213      	str	r3, [r2, #32]
 8002632:	4b10      	ldr	r3, [pc, #64]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	4a0f      	ldr	r2, [pc, #60]	@ (8002674 <HAL_RCC_OscConfig+0x99c>)
 8002638:	f023 0304 	bic.w	r3, r3, #4
 800263c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800263e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002642:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 8087 	beq.w	800275e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002650:	f7fe fea0 	bl	8001394 <HAL_GetTick>
 8002654:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002658:	e012      	b.n	8002680 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7fe fe9b 	bl	8001394 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d908      	bls.n	8002680 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e339      	b.n	8002ce6 <HAL_RCC_OscConfig+0x100e>
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000
 8002678:	10908120 	.word	0x10908120
 800267c:	40007000 	.word	0x40007000
 8002680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002684:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002688:	2202      	movs	r2, #2
 800268a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002690:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	fa93 f2a3 	rbit	r2, r3
 800269a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80026ac:	2202      	movs	r2, #2
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	fa93 f2a3 	rbit	r2, r3
 80026be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80026c6:	601a      	str	r2, [r3, #0]
  return result;
 80026c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026cc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80026d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <HAL_RCC_OscConfig+0xa10>
 80026e2:	4b98      	ldr	r3, [pc, #608]	@ (8002944 <HAL_RCC_OscConfig+0xc6c>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	e013      	b.n	8002710 <HAL_RCC_OscConfig+0xa38>
 80026e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026f0:	2202      	movs	r2, #2
 80026f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	fa93 f2a3 	rbit	r2, r3
 8002702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002706:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	4b8d      	ldr	r3, [pc, #564]	@ (8002944 <HAL_RCC_OscConfig+0xc6c>)
 800270e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002710:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002714:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002718:	2102      	movs	r1, #2
 800271a:	6011      	str	r1, [r2, #0]
 800271c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002720:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	fa92 f1a2 	rbit	r1, r2
 800272a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800272e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002732:	6011      	str	r1, [r2, #0]
  return result;
 8002734:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002738:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	fab2 f282 	clz	r2, r2
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	f002 021f 	and.w	r2, r2, #31
 800274e:	2101      	movs	r1, #1
 8002750:	fa01 f202 	lsl.w	r2, r1, r2
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	f43f af7f 	beq.w	800265a <HAL_RCC_OscConfig+0x982>
 800275c:	e07d      	b.n	800285a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275e:	f7fe fe19 	bl	8001394 <HAL_GetTick>
 8002762:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002766:	e00b      	b.n	8002780 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002768:	f7fe fe14 	bl	8001394 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e2b2      	b.n	8002ce6 <HAL_RCC_OscConfig+0x100e>
 8002780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002784:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002788:	2202      	movs	r2, #2
 800278a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002790:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	fa93 f2a3 	rbit	r2, r3
 800279a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80027ac:	2202      	movs	r2, #2
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	fa93 f2a3 	rbit	r2, r3
 80027be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80027c6:	601a      	str	r2, [r3, #0]
  return result;
 80027c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027cc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80027d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <HAL_RCC_OscConfig+0xb10>
 80027e2:	4b58      	ldr	r3, [pc, #352]	@ (8002944 <HAL_RCC_OscConfig+0xc6c>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	e013      	b.n	8002810 <HAL_RCC_OscConfig+0xb38>
 80027e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ec:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027f0:	2202      	movs	r2, #2
 80027f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	fa93 f2a3 	rbit	r2, r3
 8002802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002806:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	4b4d      	ldr	r3, [pc, #308]	@ (8002944 <HAL_RCC_OscConfig+0xc6c>)
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002810:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002814:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002818:	2102      	movs	r1, #2
 800281a:	6011      	str	r1, [r2, #0]
 800281c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002820:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	fa92 f1a2 	rbit	r1, r2
 800282a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800282e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002832:	6011      	str	r1, [r2, #0]
  return result;
 8002834:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002838:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	fab2 f282 	clz	r2, r2
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	f002 021f 	and.w	r2, r2, #31
 800284e:	2101      	movs	r1, #1
 8002850:	fa01 f202 	lsl.w	r2, r1, r2
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d186      	bne.n	8002768 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800285a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4b38      	ldr	r3, [pc, #224]	@ (8002944 <HAL_RCC_OscConfig+0xc6c>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	4a37      	ldr	r2, [pc, #220]	@ (8002944 <HAL_RCC_OscConfig+0xc6c>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800286c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002872:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8232 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002880:	4b30      	ldr	r3, [pc, #192]	@ (8002944 <HAL_RCC_OscConfig+0xc6c>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	f000 8201 	beq.w	8002c90 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002892:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	2b02      	cmp	r3, #2
 800289c:	f040 8157 	bne.w	8002b4e <HAL_RCC_OscConfig+0xe76>
 80028a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80028a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	fa93 f2a3 	rbit	r2, r3
 80028bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80028c4:	601a      	str	r2, [r3, #0]
  return result;
 80028c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80028ce:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028da:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	461a      	mov	r2, r3
 80028e2:	2300      	movs	r3, #0
 80028e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7fe fd55 	bl	8001394 <HAL_GetTick>
 80028ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ee:	e009      	b.n	8002904 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe fd50 	bl	8001394 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e1f0      	b.n	8002ce6 <HAL_RCC_OscConfig+0x100e>
 8002904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002908:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800290c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002916:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	fa93 f2a3 	rbit	r2, r3
 8002920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002924:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002928:	601a      	str	r2, [r3, #0]
  return result;
 800292a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002932:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b3f      	cmp	r3, #63	@ 0x3f
 800293c:	d804      	bhi.n	8002948 <HAL_RCC_OscConfig+0xc70>
 800293e:	4b01      	ldr	r3, [pc, #4]	@ (8002944 <HAL_RCC_OscConfig+0xc6c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	e029      	b.n	8002998 <HAL_RCC_OscConfig+0xcc0>
 8002944:	40021000 	.word	0x40021000
 8002948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002950:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	fa93 f2a3 	rbit	r2, r3
 8002964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002968:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002972:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002976:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002980:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	fa93 f2a3 	rbit	r2, r3
 800298a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	4bc3      	ldr	r3, [pc, #780]	@ (8002ca4 <HAL_RCC_OscConfig+0xfcc>)
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800299c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80029a0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029a4:	6011      	str	r1, [r2, #0]
 80029a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029aa:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	fa92 f1a2 	rbit	r1, r2
 80029b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029b8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80029bc:	6011      	str	r1, [r2, #0]
  return result;
 80029be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029c2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	fab2 f282 	clz	r2, r2
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	f042 0220 	orr.w	r2, r2, #32
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	f002 021f 	and.w	r2, r2, #31
 80029d8:	2101      	movs	r1, #1
 80029da:	fa01 f202 	lsl.w	r2, r1, r2
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d185      	bne.n	80028f0 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e4:	4baf      	ldr	r3, [pc, #700]	@ (8002ca4 <HAL_RCC_OscConfig+0xfcc>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	430b      	orrs	r3, r1
 8002a06:	49a7      	ldr	r1, [pc, #668]	@ (8002ca4 <HAL_RCC_OscConfig+0xfcc>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
 8002a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a10:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002a14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a30:	601a      	str	r2, [r3, #0]
  return result;
 8002a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a36:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a3a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a46:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2301      	movs	r3, #1
 8002a50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a52:	f7fe fc9f 	bl	8001394 <HAL_GetTick>
 8002a56:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a5a:	e009      	b.n	8002a70 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe fc9a 	bl	8001394 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e13a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x100e>
 8002a70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a74:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a82:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	fa93 f2a3 	rbit	r2, r3
 8002a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a90:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a94:	601a      	str	r2, [r3, #0]
  return result;
 8002a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002aa8:	d802      	bhi.n	8002ab0 <HAL_RCC_OscConfig+0xdd8>
 8002aaa:	4b7e      	ldr	r3, [pc, #504]	@ (8002ca4 <HAL_RCC_OscConfig+0xfcc>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	e027      	b.n	8002b00 <HAL_RCC_OscConfig+0xe28>
 8002ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ab8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	fa93 f2a3 	rbit	r2, r3
 8002acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ada:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ade:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	fa93 f2a3 	rbit	r2, r3
 8002af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	4b69      	ldr	r3, [pc, #420]	@ (8002ca4 <HAL_RCC_OscConfig+0xfcc>)
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b04:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002b08:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b0c:	6011      	str	r1, [r2, #0]
 8002b0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b12:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	fa92 f1a2 	rbit	r1, r2
 8002b1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b20:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b24:	6011      	str	r1, [r2, #0]
  return result;
 8002b26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b2a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	fab2 f282 	clz	r2, r2
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	f042 0220 	orr.w	r2, r2, #32
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	f002 021f 	and.w	r2, r2, #31
 8002b40:	2101      	movs	r1, #1
 8002b42:	fa01 f202 	lsl.w	r2, r1, r2
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d087      	beq.n	8002a5c <HAL_RCC_OscConfig+0xd84>
 8002b4c:	e0ca      	b.n	8002ce4 <HAL_RCC_OscConfig+0x100c>
 8002b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b52:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b56:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b60:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	fa93 f2a3 	rbit	r2, r3
 8002b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b72:	601a      	str	r2, [r3, #0]
  return result;
 8002b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b78:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b7c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2300      	movs	r3, #0
 8002b92:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7fe fbfe 	bl	8001394 <HAL_GetTick>
 8002b98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b9c:	e009      	b.n	8002bb2 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7fe fbf9 	bl	8001394 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e099      	b.n	8002ce6 <HAL_RCC_OscConfig+0x100e>
 8002bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002bba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	fa93 f2a3 	rbit	r2, r3
 8002bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002bd6:	601a      	str	r2, [r3, #0]
  return result;
 8002bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bdc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002be0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bea:	d802      	bhi.n	8002bf2 <HAL_RCC_OscConfig+0xf1a>
 8002bec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <HAL_RCC_OscConfig+0xfcc>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	e027      	b.n	8002c42 <HAL_RCC_OscConfig+0xf6a>
 8002bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bfa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c04:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	fa93 f2a3 	rbit	r2, r3
 8002c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c12:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	fa93 f2a3 	rbit	r2, r3
 8002c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c38:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ca4 <HAL_RCC_OscConfig+0xfcc>)
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c46:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c4a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c4e:	6011      	str	r1, [r2, #0]
 8002c50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c54:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	fa92 f1a2 	rbit	r1, r2
 8002c5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c62:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c66:	6011      	str	r1, [r2, #0]
  return result;
 8002c68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c6c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	fab2 f282 	clz	r2, r2
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	f042 0220 	orr.w	r2, r2, #32
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f002 021f 	and.w	r2, r2, #31
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa01 f202 	lsl.w	r2, r1, r2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d187      	bne.n	8002b9e <HAL_RCC_OscConfig+0xec6>
 8002c8e:	e029      	b.n	8002ce4 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d103      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e020      	b.n	8002ce6 <HAL_RCC_OscConfig+0x100e>
 8002ca4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ca8:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <HAL_RCC_OscConfig+0x1018>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cb0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002cb4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d10b      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002cc8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002ccc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000

08002cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b09e      	sub	sp, #120	@ 0x78
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e154      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b89      	ldr	r3, [pc, #548]	@ (8002f34 <HAL_RCC_ClockConfig+0x240>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d910      	bls.n	8002d3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b86      	ldr	r3, [pc, #536]	@ (8002f34 <HAL_RCC_ClockConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 0207 	bic.w	r2, r3, #7
 8002d22:	4984      	ldr	r1, [pc, #528]	@ (8002f34 <HAL_RCC_ClockConfig+0x240>)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	4b82      	ldr	r3, [pc, #520]	@ (8002f34 <HAL_RCC_ClockConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e13c      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d48:	4b7b      	ldr	r3, [pc, #492]	@ (8002f38 <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4978      	ldr	r1, [pc, #480]	@ (8002f38 <HAL_RCC_ClockConfig+0x244>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80cd 	beq.w	8002f02 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d137      	bne.n	8002de0 <HAL_RCC_ClockConfig+0xec>
 8002d70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d74:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002d7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d88:	d802      	bhi.n	8002d90 <HAL_RCC_ClockConfig+0x9c>
 8002d8a:	4b6b      	ldr	r3, [pc, #428]	@ (8002f38 <HAL_RCC_ClockConfig+0x244>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	e00f      	b.n	8002db0 <HAL_RCC_ClockConfig+0xbc>
 8002d90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002da2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002da4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002dac:	4b62      	ldr	r3, [pc, #392]	@ (8002f38 <HAL_RCC_ClockConfig+0x244>)
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002db4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002db6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002db8:	fa92 f2a2 	rbit	r2, r2
 8002dbc:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002dbe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002dc0:	fab2 f282 	clz	r2, r2
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	f042 0220 	orr.w	r2, r2, #32
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	f002 021f 	and.w	r2, r2, #31
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d171      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0ea      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d137      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x164>
 8002de8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dec:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002df6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e00:	d802      	bhi.n	8002e08 <HAL_RCC_ClockConfig+0x114>
 8002e02:	4b4d      	ldr	r3, [pc, #308]	@ (8002f38 <HAL_RCC_ClockConfig+0x244>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	e00f      	b.n	8002e28 <HAL_RCC_ClockConfig+0x134>
 8002e08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e24:	4b44      	ldr	r3, [pc, #272]	@ (8002f38 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e2c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002e2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e30:	fa92 f2a2 	rbit	r2, r2
 8002e34:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002e36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e38:	fab2 f282 	clz	r2, r2
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	f042 0220 	orr.w	r2, r2, #32
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f002 021f 	and.w	r2, r2, #31
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d135      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0ae      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2c2>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e6e:	d802      	bhi.n	8002e76 <HAL_RCC_ClockConfig+0x182>
 8002e70:	4b31      	ldr	r3, [pc, #196]	@ (8002f38 <HAL_RCC_ClockConfig+0x244>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	e00d      	b.n	8002e92 <HAL_RCC_ClockConfig+0x19e>
 8002e76:	2302      	movs	r3, #2
 8002e78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e82:	2302      	movs	r3, #2
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f38 <HAL_RCC_ClockConfig+0x244>)
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	2202      	movs	r2, #2
 8002e94:	61ba      	str	r2, [r7, #24]
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	fa92 f2a2 	rbit	r2, r2
 8002e9c:	617a      	str	r2, [r7, #20]
  return result;
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	fab2 f282 	clz	r2, r2
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	f042 0220 	orr.w	r2, r2, #32
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	f002 021f 	and.w	r2, r2, #31
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e07a      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f38 <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f023 0203 	bic.w	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	491a      	ldr	r1, [pc, #104]	@ (8002f38 <HAL_RCC_ClockConfig+0x244>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed2:	f7fe fa5f 	bl	8001394 <HAL_GetTick>
 8002ed6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eda:	f7fe fa5b 	bl	8001394 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e062      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef0:	4b11      	ldr	r3, [pc, #68]	@ (8002f38 <HAL_RCC_ClockConfig+0x244>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 020c 	and.w	r2, r3, #12
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d1eb      	bne.n	8002eda <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f02:	4b0c      	ldr	r3, [pc, #48]	@ (8002f34 <HAL_RCC_ClockConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d215      	bcs.n	8002f3c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f10:	4b08      	ldr	r3, [pc, #32]	@ (8002f34 <HAL_RCC_ClockConfig+0x240>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f023 0207 	bic.w	r2, r3, #7
 8002f18:	4906      	ldr	r1, [pc, #24]	@ (8002f34 <HAL_RCC_ClockConfig+0x240>)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f20:	4b04      	ldr	r3, [pc, #16]	@ (8002f34 <HAL_RCC_ClockConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d006      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e041      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x2c2>
 8002f32:	bf00      	nop
 8002f34:	40022000 	.word	0x40022000
 8002f38:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f48:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc0 <HAL_RCC_ClockConfig+0x2cc>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	491a      	ldr	r1, [pc, #104]	@ (8002fc0 <HAL_RCC_ClockConfig+0x2cc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d009      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f66:	4b16      	ldr	r3, [pc, #88]	@ (8002fc0 <HAL_RCC_ClockConfig+0x2cc>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4912      	ldr	r1, [pc, #72]	@ (8002fc0 <HAL_RCC_ClockConfig+0x2cc>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f7a:	f000 f829 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002f7e:	4601      	mov	r1, r0
 8002f80:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc0 <HAL_RCC_ClockConfig+0x2cc>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f88:	22f0      	movs	r2, #240	@ 0xf0
 8002f8a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	fa92 f2a2 	rbit	r2, r2
 8002f92:	60fa      	str	r2, [r7, #12]
  return result;
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	fab2 f282 	clz	r2, r2
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	40d3      	lsrs	r3, r2
 8002f9e:	4a09      	ldr	r2, [pc, #36]	@ (8002fc4 <HAL_RCC_ClockConfig+0x2d0>)
 8002fa0:	5cd3      	ldrb	r3, [r2, r3]
 8002fa2:	fa21 f303 	lsr.w	r3, r1, r3
 8002fa6:	4a08      	ldr	r2, [pc, #32]	@ (8002fc8 <HAL_RCC_ClockConfig+0x2d4>)
 8002fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002faa:	4b08      	ldr	r3, [pc, #32]	@ (8002fcc <HAL_RCC_ClockConfig+0x2d8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe f9ac 	bl	800130c <HAL_InitTick>
  
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3778      	adds	r7, #120	@ 0x78
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	08005278 	.word	0x08005278
 8002fc8:	20000000 	.word	0x20000000
 8002fcc:	20000004 	.word	0x20000004

08002fd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002fea:	4b1e      	ldr	r3, [pc, #120]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d002      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x30>
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d003      	beq.n	8003006 <HAL_RCC_GetSysClockFreq+0x36>
 8002ffe:	e026      	b.n	800304e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003000:	4b19      	ldr	r3, [pc, #100]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x98>)
 8003002:	613b      	str	r3, [r7, #16]
      break;
 8003004:	e026      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	0c9b      	lsrs	r3, r3, #18
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	4a17      	ldr	r2, [pc, #92]	@ (800306c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003010:	5cd3      	ldrb	r3, [r2, r3]
 8003012:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003014:	4b13      	ldr	r3, [pc, #76]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x94>)
 8003016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	4a14      	ldr	r2, [pc, #80]	@ (8003070 <HAL_RCC_GetSysClockFreq+0xa0>)
 800301e:	5cd3      	ldrb	r3, [r2, r3]
 8003020:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800302c:	4a0e      	ldr	r2, [pc, #56]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x98>)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	fbb2 f2f3 	udiv	r2, r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	e004      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a0c      	ldr	r2, [pc, #48]	@ (8003074 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	613b      	str	r3, [r7, #16]
      break;
 800304c:	e002      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800304e:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x98>)
 8003050:	613b      	str	r3, [r7, #16]
      break;
 8003052:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003054:	693b      	ldr	r3, [r7, #16]
}
 8003056:	4618      	mov	r0, r3
 8003058:	371c      	adds	r7, #28
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
 8003068:	007a1200 	.word	0x007a1200
 800306c:	08005290 	.word	0x08005290
 8003070:	080052a0 	.word	0x080052a0
 8003074:	003d0900 	.word	0x003d0900

08003078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800307c:	4b03      	ldr	r3, [pc, #12]	@ (800308c <HAL_RCC_GetHCLKFreq+0x14>)
 800307e:	681b      	ldr	r3, [r3, #0]
}
 8003080:	4618      	mov	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20000000 	.word	0x20000000

08003090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003096:	f7ff ffef 	bl	8003078 <HAL_RCC_GetHCLKFreq>
 800309a:	4601      	mov	r1, r0
 800309c:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030a4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80030a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	fa92 f2a2 	rbit	r2, r2
 80030b0:	603a      	str	r2, [r7, #0]
  return result;
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	fab2 f282 	clz	r2, r2
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	40d3      	lsrs	r3, r2
 80030bc:	4a04      	ldr	r2, [pc, #16]	@ (80030d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40021000 	.word	0x40021000
 80030d0:	08005288 	.word	0x08005288

080030d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030da:	f7ff ffcd 	bl	8003078 <HAL_RCC_GetHCLKFreq>
 80030de:	4601      	mov	r1, r0
 80030e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003110 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80030e8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80030ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	fa92 f2a2 	rbit	r2, r2
 80030f4:	603a      	str	r2, [r7, #0]
  return result;
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	fab2 f282 	clz	r2, r2
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	40d3      	lsrs	r3, r2
 8003100:	4a04      	ldr	r2, [pc, #16]	@ (8003114 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003102:	5cd3      	ldrb	r3, [r2, r3]
 8003104:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000
 8003114:	08005288 	.word	0x08005288

08003118 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b092      	sub	sp, #72	@ 0x48
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003128:	2300      	movs	r3, #0
 800312a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80d2 	beq.w	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313c:	4b4d      	ldr	r3, [pc, #308]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10e      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003148:	4b4a      	ldr	r3, [pc, #296]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	4a49      	ldr	r2, [pc, #292]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003152:	61d3      	str	r3, [r2, #28]
 8003154:	4b47      	ldr	r3, [pc, #284]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003160:	2301      	movs	r3, #1
 8003162:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b44      	ldr	r3, [pc, #272]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003172:	4b41      	ldr	r3, [pc, #260]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a40      	ldr	r2, [pc, #256]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800317c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7fe f909 	bl	8001394 <HAL_GetTick>
 8003182:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fe f905 	bl	8001394 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b64      	cmp	r3, #100	@ 0x64
 8003192:	d901      	bls.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e167      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	4b37      	ldr	r3, [pc, #220]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031a4:	4b33      	ldr	r3, [pc, #204]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8082 	beq.w	80032ba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d07a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80031dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	4b25      	ldr	r3, [pc, #148]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	461a      	mov	r2, r3
 80031ee:	2301      	movs	r3, #1
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	4b1c      	ldr	r3, [pc, #112]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	461a      	mov	r2, r3
 8003212:	2300      	movs	r3, #0
 8003214:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003216:	4a17      	ldr	r2, [pc, #92]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800321a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800321c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d049      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003226:	f7fe f8b5 	bl	8001394 <HAL_GetTick>
 800322a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322c:	e00a      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322e:	f7fe f8b1 	bl	8001394 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e111      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003244:	2302      	movs	r3, #2
 8003246:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003250:	2302      	movs	r3, #2
 8003252:	623b      	str	r3, [r7, #32]
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	61fb      	str	r3, [r7, #28]
  return result;
 800325c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d108      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800326e:	4b01      	ldr	r3, [pc, #4]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	e00d      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003274:	40021000 	.word	0x40021000
 8003278:	40007000 	.word	0x40007000
 800327c:	10908100 	.word	0x10908100
 8003280:	2302      	movs	r3, #2
 8003282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	4b78      	ldr	r3, [pc, #480]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	2202      	movs	r2, #2
 8003292:	613a      	str	r2, [r7, #16]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	fa92 f2a2 	rbit	r2, r2
 800329a:	60fa      	str	r2, [r7, #12]
  return result;
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	fab2 f282 	clz	r2, r2
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	f002 021f 	and.w	r2, r2, #31
 80032ae:	2101      	movs	r1, #1
 80032b0:	fa01 f202 	lsl.w	r2, r1, r2
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0b9      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80032ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	496a      	ldr	r1, [pc, #424]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d105      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d4:	4b66      	ldr	r3, [pc, #408]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	4a65      	ldr	r2, [pc, #404]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ec:	4b60      	ldr	r3, [pc, #384]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	f023 0203 	bic.w	r2, r3, #3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	495d      	ldr	r1, [pc, #372]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800330a:	4b59      	ldr	r3, [pc, #356]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	4956      	ldr	r1, [pc, #344]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003318:	4313      	orrs	r3, r2
 800331a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003328:	4b51      	ldr	r3, [pc, #324]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	494e      	ldr	r1, [pc, #312]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003336:	4313      	orrs	r3, r2
 8003338:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003346:	4b4a      	ldr	r3, [pc, #296]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	f023 0210 	bic.w	r2, r3, #16
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	4947      	ldr	r1, [pc, #284]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003354:	4313      	orrs	r3, r2
 8003356:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003364:	4b42      	ldr	r3, [pc, #264]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003370:	493f      	ldr	r1, [pc, #252]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003372:	4313      	orrs	r3, r2
 8003374:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003382:	4b3b      	ldr	r3, [pc, #236]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003386:	f023 0220 	bic.w	r2, r3, #32
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	4938      	ldr	r1, [pc, #224]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003390:	4313      	orrs	r3, r2
 8003392:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033a0:	4b33      	ldr	r3, [pc, #204]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	4930      	ldr	r1, [pc, #192]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033be:	4b2c      	ldr	r3, [pc, #176]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	4929      	ldr	r1, [pc, #164]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033dc:	4b24      	ldr	r3, [pc, #144]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	4921      	ldr	r1, [pc, #132]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80033fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fe:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	491a      	ldr	r1, [pc, #104]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003408:	4313      	orrs	r3, r2
 800340a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003418:	4b15      	ldr	r3, [pc, #84]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800341a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003424:	4912      	ldr	r1, [pc, #72]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003426:	4313      	orrs	r3, r2
 8003428:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003436:	4b0e      	ldr	r3, [pc, #56]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003442:	490b      	ldr	r1, [pc, #44]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003444:	4313      	orrs	r3, r2
 8003446:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003454:	4b06      	ldr	r3, [pc, #24]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003458:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003460:	4903      	ldr	r1, [pc, #12]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003462:	4313      	orrs	r3, r2
 8003464:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3748      	adds	r7, #72	@ 0x48
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000

08003474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e09d      	b.n	80035c2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	2b00      	cmp	r3, #0
 800348c:	d108      	bne.n	80034a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003496:	d009      	beq.n	80034ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	61da      	str	r2, [r3, #28]
 800349e:	e005      	b.n	80034ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fd fdd4 	bl	8001074 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034ec:	d902      	bls.n	80034f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e002      	b.n	80034fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003502:	d007      	beq.n	8003514 <HAL_SPI_Init+0xa0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800350c:	d002      	beq.n	8003514 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003556:	ea42 0103 	orr.w	r1, r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	0c1b      	lsrs	r3, r3, #16
 8003570:	f003 0204 	and.w	r2, r3, #4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003590:	ea42 0103 	orr.w	r1, r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69da      	ldr	r2, [r3, #28]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e040      	b.n	800365e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d106      	bne.n	80035f2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7fd fd83 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2224      	movs	r2, #36	@ 0x24
 80035f6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fb3b 	bl	8003c8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f964 	bl	80038e4 <UART_SetConfig>
 800361c:	4603      	mov	r3, r0
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e01b      	b.n	800365e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003634:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003644:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fbba 	bl	8003dd0 <UART_CheckIdleState>
 800365c:	4603      	mov	r3, r0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b08a      	sub	sp, #40	@ 0x28
 800366a:	af02      	add	r7, sp, #8
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800367a:	2b20      	cmp	r3, #32
 800367c:	d177      	bne.n	800376e <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <HAL_UART_Transmit+0x24>
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e070      	b.n	8003770 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2221      	movs	r2, #33	@ 0x21
 800369a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800369c:	f7fd fe7a 	bl	8001394 <HAL_GetTick>
 80036a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	88fa      	ldrh	r2, [r7, #6]
 80036a6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	88fa      	ldrh	r2, [r7, #6]
 80036ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ba:	d108      	bne.n	80036ce <HAL_UART_Transmit+0x68>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d104      	bne.n	80036ce <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	e003      	b.n	80036d6 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036d6:	e02f      	b.n	8003738 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2200      	movs	r2, #0
 80036e0:	2180      	movs	r1, #128	@ 0x80
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fc1c 	bl	8003f20 <UART_WaitOnFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e03b      	b.n	8003770 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10b      	bne.n	8003716 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	881a      	ldrh	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800370a:	b292      	uxth	r2, r2
 800370c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	3302      	adds	r3, #2
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	e007      	b.n	8003726 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	3301      	adds	r3, #1
 8003724:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1c9      	bne.n	80036d8 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2200      	movs	r2, #0
 800374c:	2140      	movs	r1, #64	@ 0x40
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fbe6 	bl	8003f20 <UART_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d004      	beq.n	8003764 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e005      	b.n	8003770 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	e000      	b.n	8003770 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800376e:	2302      	movs	r3, #2
  }
}
 8003770:	4618      	mov	r0, r3
 8003772:	3720      	adds	r7, #32
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	@ 0x28
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	4613      	mov	r3, r2
 8003786:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800378e:	2b20      	cmp	r3, #32
 8003790:	f040 80a3 	bne.w	80038da <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_UART_Receive+0x28>
 800379a:	88fb      	ldrh	r3, [r7, #6]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e09b      	b.n	80038dc <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2222      	movs	r2, #34	@ 0x22
 80037b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ba:	f7fd fdeb 	bl	8001394 <HAL_GetTick>
 80037be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	88fa      	ldrh	r2, [r7, #6]
 80037c4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	88fa      	ldrh	r2, [r7, #6]
 80037cc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037d8:	d10e      	bne.n	80037f8 <HAL_UART_Receive+0x80>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d105      	bne.n	80037ee <HAL_UART_Receive+0x76>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80037e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80037ec:	e01a      	b.n	8003824 <HAL_UART_Receive+0xac>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	22ff      	movs	r2, #255	@ 0xff
 80037f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80037f6:	e015      	b.n	8003824 <HAL_UART_Receive+0xac>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10d      	bne.n	800381c <HAL_UART_Receive+0xa4>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d104      	bne.n	8003812 <HAL_UART_Receive+0x9a>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	22ff      	movs	r2, #255	@ 0xff
 800380c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003810:	e008      	b.n	8003824 <HAL_UART_Receive+0xac>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	227f      	movs	r2, #127	@ 0x7f
 8003816:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800381a:	e003      	b.n	8003824 <HAL_UART_Receive+0xac>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800382a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003834:	d108      	bne.n	8003848 <HAL_UART_Receive+0xd0>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	e003      	b.n	8003850 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003850:	e037      	b.n	80038c2 <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2200      	movs	r2, #0
 800385a:	2120      	movs	r1, #32
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fb5f 	bl	8003f20 <UART_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e033      	b.n	80038dc <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10c      	bne.n	8003894 <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003880:	b29a      	uxth	r2, r3
 8003882:	8a7b      	ldrh	r3, [r7, #18]
 8003884:	4013      	ands	r3, r2
 8003886:	b29a      	uxth	r2, r3
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	3302      	adds	r3, #2
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	e00d      	b.n	80038b0 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800389a:	b29b      	uxth	r3, r3
 800389c:	b2da      	uxtb	r2, r3
 800389e:	8a7b      	ldrh	r3, [r7, #18]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	4013      	ands	r3, r2
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3301      	adds	r3, #1
 80038ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1c1      	bne.n	8003852 <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e000      	b.n	80038dc <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 80038da:	2302      	movs	r3, #2
  }
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003912:	f023 030c 	bic.w	r3, r3, #12
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	6979      	ldr	r1, [r7, #20]
 800391c:	430b      	orrs	r3, r1
 800391e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	430a      	orrs	r2, r1
 8003958:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4aa7      	ldr	r2, [pc, #668]	@ (8003bfc <UART_SetConfig+0x318>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d120      	bne.n	80039a6 <UART_SetConfig+0xc2>
 8003964:	4ba6      	ldr	r3, [pc, #664]	@ (8003c00 <UART_SetConfig+0x31c>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b03      	cmp	r3, #3
 800396e:	d817      	bhi.n	80039a0 <UART_SetConfig+0xbc>
 8003970:	a201      	add	r2, pc, #4	@ (adr r2, 8003978 <UART_SetConfig+0x94>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	08003989 	.word	0x08003989
 800397c:	08003995 	.word	0x08003995
 8003980:	0800399b 	.word	0x0800399b
 8003984:	0800398f 	.word	0x0800398f
 8003988:	2301      	movs	r3, #1
 800398a:	77fb      	strb	r3, [r7, #31]
 800398c:	e0b5      	b.n	8003afa <UART_SetConfig+0x216>
 800398e:	2302      	movs	r3, #2
 8003990:	77fb      	strb	r3, [r7, #31]
 8003992:	e0b2      	b.n	8003afa <UART_SetConfig+0x216>
 8003994:	2304      	movs	r3, #4
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e0af      	b.n	8003afa <UART_SetConfig+0x216>
 800399a:	2308      	movs	r3, #8
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e0ac      	b.n	8003afa <UART_SetConfig+0x216>
 80039a0:	2310      	movs	r3, #16
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e0a9      	b.n	8003afa <UART_SetConfig+0x216>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a96      	ldr	r2, [pc, #600]	@ (8003c04 <UART_SetConfig+0x320>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d124      	bne.n	80039fa <UART_SetConfig+0x116>
 80039b0:	4b93      	ldr	r3, [pc, #588]	@ (8003c00 <UART_SetConfig+0x31c>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039bc:	d011      	beq.n	80039e2 <UART_SetConfig+0xfe>
 80039be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039c2:	d817      	bhi.n	80039f4 <UART_SetConfig+0x110>
 80039c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039c8:	d011      	beq.n	80039ee <UART_SetConfig+0x10a>
 80039ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039ce:	d811      	bhi.n	80039f4 <UART_SetConfig+0x110>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <UART_SetConfig+0xf8>
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d8:	d006      	beq.n	80039e8 <UART_SetConfig+0x104>
 80039da:	e00b      	b.n	80039f4 <UART_SetConfig+0x110>
 80039dc:	2300      	movs	r3, #0
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	e08b      	b.n	8003afa <UART_SetConfig+0x216>
 80039e2:	2302      	movs	r3, #2
 80039e4:	77fb      	strb	r3, [r7, #31]
 80039e6:	e088      	b.n	8003afa <UART_SetConfig+0x216>
 80039e8:	2304      	movs	r3, #4
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e085      	b.n	8003afa <UART_SetConfig+0x216>
 80039ee:	2308      	movs	r3, #8
 80039f0:	77fb      	strb	r3, [r7, #31]
 80039f2:	e082      	b.n	8003afa <UART_SetConfig+0x216>
 80039f4:	2310      	movs	r3, #16
 80039f6:	77fb      	strb	r3, [r7, #31]
 80039f8:	e07f      	b.n	8003afa <UART_SetConfig+0x216>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a82      	ldr	r2, [pc, #520]	@ (8003c08 <UART_SetConfig+0x324>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d124      	bne.n	8003a4e <UART_SetConfig+0x16a>
 8003a04:	4b7e      	ldr	r3, [pc, #504]	@ (8003c00 <UART_SetConfig+0x31c>)
 8003a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a08:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003a0c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a10:	d011      	beq.n	8003a36 <UART_SetConfig+0x152>
 8003a12:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a16:	d817      	bhi.n	8003a48 <UART_SetConfig+0x164>
 8003a18:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a1c:	d011      	beq.n	8003a42 <UART_SetConfig+0x15e>
 8003a1e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a22:	d811      	bhi.n	8003a48 <UART_SetConfig+0x164>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <UART_SetConfig+0x14c>
 8003a28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a2c:	d006      	beq.n	8003a3c <UART_SetConfig+0x158>
 8003a2e:	e00b      	b.n	8003a48 <UART_SetConfig+0x164>
 8003a30:	2300      	movs	r3, #0
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e061      	b.n	8003afa <UART_SetConfig+0x216>
 8003a36:	2302      	movs	r3, #2
 8003a38:	77fb      	strb	r3, [r7, #31]
 8003a3a:	e05e      	b.n	8003afa <UART_SetConfig+0x216>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	e05b      	b.n	8003afa <UART_SetConfig+0x216>
 8003a42:	2308      	movs	r3, #8
 8003a44:	77fb      	strb	r3, [r7, #31]
 8003a46:	e058      	b.n	8003afa <UART_SetConfig+0x216>
 8003a48:	2310      	movs	r3, #16
 8003a4a:	77fb      	strb	r3, [r7, #31]
 8003a4c:	e055      	b.n	8003afa <UART_SetConfig+0x216>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a6e      	ldr	r2, [pc, #440]	@ (8003c0c <UART_SetConfig+0x328>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d124      	bne.n	8003aa2 <UART_SetConfig+0x1be>
 8003a58:	4b69      	ldr	r3, [pc, #420]	@ (8003c00 <UART_SetConfig+0x31c>)
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003a60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a64:	d011      	beq.n	8003a8a <UART_SetConfig+0x1a6>
 8003a66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a6a:	d817      	bhi.n	8003a9c <UART_SetConfig+0x1b8>
 8003a6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a70:	d011      	beq.n	8003a96 <UART_SetConfig+0x1b2>
 8003a72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a76:	d811      	bhi.n	8003a9c <UART_SetConfig+0x1b8>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <UART_SetConfig+0x1a0>
 8003a7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a80:	d006      	beq.n	8003a90 <UART_SetConfig+0x1ac>
 8003a82:	e00b      	b.n	8003a9c <UART_SetConfig+0x1b8>
 8003a84:	2300      	movs	r3, #0
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e037      	b.n	8003afa <UART_SetConfig+0x216>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	77fb      	strb	r3, [r7, #31]
 8003a8e:	e034      	b.n	8003afa <UART_SetConfig+0x216>
 8003a90:	2304      	movs	r3, #4
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	e031      	b.n	8003afa <UART_SetConfig+0x216>
 8003a96:	2308      	movs	r3, #8
 8003a98:	77fb      	strb	r3, [r7, #31]
 8003a9a:	e02e      	b.n	8003afa <UART_SetConfig+0x216>
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	77fb      	strb	r3, [r7, #31]
 8003aa0:	e02b      	b.n	8003afa <UART_SetConfig+0x216>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a5a      	ldr	r2, [pc, #360]	@ (8003c10 <UART_SetConfig+0x32c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d124      	bne.n	8003af6 <UART_SetConfig+0x212>
 8003aac:	4b54      	ldr	r3, [pc, #336]	@ (8003c00 <UART_SetConfig+0x31c>)
 8003aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003ab4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ab8:	d011      	beq.n	8003ade <UART_SetConfig+0x1fa>
 8003aba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003abe:	d817      	bhi.n	8003af0 <UART_SetConfig+0x20c>
 8003ac0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ac4:	d011      	beq.n	8003aea <UART_SetConfig+0x206>
 8003ac6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003aca:	d811      	bhi.n	8003af0 <UART_SetConfig+0x20c>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <UART_SetConfig+0x1f4>
 8003ad0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ad4:	d006      	beq.n	8003ae4 <UART_SetConfig+0x200>
 8003ad6:	e00b      	b.n	8003af0 <UART_SetConfig+0x20c>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	77fb      	strb	r3, [r7, #31]
 8003adc:	e00d      	b.n	8003afa <UART_SetConfig+0x216>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	77fb      	strb	r3, [r7, #31]
 8003ae2:	e00a      	b.n	8003afa <UART_SetConfig+0x216>
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e007      	b.n	8003afa <UART_SetConfig+0x216>
 8003aea:	2308      	movs	r3, #8
 8003aec:	77fb      	strb	r3, [r7, #31]
 8003aee:	e004      	b.n	8003afa <UART_SetConfig+0x216>
 8003af0:	2310      	movs	r3, #16
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e001      	b.n	8003afa <UART_SetConfig+0x216>
 8003af6:	2310      	movs	r3, #16
 8003af8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b02:	d15b      	bne.n	8003bbc <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003b04:	7ffb      	ldrb	r3, [r7, #31]
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d827      	bhi.n	8003b5a <UART_SetConfig+0x276>
 8003b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b10 <UART_SetConfig+0x22c>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003b35 	.word	0x08003b35
 8003b14:	08003b3d 	.word	0x08003b3d
 8003b18:	08003b45 	.word	0x08003b45
 8003b1c:	08003b5b 	.word	0x08003b5b
 8003b20:	08003b4b 	.word	0x08003b4b
 8003b24:	08003b5b 	.word	0x08003b5b
 8003b28:	08003b5b 	.word	0x08003b5b
 8003b2c:	08003b5b 	.word	0x08003b5b
 8003b30:	08003b53 	.word	0x08003b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b34:	f7ff faac 	bl	8003090 <HAL_RCC_GetPCLK1Freq>
 8003b38:	61b8      	str	r0, [r7, #24]
        break;
 8003b3a:	e013      	b.n	8003b64 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b3c:	f7ff faca 	bl	80030d4 <HAL_RCC_GetPCLK2Freq>
 8003b40:	61b8      	str	r0, [r7, #24]
        break;
 8003b42:	e00f      	b.n	8003b64 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b44:	4b33      	ldr	r3, [pc, #204]	@ (8003c14 <UART_SetConfig+0x330>)
 8003b46:	61bb      	str	r3, [r7, #24]
        break;
 8003b48:	e00c      	b.n	8003b64 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b4a:	f7ff fa41 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8003b4e:	61b8      	str	r0, [r7, #24]
        break;
 8003b50:	e008      	b.n	8003b64 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b56:	61bb      	str	r3, [r7, #24]
        break;
 8003b58:	e004      	b.n	8003b64 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	77bb      	strb	r3, [r7, #30]
        break;
 8003b62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 8082 	beq.w	8003c70 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	005a      	lsls	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	441a      	add	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b0f      	cmp	r3, #15
 8003b86:	d916      	bls.n	8003bb6 <UART_SetConfig+0x2d2>
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b8e:	d212      	bcs.n	8003bb6 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f023 030f 	bic.w	r3, r3, #15
 8003b98:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	89fb      	ldrh	r3, [r7, #14]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	89fa      	ldrh	r2, [r7, #14]
 8003bb2:	60da      	str	r2, [r3, #12]
 8003bb4:	e05c      	b.n	8003c70 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	77bb      	strb	r3, [r7, #30]
 8003bba:	e059      	b.n	8003c70 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bbc:	7ffb      	ldrb	r3, [r7, #31]
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d835      	bhi.n	8003c2e <UART_SetConfig+0x34a>
 8003bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc8 <UART_SetConfig+0x2e4>)
 8003bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc8:	08003bed 	.word	0x08003bed
 8003bcc:	08003bf5 	.word	0x08003bf5
 8003bd0:	08003c19 	.word	0x08003c19
 8003bd4:	08003c2f 	.word	0x08003c2f
 8003bd8:	08003c1f 	.word	0x08003c1f
 8003bdc:	08003c2f 	.word	0x08003c2f
 8003be0:	08003c2f 	.word	0x08003c2f
 8003be4:	08003c2f 	.word	0x08003c2f
 8003be8:	08003c27 	.word	0x08003c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bec:	f7ff fa50 	bl	8003090 <HAL_RCC_GetPCLK1Freq>
 8003bf0:	61b8      	str	r0, [r7, #24]
        break;
 8003bf2:	e021      	b.n	8003c38 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bf4:	f7ff fa6e 	bl	80030d4 <HAL_RCC_GetPCLK2Freq>
 8003bf8:	61b8      	str	r0, [r7, #24]
        break;
 8003bfa:	e01d      	b.n	8003c38 <UART_SetConfig+0x354>
 8003bfc:	40013800 	.word	0x40013800
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40004400 	.word	0x40004400
 8003c08:	40004800 	.word	0x40004800
 8003c0c:	40004c00 	.word	0x40004c00
 8003c10:	40005000 	.word	0x40005000
 8003c14:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c18:	4b1b      	ldr	r3, [pc, #108]	@ (8003c88 <UART_SetConfig+0x3a4>)
 8003c1a:	61bb      	str	r3, [r7, #24]
        break;
 8003c1c:	e00c      	b.n	8003c38 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1e:	f7ff f9d7 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8003c22:	61b8      	str	r0, [r7, #24]
        break;
 8003c24:	e008      	b.n	8003c38 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c2a:	61bb      	str	r3, [r7, #24]
        break;
 8003c2c:	e004      	b.n	8003c38 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	77bb      	strb	r3, [r7, #30]
        break;
 8003c36:	bf00      	nop
    }

    if (pclk != 0U)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d018      	beq.n	8003c70 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	085a      	lsrs	r2, r3, #1
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	441a      	add	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b0f      	cmp	r3, #15
 8003c56:	d909      	bls.n	8003c6c <UART_SetConfig+0x388>
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c5e:	d205      	bcs.n	8003c6c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	e001      	b.n	8003c70 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3720      	adds	r7, #32
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	007a1200 	.word	0x007a1200

08003c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01a      	beq.n	8003da2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d8a:	d10a      	bne.n	8003da2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	605a      	str	r2, [r3, #4]
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b098      	sub	sp, #96	@ 0x60
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003de0:	f7fd fad8 	bl	8001394 <HAL_GetTick>
 8003de4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d12e      	bne.n	8003e52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003df4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f88c 	bl	8003f20 <UART_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d021      	beq.n	8003e52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e22:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e2e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e6      	bne.n	8003e0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e062      	b.n	8003f18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d149      	bne.n	8003ef4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f856 	bl	8003f20 <UART_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d03c      	beq.n	8003ef4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	623b      	str	r3, [r7, #32]
   return(result);
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e98:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e6      	bne.n	8003e7a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	e853 3f00 	ldrex	r3, [r3]
 8003eba:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3308      	adds	r3, #8
 8003eca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ecc:	61fa      	str	r2, [r7, #28]
 8003ece:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	69b9      	ldr	r1, [r7, #24]
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	e841 2300 	strex	r3, r2, [r1]
 8003ed8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e5      	bne.n	8003eac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e011      	b.n	8003f18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3758      	adds	r7, #88	@ 0x58
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f30:	e04f      	b.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f38:	d04b      	beq.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3a:	f7fd fa2b 	bl	8001394 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d302      	bcc.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e04e      	b.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d037      	beq.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b80      	cmp	r3, #128	@ 0x80
 8003f66:	d034      	beq.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b40      	cmp	r3, #64	@ 0x40
 8003f6c:	d031      	beq.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d110      	bne.n	8003f9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2208      	movs	r2, #8
 8003f82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f838 	bl	8003ffa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e029      	b.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fac:	d111      	bne.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f81e 	bl	8003ffa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e00f      	b.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	bf0c      	ite	eq
 8003fe2:	2301      	moveq	r3, #1
 8003fe4:	2300      	movne	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d0a0      	beq.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b095      	sub	sp, #84	@ 0x54
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004012:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004020:	643b      	str	r3, [r7, #64]	@ 0x40
 8004022:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004026:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800402e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e6      	bne.n	8004002 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3308      	adds	r3, #8
 800403a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	61fb      	str	r3, [r7, #28]
   return(result);
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3308      	adds	r3, #8
 8004052:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004054:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004056:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800405a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e5      	bne.n	8004034 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800406c:	2b01      	cmp	r3, #1
 800406e:	d118      	bne.n	80040a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	60bb      	str	r3, [r7, #8]
   return(result);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f023 0310 	bic.w	r3, r3, #16
 8004084:	647b      	str	r3, [r7, #68]	@ 0x44
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800408e:	61bb      	str	r3, [r7, #24]
 8004090:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	6979      	ldr	r1, [r7, #20]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	613b      	str	r3, [r7, #16]
   return(result);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e6      	bne.n	8004070 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80040b6:	bf00      	nop
 80040b8:	3754      	adds	r7, #84	@ 0x54
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b085      	sub	sp, #20
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040ca:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80040ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	b29b      	uxth	r3, r3
 80040e0:	4013      	ands	r3, r2
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	1d3b      	adds	r3, r7, #4
 8004102:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <arm_fft>:
 8004134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004138:	ed2d 8b02 	vpush	{d8}
 800413c:	2a01      	cmp	r2, #1
 800413e:	b087      	sub	sp, #28
 8004140:	460d      	mov	r5, r1
 8004142:	af00      	add	r7, sp, #0
 8004144:	d079      	beq.n	800423a <arm_fft+0x106>
 8004146:	4693      	mov	fp, r2
 8004148:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800414c:	ea4f 0a62 	mov.w	sl, r2, asr #1
 8004150:	dd7c      	ble.n	800424c <arm_fft+0x118>
 8004152:	f8df e128 	ldr.w	lr, [pc, #296]	@ 800427c <arm_fft+0x148>
 8004156:	4a48      	ldr	r2, [pc, #288]	@ (8004278 <arm_fft+0x144>)
 8004158:	4603      	mov	r3, r0
 800415a:	2400      	movs	r4, #0
 800415c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004160:	eb0e 06c4 	add.w	r6, lr, r4, lsl #3
 8004164:	e886 0003 	stmia.w	r6, {r0, r1}
 8004168:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800416c:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
 8004170:	3401      	adds	r4, #1
 8004172:	4554      	cmp	r4, sl
 8004174:	e886 0003 	stmia.w	r6, {r0, r1}
 8004178:	f103 0310 	add.w	r3, r3, #16
 800417c:	dbee      	blt.n	800415c <arm_fft+0x28>
 800417e:	466b      	mov	r3, sp
 8004180:	ee08 3a10 	vmov	s16, r3
 8004184:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8004188:	469d      	mov	sp, r3
 800418a:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 800418e:	46e8      	mov	r8, sp
 8004190:	469d      	mov	sp, r3
 8004192:	483a      	ldr	r0, [pc, #232]	@ (800427c <arm_fft+0x148>)
 8004194:	4641      	mov	r1, r8
 8004196:	4652      	mov	r2, sl
 8004198:	466e      	mov	r6, sp
 800419a:	f7ff ffcb 	bl	8004134 <arm_fft>
 800419e:	4836      	ldr	r0, [pc, #216]	@ (8004278 <arm_fft+0x144>)
 80041a0:	4652      	mov	r2, sl
 80041a2:	4631      	mov	r1, r6
 80041a4:	f7ff ffc6 	bl	8004134 <arm_fft>
 80041a8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	f04f 0900 	mov.w	r9, #0
 80041b2:	4648      	mov	r0, r9
 80041b4:	4659      	mov	r1, fp
 80041b6:	f000 f8e5 	bl	8004384 <esponenziale_negj>
 80041ba:	eb06 03c9 	add.w	r3, r6, r9, lsl #3
 80041be:	ed93 1a00 	vldr	s2, [r3]
 80041c2:	edd3 1a01 	vldr	s3, [r3, #4]
 80041c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80041ca:	edc7 0a03 	vstr	s1, [r7, #12]
 80041ce:	f000 f8cb 	bl	8004368 <prodotto_c>
 80041d2:	ea4f 04c9 	mov.w	r4, r9, lsl #3
 80041d6:	4444      	add	r4, r8
 80041d8:	eeb0 1a40 	vmov.f32	s2, s0
 80041dc:	eef0 1a60 	vmov.f32	s3, s1
 80041e0:	ed94 0a00 	vldr	s0, [r4]
 80041e4:	edd4 0a01 	vldr	s1, [r4, #4]
 80041e8:	edc7 1a05 	vstr	s3, [r7, #20]
 80041ec:	ed87 1a04 	vstr	s2, [r7, #16]
 80041f0:	f000 f8aa 	bl	8004348 <somma_c>
 80041f4:	ed97 1a04 	vldr	s2, [r7, #16]
 80041f8:	ed85 0a00 	vstr	s0, [r5]
 80041fc:	edc5 0a01 	vstr	s1, [r5, #4]
 8004200:	ed94 0a00 	vldr	s0, [r4]
 8004204:	edd4 0a01 	vldr	s1, [r4, #4]
 8004208:	edd7 1a05 	vldr	s3, [r7, #20]
 800420c:	f000 f8a4 	bl	8004358 <sottrazione_c>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f109 0901 	add.w	r9, r9, #1
 8004216:	442b      	add	r3, r5
 8004218:	45d1      	cmp	r9, sl
 800421a:	ed83 0a00 	vstr	s0, [r3]
 800421e:	f105 0508 	add.w	r5, r5, #8
 8004222:	edc3 0a01 	vstr	s1, [r3, #4]
 8004226:	dbc4      	blt.n	80041b2 <arm_fft+0x7e>
 8004228:	ee18 3a10 	vmov	r3, s16
 800422c:	371c      	adds	r7, #28
 800422e:	469d      	mov	sp, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	ecbd 8b02 	vpop	{d8}
 8004236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800423a:	c803      	ldmia	r0, {r0, r1}
 800423c:	371c      	adds	r7, #28
 800423e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004242:	46bd      	mov	sp, r7
 8004244:	ecbd 8b02 	vpop	{d8}
 8004248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424c:	466b      	mov	r3, sp
 800424e:	ee08 3a10 	vmov	s16, r3
 8004252:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8004256:	469d      	mov	sp, r3
 8004258:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 800425c:	4669      	mov	r1, sp
 800425e:	469d      	mov	sp, r3
 8004260:	4652      	mov	r2, sl
 8004262:	4806      	ldr	r0, [pc, #24]	@ (800427c <arm_fft+0x148>)
 8004264:	466c      	mov	r4, sp
 8004266:	f7ff ff65 	bl	8004134 <arm_fft>
 800426a:	4803      	ldr	r0, [pc, #12]	@ (8004278 <arm_fft+0x144>)
 800426c:	4652      	mov	r2, sl
 800426e:	4621      	mov	r1, r4
 8004270:	f7ff ff60 	bl	8004134 <arm_fft>
 8004274:	e7d8      	b.n	8004228 <arm_fft+0xf4>
 8004276:	bf00      	nop
 8004278:	20000490 	.word	0x20000490
 800427c:	20002490 	.word	0x20002490

08004280 <fft_to_spectrogram>:
 8004280:	2a00      	cmp	r2, #0
 8004282:	dd50      	ble.n	8004326 <fft_to_spectrogram+0xa6>
 8004284:	b570      	push	{r4, r5, r6, lr}
 8004286:	ed2d 8b04 	vpush	{d8-d9}
 800428a:	eddf 8a2d 	vldr	s17, [pc, #180]	@ 8004340 <fft_to_spectrogram+0xc0>
 800428e:	b084      	sub	sp, #16
 8004290:	eeb0 8a40 	vmov.f32	s16, s0
 8004294:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8004298:	460c      	mov	r4, r1
 800429a:	460d      	mov	r5, r1
 800429c:	edd0 7a01 	vldr	s15, [r0, #4]
 80042a0:	ed90 7a00 	vldr	s14, [r0]
 80042a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80042a8:	3008      	adds	r0, #8
 80042aa:	eee7 7a07 	vfma.f32	s15, s14, s14
 80042ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80042b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b6:	eeb1 9ae7 	vsqrt.f32	s18, s15
 80042ba:	d435      	bmi.n	8004328 <fft_to_spectrogram+0xa8>
 80042bc:	eeb4 9a68 	vcmp.f32	s18, s17
 80042c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c4:	bfc8      	it	gt
 80042c6:	eef0 8a49 	vmovgt.f32	s17, s18
 80042ca:	42b0      	cmp	r0, r6
 80042cc:	eca5 9a01 	vstmia	r5!, {s18}
 80042d0:	d1e4      	bne.n	800429c <fft_to_spectrogram+0x1c>
 80042d2:	ed9f 9a1c 	vldr	s18, [pc, #112]	@ 8004344 <fft_to_spectrogram+0xc4>
 80042d6:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 80042da:	eef3 9a04 	vmov.f32	s19, #52	@ 0x41a00000  20.0
 80042de:	ed94 0a00 	vldr	s0, [r4]
 80042e2:	eeb4 0a49 	vcmp.f32	s0, s18
 80042e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ea:	bf48      	it	mi
 80042ec:	eeb0 0a49 	vmovmi.f32	s0, s18
 80042f0:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80042f4:	f000 f8a0 	bl	8004438 <log10f>
 80042f8:	ee20 0a29 	vmul.f32	s0, s0, s19
 80042fc:	eeb4 0a48 	vcmp.f32	s0, s16
 8004300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004304:	bf48      	it	mi
 8004306:	eeb0 0a48 	vmovmi.f32	s0, s16
 800430a:	ee70 7a48 	vsub.f32	s15, s0, s16
 800430e:	eef1 7a67 	vneg.f32	s15, s15
 8004312:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8004316:	eca4 7a01 	vstmia	r4!, {s14}
 800431a:	42a5      	cmp	r5, r4
 800431c:	d1df      	bne.n	80042de <fft_to_spectrogram+0x5e>
 800431e:	b004      	add	sp, #16
 8004320:	ecbd 8b04 	vpop	{d8-d9}
 8004324:	bd70      	pop	{r4, r5, r6, pc}
 8004326:	4770      	bx	lr
 8004328:	eeb0 0a67 	vmov.f32	s0, s15
 800432c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004330:	9001      	str	r0, [sp, #4]
 8004332:	f000 f8af 	bl	8004494 <sqrtf>
 8004336:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800433a:	9801      	ldr	r0, [sp, #4]
 800433c:	e7be      	b.n	80042bc <fft_to_spectrogram+0x3c>
 800433e:	bf00      	nop
 8004340:	00000000 	.word	0x00000000
 8004344:	2b8cbccc 	.word	0x2b8cbccc

08004348 <somma_c>:
 8004348:	ee30 0a01 	vadd.f32	s0, s0, s2
 800434c:	ee70 0aa1 	vadd.f32	s1, s1, s3
 8004350:	b088      	sub	sp, #32
 8004352:	b008      	add	sp, #32
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop

08004358 <sottrazione_c>:
 8004358:	ee30 0a41 	vsub.f32	s0, s0, s2
 800435c:	ee70 0ae1 	vsub.f32	s1, s1, s3
 8004360:	b088      	sub	sp, #32
 8004362:	b008      	add	sp, #32
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop

08004368 <prodotto_c>:
 8004368:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 800436c:	ee60 0a81 	vmul.f32	s1, s1, s2
 8004370:	eee0 7a01 	vfma.f32	s15, s0, s2
 8004374:	b088      	sub	sp, #32
 8004376:	eee0 0a21 	vfma.f32	s1, s0, s3
 800437a:	eeb0 0a67 	vmov.f32	s0, s15
 800437e:	b008      	add	sp, #32
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop

08004384 <esponenziale_negj>:
 8004384:	ee07 0a90 	vmov	s15, r0
 8004388:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80043d0 <esponenziale_negj+0x4c>
 800438c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004390:	b500      	push	{lr}
 8004392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004396:	ee07 1a10 	vmov	s14, r1
 800439a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800439e:	ed2d 8b02 	vpush	{d8}
 80043a2:	eec7 8a87 	vdiv.f32	s17, s15, s14
 80043a6:	b085      	sub	sp, #20
 80043a8:	eeb0 0a68 	vmov.f32	s0, s17
 80043ac:	f000 f890 	bl	80044d0 <cosf>
 80043b0:	eeb0 8a40 	vmov.f32	s16, s0
 80043b4:	eeb0 0a68 	vmov.f32	s0, s17
 80043b8:	f000 f8ce 	bl	8004558 <sinf>
 80043bc:	eef0 0a40 	vmov.f32	s1, s0
 80043c0:	eeb0 0a48 	vmov.f32	s0, s16
 80043c4:	b005      	add	sp, #20
 80043c6:	ecbd 8b02 	vpop	{d8}
 80043ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80043ce:	bf00      	nop
 80043d0:	c0c90fdb 	.word	0xc0c90fdb

080043d4 <memset>:
 80043d4:	4402      	add	r2, r0
 80043d6:	4603      	mov	r3, r0
 80043d8:	4293      	cmp	r3, r2
 80043da:	d100      	bne.n	80043de <memset+0xa>
 80043dc:	4770      	bx	lr
 80043de:	f803 1b01 	strb.w	r1, [r3], #1
 80043e2:	e7f9      	b.n	80043d8 <memset+0x4>

080043e4 <__errno>:
 80043e4:	4b01      	ldr	r3, [pc, #4]	@ (80043ec <__errno+0x8>)
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	2000000c 	.word	0x2000000c

080043f0 <__libc_init_array>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	4d0d      	ldr	r5, [pc, #52]	@ (8004428 <__libc_init_array+0x38>)
 80043f4:	4c0d      	ldr	r4, [pc, #52]	@ (800442c <__libc_init_array+0x3c>)
 80043f6:	1b64      	subs	r4, r4, r5
 80043f8:	10a4      	asrs	r4, r4, #2
 80043fa:	2600      	movs	r6, #0
 80043fc:	42a6      	cmp	r6, r4
 80043fe:	d109      	bne.n	8004414 <__libc_init_array+0x24>
 8004400:	4d0b      	ldr	r5, [pc, #44]	@ (8004430 <__libc_init_array+0x40>)
 8004402:	4c0c      	ldr	r4, [pc, #48]	@ (8004434 <__libc_init_array+0x44>)
 8004404:	f000 ff2c 	bl	8005260 <_init>
 8004408:	1b64      	subs	r4, r4, r5
 800440a:	10a4      	asrs	r4, r4, #2
 800440c:	2600      	movs	r6, #0
 800440e:	42a6      	cmp	r6, r4
 8004410:	d105      	bne.n	800441e <__libc_init_array+0x2e>
 8004412:	bd70      	pop	{r4, r5, r6, pc}
 8004414:	f855 3b04 	ldr.w	r3, [r5], #4
 8004418:	4798      	blx	r3
 800441a:	3601      	adds	r6, #1
 800441c:	e7ee      	b.n	80043fc <__libc_init_array+0xc>
 800441e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004422:	4798      	blx	r3
 8004424:	3601      	adds	r6, #1
 8004426:	e7f2      	b.n	800440e <__libc_init_array+0x1e>
 8004428:	08005684 	.word	0x08005684
 800442c:	08005684 	.word	0x08005684
 8004430:	08005684 	.word	0x08005684
 8004434:	08005688 	.word	0x08005688

08004438 <log10f>:
 8004438:	b508      	push	{r3, lr}
 800443a:	ed2d 8b02 	vpush	{d8}
 800443e:	eeb0 8a40 	vmov.f32	s16, s0
 8004442:	f000 f979 	bl	8004738 <__ieee754_log10f>
 8004446:	eeb4 8a48 	vcmp.f32	s16, s16
 800444a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444e:	d60f      	bvs.n	8004470 <log10f+0x38>
 8004450:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004458:	d80a      	bhi.n	8004470 <log10f+0x38>
 800445a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800445e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004462:	d108      	bne.n	8004476 <log10f+0x3e>
 8004464:	f7ff ffbe 	bl	80043e4 <__errno>
 8004468:	2322      	movs	r3, #34	@ 0x22
 800446a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800448c <log10f+0x54>
 800446e:	6003      	str	r3, [r0, #0]
 8004470:	ecbd 8b02 	vpop	{d8}
 8004474:	bd08      	pop	{r3, pc}
 8004476:	f7ff ffb5 	bl	80043e4 <__errno>
 800447a:	ecbd 8b02 	vpop	{d8}
 800447e:	2321      	movs	r3, #33	@ 0x21
 8004480:	6003      	str	r3, [r0, #0]
 8004482:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004486:	4802      	ldr	r0, [pc, #8]	@ (8004490 <log10f+0x58>)
 8004488:	f000 b8ac 	b.w	80045e4 <nanf>
 800448c:	ff800000 	.word	0xff800000
 8004490:	080052b0 	.word	0x080052b0

08004494 <sqrtf>:
 8004494:	b508      	push	{r3, lr}
 8004496:	ed2d 8b02 	vpush	{d8}
 800449a:	eeb0 8a40 	vmov.f32	s16, s0
 800449e:	f000 f8a7 	bl	80045f0 <__ieee754_sqrtf>
 80044a2:	eeb4 8a48 	vcmp.f32	s16, s16
 80044a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044aa:	d60c      	bvs.n	80044c6 <sqrtf+0x32>
 80044ac:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80044cc <sqrtf+0x38>
 80044b0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80044b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b8:	d505      	bpl.n	80044c6 <sqrtf+0x32>
 80044ba:	f7ff ff93 	bl	80043e4 <__errno>
 80044be:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80044c2:	2321      	movs	r3, #33	@ 0x21
 80044c4:	6003      	str	r3, [r0, #0]
 80044c6:	ecbd 8b02 	vpop	{d8}
 80044ca:	bd08      	pop	{r3, pc}
 80044cc:	00000000 	.word	0x00000000

080044d0 <cosf>:
 80044d0:	ee10 3a10 	vmov	r3, s0
 80044d4:	b507      	push	{r0, r1, r2, lr}
 80044d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004550 <cosf+0x80>)
 80044d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044dc:	4293      	cmp	r3, r2
 80044de:	d806      	bhi.n	80044ee <cosf+0x1e>
 80044e0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8004554 <cosf+0x84>
 80044e4:	b003      	add	sp, #12
 80044e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80044ea:	f000 b885 	b.w	80045f8 <__kernel_cosf>
 80044ee:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80044f2:	d304      	bcc.n	80044fe <cosf+0x2e>
 80044f4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80044f8:	b003      	add	sp, #12
 80044fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80044fe:	4668      	mov	r0, sp
 8004500:	f000 f972 	bl	80047e8 <__ieee754_rem_pio2f>
 8004504:	f000 0003 	and.w	r0, r0, #3
 8004508:	2801      	cmp	r0, #1
 800450a:	d009      	beq.n	8004520 <cosf+0x50>
 800450c:	2802      	cmp	r0, #2
 800450e:	d010      	beq.n	8004532 <cosf+0x62>
 8004510:	b9b0      	cbnz	r0, 8004540 <cosf+0x70>
 8004512:	eddd 0a01 	vldr	s1, [sp, #4]
 8004516:	ed9d 0a00 	vldr	s0, [sp]
 800451a:	f000 f86d 	bl	80045f8 <__kernel_cosf>
 800451e:	e7eb      	b.n	80044f8 <cosf+0x28>
 8004520:	eddd 0a01 	vldr	s1, [sp, #4]
 8004524:	ed9d 0a00 	vldr	s0, [sp]
 8004528:	f000 f8be 	bl	80046a8 <__kernel_sinf>
 800452c:	eeb1 0a40 	vneg.f32	s0, s0
 8004530:	e7e2      	b.n	80044f8 <cosf+0x28>
 8004532:	eddd 0a01 	vldr	s1, [sp, #4]
 8004536:	ed9d 0a00 	vldr	s0, [sp]
 800453a:	f000 f85d 	bl	80045f8 <__kernel_cosf>
 800453e:	e7f5      	b.n	800452c <cosf+0x5c>
 8004540:	eddd 0a01 	vldr	s1, [sp, #4]
 8004544:	ed9d 0a00 	vldr	s0, [sp]
 8004548:	2001      	movs	r0, #1
 800454a:	f000 f8ad 	bl	80046a8 <__kernel_sinf>
 800454e:	e7d3      	b.n	80044f8 <cosf+0x28>
 8004550:	3f490fd8 	.word	0x3f490fd8
 8004554:	00000000 	.word	0x00000000

08004558 <sinf>:
 8004558:	ee10 3a10 	vmov	r3, s0
 800455c:	b507      	push	{r0, r1, r2, lr}
 800455e:	4a1f      	ldr	r2, [pc, #124]	@ (80045dc <sinf+0x84>)
 8004560:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004564:	4293      	cmp	r3, r2
 8004566:	d807      	bhi.n	8004578 <sinf+0x20>
 8004568:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80045e0 <sinf+0x88>
 800456c:	2000      	movs	r0, #0
 800456e:	b003      	add	sp, #12
 8004570:	f85d eb04 	ldr.w	lr, [sp], #4
 8004574:	f000 b898 	b.w	80046a8 <__kernel_sinf>
 8004578:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800457c:	d304      	bcc.n	8004588 <sinf+0x30>
 800457e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004582:	b003      	add	sp, #12
 8004584:	f85d fb04 	ldr.w	pc, [sp], #4
 8004588:	4668      	mov	r0, sp
 800458a:	f000 f92d 	bl	80047e8 <__ieee754_rem_pio2f>
 800458e:	f000 0003 	and.w	r0, r0, #3
 8004592:	2801      	cmp	r0, #1
 8004594:	d00a      	beq.n	80045ac <sinf+0x54>
 8004596:	2802      	cmp	r0, #2
 8004598:	d00f      	beq.n	80045ba <sinf+0x62>
 800459a:	b9c0      	cbnz	r0, 80045ce <sinf+0x76>
 800459c:	eddd 0a01 	vldr	s1, [sp, #4]
 80045a0:	ed9d 0a00 	vldr	s0, [sp]
 80045a4:	2001      	movs	r0, #1
 80045a6:	f000 f87f 	bl	80046a8 <__kernel_sinf>
 80045aa:	e7ea      	b.n	8004582 <sinf+0x2a>
 80045ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80045b0:	ed9d 0a00 	vldr	s0, [sp]
 80045b4:	f000 f820 	bl	80045f8 <__kernel_cosf>
 80045b8:	e7e3      	b.n	8004582 <sinf+0x2a>
 80045ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80045be:	ed9d 0a00 	vldr	s0, [sp]
 80045c2:	2001      	movs	r0, #1
 80045c4:	f000 f870 	bl	80046a8 <__kernel_sinf>
 80045c8:	eeb1 0a40 	vneg.f32	s0, s0
 80045cc:	e7d9      	b.n	8004582 <sinf+0x2a>
 80045ce:	eddd 0a01 	vldr	s1, [sp, #4]
 80045d2:	ed9d 0a00 	vldr	s0, [sp]
 80045d6:	f000 f80f 	bl	80045f8 <__kernel_cosf>
 80045da:	e7f5      	b.n	80045c8 <sinf+0x70>
 80045dc:	3f490fd8 	.word	0x3f490fd8
 80045e0:	00000000 	.word	0x00000000

080045e4 <nanf>:
 80045e4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80045ec <nanf+0x8>
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	7fc00000 	.word	0x7fc00000

080045f0 <__ieee754_sqrtf>:
 80045f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80045f4:	4770      	bx	lr
	...

080045f8 <__kernel_cosf>:
 80045f8:	ee10 3a10 	vmov	r3, s0
 80045fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004600:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004604:	eef0 6a40 	vmov.f32	s13, s0
 8004608:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800460c:	d204      	bcs.n	8004618 <__kernel_cosf+0x20>
 800460e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8004612:	ee17 2a90 	vmov	r2, s15
 8004616:	b342      	cbz	r2, 800466a <__kernel_cosf+0x72>
 8004618:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800461c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8004688 <__kernel_cosf+0x90>
 8004620:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800468c <__kernel_cosf+0x94>
 8004624:	4a1a      	ldr	r2, [pc, #104]	@ (8004690 <__kernel_cosf+0x98>)
 8004626:	eea7 6a27 	vfma.f32	s12, s14, s15
 800462a:	4293      	cmp	r3, r2
 800462c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004694 <__kernel_cosf+0x9c>
 8004630:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004634:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8004698 <__kernel_cosf+0xa0>
 8004638:	eea7 6a87 	vfma.f32	s12, s15, s14
 800463c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800469c <__kernel_cosf+0xa4>
 8004640:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004644:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80046a0 <__kernel_cosf+0xa8>
 8004648:	eea7 6a87 	vfma.f32	s12, s15, s14
 800464c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8004650:	ee26 6a07 	vmul.f32	s12, s12, s14
 8004654:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004658:	eee7 0a06 	vfma.f32	s1, s14, s12
 800465c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004660:	d804      	bhi.n	800466c <__kernel_cosf+0x74>
 8004662:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004666:	ee30 0a67 	vsub.f32	s0, s0, s15
 800466a:	4770      	bx	lr
 800466c:	4a0d      	ldr	r2, [pc, #52]	@ (80046a4 <__kernel_cosf+0xac>)
 800466e:	4293      	cmp	r3, r2
 8004670:	bf9a      	itte	ls
 8004672:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8004676:	ee07 3a10 	vmovls	s14, r3
 800467a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800467e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004682:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004686:	e7ec      	b.n	8004662 <__kernel_cosf+0x6a>
 8004688:	ad47d74e 	.word	0xad47d74e
 800468c:	310f74f6 	.word	0x310f74f6
 8004690:	3e999999 	.word	0x3e999999
 8004694:	b493f27c 	.word	0xb493f27c
 8004698:	37d00d01 	.word	0x37d00d01
 800469c:	bab60b61 	.word	0xbab60b61
 80046a0:	3d2aaaab 	.word	0x3d2aaaab
 80046a4:	3f480000 	.word	0x3f480000

080046a8 <__kernel_sinf>:
 80046a8:	ee10 3a10 	vmov	r3, s0
 80046ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046b0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80046b4:	d204      	bcs.n	80046c0 <__kernel_sinf+0x18>
 80046b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80046ba:	ee17 3a90 	vmov	r3, s15
 80046be:	b35b      	cbz	r3, 8004718 <__kernel_sinf+0x70>
 80046c0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80046c4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800471c <__kernel_sinf+0x74>
 80046c8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8004720 <__kernel_sinf+0x78>
 80046cc:	eea7 6a27 	vfma.f32	s12, s14, s15
 80046d0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8004724 <__kernel_sinf+0x7c>
 80046d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80046d8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8004728 <__kernel_sinf+0x80>
 80046dc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80046e0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800472c <__kernel_sinf+0x84>
 80046e4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80046e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80046ec:	b930      	cbnz	r0, 80046fc <__kernel_sinf+0x54>
 80046ee:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8004730 <__kernel_sinf+0x88>
 80046f2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80046f6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80046fa:	4770      	bx	lr
 80046fc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004700:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8004704:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004708:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800470c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8004734 <__kernel_sinf+0x8c>
 8004710:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004714:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	2f2ec9d3 	.word	0x2f2ec9d3
 8004720:	b2d72f34 	.word	0xb2d72f34
 8004724:	3638ef1b 	.word	0x3638ef1b
 8004728:	b9500d01 	.word	0xb9500d01
 800472c:	3c088889 	.word	0x3c088889
 8004730:	be2aaaab 	.word	0xbe2aaaab
 8004734:	3e2aaaab 	.word	0x3e2aaaab

08004738 <__ieee754_log10f>:
 8004738:	b508      	push	{r3, lr}
 800473a:	ee10 3a10 	vmov	r3, s0
 800473e:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8004742:	ed2d 8b02 	vpush	{d8}
 8004746:	d108      	bne.n	800475a <__ieee754_log10f+0x22>
 8004748:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80047d0 <__ieee754_log10f+0x98>
 800474c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80047d4 <__ieee754_log10f+0x9c>
 8004750:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8004754:	ecbd 8b02 	vpop	{d8}
 8004758:	bd08      	pop	{r3, pc}
 800475a:	2b00      	cmp	r3, #0
 800475c:	461a      	mov	r2, r3
 800475e:	da02      	bge.n	8004766 <__ieee754_log10f+0x2e>
 8004760:	ee30 7a40 	vsub.f32	s14, s0, s0
 8004764:	e7f2      	b.n	800474c <__ieee754_log10f+0x14>
 8004766:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800476a:	db02      	blt.n	8004772 <__ieee754_log10f+0x3a>
 800476c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004770:	e7f0      	b.n	8004754 <__ieee754_log10f+0x1c>
 8004772:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004776:	bfbf      	itttt	lt
 8004778:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 80047d8 <__ieee754_log10f+0xa0>
 800477c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8004780:	f06f 0118 	mvnlt.w	r1, #24
 8004784:	ee17 2a90 	vmovlt	r2, s15
 8004788:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800478c:	bfa8      	it	ge
 800478e:	2100      	movge	r1, #0
 8004790:	3b7f      	subs	r3, #127	@ 0x7f
 8004792:	440b      	add	r3, r1
 8004794:	0fd9      	lsrs	r1, r3, #31
 8004796:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80047a2:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 80047a6:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80047aa:	ee00 3a10 	vmov	s0, r3
 80047ae:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80047b2:	f000 fbb9 	bl	8004f28 <__ieee754_logf>
 80047b6:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80047dc <__ieee754_log10f+0xa4>
 80047ba:	ee20 0a27 	vmul.f32	s0, s0, s15
 80047be:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80047e0 <__ieee754_log10f+0xa8>
 80047c2:	eea8 0a27 	vfma.f32	s0, s16, s15
 80047c6:	eddf 7a07 	vldr	s15, [pc, #28]	@ 80047e4 <__ieee754_log10f+0xac>
 80047ca:	eea8 0a27 	vfma.f32	s0, s16, s15
 80047ce:	e7c1      	b.n	8004754 <__ieee754_log10f+0x1c>
 80047d0:	cc000000 	.word	0xcc000000
 80047d4:	00000000 	.word	0x00000000
 80047d8:	4c000000 	.word	0x4c000000
 80047dc:	3ede5bd9 	.word	0x3ede5bd9
 80047e0:	355427db 	.word	0x355427db
 80047e4:	3e9a2080 	.word	0x3e9a2080

080047e8 <__ieee754_rem_pio2f>:
 80047e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ea:	ee10 6a10 	vmov	r6, s0
 80047ee:	4b88      	ldr	r3, [pc, #544]	@ (8004a10 <__ieee754_rem_pio2f+0x228>)
 80047f0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80047f4:	429d      	cmp	r5, r3
 80047f6:	b087      	sub	sp, #28
 80047f8:	4604      	mov	r4, r0
 80047fa:	d805      	bhi.n	8004808 <__ieee754_rem_pio2f+0x20>
 80047fc:	2300      	movs	r3, #0
 80047fe:	ed80 0a00 	vstr	s0, [r0]
 8004802:	6043      	str	r3, [r0, #4]
 8004804:	2000      	movs	r0, #0
 8004806:	e022      	b.n	800484e <__ieee754_rem_pio2f+0x66>
 8004808:	4b82      	ldr	r3, [pc, #520]	@ (8004a14 <__ieee754_rem_pio2f+0x22c>)
 800480a:	429d      	cmp	r5, r3
 800480c:	d83a      	bhi.n	8004884 <__ieee754_rem_pio2f+0x9c>
 800480e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8004812:	2e00      	cmp	r6, #0
 8004814:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004a18 <__ieee754_rem_pio2f+0x230>
 8004818:	4a80      	ldr	r2, [pc, #512]	@ (8004a1c <__ieee754_rem_pio2f+0x234>)
 800481a:	f023 030f 	bic.w	r3, r3, #15
 800481e:	dd18      	ble.n	8004852 <__ieee754_rem_pio2f+0x6a>
 8004820:	4293      	cmp	r3, r2
 8004822:	ee70 7a47 	vsub.f32	s15, s0, s14
 8004826:	bf09      	itett	eq
 8004828:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8004a20 <__ieee754_rem_pio2f+0x238>
 800482c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8004a24 <__ieee754_rem_pio2f+0x23c>
 8004830:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8004a28 <__ieee754_rem_pio2f+0x240>
 8004834:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004838:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800483c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004840:	ed80 7a00 	vstr	s14, [r0]
 8004844:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004848:	edc0 7a01 	vstr	s15, [r0, #4]
 800484c:	2001      	movs	r0, #1
 800484e:	b007      	add	sp, #28
 8004850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004852:	4293      	cmp	r3, r2
 8004854:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004858:	bf09      	itett	eq
 800485a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8004a20 <__ieee754_rem_pio2f+0x238>
 800485e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8004a24 <__ieee754_rem_pio2f+0x23c>
 8004862:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8004a28 <__ieee754_rem_pio2f+0x240>
 8004866:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800486a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800486e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004872:	ed80 7a00 	vstr	s14, [r0]
 8004876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487a:	edc0 7a01 	vstr	s15, [r0, #4]
 800487e:	f04f 30ff 	mov.w	r0, #4294967295
 8004882:	e7e4      	b.n	800484e <__ieee754_rem_pio2f+0x66>
 8004884:	4b69      	ldr	r3, [pc, #420]	@ (8004a2c <__ieee754_rem_pio2f+0x244>)
 8004886:	429d      	cmp	r5, r3
 8004888:	d873      	bhi.n	8004972 <__ieee754_rem_pio2f+0x18a>
 800488a:	f000 f8dd 	bl	8004a48 <fabsf>
 800488e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8004a30 <__ieee754_rem_pio2f+0x248>
 8004892:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004896:	eee0 7a07 	vfma.f32	s15, s0, s14
 800489a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800489e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048a2:	ee17 0a90 	vmov	r0, s15
 80048a6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004a18 <__ieee754_rem_pio2f+0x230>
 80048aa:	eea7 0a67 	vfms.f32	s0, s14, s15
 80048ae:	281f      	cmp	r0, #31
 80048b0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004a24 <__ieee754_rem_pio2f+0x23c>
 80048b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b8:	eeb1 6a47 	vneg.f32	s12, s14
 80048bc:	ee70 6a67 	vsub.f32	s13, s0, s15
 80048c0:	ee16 1a90 	vmov	r1, s13
 80048c4:	dc09      	bgt.n	80048da <__ieee754_rem_pio2f+0xf2>
 80048c6:	4a5b      	ldr	r2, [pc, #364]	@ (8004a34 <__ieee754_rem_pio2f+0x24c>)
 80048c8:	1e47      	subs	r7, r0, #1
 80048ca:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80048ce:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80048d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d107      	bne.n	80048ea <__ieee754_rem_pio2f+0x102>
 80048da:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80048de:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80048e2:	2a08      	cmp	r2, #8
 80048e4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80048e8:	dc14      	bgt.n	8004914 <__ieee754_rem_pio2f+0x12c>
 80048ea:	6021      	str	r1, [r4, #0]
 80048ec:	ed94 7a00 	vldr	s14, [r4]
 80048f0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80048f4:	2e00      	cmp	r6, #0
 80048f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80048fa:	ed84 0a01 	vstr	s0, [r4, #4]
 80048fe:	daa6      	bge.n	800484e <__ieee754_rem_pio2f+0x66>
 8004900:	eeb1 7a47 	vneg.f32	s14, s14
 8004904:	eeb1 0a40 	vneg.f32	s0, s0
 8004908:	ed84 7a00 	vstr	s14, [r4]
 800490c:	ed84 0a01 	vstr	s0, [r4, #4]
 8004910:	4240      	negs	r0, r0
 8004912:	e79c      	b.n	800484e <__ieee754_rem_pio2f+0x66>
 8004914:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8004a20 <__ieee754_rem_pio2f+0x238>
 8004918:	eef0 6a40 	vmov.f32	s13, s0
 800491c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8004920:	ee70 7a66 	vsub.f32	s15, s0, s13
 8004924:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004928:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004a28 <__ieee754_rem_pio2f+0x240>
 800492c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8004930:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004934:	ee15 2a90 	vmov	r2, s11
 8004938:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800493c:	1a5b      	subs	r3, r3, r1
 800493e:	2b19      	cmp	r3, #25
 8004940:	dc04      	bgt.n	800494c <__ieee754_rem_pio2f+0x164>
 8004942:	edc4 5a00 	vstr	s11, [r4]
 8004946:	eeb0 0a66 	vmov.f32	s0, s13
 800494a:	e7cf      	b.n	80048ec <__ieee754_rem_pio2f+0x104>
 800494c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8004a38 <__ieee754_rem_pio2f+0x250>
 8004950:	eeb0 0a66 	vmov.f32	s0, s13
 8004954:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004958:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800495c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8004a3c <__ieee754_rem_pio2f+0x254>
 8004960:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004964:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004968:	ee30 7a67 	vsub.f32	s14, s0, s15
 800496c:	ed84 7a00 	vstr	s14, [r4]
 8004970:	e7bc      	b.n	80048ec <__ieee754_rem_pio2f+0x104>
 8004972:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8004976:	d306      	bcc.n	8004986 <__ieee754_rem_pio2f+0x19e>
 8004978:	ee70 7a40 	vsub.f32	s15, s0, s0
 800497c:	edc0 7a01 	vstr	s15, [r0, #4]
 8004980:	edc0 7a00 	vstr	s15, [r0]
 8004984:	e73e      	b.n	8004804 <__ieee754_rem_pio2f+0x1c>
 8004986:	15ea      	asrs	r2, r5, #23
 8004988:	3a86      	subs	r2, #134	@ 0x86
 800498a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004996:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8004a40 <__ieee754_rem_pio2f+0x258>
 800499a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800499e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049a2:	ed8d 7a03 	vstr	s14, [sp, #12]
 80049a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80049aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80049ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80049b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049b6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80049ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80049be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c6:	edcd 7a05 	vstr	s15, [sp, #20]
 80049ca:	d11e      	bne.n	8004a0a <__ieee754_rem_pio2f+0x222>
 80049cc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80049d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d4:	bf0c      	ite	eq
 80049d6:	2301      	moveq	r3, #1
 80049d8:	2302      	movne	r3, #2
 80049da:	491a      	ldr	r1, [pc, #104]	@ (8004a44 <__ieee754_rem_pio2f+0x25c>)
 80049dc:	9101      	str	r1, [sp, #4]
 80049de:	2102      	movs	r1, #2
 80049e0:	9100      	str	r1, [sp, #0]
 80049e2:	a803      	add	r0, sp, #12
 80049e4:	4621      	mov	r1, r4
 80049e6:	f000 f837 	bl	8004a58 <__kernel_rem_pio2f>
 80049ea:	2e00      	cmp	r6, #0
 80049ec:	f6bf af2f 	bge.w	800484e <__ieee754_rem_pio2f+0x66>
 80049f0:	edd4 7a00 	vldr	s15, [r4]
 80049f4:	eef1 7a67 	vneg.f32	s15, s15
 80049f8:	edc4 7a00 	vstr	s15, [r4]
 80049fc:	edd4 7a01 	vldr	s15, [r4, #4]
 8004a00:	eef1 7a67 	vneg.f32	s15, s15
 8004a04:	edc4 7a01 	vstr	s15, [r4, #4]
 8004a08:	e782      	b.n	8004910 <__ieee754_rem_pio2f+0x128>
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e7e5      	b.n	80049da <__ieee754_rem_pio2f+0x1f2>
 8004a0e:	bf00      	nop
 8004a10:	3f490fd8 	.word	0x3f490fd8
 8004a14:	4016cbe3 	.word	0x4016cbe3
 8004a18:	3fc90f80 	.word	0x3fc90f80
 8004a1c:	3fc90fd0 	.word	0x3fc90fd0
 8004a20:	37354400 	.word	0x37354400
 8004a24:	37354443 	.word	0x37354443
 8004a28:	2e85a308 	.word	0x2e85a308
 8004a2c:	43490f80 	.word	0x43490f80
 8004a30:	3f22f984 	.word	0x3f22f984
 8004a34:	080052b4 	.word	0x080052b4
 8004a38:	2e85a300 	.word	0x2e85a300
 8004a3c:	248d3132 	.word	0x248d3132
 8004a40:	43800000 	.word	0x43800000
 8004a44:	08005334 	.word	0x08005334

08004a48 <fabsf>:
 8004a48:	ee10 3a10 	vmov	r3, s0
 8004a4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a50:	ee00 3a10 	vmov	s0, r3
 8004a54:	4770      	bx	lr
	...

08004a58 <__kernel_rem_pio2f>:
 8004a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5c:	ed2d 8b04 	vpush	{d8-d9}
 8004a60:	b0d9      	sub	sp, #356	@ 0x164
 8004a62:	4690      	mov	r8, r2
 8004a64:	9001      	str	r0, [sp, #4]
 8004a66:	4ab6      	ldr	r2, [pc, #728]	@ (8004d40 <__kernel_rem_pio2f+0x2e8>)
 8004a68:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8004a6a:	f118 0f04 	cmn.w	r8, #4
 8004a6e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8004a72:	460f      	mov	r7, r1
 8004a74:	f103 3bff 	add.w	fp, r3, #4294967295
 8004a78:	db26      	blt.n	8004ac8 <__kernel_rem_pio2f+0x70>
 8004a7a:	f1b8 0203 	subs.w	r2, r8, #3
 8004a7e:	bf48      	it	mi
 8004a80:	f108 0204 	addmi.w	r2, r8, #4
 8004a84:	10d2      	asrs	r2, r2, #3
 8004a86:	1c55      	adds	r5, r2, #1
 8004a88:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8004a8a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8004d50 <__kernel_rem_pio2f+0x2f8>
 8004a8e:	00e8      	lsls	r0, r5, #3
 8004a90:	eba2 060b 	sub.w	r6, r2, fp
 8004a94:	9002      	str	r0, [sp, #8]
 8004a96:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8004a9a:	eb0a 0c0b 	add.w	ip, sl, fp
 8004a9e:	ac1c      	add	r4, sp, #112	@ 0x70
 8004aa0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	4560      	cmp	r0, ip
 8004aa8:	dd10      	ble.n	8004acc <__kernel_rem_pio2f+0x74>
 8004aaa:	a91c      	add	r1, sp, #112	@ 0x70
 8004aac:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8004ab0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8004ab4:	2600      	movs	r6, #0
 8004ab6:	4556      	cmp	r6, sl
 8004ab8:	dc24      	bgt.n	8004b04 <__kernel_rem_pio2f+0xac>
 8004aba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004abe:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8004d50 <__kernel_rem_pio2f+0x2f8>
 8004ac2:	4684      	mov	ip, r0
 8004ac4:	2400      	movs	r4, #0
 8004ac6:	e016      	b.n	8004af6 <__kernel_rem_pio2f+0x9e>
 8004ac8:	2200      	movs	r2, #0
 8004aca:	e7dc      	b.n	8004a86 <__kernel_rem_pio2f+0x2e>
 8004acc:	42c6      	cmn	r6, r0
 8004ace:	bf5d      	ittte	pl
 8004ad0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8004ad4:	ee07 1a90 	vmovpl	s15, r1
 8004ad8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004adc:	eef0 7a47 	vmovmi.f32	s15, s14
 8004ae0:	ece4 7a01 	vstmia	r4!, {s15}
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	e7de      	b.n	8004aa6 <__kernel_rem_pio2f+0x4e>
 8004ae8:	ecfe 6a01 	vldmia	lr!, {s13}
 8004aec:	ed3c 7a01 	vldmdb	ip!, {s14}
 8004af0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004af4:	3401      	adds	r4, #1
 8004af6:	455c      	cmp	r4, fp
 8004af8:	ddf6      	ble.n	8004ae8 <__kernel_rem_pio2f+0x90>
 8004afa:	ece9 7a01 	vstmia	r9!, {s15}
 8004afe:	3601      	adds	r6, #1
 8004b00:	3004      	adds	r0, #4
 8004b02:	e7d8      	b.n	8004ab6 <__kernel_rem_pio2f+0x5e>
 8004b04:	a908      	add	r1, sp, #32
 8004b06:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004b0a:	9104      	str	r1, [sp, #16]
 8004b0c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8004b0e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8004d4c <__kernel_rem_pio2f+0x2f4>
 8004b12:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8004d48 <__kernel_rem_pio2f+0x2f0>
 8004b16:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004b1a:	9203      	str	r2, [sp, #12]
 8004b1c:	4654      	mov	r4, sl
 8004b1e:	00a2      	lsls	r2, r4, #2
 8004b20:	9205      	str	r2, [sp, #20]
 8004b22:	aa58      	add	r2, sp, #352	@ 0x160
 8004b24:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8004b28:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8004b2c:	a944      	add	r1, sp, #272	@ 0x110
 8004b2e:	aa08      	add	r2, sp, #32
 8004b30:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004b34:	4694      	mov	ip, r2
 8004b36:	4626      	mov	r6, r4
 8004b38:	2e00      	cmp	r6, #0
 8004b3a:	dc4c      	bgt.n	8004bd6 <__kernel_rem_pio2f+0x17e>
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004b42:	f000 fae3 	bl	800510c <scalbnf>
 8004b46:	eeb0 8a40 	vmov.f32	s16, s0
 8004b4a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8004b4e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004b52:	f000 fb41 	bl	80051d8 <floorf>
 8004b56:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8004b5a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004b5e:	2d00      	cmp	r5, #0
 8004b60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b64:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004b68:	ee17 9a90 	vmov	r9, s15
 8004b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b70:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004b74:	dd41      	ble.n	8004bfa <__kernel_rem_pio2f+0x1a2>
 8004b76:	f104 3cff 	add.w	ip, r4, #4294967295
 8004b7a:	a908      	add	r1, sp, #32
 8004b7c:	f1c5 0e08 	rsb	lr, r5, #8
 8004b80:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8004b84:	fa46 f00e 	asr.w	r0, r6, lr
 8004b88:	4481      	add	r9, r0
 8004b8a:	fa00 f00e 	lsl.w	r0, r0, lr
 8004b8e:	1a36      	subs	r6, r6, r0
 8004b90:	f1c5 0007 	rsb	r0, r5, #7
 8004b94:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8004b98:	4106      	asrs	r6, r0
 8004b9a:	2e00      	cmp	r6, #0
 8004b9c:	dd3c      	ble.n	8004c18 <__kernel_rem_pio2f+0x1c0>
 8004b9e:	f04f 0e00 	mov.w	lr, #0
 8004ba2:	f109 0901 	add.w	r9, r9, #1
 8004ba6:	4670      	mov	r0, lr
 8004ba8:	4574      	cmp	r4, lr
 8004baa:	dc68      	bgt.n	8004c7e <__kernel_rem_pio2f+0x226>
 8004bac:	2d00      	cmp	r5, #0
 8004bae:	dd03      	ble.n	8004bb8 <__kernel_rem_pio2f+0x160>
 8004bb0:	2d01      	cmp	r5, #1
 8004bb2:	d074      	beq.n	8004c9e <__kernel_rem_pio2f+0x246>
 8004bb4:	2d02      	cmp	r5, #2
 8004bb6:	d07d      	beq.n	8004cb4 <__kernel_rem_pio2f+0x25c>
 8004bb8:	2e02      	cmp	r6, #2
 8004bba:	d12d      	bne.n	8004c18 <__kernel_rem_pio2f+0x1c0>
 8004bbc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004bc0:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004bc4:	b340      	cbz	r0, 8004c18 <__kernel_rem_pio2f+0x1c0>
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	9306      	str	r3, [sp, #24]
 8004bca:	f000 fa9f 	bl	800510c <scalbnf>
 8004bce:	9b06      	ldr	r3, [sp, #24]
 8004bd0:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004bd4:	e020      	b.n	8004c18 <__kernel_rem_pio2f+0x1c0>
 8004bd6:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004bda:	3e01      	subs	r6, #1
 8004bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004be4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004be8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004bec:	ecac 0a01 	vstmia	ip!, {s0}
 8004bf0:	ed30 0a01 	vldmdb	r0!, {s0}
 8004bf4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004bf8:	e79e      	b.n	8004b38 <__kernel_rem_pio2f+0xe0>
 8004bfa:	d105      	bne.n	8004c08 <__kernel_rem_pio2f+0x1b0>
 8004bfc:	1e60      	subs	r0, r4, #1
 8004bfe:	a908      	add	r1, sp, #32
 8004c00:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8004c04:	11f6      	asrs	r6, r6, #7
 8004c06:	e7c8      	b.n	8004b9a <__kernel_rem_pio2f+0x142>
 8004c08:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004c0c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c14:	da31      	bge.n	8004c7a <__kernel_rem_pio2f+0x222>
 8004c16:	2600      	movs	r6, #0
 8004c18:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c20:	f040 8098 	bne.w	8004d54 <__kernel_rem_pio2f+0x2fc>
 8004c24:	1e60      	subs	r0, r4, #1
 8004c26:	2200      	movs	r2, #0
 8004c28:	4550      	cmp	r0, sl
 8004c2a:	da4b      	bge.n	8004cc4 <__kernel_rem_pio2f+0x26c>
 8004c2c:	2a00      	cmp	r2, #0
 8004c2e:	d065      	beq.n	8004cfc <__kernel_rem_pio2f+0x2a4>
 8004c30:	3c01      	subs	r4, #1
 8004c32:	ab08      	add	r3, sp, #32
 8004c34:	3d08      	subs	r5, #8
 8004c36:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f8      	beq.n	8004c30 <__kernel_rem_pio2f+0x1d8>
 8004c3e:	4628      	mov	r0, r5
 8004c40:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004c44:	f000 fa62 	bl	800510c <scalbnf>
 8004c48:	1c63      	adds	r3, r4, #1
 8004c4a:	aa44      	add	r2, sp, #272	@ 0x110
 8004c4c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004d4c <__kernel_rem_pio2f+0x2f4>
 8004c50:	0099      	lsls	r1, r3, #2
 8004c52:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004c56:	4623      	mov	r3, r4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f280 80a9 	bge.w	8004db0 <__kernel_rem_pio2f+0x358>
 8004c5e:	4623      	mov	r3, r4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f2c0 80c7 	blt.w	8004df4 <__kernel_rem_pio2f+0x39c>
 8004c66:	aa44      	add	r2, sp, #272	@ 0x110
 8004c68:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8004c6c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8004d44 <__kernel_rem_pio2f+0x2ec>
 8004c70:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8004d50 <__kernel_rem_pio2f+0x2f8>
 8004c74:	2000      	movs	r0, #0
 8004c76:	1ae2      	subs	r2, r4, r3
 8004c78:	e0b1      	b.n	8004dde <__kernel_rem_pio2f+0x386>
 8004c7a:	2602      	movs	r6, #2
 8004c7c:	e78f      	b.n	8004b9e <__kernel_rem_pio2f+0x146>
 8004c7e:	f852 1b04 	ldr.w	r1, [r2], #4
 8004c82:	b948      	cbnz	r0, 8004c98 <__kernel_rem_pio2f+0x240>
 8004c84:	b121      	cbz	r1, 8004c90 <__kernel_rem_pio2f+0x238>
 8004c86:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8004c8a:	f842 1c04 	str.w	r1, [r2, #-4]
 8004c8e:	2101      	movs	r1, #1
 8004c90:	f10e 0e01 	add.w	lr, lr, #1
 8004c94:	4608      	mov	r0, r1
 8004c96:	e787      	b.n	8004ba8 <__kernel_rem_pio2f+0x150>
 8004c98:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8004c9c:	e7f5      	b.n	8004c8a <__kernel_rem_pio2f+0x232>
 8004c9e:	f104 3cff 	add.w	ip, r4, #4294967295
 8004ca2:	aa08      	add	r2, sp, #32
 8004ca4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8004ca8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004cac:	a908      	add	r1, sp, #32
 8004cae:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8004cb2:	e781      	b.n	8004bb8 <__kernel_rem_pio2f+0x160>
 8004cb4:	f104 3cff 	add.w	ip, r4, #4294967295
 8004cb8:	aa08      	add	r2, sp, #32
 8004cba:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8004cbe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004cc2:	e7f3      	b.n	8004cac <__kernel_rem_pio2f+0x254>
 8004cc4:	a908      	add	r1, sp, #32
 8004cc6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004cca:	3801      	subs	r0, #1
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	e7ab      	b.n	8004c28 <__kernel_rem_pio2f+0x1d0>
 8004cd0:	3201      	adds	r2, #1
 8004cd2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8004cd6:	2e00      	cmp	r6, #0
 8004cd8:	d0fa      	beq.n	8004cd0 <__kernel_rem_pio2f+0x278>
 8004cda:	9905      	ldr	r1, [sp, #20]
 8004cdc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8004ce0:	eb0d 0001 	add.w	r0, sp, r1
 8004ce4:	18e6      	adds	r6, r4, r3
 8004ce6:	a91c      	add	r1, sp, #112	@ 0x70
 8004ce8:	f104 0c01 	add.w	ip, r4, #1
 8004cec:	384c      	subs	r0, #76	@ 0x4c
 8004cee:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8004cf2:	4422      	add	r2, r4
 8004cf4:	4562      	cmp	r2, ip
 8004cf6:	da04      	bge.n	8004d02 <__kernel_rem_pio2f+0x2aa>
 8004cf8:	4614      	mov	r4, r2
 8004cfa:	e710      	b.n	8004b1e <__kernel_rem_pio2f+0xc6>
 8004cfc:	9804      	ldr	r0, [sp, #16]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	e7e7      	b.n	8004cd2 <__kernel_rem_pio2f+0x27a>
 8004d02:	9903      	ldr	r1, [sp, #12]
 8004d04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004d08:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8004d0c:	9105      	str	r1, [sp, #20]
 8004d0e:	ee07 1a90 	vmov	s15, r1
 8004d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d16:	2400      	movs	r4, #0
 8004d18:	ece6 7a01 	vstmia	r6!, {s15}
 8004d1c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8004d50 <__kernel_rem_pio2f+0x2f8>
 8004d20:	46b1      	mov	r9, r6
 8004d22:	455c      	cmp	r4, fp
 8004d24:	dd04      	ble.n	8004d30 <__kernel_rem_pio2f+0x2d8>
 8004d26:	ece0 7a01 	vstmia	r0!, {s15}
 8004d2a:	f10c 0c01 	add.w	ip, ip, #1
 8004d2e:	e7e1      	b.n	8004cf4 <__kernel_rem_pio2f+0x29c>
 8004d30:	ecfe 6a01 	vldmia	lr!, {s13}
 8004d34:	ed39 7a01 	vldmdb	r9!, {s14}
 8004d38:	3401      	adds	r4, #1
 8004d3a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004d3e:	e7f0      	b.n	8004d22 <__kernel_rem_pio2f+0x2ca>
 8004d40:	08005678 	.word	0x08005678
 8004d44:	0800564c 	.word	0x0800564c
 8004d48:	43800000 	.word	0x43800000
 8004d4c:	3b800000 	.word	0x3b800000
 8004d50:	00000000 	.word	0x00000000
 8004d54:	9b02      	ldr	r3, [sp, #8]
 8004d56:	eeb0 0a48 	vmov.f32	s0, s16
 8004d5a:	eba3 0008 	sub.w	r0, r3, r8
 8004d5e:	f000 f9d5 	bl	800510c <scalbnf>
 8004d62:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8004d48 <__kernel_rem_pio2f+0x2f0>
 8004d66:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6e:	db19      	blt.n	8004da4 <__kernel_rem_pio2f+0x34c>
 8004d70:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8004d4c <__kernel_rem_pio2f+0x2f4>
 8004d74:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004d78:	aa08      	add	r2, sp, #32
 8004d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d7e:	3508      	adds	r5, #8
 8004d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d84:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d8c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004d90:	ee10 3a10 	vmov	r3, s0
 8004d94:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004d98:	ee17 3a90 	vmov	r3, s15
 8004d9c:	3401      	adds	r4, #1
 8004d9e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004da2:	e74c      	b.n	8004c3e <__kernel_rem_pio2f+0x1e6>
 8004da4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004da8:	aa08      	add	r2, sp, #32
 8004daa:	ee10 3a10 	vmov	r3, s0
 8004dae:	e7f6      	b.n	8004d9e <__kernel_rem_pio2f+0x346>
 8004db0:	a808      	add	r0, sp, #32
 8004db2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8004db6:	9001      	str	r0, [sp, #4]
 8004db8:	ee07 0a90 	vmov	s15, r0
 8004dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004dc6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004dca:	ed62 7a01 	vstmdb	r2!, {s15}
 8004dce:	e743      	b.n	8004c58 <__kernel_rem_pio2f+0x200>
 8004dd0:	ecfc 6a01 	vldmia	ip!, {s13}
 8004dd4:	ecb5 7a01 	vldmia	r5!, {s14}
 8004dd8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004ddc:	3001      	adds	r0, #1
 8004dde:	4550      	cmp	r0, sl
 8004de0:	dc01      	bgt.n	8004de6 <__kernel_rem_pio2f+0x38e>
 8004de2:	4290      	cmp	r0, r2
 8004de4:	ddf4      	ble.n	8004dd0 <__kernel_rem_pio2f+0x378>
 8004de6:	a858      	add	r0, sp, #352	@ 0x160
 8004de8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004dec:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8004df0:	3b01      	subs	r3, #1
 8004df2:	e735      	b.n	8004c60 <__kernel_rem_pio2f+0x208>
 8004df4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	dc09      	bgt.n	8004e0e <__kernel_rem_pio2f+0x3b6>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	dc27      	bgt.n	8004e4e <__kernel_rem_pio2f+0x3f6>
 8004dfe:	d040      	beq.n	8004e82 <__kernel_rem_pio2f+0x42a>
 8004e00:	f009 0007 	and.w	r0, r9, #7
 8004e04:	b059      	add	sp, #356	@ 0x164
 8004e06:	ecbd 8b04 	vpop	{d8-d9}
 8004e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e0e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d1f5      	bne.n	8004e00 <__kernel_rem_pio2f+0x3a8>
 8004e14:	aa30      	add	r2, sp, #192	@ 0xc0
 8004e16:	1f0b      	subs	r3, r1, #4
 8004e18:	4413      	add	r3, r2
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	dc50      	bgt.n	8004ec4 <__kernel_rem_pio2f+0x46c>
 8004e22:	4622      	mov	r2, r4
 8004e24:	2a01      	cmp	r2, #1
 8004e26:	dc5d      	bgt.n	8004ee4 <__kernel_rem_pio2f+0x48c>
 8004e28:	ab30      	add	r3, sp, #192	@ 0xc0
 8004e2a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8004d50 <__kernel_rem_pio2f+0x2f8>
 8004e2e:	440b      	add	r3, r1
 8004e30:	2c01      	cmp	r4, #1
 8004e32:	dc67      	bgt.n	8004f04 <__kernel_rem_pio2f+0x4ac>
 8004e34:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8004e38:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8004e3c:	2e00      	cmp	r6, #0
 8004e3e:	d167      	bne.n	8004f10 <__kernel_rem_pio2f+0x4b8>
 8004e40:	edc7 6a00 	vstr	s13, [r7]
 8004e44:	ed87 7a01 	vstr	s14, [r7, #4]
 8004e48:	edc7 7a02 	vstr	s15, [r7, #8]
 8004e4c:	e7d8      	b.n	8004e00 <__kernel_rem_pio2f+0x3a8>
 8004e4e:	ab30      	add	r3, sp, #192	@ 0xc0
 8004e50:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8004d50 <__kernel_rem_pio2f+0x2f8>
 8004e54:	440b      	add	r3, r1
 8004e56:	4622      	mov	r2, r4
 8004e58:	2a00      	cmp	r2, #0
 8004e5a:	da24      	bge.n	8004ea6 <__kernel_rem_pio2f+0x44e>
 8004e5c:	b34e      	cbz	r6, 8004eb2 <__kernel_rem_pio2f+0x45a>
 8004e5e:	eef1 7a47 	vneg.f32	s15, s14
 8004e62:	edc7 7a00 	vstr	s15, [r7]
 8004e66:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8004e6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e6e:	aa31      	add	r2, sp, #196	@ 0xc4
 8004e70:	2301      	movs	r3, #1
 8004e72:	429c      	cmp	r4, r3
 8004e74:	da20      	bge.n	8004eb8 <__kernel_rem_pio2f+0x460>
 8004e76:	b10e      	cbz	r6, 8004e7c <__kernel_rem_pio2f+0x424>
 8004e78:	eef1 7a67 	vneg.f32	s15, s15
 8004e7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004e80:	e7be      	b.n	8004e00 <__kernel_rem_pio2f+0x3a8>
 8004e82:	ab30      	add	r3, sp, #192	@ 0xc0
 8004e84:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8004d50 <__kernel_rem_pio2f+0x2f8>
 8004e88:	440b      	add	r3, r1
 8004e8a:	2c00      	cmp	r4, #0
 8004e8c:	da05      	bge.n	8004e9a <__kernel_rem_pio2f+0x442>
 8004e8e:	b10e      	cbz	r6, 8004e94 <__kernel_rem_pio2f+0x43c>
 8004e90:	eef1 7a67 	vneg.f32	s15, s15
 8004e94:	edc7 7a00 	vstr	s15, [r7]
 8004e98:	e7b2      	b.n	8004e00 <__kernel_rem_pio2f+0x3a8>
 8004e9a:	ed33 7a01 	vldmdb	r3!, {s14}
 8004e9e:	3c01      	subs	r4, #1
 8004ea0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ea4:	e7f1      	b.n	8004e8a <__kernel_rem_pio2f+0x432>
 8004ea6:	ed73 7a01 	vldmdb	r3!, {s15}
 8004eaa:	3a01      	subs	r2, #1
 8004eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004eb0:	e7d2      	b.n	8004e58 <__kernel_rem_pio2f+0x400>
 8004eb2:	eef0 7a47 	vmov.f32	s15, s14
 8004eb6:	e7d4      	b.n	8004e62 <__kernel_rem_pio2f+0x40a>
 8004eb8:	ecb2 7a01 	vldmia	r2!, {s14}
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ec2:	e7d6      	b.n	8004e72 <__kernel_rem_pio2f+0x41a>
 8004ec4:	ed72 7a01 	vldmdb	r2!, {s15}
 8004ec8:	edd2 6a01 	vldr	s13, [r2, #4]
 8004ecc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004ed0:	3801      	subs	r0, #1
 8004ed2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ed6:	ed82 7a00 	vstr	s14, [r2]
 8004eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ede:	edc2 7a01 	vstr	s15, [r2, #4]
 8004ee2:	e79c      	b.n	8004e1e <__kernel_rem_pio2f+0x3c6>
 8004ee4:	ed73 7a01 	vldmdb	r3!, {s15}
 8004ee8:	edd3 6a01 	vldr	s13, [r3, #4]
 8004eec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004ef0:	3a01      	subs	r2, #1
 8004ef2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ef6:	ed83 7a00 	vstr	s14, [r3]
 8004efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004efe:	edc3 7a01 	vstr	s15, [r3, #4]
 8004f02:	e78f      	b.n	8004e24 <__kernel_rem_pio2f+0x3cc>
 8004f04:	ed33 7a01 	vldmdb	r3!, {s14}
 8004f08:	3c01      	subs	r4, #1
 8004f0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f0e:	e78f      	b.n	8004e30 <__kernel_rem_pio2f+0x3d8>
 8004f10:	eef1 6a66 	vneg.f32	s13, s13
 8004f14:	eeb1 7a47 	vneg.f32	s14, s14
 8004f18:	edc7 6a00 	vstr	s13, [r7]
 8004f1c:	ed87 7a01 	vstr	s14, [r7, #4]
 8004f20:	eef1 7a67 	vneg.f32	s15, s15
 8004f24:	e790      	b.n	8004e48 <__kernel_rem_pio2f+0x3f0>
 8004f26:	bf00      	nop

08004f28 <__ieee754_logf>:
 8004f28:	ee10 3a10 	vmov	r3, s0
 8004f2c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8004f30:	d106      	bne.n	8004f40 <__ieee754_logf+0x18>
 8004f32:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80050cc <__ieee754_logf+0x1a4>
 8004f36:	eddf 7a66 	vldr	s15, [pc, #408]	@ 80050d0 <__ieee754_logf+0x1a8>
 8004f3a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8004f3e:	4770      	bx	lr
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	461a      	mov	r2, r3
 8004f44:	da02      	bge.n	8004f4c <__ieee754_logf+0x24>
 8004f46:	ee30 7a40 	vsub.f32	s14, s0, s0
 8004f4a:	e7f4      	b.n	8004f36 <__ieee754_logf+0xe>
 8004f4c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004f50:	db02      	blt.n	8004f58 <__ieee754_logf+0x30>
 8004f52:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004f56:	4770      	bx	lr
 8004f58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f5c:	bfb8      	it	lt
 8004f5e:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 80050d4 <__ieee754_logf+0x1ac>
 8004f62:	485d      	ldr	r0, [pc, #372]	@ (80050d8 <__ieee754_logf+0x1b0>)
 8004f64:	bfbe      	ittt	lt
 8004f66:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8004f6a:	f06f 0118 	mvnlt.w	r1, #24
 8004f6e:	ee17 2a90 	vmovlt	r2, s15
 8004f72:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8004f76:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8004f7a:	4410      	add	r0, r2
 8004f7c:	bfa8      	it	ge
 8004f7e:	2100      	movge	r1, #0
 8004f80:	3b7f      	subs	r3, #127	@ 0x7f
 8004f82:	440b      	add	r3, r1
 8004f84:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8004f88:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8004f8c:	4311      	orrs	r1, r2
 8004f8e:	ee00 1a10 	vmov	s0, r1
 8004f92:	4952      	ldr	r1, [pc, #328]	@ (80050dc <__ieee754_logf+0x1b4>)
 8004f94:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8004f98:	f102 000f 	add.w	r0, r2, #15
 8004f9c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004fa0:	4001      	ands	r1, r0
 8004fa2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004fa6:	bb89      	cbnz	r1, 800500c <__ieee754_logf+0xe4>
 8004fa8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb0:	d10f      	bne.n	8004fd2 <__ieee754_logf+0xaa>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 8087 	beq.w	80050c6 <__ieee754_logf+0x19e>
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 80050e0 <__ieee754_logf+0x1b8>
 8004fc0:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80050e4 <__ieee754_logf+0x1bc>
 8004fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fc8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004fcc:	eea7 0a87 	vfma.f32	s0, s15, s14
 8004fd0:	4770      	bx	lr
 8004fd2:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80050e8 <__ieee754_logf+0x1c0>
 8004fd6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004fda:	eee0 7a66 	vfms.f32	s15, s0, s13
 8004fde:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004fe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fe6:	b913      	cbnz	r3, 8004fee <__ieee754_logf+0xc6>
 8004fe8:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004fec:	4770      	bx	lr
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80050e0 <__ieee754_logf+0x1b8>
 8004ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ffa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8004ffe:	ee37 0a40 	vsub.f32	s0, s14, s0
 8005002:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80050e4 <__ieee754_logf+0x1bc>
 8005006:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800500a:	4770      	bx	lr
 800500c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8005010:	ee70 7a27 	vadd.f32	s15, s0, s15
 8005014:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80050ec <__ieee754_logf+0x1c4>
 8005018:	eddf 4a35 	vldr	s9, [pc, #212]	@ 80050f0 <__ieee754_logf+0x1c8>
 800501c:	4935      	ldr	r1, [pc, #212]	@ (80050f4 <__ieee754_logf+0x1cc>)
 800501e:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8005022:	4411      	add	r1, r2
 8005024:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8005028:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800502c:	430a      	orrs	r2, r1
 800502e:	2a00      	cmp	r2, #0
 8005030:	ee07 3a90 	vmov	s15, r3
 8005034:	ee26 5a06 	vmul.f32	s10, s12, s12
 8005038:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800503c:	ee25 7a05 	vmul.f32	s14, s10, s10
 8005040:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80050f8 <__ieee754_logf+0x1d0>
 8005044:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005048:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80050fc <__ieee754_logf+0x1d4>
 800504c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8005050:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8005100 <__ieee754_logf+0x1d8>
 8005054:	eee7 7a24 	vfma.f32	s15, s14, s9
 8005058:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8005104 <__ieee754_logf+0x1dc>
 800505c:	eee7 4a87 	vfma.f32	s9, s15, s14
 8005060:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8005108 <__ieee754_logf+0x1e0>
 8005064:	eee4 7a87 	vfma.f32	s15, s9, s14
 8005068:	ee67 7a85 	vmul.f32	s15, s15, s10
 800506c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8005070:	dd1a      	ble.n	80050a8 <__ieee754_logf+0x180>
 8005072:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005076:	ee20 7a07 	vmul.f32	s14, s0, s14
 800507a:	ee27 7a00 	vmul.f32	s14, s14, s0
 800507e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005082:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005086:	b913      	cbnz	r3, 800508e <__ieee754_logf+0x166>
 8005088:	ee37 7a67 	vsub.f32	s14, s14, s15
 800508c:	e7ac      	b.n	8004fe8 <__ieee754_logf+0xc0>
 800508e:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80050e0 <__ieee754_logf+0x1b8>
 8005092:	eee6 7a86 	vfma.f32	s15, s13, s12
 8005096:	ee37 7a67 	vsub.f32	s14, s14, s15
 800509a:	ee37 0a40 	vsub.f32	s0, s14, s0
 800509e:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80050e4 <__ieee754_logf+0x1bc>
 80050a2:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80050a6:	4770      	bx	lr
 80050a8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80050ac:	ee67 7a86 	vmul.f32	s15, s15, s12
 80050b0:	b913      	cbnz	r3, 80050b8 <__ieee754_logf+0x190>
 80050b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80050b6:	4770      	bx	lr
 80050b8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80050e0 <__ieee754_logf+0x1b8>
 80050bc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80050c0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80050c4:	e7eb      	b.n	800509e <__ieee754_logf+0x176>
 80050c6:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80050d0 <__ieee754_logf+0x1a8>
 80050ca:	4770      	bx	lr
 80050cc:	cc000000 	.word	0xcc000000
 80050d0:	00000000 	.word	0x00000000
 80050d4:	4c000000 	.word	0x4c000000
 80050d8:	004afb20 	.word	0x004afb20
 80050dc:	007ffff0 	.word	0x007ffff0
 80050e0:	3717f7d1 	.word	0x3717f7d1
 80050e4:	3f317180 	.word	0x3f317180
 80050e8:	3eaaaaab 	.word	0x3eaaaaab
 80050ec:	3e1cd04f 	.word	0x3e1cd04f
 80050f0:	3e178897 	.word	0x3e178897
 80050f4:	ffcf5c30 	.word	0xffcf5c30
 80050f8:	3e638e29 	.word	0x3e638e29
 80050fc:	3ecccccd 	.word	0x3ecccccd
 8005100:	3e3a3325 	.word	0x3e3a3325
 8005104:	3e924925 	.word	0x3e924925
 8005108:	3f2aaaab 	.word	0x3f2aaaab

0800510c <scalbnf>:
 800510c:	ee10 3a10 	vmov	r3, s0
 8005110:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8005114:	d02b      	beq.n	800516e <scalbnf+0x62>
 8005116:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800511a:	d302      	bcc.n	8005122 <scalbnf+0x16>
 800511c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005120:	4770      	bx	lr
 8005122:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8005126:	d123      	bne.n	8005170 <scalbnf+0x64>
 8005128:	4b24      	ldr	r3, [pc, #144]	@ (80051bc <scalbnf+0xb0>)
 800512a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80051c0 <scalbnf+0xb4>
 800512e:	4298      	cmp	r0, r3
 8005130:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005134:	db17      	blt.n	8005166 <scalbnf+0x5a>
 8005136:	ee10 3a10 	vmov	r3, s0
 800513a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800513e:	3a19      	subs	r2, #25
 8005140:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005144:	4288      	cmp	r0, r1
 8005146:	dd15      	ble.n	8005174 <scalbnf+0x68>
 8005148:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80051c4 <scalbnf+0xb8>
 800514c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80051c8 <scalbnf+0xbc>
 8005150:	ee10 3a10 	vmov	r3, s0
 8005154:	eeb0 7a67 	vmov.f32	s14, s15
 8005158:	2b00      	cmp	r3, #0
 800515a:	bfb8      	it	lt
 800515c:	eef0 7a66 	vmovlt.f32	s15, s13
 8005160:	ee27 0a87 	vmul.f32	s0, s15, s14
 8005164:	4770      	bx	lr
 8005166:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80051cc <scalbnf+0xc0>
 800516a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800516e:	4770      	bx	lr
 8005170:	0dd2      	lsrs	r2, r2, #23
 8005172:	e7e5      	b.n	8005140 <scalbnf+0x34>
 8005174:	4410      	add	r0, r2
 8005176:	28fe      	cmp	r0, #254	@ 0xfe
 8005178:	dce6      	bgt.n	8005148 <scalbnf+0x3c>
 800517a:	2800      	cmp	r0, #0
 800517c:	dd06      	ble.n	800518c <scalbnf+0x80>
 800517e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005182:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005186:	ee00 3a10 	vmov	s0, r3
 800518a:	4770      	bx	lr
 800518c:	f110 0f16 	cmn.w	r0, #22
 8005190:	da09      	bge.n	80051a6 <scalbnf+0x9a>
 8005192:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80051cc <scalbnf+0xc0>
 8005196:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80051d0 <scalbnf+0xc4>
 800519a:	ee10 3a10 	vmov	r3, s0
 800519e:	eeb0 7a67 	vmov.f32	s14, s15
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	e7d9      	b.n	800515a <scalbnf+0x4e>
 80051a6:	3019      	adds	r0, #25
 80051a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80051ac:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80051b0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80051d4 <scalbnf+0xc8>
 80051b4:	ee07 3a90 	vmov	s15, r3
 80051b8:	e7d7      	b.n	800516a <scalbnf+0x5e>
 80051ba:	bf00      	nop
 80051bc:	ffff3cb0 	.word	0xffff3cb0
 80051c0:	4c000000 	.word	0x4c000000
 80051c4:	7149f2ca 	.word	0x7149f2ca
 80051c8:	f149f2ca 	.word	0xf149f2ca
 80051cc:	0da24260 	.word	0x0da24260
 80051d0:	8da24260 	.word	0x8da24260
 80051d4:	33000000 	.word	0x33000000

080051d8 <floorf>:
 80051d8:	ee10 3a10 	vmov	r3, s0
 80051dc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80051e0:	3a7f      	subs	r2, #127	@ 0x7f
 80051e2:	2a16      	cmp	r2, #22
 80051e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80051e8:	dc2b      	bgt.n	8005242 <floorf+0x6a>
 80051ea:	2a00      	cmp	r2, #0
 80051ec:	da12      	bge.n	8005214 <floorf+0x3c>
 80051ee:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005254 <floorf+0x7c>
 80051f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80051f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80051fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fe:	dd06      	ble.n	800520e <floorf+0x36>
 8005200:	2b00      	cmp	r3, #0
 8005202:	da24      	bge.n	800524e <floorf+0x76>
 8005204:	2900      	cmp	r1, #0
 8005206:	4b14      	ldr	r3, [pc, #80]	@ (8005258 <floorf+0x80>)
 8005208:	bf08      	it	eq
 800520a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800520e:	ee00 3a10 	vmov	s0, r3
 8005212:	4770      	bx	lr
 8005214:	4911      	ldr	r1, [pc, #68]	@ (800525c <floorf+0x84>)
 8005216:	4111      	asrs	r1, r2
 8005218:	420b      	tst	r3, r1
 800521a:	d0fa      	beq.n	8005212 <floorf+0x3a>
 800521c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8005254 <floorf+0x7c>
 8005220:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005224:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522c:	ddef      	ble.n	800520e <floorf+0x36>
 800522e:	2b00      	cmp	r3, #0
 8005230:	bfbe      	ittt	lt
 8005232:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8005236:	fa40 f202 	asrlt.w	r2, r0, r2
 800523a:	189b      	addlt	r3, r3, r2
 800523c:	ea23 0301 	bic.w	r3, r3, r1
 8005240:	e7e5      	b.n	800520e <floorf+0x36>
 8005242:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8005246:	d3e4      	bcc.n	8005212 <floorf+0x3a>
 8005248:	ee30 0a00 	vadd.f32	s0, s0, s0
 800524c:	4770      	bx	lr
 800524e:	2300      	movs	r3, #0
 8005250:	e7dd      	b.n	800520e <floorf+0x36>
 8005252:	bf00      	nop
 8005254:	7149f2ca 	.word	0x7149f2ca
 8005258:	bf800000 	.word	0xbf800000
 800525c:	007fffff 	.word	0x007fffff

08005260 <_init>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	bf00      	nop
 8005264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005266:	bc08      	pop	{r3}
 8005268:	469e      	mov	lr, r3
 800526a:	4770      	bx	lr

0800526c <_fini>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	bf00      	nop
 8005270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005272:	bc08      	pop	{r3}
 8005274:	469e      	mov	lr, r3
 8005276:	4770      	bx	lr
