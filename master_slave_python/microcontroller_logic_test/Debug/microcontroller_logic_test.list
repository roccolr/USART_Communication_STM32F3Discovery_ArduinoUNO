
microcontroller_logic_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c30  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08009db8  08009db8  0000adb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a204  0800a204  0000c1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a204  0800a204  0000c1cc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a204  0800a204  0000c1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a204  0800a204  0000b204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a208  0800a208  0000b208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800a20c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1cc  2**0
                  CONTENTS
 10 .bss          00008850  200001cc  200001cc  0000c1cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008a1c  20008a1c  0000c1cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125f8  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032d9  00000000  00000000  0001e7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  00021ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b94  00000000  00000000  00022a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff79  00000000  00000000  000235bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e9b  00000000  00000000  00043535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b120c  00000000  00000000  000593d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000009c  00000000  00000000  0010a5dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000427c  00000000  00000000  0010a678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a4  00000000  00000000  0010e8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001cc 	.word	0x200001cc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009da0 	.word	0x08009da0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001d0 	.word	0x200001d0
 80001c4:	08009da0 	.word	0x08009da0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	f5ad 6d2a 	sub.w	sp, sp, #2720	@ 0xaa0
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fbda 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f92a 	bl	800042c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 fa08 	bl	80005ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80001dc:	f000 f988 	bl	80004f0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001e0:	f000 f9c6 	bl	8000570 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80001e4:	f008 f812 	bl	800820c <MX_USB_DEVICE_Init>
//  uint8_t data[210][256];
//  Complesso X[256];
//  uint8_t metadati[8];
  uint8_t indici[128];
//  float magnitude[256];
  int32_t massimo = 0;
 80001e8:	2300      	movs	r3, #0
 80001ea:	f8c7 3a90 	str.w	r3, [r7, #2704]	@ 0xa90
  int32_t minimo = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	f8c7 3a8c 	str.w	r3, [r7, #2700]	@ 0xa8c

  // led rosso che lampeggia -> Microcontrollore sta ricevendo i metdati
  while(metadati_completi == 0){
 80001f4:	e00f      	b.n	8000216 <main+0x4e>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80001f6:	2201      	movs	r2, #1
 80001f8:	2101      	movs	r1, #1
 80001fa:	4885      	ldr	r0, [pc, #532]	@ (8000410 <main+0x248>)
 80001fc:	f000 feda 	bl	8000fb4 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000200:	2064      	movs	r0, #100	@ 0x64
 8000202:	f000 fc27 	bl	8000a54 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000206:	2200      	movs	r2, #0
 8000208:	2101      	movs	r1, #1
 800020a:	4881      	ldr	r0, [pc, #516]	@ (8000410 <main+0x248>)
 800020c:	f000 fed2 	bl	8000fb4 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000210:	2064      	movs	r0, #100	@ 0x64
 8000212:	f000 fc1f 	bl	8000a54 <HAL_Delay>
  while(metadati_completi == 0){
 8000216:	4b7f      	ldr	r3, [pc, #508]	@ (8000414 <main+0x24c>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	b2db      	uxtb	r3, r3
 800021c:	2b00      	cmp	r3, #0
 800021e:	d0ea      	beq.n	80001f6 <main+0x2e>
  }

  // ottenimento informazioni massimo e minimo
  massimo = (int32_t)(rx_buffer[0] | rx_buffer[1]<<8 | rx_buffer[2]<<16 | rx_buffer[3]<<24);
 8000220:	4b7d      	ldr	r3, [pc, #500]	@ (8000418 <main+0x250>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	461a      	mov	r2, r3
 8000226:	4b7c      	ldr	r3, [pc, #496]	@ (8000418 <main+0x250>)
 8000228:	785b      	ldrb	r3, [r3, #1]
 800022a:	021b      	lsls	r3, r3, #8
 800022c:	431a      	orrs	r2, r3
 800022e:	4b7a      	ldr	r3, [pc, #488]	@ (8000418 <main+0x250>)
 8000230:	789b      	ldrb	r3, [r3, #2]
 8000232:	041b      	lsls	r3, r3, #16
 8000234:	431a      	orrs	r2, r3
 8000236:	4b78      	ldr	r3, [pc, #480]	@ (8000418 <main+0x250>)
 8000238:	78db      	ldrb	r3, [r3, #3]
 800023a:	061b      	lsls	r3, r3, #24
 800023c:	4313      	orrs	r3, r2
 800023e:	f8c7 3a90 	str.w	r3, [r7, #2704]	@ 0xa90
  minimo = (int32_t)(rx_buffer[4] | rx_buffer[5]<<8 | rx_buffer[6]<<16 | rx_buffer[7]<<24);
 8000242:	4b75      	ldr	r3, [pc, #468]	@ (8000418 <main+0x250>)
 8000244:	791b      	ldrb	r3, [r3, #4]
 8000246:	461a      	mov	r2, r3
 8000248:	4b73      	ldr	r3, [pc, #460]	@ (8000418 <main+0x250>)
 800024a:	795b      	ldrb	r3, [r3, #5]
 800024c:	021b      	lsls	r3, r3, #8
 800024e:	431a      	orrs	r2, r3
 8000250:	4b71      	ldr	r3, [pc, #452]	@ (8000418 <main+0x250>)
 8000252:	799b      	ldrb	r3, [r3, #6]
 8000254:	041b      	lsls	r3, r3, #16
 8000256:	431a      	orrs	r2, r3
 8000258:	4b6f      	ldr	r3, [pc, #444]	@ (8000418 <main+0x250>)
 800025a:	79db      	ldrb	r3, [r3, #7]
 800025c:	061b      	lsls	r3, r3, #24
 800025e:	4313      	orrs	r3, r2
 8000260:	f8c7 3a8c 	str.w	r3, [r7, #2700]	@ 0xa8c
  // led rosso fisso -> ricezione metadati avvenuta
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000264:	2201      	movs	r2, #1
 8000266:	2101      	movs	r1, #1
 8000268:	4869      	ldr	r0, [pc, #420]	@ (8000410 <main+0x248>)
 800026a:	f000 fea3 	bl	8000fb4 <HAL_GPIO_WritePin>



  // led blu che lampeggia -> Microcontrollore sta ricevendo i dati
	while(rx_complete == 0){
 800026e:	e00f      	b.n	8000290 <main+0xc8>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000270:	2201      	movs	r2, #1
 8000272:	2110      	movs	r1, #16
 8000274:	4869      	ldr	r0, [pc, #420]	@ (800041c <main+0x254>)
 8000276:	f000 fe9d 	bl	8000fb4 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800027a:	2064      	movs	r0, #100	@ 0x64
 800027c:	f000 fbea 	bl	8000a54 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2110      	movs	r1, #16
 8000284:	4865      	ldr	r0, [pc, #404]	@ (800041c <main+0x254>)
 8000286:	f000 fe95 	bl	8000fb4 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800028a:	2064      	movs	r0, #100	@ 0x64
 800028c:	f000 fbe2 	bl	8000a54 <HAL_Delay>
	while(rx_complete == 0){
 8000290:	4b63      	ldr	r3, [pc, #396]	@ (8000420 <main+0x258>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	b2db      	uxtb	r3, r3
 8000296:	2b00      	cmp	r3, #0
 8000298:	d0ea      	beq.n	8000270 <main+0xa8>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2110      	movs	r1, #16
 800029e:	485f      	ldr	r0, [pc, #380]	@ (800041c <main+0x254>)
 80002a0:	f000 fe88 	bl	8000fb4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80002a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002a8:	f000 fbd4 	bl	8000a54 <HAL_Delay>
//		for(int j=0; j<256; j++){
//			data[i][j] = rx_buffer[k]
//		}
//	}

	for(int j=0; j<105; j++){
 80002ac:	2300      	movs	r3, #0
 80002ae:	f8c7 3a9c 	str.w	r3, [r7, #2716]	@ 0xa9c
 80002b2:	e08a      	b.n	80003ca <main+0x202>
		Complesso x[128];
		Complesso X[128];
		float magnitude[128];
		for(int i=0; i<128; i++){
 80002b4:	2300      	movs	r3, #0
 80002b6:	f8c7 3a98 	str.w	r3, [r7, #2712]	@ 0xa98
 80002ba:	e03d      	b.n	8000338 <main+0x170>
			x[i].re = (float)(((rx_buffer[j*128+i]/255.0f) * (massimo-minimo)) + minimo);
 80002bc:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 80002c0:	01da      	lsls	r2, r3, #7
 80002c2:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 80002c6:	4413      	add	r3, r2
 80002c8:	4a53      	ldr	r2, [pc, #332]	@ (8000418 <main+0x250>)
 80002ca:	5cd3      	ldrb	r3, [r2, r3]
 80002cc:	ee07 3a90 	vmov	s15, r3
 80002d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002d4:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8000424 <main+0x25c>
 80002d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80002dc:	f8d7 2a90 	ldr.w	r2, [r7, #2704]	@ 0xa90
 80002e0:	f8d7 3a8c 	ldr.w	r3, [r7, #2700]	@ 0xa8c
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	ee07 3a90 	vmov	s15, r3
 80002ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80002f2:	f8d7 3a8c 	ldr.w	r3, [r7, #2700]	@ 0xa8c
 80002f6:	ee07 3a90 	vmov	s15, r3
 80002fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000302:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8000306:	f6a3 0294 	subw	r2, r3, #2196	@ 0x894
 800030a:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 800030e:	00db      	lsls	r3, r3, #3
 8000310:	4413      	add	r3, r2
 8000312:	edc3 7a00 	vstr	s15, [r3]
			x[i].im = 0;
 8000316:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800031a:	f6a3 0294 	subw	r2, r3, #2196	@ 0x894
 800031e:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 8000322:	00db      	lsls	r3, r3, #3
 8000324:	4413      	add	r3, r2
 8000326:	3304      	adds	r3, #4
 8000328:	f04f 0200 	mov.w	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
		for(int i=0; i<128; i++){
 800032e:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 8000332:	3301      	adds	r3, #1
 8000334:	f8c7 3a98 	str.w	r3, [r7, #2712]	@ 0xa98
 8000338:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 800033c:	2b7f      	cmp	r3, #127	@ 0x7f
 800033e:	ddbd      	ble.n	80002bc <main+0xf4>
		}
		arm_fft(x,X,128);
 8000340:	f207 610c 	addw	r1, r7, #1548	@ 0x60c
 8000344:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8000348:	2280      	movs	r2, #128	@ 0x80
 800034a:	4618      	mov	r0, r3
 800034c:	f008 fc84 	bl	8008c58 <arm_fft>
		fft_to_spectrogram(X,magnitude, 128, -65.0f);
 8000350:	f107 010c 	add.w	r1, r7, #12
 8000354:	f207 630c 	addw	r3, r7, #1548	@ 0x60c
 8000358:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8000428 <main+0x260>
 800035c:	2280      	movs	r2, #128	@ 0x80
 800035e:	4618      	mov	r0, r3
 8000360:	f008 fd20 	bl	8008da4 <fft_to_spectrogram>
		for(int l=0; l<128; l++){
 8000364:	2300      	movs	r3, #0
 8000366:	f8c7 3a94 	str.w	r3, [r7, #2708]	@ 0xa94
 800036a:	e01f      	b.n	80003ac <main+0x1e4>
		  indici[l] = (uint8_t)(magnitude[l]*255);
 800036c:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8000370:	f6a3 2294 	subw	r2, r3, #2708	@ 0xa94
 8000374:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 8000378:	009b      	lsls	r3, r3, #2
 800037a:	4413      	add	r3, r2
 800037c:	edd3 7a00 	vldr	s15, [r3]
 8000380:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8000424 <main+0x25c>
 8000384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800038c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000390:	793b      	ldrb	r3, [r7, #4]
 8000392:	b2d9      	uxtb	r1, r3
 8000394:	f607 220c 	addw	r2, r7, #2572	@ 0xa0c
 8000398:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 800039c:	4413      	add	r3, r2
 800039e:	460a      	mov	r2, r1
 80003a0:	701a      	strb	r2, [r3, #0]
		for(int l=0; l<128; l++){
 80003a2:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 80003a6:	3301      	adds	r3, #1
 80003a8:	f8c7 3a94 	str.w	r3, [r7, #2708]	@ 0xa94
 80003ac:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 80003b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80003b2:	dddb      	ble.n	800036c <main+0x1a4>
		}
		CDC_Transmit_FS(indici, 128);
 80003b4:	f607 230c 	addw	r3, r7, #2572	@ 0xa0c
 80003b8:	2180      	movs	r1, #128	@ 0x80
 80003ba:	4618      	mov	r0, r3
 80003bc:	f008 f842 	bl	8008444 <CDC_Transmit_FS>
	for(int j=0; j<105; j++){
 80003c0:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 80003c4:	3301      	adds	r3, #1
 80003c6:	f8c7 3a9c 	str.w	r3, [r7, #2716]	@ 0xa9c
 80003ca:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 80003ce:	2b68      	cmp	r3, #104	@ 0x68
 80003d0:	f77f af70 	ble.w	80002b4 <main+0xec>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80003d4:	2201      	movs	r2, #1
 80003d6:	2101      	movs	r1, #1
 80003d8:	480d      	ldr	r0, [pc, #52]	@ (8000410 <main+0x248>)
 80003da:	f000 fdeb 	bl	8000fb4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80003de:	2201      	movs	r2, #1
 80003e0:	2110      	movs	r1, #16
 80003e2:	480e      	ldr	r0, [pc, #56]	@ (800041c <main+0x254>)
 80003e4:	f000 fde6 	bl	8000fb4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80003e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003ec:	f000 fb32 	bl	8000a54 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2101      	movs	r1, #1
 80003f4:	4806      	ldr	r0, [pc, #24]	@ (8000410 <main+0x248>)
 80003f6:	f000 fddd 	bl	8000fb4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2110      	movs	r1, #16
 80003fe:	4807      	ldr	r0, [pc, #28]	@ (800041c <main+0x254>)
 8000400:	f000 fdd8 	bl	8000fb4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000404:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000408:	f000 fb24 	bl	8000a54 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800040c:	bf00      	nop
 800040e:	e7e1      	b.n	80003d4 <main+0x20c>
 8000410:	48000400 	.word	0x48000400
 8000414:	200039ef 	.word	0x200039ef
 8000418:	2000056c 	.word	0x2000056c
 800041c:	48000800 	.word	0x48000800
 8000420:	200039ee 	.word	0x200039ee
 8000424:	437f0000 	.word	0x437f0000
 8000428:	c2820000 	.word	0xc2820000

0800042c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b09e      	sub	sp, #120	@ 0x78
 8000430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000432:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000436:	2228      	movs	r2, #40	@ 0x28
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f008 fd5c 	bl	8008ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000440:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]
 800044e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000450:	463b      	mov	r3, r7
 8000452:	223c      	movs	r2, #60	@ 0x3c
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f008 fd4e 	bl	8008ef8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800045c:	2303      	movs	r3, #3
 800045e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000460:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000464:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046a:	2301      	movs	r3, #1
 800046c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800046e:	2310      	movs	r3, #16
 8000470:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000472:	2302      	movs	r3, #2
 8000474:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000476:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800047a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800047c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000480:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000482:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000486:	4618      	mov	r0, r3
 8000488:	f002 fba8 	bl	8002bdc <HAL_RCC_OscConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000492:	f000 f953 	bl	800073c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000496:	230f      	movs	r3, #15
 8000498:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049a:	2302      	movs	r3, #2
 800049c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a8:	2300      	movs	r3, #0
 80004aa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004b0:	2101      	movs	r1, #1
 80004b2:	4618      	mov	r0, r3
 80004b4:	f003 fba0 	bl	8003bf8 <HAL_RCC_ClockConfig>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004be:	f000 f93d 	bl	800073c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80004c2:	4b0a      	ldr	r3, [pc, #40]	@ (80004ec <SystemClock_Config+0xc0>)
 80004c4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80004ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80004ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d0:	463b      	mov	r3, r7
 80004d2:	4618      	mov	r0, r3
 80004d4:	f003 fd52 	bl	8003f7c <HAL_RCCEx_PeriphCLKConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80004de:	f000 f92d 	bl	800073c <Error_Handler>
  }
}
 80004e2:	bf00      	nop
 80004e4:	3778      	adds	r7, #120	@ 0x78
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	00020020 	.word	0x00020020

080004f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000564 <MX_I2C1_Init+0x74>)
 80004f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000568 <MX_I2C1_Init+0x78>)
 80004f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000564 <MX_I2C1_Init+0x74>)
 80004fc:	4a1b      	ldr	r2, [pc, #108]	@ (800056c <MX_I2C1_Init+0x7c>)
 80004fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000500:	4b18      	ldr	r3, [pc, #96]	@ (8000564 <MX_I2C1_Init+0x74>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000506:	4b17      	ldr	r3, [pc, #92]	@ (8000564 <MX_I2C1_Init+0x74>)
 8000508:	2201      	movs	r2, #1
 800050a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800050c:	4b15      	ldr	r3, [pc, #84]	@ (8000564 <MX_I2C1_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000512:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <MX_I2C1_Init+0x74>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000518:	4b12      	ldr	r3, [pc, #72]	@ (8000564 <MX_I2C1_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800051e:	4b11      	ldr	r3, [pc, #68]	@ (8000564 <MX_I2C1_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000524:	4b0f      	ldr	r3, [pc, #60]	@ (8000564 <MX_I2C1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800052a:	480e      	ldr	r0, [pc, #56]	@ (8000564 <MX_I2C1_Init+0x74>)
 800052c:	f000 fd5a 	bl	8000fe4 <HAL_I2C_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000536:	f000 f901 	bl	800073c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800053a:	2100      	movs	r1, #0
 800053c:	4809      	ldr	r0, [pc, #36]	@ (8000564 <MX_I2C1_Init+0x74>)
 800053e:	f000 fdec 	bl	800111a <HAL_I2CEx_ConfigAnalogFilter>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000548:	f000 f8f8 	bl	800073c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800054c:	2100      	movs	r1, #0
 800054e:	4805      	ldr	r0, [pc, #20]	@ (8000564 <MX_I2C1_Init+0x74>)
 8000550:	f000 fe2e 	bl	80011b0 <HAL_I2CEx_ConfigDigitalFilter>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800055a:	f000 f8ef 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	200001e8 	.word	0x200001e8
 8000568:	40005400 	.word	0x40005400
 800056c:	2000090e 	.word	0x2000090e

08000570 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000574:	4b1b      	ldr	r3, [pc, #108]	@ (80005e4 <MX_SPI1_Init+0x74>)
 8000576:	4a1c      	ldr	r2, [pc, #112]	@ (80005e8 <MX_SPI1_Init+0x78>)
 8000578:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800057a:	4b1a      	ldr	r3, [pc, #104]	@ (80005e4 <MX_SPI1_Init+0x74>)
 800057c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000580:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000582:	4b18      	ldr	r3, [pc, #96]	@ (80005e4 <MX_SPI1_Init+0x74>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000588:	4b16      	ldr	r3, [pc, #88]	@ (80005e4 <MX_SPI1_Init+0x74>)
 800058a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800058e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000590:	4b14      	ldr	r3, [pc, #80]	@ (80005e4 <MX_SPI1_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000596:	4b13      	ldr	r3, [pc, #76]	@ (80005e4 <MX_SPI1_Init+0x74>)
 8000598:	2200      	movs	r2, #0
 800059a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800059c:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <MX_SPI1_Init+0x74>)
 800059e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <MX_SPI1_Init+0x74>)
 80005a6:	2208      	movs	r2, #8
 80005a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <MX_SPI1_Init+0x74>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <MX_SPI1_Init+0x74>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <MX_SPI1_Init+0x74>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005bc:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <MX_SPI1_Init+0x74>)
 80005be:	2207      	movs	r2, #7
 80005c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005c2:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <MX_SPI1_Init+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <MX_SPI1_Init+0x74>)
 80005ca:	2208      	movs	r2, #8
 80005cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <MX_SPI1_Init+0x74>)
 80005d0:	f003 fe82 	bl	80042d8 <HAL_SPI_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005da:	f000 f8af 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000023c 	.word	0x2000023c
 80005e8:	40013000 	.word	0x40013000

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000602:	4b4a      	ldr	r3, [pc, #296]	@ (800072c <MX_GPIO_Init+0x140>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a49      	ldr	r2, [pc, #292]	@ (800072c <MX_GPIO_Init+0x140>)
 8000608:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b47      	ldr	r3, [pc, #284]	@ (800072c <MX_GPIO_Init+0x140>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b44      	ldr	r3, [pc, #272]	@ (800072c <MX_GPIO_Init+0x140>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a43      	ldr	r2, [pc, #268]	@ (800072c <MX_GPIO_Init+0x140>)
 8000620:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b41      	ldr	r3, [pc, #260]	@ (800072c <MX_GPIO_Init+0x140>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000632:	4b3e      	ldr	r3, [pc, #248]	@ (800072c <MX_GPIO_Init+0x140>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a3d      	ldr	r2, [pc, #244]	@ (800072c <MX_GPIO_Init+0x140>)
 8000638:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b3b      	ldr	r3, [pc, #236]	@ (800072c <MX_GPIO_Init+0x140>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b38      	ldr	r3, [pc, #224]	@ (800072c <MX_GPIO_Init+0x140>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a37      	ldr	r2, [pc, #220]	@ (800072c <MX_GPIO_Init+0x140>)
 8000650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000654:	6153      	str	r3, [r2, #20]
 8000656:	4b35      	ldr	r3, [pc, #212]	@ (800072c <MX_GPIO_Init+0x140>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b32      	ldr	r3, [pc, #200]	@ (800072c <MX_GPIO_Init+0x140>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a31      	ldr	r2, [pc, #196]	@ (800072c <MX_GPIO_Init+0x140>)
 8000668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b2f      	ldr	r3, [pc, #188]	@ (800072c <MX_GPIO_Init+0x140>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800067a:	2200      	movs	r2, #0
 800067c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000680:	482b      	ldr	r0, [pc, #172]	@ (8000730 <MX_GPIO_Init+0x144>)
 8000682:	f000 fc97 	bl	8000fb4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2110      	movs	r1, #16
 800068a:	482a      	ldr	r0, [pc, #168]	@ (8000734 <MX_GPIO_Init+0x148>)
 800068c:	f000 fc92 	bl	8000fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	4828      	ldr	r0, [pc, #160]	@ (8000738 <MX_GPIO_Init+0x14c>)
 8000696:	f000 fc8d 	bl	8000fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800069a:	2337      	movs	r3, #55	@ 0x37
 800069c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800069e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	4820      	ldr	r0, [pc, #128]	@ (8000730 <MX_GPIO_Init+0x144>)
 80006b0:	f000 fb06 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006b4:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80006b8:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	4818      	ldr	r0, [pc, #96]	@ (8000730 <MX_GPIO_Init+0x144>)
 80006ce:	f000 faf7 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e8:	f000 faea 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006ec:	2310      	movs	r3, #16
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	480c      	ldr	r0, [pc, #48]	@ (8000734 <MX_GPIO_Init+0x148>)
 8000704:	f000 fadc 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000708:	2301      	movs	r3, #1
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	4806      	ldr	r0, [pc, #24]	@ (8000738 <MX_GPIO_Init+0x14c>)
 8000720:	f000 face 	bl	8000cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	@ 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000
 8000730:	48001000 	.word	0x48001000
 8000734:	48000800 	.word	0x48000800
 8000738:	48000400 	.word	0x48000400

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <Error_Handler+0x8>

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <HAL_MspInit+0x44>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a0e      	ldr	r2, [pc, #56]	@ (800078c <HAL_MspInit+0x44>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <HAL_MspInit+0x44>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <HAL_MspInit+0x44>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a08      	ldr	r2, [pc, #32]	@ (800078c <HAL_MspInit+0x44>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <HAL_MspInit+0x44>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800077e:	2007      	movs	r0, #7
 8000780:	f000 fa5c 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000

08000790 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	@ 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a17      	ldr	r2, [pc, #92]	@ (800080c <HAL_I2C_MspInit+0x7c>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d127      	bne.n	8000802 <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <HAL_I2C_MspInit+0x80>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a16      	ldr	r2, [pc, #88]	@ (8000810 <HAL_I2C_MspInit+0x80>)
 80007b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <HAL_I2C_MspInit+0x80>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80007ca:	23c0      	movs	r3, #192	@ 0xc0
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ce:	2312      	movs	r3, #18
 80007d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007da:	2304      	movs	r3, #4
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	480b      	ldr	r0, [pc, #44]	@ (8000814 <HAL_I2C_MspInit+0x84>)
 80007e6:	f000 fa6b 	bl	8000cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <HAL_I2C_MspInit+0x80>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a08      	ldr	r2, [pc, #32]	@ (8000810 <HAL_I2C_MspInit+0x80>)
 80007f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_I2C_MspInit+0x80>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	@ 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40005400 	.word	0x40005400
 8000810:	40021000 	.word	0x40021000
 8000814:	48000400 	.word	0x48000400

08000818 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a17      	ldr	r2, [pc, #92]	@ (8000894 <HAL_SPI_MspInit+0x7c>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d128      	bne.n	800088c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800083a:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <HAL_SPI_MspInit+0x80>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4a16      	ldr	r2, [pc, #88]	@ (8000898 <HAL_SPI_MspInit+0x80>)
 8000840:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000844:	6193      	str	r3, [r2, #24]
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <HAL_SPI_MspInit+0x80>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <HAL_SPI_MspInit+0x80>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	4a10      	ldr	r2, [pc, #64]	@ (8000898 <HAL_SPI_MspInit+0x80>)
 8000858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800085c:	6153      	str	r3, [r2, #20]
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <HAL_SPI_MspInit+0x80>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800086a:	23e0      	movs	r3, #224	@ 0xe0
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800087a:	2305      	movs	r3, #5
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000888:	f000 fa1a 	bl	8000cc0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	@ 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40013000 	.word	0x40013000
 8000898:	40021000 	.word	0x40021000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <NMI_Handler+0x4>

080008a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <MemManage_Handler+0x4>

080008b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f2:	f000 f88f 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000900:	4802      	ldr	r0, [pc, #8]	@ (800090c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000902:	f000 fd8e 	bl	8001422 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200043f0 	.word	0x200043f0

08000910 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	@ (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000934:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800096c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000938:	f7ff ffea 	bl	8000910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480c      	ldr	r0, [pc, #48]	@ (8000970 <LoopForever+0x6>)
  ldr r1, =_edata
 800093e:	490d      	ldr	r1, [pc, #52]	@ (8000974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <LoopForever+0xe>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000954:	4c0a      	ldr	r4, [pc, #40]	@ (8000980 <LoopForever+0x16>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000962:	f008 fad7 	bl	8008f14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000966:	f7ff fc2f 	bl	80001c8 <main>

0800096a <LoopForever>:

LoopForever:
    b LoopForever
 800096a:	e7fe      	b.n	800096a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800096c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000978:	0800a20c 	.word	0x0800a20c
  ldr r2, =_sbss
 800097c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000980:	20008a1c 	.word	0x20008a1c

08000984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_2_IRQHandler>
	...

08000988 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <HAL_Init+0x28>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	@ (80009b0 <HAL_Init+0x28>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f94f 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 f808 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff fed0 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40022000 	.word	0x40022000

080009b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <HAL_InitTick+0x54>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_InitTick+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f967 	bl	8000ca6 <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e00e      	b.n	8000a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d80a      	bhi.n	80009fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f000 f92f 	bl	8000c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f4:	4a06      	ldr	r2, [pc, #24]	@ (8000a10 <HAL_InitTick+0x5c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008
 8000a38:	200002a0 	.word	0x200002a0

08000a3c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a40:	4b03      	ldr	r3, [pc, #12]	@ (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	200002a0 	.word	0x200002a0

08000a54 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff ffee 	bl	8000a3c <HAL_GetTick>
 8000a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d005      	beq.n	8000a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <HAL_Delay+0x44>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a7a:	bf00      	nop
 8000a7c:	f7ff ffde 	bl	8000a3c <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d8f7      	bhi.n	8000a7c <HAL_Delay+0x28>
  {
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	@ (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db0b      	blt.n	8000b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	4907      	ldr	r1, [pc, #28]	@ (8000b38 <__NVIC_EnableIRQ+0x38>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	@ (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	@ (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	@ 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	@ 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c08:	d301      	bcc.n	8000c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00f      	b.n	8000c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <SysTick_Config+0x40>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c16:	210f      	movs	r1, #15
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f7ff ff8e 	bl	8000b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c20:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <SysTick_Config+0x40>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c26:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <SysTick_Config+0x40>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	e000e010 	.word	0xe000e010

08000c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff29 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c64:	f7ff ff3e 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f7ff ff8e 	bl	8000b90 <NVIC_EncodePriority>
 8000c74:	4602      	mov	r2, r0
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff5d 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff31 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffa2 	bl	8000bf8 <SysTick_Config>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	e154      	b.n	8000f7a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 8146 	beq.w	8000f74 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d005      	beq.n	8000d00 <HAL_GPIO_Init+0x40>
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d130      	bne.n	8000d62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d36:	2201      	movs	r2, #1
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	091b      	lsrs	r3, r3, #4
 8000d4c:	f003 0201 	and.w	r2, r3, #1
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d017      	beq.n	8000d9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d123      	bne.n	8000df2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	691a      	ldr	r2, [r3, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	08da      	lsrs	r2, r3, #3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3208      	adds	r2, #8
 8000dec:	6939      	ldr	r1, [r7, #16]
 8000dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0203 	and.w	r2, r3, #3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 80a0 	beq.w	8000f74 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e34:	4b58      	ldr	r3, [pc, #352]	@ (8000f98 <HAL_GPIO_Init+0x2d8>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a57      	ldr	r2, [pc, #348]	@ (8000f98 <HAL_GPIO_Init+0x2d8>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b55      	ldr	r3, [pc, #340]	@ (8000f98 <HAL_GPIO_Init+0x2d8>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e4c:	4a53      	ldr	r2, [pc, #332]	@ (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	220f      	movs	r2, #15
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e76:	d019      	beq.n	8000eac <HAL_GPIO_Init+0x1ec>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a49      	ldr	r2, [pc, #292]	@ (8000fa0 <HAL_GPIO_Init+0x2e0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d013      	beq.n	8000ea8 <HAL_GPIO_Init+0x1e8>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a48      	ldr	r2, [pc, #288]	@ (8000fa4 <HAL_GPIO_Init+0x2e4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d00d      	beq.n	8000ea4 <HAL_GPIO_Init+0x1e4>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a47      	ldr	r2, [pc, #284]	@ (8000fa8 <HAL_GPIO_Init+0x2e8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d007      	beq.n	8000ea0 <HAL_GPIO_Init+0x1e0>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a46      	ldr	r2, [pc, #280]	@ (8000fac <HAL_GPIO_Init+0x2ec>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d101      	bne.n	8000e9c <HAL_GPIO_Init+0x1dc>
 8000e98:	2304      	movs	r3, #4
 8000e9a:	e008      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	e006      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e004      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e002      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <HAL_GPIO_Init+0x1ee>
 8000eac:	2300      	movs	r3, #0
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	f002 0203 	and.w	r2, r2, #3
 8000eb4:	0092      	lsls	r2, r2, #2
 8000eb6:	4093      	lsls	r3, r2
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ebe:	4937      	ldr	r1, [pc, #220]	@ (8000f9c <HAL_GPIO_Init+0x2dc>)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ecc:	4b38      	ldr	r3, [pc, #224]	@ (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ef0:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f1a:	4a25      	ldr	r2, [pc, #148]	@ (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f20:	4b23      	ldr	r3, [pc, #140]	@ (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f44:	4a1a      	ldr	r2, [pc, #104]	@ (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f6e:	4a10      	ldr	r2, [pc, #64]	@ (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	3301      	adds	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	fa22 f303 	lsr.w	r3, r2, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f47f aea3 	bne.w	8000cd0 <HAL_GPIO_Init+0x10>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	48000400 	.word	0x48000400
 8000fa4:	48000800 	.word	0x48000800
 8000fa8:	48000c00 	.word	0x48000c00
 8000fac:	48001000 	.word	0x48001000
 8000fb0:	40010400 	.word	0x40010400

08000fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc4:	787b      	ldrb	r3, [r7, #1]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fca:	887a      	ldrh	r2, [r7, #2]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fd0:	e002      	b.n	8000fd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fd2:	887a      	ldrh	r2, [r7, #2]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e08d      	b.n	8001112 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff fbc0 	bl	8000790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2224      	movs	r2, #36	@ 0x24
 8001014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0201 	bic.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001034:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001044:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d107      	bne.n	800105e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	e006      	b.n	800106c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800106a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d108      	bne.n	8001086 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	e007      	b.n	8001096 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001094:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	6812      	ldr	r2, [r2, #0]
 80010a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691a      	ldr	r2, [r3, #16]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69d9      	ldr	r1, [r3, #28]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a1a      	ldr	r2, [r3, #32]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0201 	orr.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2220      	movs	r2, #32
 80010fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b20      	cmp	r3, #32
 800112e:	d138      	bne.n	80011a2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001136:	2b01      	cmp	r3, #1
 8001138:	d101      	bne.n	800113e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800113a:	2302      	movs	r3, #2
 800113c:	e032      	b.n	80011a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2224      	movs	r2, #36	@ 0x24
 800114a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0201 	bic.w	r2, r2, #1
 800115c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800116c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6819      	ldr	r1, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	430a      	orrs	r2, r1
 800117c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0201 	orr.w	r2, r2, #1
 800118c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2220      	movs	r2, #32
 8001192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	e000      	b.n	80011a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80011a2:	2302      	movs	r3, #2
  }
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b20      	cmp	r3, #32
 80011c4:	d139      	bne.n	800123a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e033      	b.n	800123c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2224      	movs	r2, #36	@ 0x24
 80011e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001202:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0201 	orr.w	r2, r2, #1
 8001224:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2220      	movs	r2, #32
 800122a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800123a:	2302      	movs	r3, #2
  }
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0b9      	b.n	80013ce <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d106      	bne.n	8001274 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f007 fa1e 	bl	80086b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2203      	movs	r2, #3
 8001278:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f003 f8eb 	bl	800445c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001286:	2300      	movs	r3, #0
 8001288:	73fb      	strb	r3, [r7, #15]
 800128a:	e03e      	b.n	800130a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	440b      	add	r3, r1
 800129a:	3311      	adds	r3, #17
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	440b      	add	r3, r1
 80012ae:	3310      	adds	r3, #16
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	440b      	add	r3, r1
 80012c2:	3313      	adds	r3, #19
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	440b      	add	r3, r1
 80012d6:	3320      	adds	r3, #32
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	440b      	add	r3, r1
 80012ea:	3324      	adds	r3, #36	@ 0x24
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	3301      	adds	r3, #1
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	791b      	ldrb	r3, [r3, #4]
 800130e:	7bfa      	ldrb	r2, [r7, #15]
 8001310:	429a      	cmp	r2, r3
 8001312:	d3bb      	bcc.n	800128c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001314:	2300      	movs	r3, #0
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e044      	b.n	80013a4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800131a:	7bfa      	ldrb	r2, [r7, #15]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	440b      	add	r3, r1
 800133e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	440b      	add	r3, r1
 8001354:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	440b      	add	r3, r1
 800136a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001372:	7bfa      	ldrb	r2, [r7, #15]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	440b      	add	r3, r1
 8001380:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	3301      	adds	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	791b      	ldrb	r3, [r3, #4]
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d3b5      	bcc.n	800131a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3304      	adds	r3, #4
 80013b6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013ba:	f003 f86a 	bl	8004492 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <HAL_PCD_Start+0x16>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e016      	b.n	800141a <HAL_PCD_Start+0x44>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 f818 	bl	800442e <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80013fe:	2101      	movs	r1, #1
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f007 fbf1 	bl	8008be8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f005 fad6 	bl	80069bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f005 facf 	bl	80069d2 <USB_ReadInterrupts>
 8001434:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 fab1 	bl	80019a8 <PCD_EP_ISR_Handler>

    return;
 8001446:	e0bd      	b.n	80015c4 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800144e:	2b00      	cmp	r3, #0
 8001450:	d013      	beq.n	800147a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800145a:	b29a      	uxth	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001464:	b292      	uxth	r2, r2
 8001466:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f007 f9c1 	bl	80087f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001470:	2100      	movs	r1, #0
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f8a9 	bl	80015ca <HAL_PCD_SetAddress>

    return;
 8001478:	e0a4      	b.n	80015c4 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00c      	beq.n	800149e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800148c:	b29a      	uxth	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001496:	b292      	uxth	r2, r2
 8001498:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800149c:	e092      	b.n	80015c4 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00c      	beq.n	80014c2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80014ba:	b292      	uxth	r2, r2
 80014bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80014c0:	e080      	b.n	80015c4 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d027      	beq.n	800151c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0204 	bic.w	r2, r2, #4
 80014de:	b292      	uxth	r2, r2
 80014e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0208 	bic.w	r2, r2, #8
 80014f6:	b292      	uxth	r2, r2
 80014f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f007 f9b1 	bl	8008864 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800150a:	b29a      	uxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001514:	b292      	uxth	r2, r2
 8001516:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800151a:	e053      	b.n	80015c4 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001522:	2b00      	cmp	r3, #0
 8001524:	d027      	beq.n	8001576 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800152e:	b29a      	uxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0208 	orr.w	r2, r2, #8
 8001538:	b292      	uxth	r2, r2
 800153a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001546:	b29a      	uxth	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001550:	b292      	uxth	r2, r2
 8001552:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800155e:	b29a      	uxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f042 0204 	orr.w	r2, r2, #4
 8001568:	b292      	uxth	r2, r2
 800156a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f007 f95e 	bl	8008830 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001574:	e026      	b.n	80015c4 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00f      	beq.n	80015a0 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001588:	b29a      	uxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001592:	b292      	uxth	r2, r2
 8001594:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f007 f91c 	bl	80087d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800159e:	e011      	b.n	80015c4 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00c      	beq.n	80015c4 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015bc:	b292      	uxth	r2, r2
 80015be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80015c2:	bf00      	nop
  }
}
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_PCD_SetAddress+0x1a>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e012      	b.n	800160a <HAL_PCD_SetAddress+0x40>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	78fa      	ldrb	r2, [r7, #3]
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f005 f9ca 	bl	8006994 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b084      	sub	sp, #16
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	4608      	mov	r0, r1
 800161c:	4611      	mov	r1, r2
 800161e:	461a      	mov	r2, r3
 8001620:	4603      	mov	r3, r0
 8001622:	70fb      	strb	r3, [r7, #3]
 8001624:	460b      	mov	r3, r1
 8001626:	803b      	strh	r3, [r7, #0]
 8001628:	4613      	mov	r3, r2
 800162a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001630:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001634:	2b00      	cmp	r3, #0
 8001636:	da0e      	bge.n	8001656 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	f003 0207 	and.w	r2, r3, #7
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	3310      	adds	r3, #16
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	4413      	add	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2201      	movs	r2, #1
 8001652:	705a      	strb	r2, [r3, #1]
 8001654:	e00e      	b.n	8001674 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	f003 0207 	and.w	r2, r3, #7
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	b2da      	uxtb	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001680:	883a      	ldrh	r2, [r7, #0]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	78ba      	ldrb	r2, [r7, #2]
 800168a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800168c:	78bb      	ldrb	r3, [r7, #2]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d102      	bne.n	8001698 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_PCD_EP_Open+0x94>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e00e      	b.n	80016c4 <HAL_PCD_EP_Open+0xb2>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68f9      	ldr	r1, [r7, #12]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f002 ff0b 	bl	80044d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80016c2:	7afb      	ldrb	r3, [r7, #11]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	da0e      	bge.n	80016fe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	f003 0207 	and.w	r2, r3, #7
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	3310      	adds	r3, #16
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2201      	movs	r2, #1
 80016fa:	705a      	strb	r2, [r3, #1]
 80016fc:	e00e      	b.n	800171c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	f003 0207 	and.w	r2, r3, #7
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	b2da      	uxtb	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_PCD_EP_Close+0x6a>
 8001732:	2302      	movs	r3, #2
 8001734:	e00e      	b.n	8001754 <HAL_PCD_EP_Close+0x88>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68f9      	ldr	r1, [r7, #12]
 8001744:	4618      	mov	r0, r3
 8001746:	f003 fa87 	bl	8004c58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	460b      	mov	r3, r1
 800176a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800176c:	7afb      	ldrb	r3, [r7, #11]
 800176e:	f003 0207 	and.w	r2, r3, #7
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4413      	add	r3, r2
 8001782:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2200      	movs	r2, #0
 800179a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800179c:	7afb      	ldrb	r3, [r7, #11]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6979      	ldr	r1, [r7, #20]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 fc3f 	bl	8005032 <USB_EPStartXfer>

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	f003 0207 	and.w	r2, r3, #7
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80017e0:	681b      	ldr	r3, [r3, #0]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	460b      	mov	r3, r1
 80017fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017fe:	7afb      	ldrb	r3, [r7, #11]
 8001800:	f003 0207 	and.w	r2, r3, #7
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	3310      	adds	r3, #16
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4413      	add	r3, r2
 8001812:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2201      	movs	r2, #1
 8001838:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800183a:	7afb      	ldrb	r3, [r7, #11]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	b2da      	uxtb	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6979      	ldr	r1, [r7, #20]
 800184c:	4618      	mov	r0, r3
 800184e:	f003 fbf0 	bl	8005032 <USB_EPStartXfer>

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	7912      	ldrb	r2, [r2, #4]
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e03e      	b.n	80018f8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800187a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800187e:	2b00      	cmp	r3, #0
 8001880:	da0e      	bge.n	80018a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	f003 0207 	and.w	r2, r3, #7
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	3310      	adds	r3, #16
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2201      	movs	r2, #1
 800189c:	705a      	strb	r2, [r3, #1]
 800189e:	e00c      	b.n	80018ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2201      	movs	r2, #1
 80018be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_PCD_EP_SetStall+0x7e>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e00e      	b.n	80018f8 <HAL_PCD_EP_SetStall+0x9c>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68f9      	ldr	r1, [r7, #12]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f004 ff54 	bl	8006796 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	7912      	ldrb	r2, [r2, #4]
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e040      	b.n	80019a0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800191e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001922:	2b00      	cmp	r3, #0
 8001924:	da0e      	bge.n	8001944 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	f003 0207 	and.w	r2, r3, #7
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	3310      	adds	r3, #16
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2201      	movs	r2, #1
 8001940:	705a      	strb	r2, [r3, #1]
 8001942:	e00e      	b.n	8001962 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	f003 0207 	and.w	r2, r3, #7
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	b2da      	uxtb	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800197a:	2b01      	cmp	r3, #1
 800197c:	d101      	bne.n	8001982 <HAL_PCD_EP_ClrStall+0x82>
 800197e:	2302      	movs	r3, #2
 8001980:	e00e      	b.n	80019a0 <HAL_PCD_EP_ClrStall+0xa0>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68f9      	ldr	r1, [r7, #12]
 8001990:	4618      	mov	r0, r3
 8001992:	f004 ff51 	bl	8006838 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b096      	sub	sp, #88	@ 0x58
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80019b0:	e3bb      	b.n	800212a <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019ba:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80019be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f003 030f 	and.w	r3, r3, #15
 80019c8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 80019cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f040 8175 	bne.w	8001cc0 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80019d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d14e      	bne.n	8001a80 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80019ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019f2:	81fb      	strh	r3, [r7, #14]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	89fb      	ldrh	r3, [r7, #14]
 80019fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3310      	adds	r3, #16
 8001a0a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4413      	add	r3, r2
 8001a20:	3302      	adds	r3, #2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	4413      	add	r3, r2
 8001a2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	441a      	add	r2, r3
 8001a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a44:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a46:	2100      	movs	r1, #0
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f006 feaa 	bl	80087a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	7b1b      	ldrb	r3, [r3, #12]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 8368 	beq.w	800212a <PCD_EP_ISR_Handler+0x782>
 8001a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f040 8363 	bne.w	800212a <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7b1b      	ldrb	r3, [r3, #12]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	731a      	strb	r2, [r3, #12]
 8001a7e:	e354      	b.n	800212a <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a86:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a92:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d034      	beq.n	8001b08 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3306      	adds	r3, #6
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ac8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ada:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	f004 ffcf 	bl	8006a80 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001aee:	4013      	ands	r3, r2
 8001af0:	823b      	strh	r3, [r7, #16]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	8a3a      	ldrh	r2, [r7, #16]
 8001af8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001afc:	b292      	uxth	r2, r2
 8001afe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f006 fe21 	bl	8008748 <HAL_PCD_SetupStageCallback>
 8001b06:	e310      	b.n	800212a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b08:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f280 830c 	bge.w	800212a <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001b1e:	4013      	ands	r3, r2
 8001b20:	83fb      	strh	r3, [r7, #30]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	8bfa      	ldrh	r2, [r7, #30]
 8001b28:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b2c:	b292      	uxth	r2, r2
 8001b2e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	3306      	adds	r3, #6
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b5a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d019      	beq.n	8001b98 <PCD_EP_ISR_Handler+0x1f0>
 8001b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d015      	beq.n	8001b98 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b72:	6959      	ldr	r1, [r3, #20]
 8001b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b76:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b7a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	f004 ff7f 	bl	8006a80 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	441a      	add	r2, r3
 8001b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b8e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b90:	2100      	movs	r1, #0
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f006 fdea 	bl	800876c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001ba2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001ba6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 82bd 	bne.w	800212a <PCD_EP_ISR_Handler+0x782>
 8001bb0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001bb4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001bb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001bbc:	f000 82b5 	beq.w	800212a <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	801a      	strh	r2, [r3, #0]
 8001bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10a      	bne.n	8001c0e <PCD_EP_ISR_Handler+0x266>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	801a      	strh	r2, [r3, #0]
 8001c0c:	e039      	b.n	8001c82 <PCD_EP_ISR_Handler+0x2da>
 8001c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c14:	d818      	bhi.n	8001c48 <PCD_EP_ISR_Handler+0x2a0>
 8001c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	085b      	lsrs	r3, r3, #1
 8001c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <PCD_EP_ISR_Handler+0x288>
 8001c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	029b      	lsls	r3, r3, #10
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	801a      	strh	r2, [r3, #0]
 8001c46:	e01c      	b.n	8001c82 <PCD_EP_ISR_Handler+0x2da>
 8001c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	095b      	lsrs	r3, r3, #5
 8001c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <PCD_EP_ISR_Handler+0x2ba>
 8001c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	029b      	lsls	r3, r3, #10
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	4313      	orrs	r3, r2
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c92:	827b      	strh	r3, [r7, #18]
 8001c94:	8a7b      	ldrh	r3, [r7, #18]
 8001c96:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001c9a:	827b      	strh	r3, [r7, #18]
 8001c9c:	8a7b      	ldrh	r3, [r7, #18]
 8001c9e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001ca2:	827b      	strh	r3, [r7, #18]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	8a7b      	ldrh	r3, [r7, #18]
 8001caa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001cae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	8013      	strh	r3, [r2, #0]
 8001cbe:	e234      	b.n	800212a <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cd4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f280 80fc 	bge.w	8001ed6 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001d0c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d10:	b292      	uxth	r2, r2
 8001d12:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d14:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d2c:	7b1b      	ldrb	r3, [r3, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d125      	bne.n	8001d7e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	3306      	adds	r3, #6
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d5a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001d5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8092 	beq.w	8001e8c <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d6e:	6959      	ldr	r1, [r3, #20]
 8001d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d72:	88da      	ldrh	r2, [r3, #6]
 8001d74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d78:	f004 fe82 	bl	8006a80 <USB_ReadPMA>
 8001d7c:	e086      	b.n	8001e8c <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d80:	78db      	ldrb	r3, [r3, #3]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d10a      	bne.n	8001d9c <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d86:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f9d9 	bl	8002146 <HAL_PCD_EP_DB_Receive>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001d9a:	e077      	b.n	8001e8c <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001db6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	441a      	add	r2, r3
 8001dc8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001dcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001dd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001dd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dd8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d024      	beq.n	8001e44 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e22:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001e26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d02e      	beq.n	8001e8c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e34:	6959      	ldr	r1, [r3, #20]
 8001e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e38:	891a      	ldrh	r2, [r3, #8]
 8001e3a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e3e:	f004 fe1f 	bl	8006a80 <USB_ReadPMA>
 8001e42:	e023      	b.n	8001e8c <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4413      	add	r3, r2
 8001e58:	3306      	adds	r3, #6
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e6c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001e70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d009      	beq.n	8001e8c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e7e:	6959      	ldr	r1, [r3, #20]
 8001e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e82:	895a      	ldrh	r2, [r3, #10]
 8001e84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e88:	f004 fdfa 	bl	8006a80 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e94:	441a      	add	r2, r3
 8001e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e98:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ea2:	441a      	add	r2, r3
 8001ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <PCD_EP_ISR_Handler+0x514>
 8001eb0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d206      	bcs.n	8001eca <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f006 fc52 	bl	800876c <HAL_PCD_DataOutStageCallback>
 8001ec8:	e005      	b.n	8001ed6 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 f8ae 	bl	8005032 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ed6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8123 	beq.w	800212a <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ee4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	3310      	adds	r3, #16
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f12:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	441a      	add	r2, r3
 8001f24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f36:	78db      	ldrb	r3, [r3, #3]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	f040 80a2 	bne.w	8002082 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f46:	7b1b      	ldrb	r3, [r3, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8093 	beq.w	8002074 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d046      	beq.n	8001fe8 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f5c:	785b      	ldrb	r3, [r3, #1]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d126      	bne.n	8001fb0 <PCD_EP_ISR_Handler+0x608>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	4413      	add	r3, r2
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	011a      	lsls	r2, r3, #4
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	4413      	add	r3, r2
 8001f84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001f88:	623b      	str	r3, [r7, #32]
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	801a      	strh	r2, [r3, #0]
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	801a      	strh	r2, [r3, #0]
 8001fae:	e061      	b.n	8002074 <PCD_EP_ISR_Handler+0x6cc>
 8001fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fb2:	785b      	ldrb	r3, [r3, #1]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d15d      	bne.n	8002074 <PCD_EP_ISR_Handler+0x6cc>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fcc:	4413      	add	r3, r2
 8001fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	011a      	lsls	r2, r3, #4
 8001fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd8:	4413      	add	r3, r2
 8001fda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001fde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	801a      	strh	r2, [r3, #0]
 8001fe6:	e045      	b.n	8002074 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff0:	785b      	ldrb	r3, [r3, #1]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d126      	bne.n	8002044 <PCD_EP_ISR_Handler+0x69c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002004:	b29b      	uxth	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800200a:	4413      	add	r3, r2
 800200c:	637b      	str	r3, [r7, #52]	@ 0x34
 800200e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	011a      	lsls	r2, r3, #4
 8002014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002016:	4413      	add	r3, r2
 8002018:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800201c:	633b      	str	r3, [r7, #48]	@ 0x30
 800201e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002028:	b29a      	uxth	r2, r3
 800202a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800202c:	801a      	strh	r2, [r3, #0]
 800202e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800203c:	b29a      	uxth	r2, r3
 800203e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002040:	801a      	strh	r2, [r3, #0]
 8002042:	e017      	b.n	8002074 <PCD_EP_ISR_Handler+0x6cc>
 8002044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002046:	785b      	ldrb	r3, [r3, #1]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d113      	bne.n	8002074 <PCD_EP_ISR_Handler+0x6cc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002054:	b29b      	uxth	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800205a:	4413      	add	r3, r2
 800205c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800205e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	011a      	lsls	r2, r3, #4
 8002064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002066:	4413      	add	r3, r2
 8002068:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800206c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800206e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002070:	2200      	movs	r2, #0
 8002072:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f006 fb91 	bl	80087a2 <HAL_PCD_DataInStageCallback>
 8002080:	e053      	b.n	800212a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002082:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d146      	bne.n	800211c <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002096:	b29b      	uxth	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	3302      	adds	r3, #2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80020ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d907      	bls.n	80020d6 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80020c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020ce:	1ad2      	subs	r2, r2, r3
 80020d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d2:	619a      	str	r2, [r3, #24]
 80020d4:	e002      	b.n	80020dc <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80020d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80020dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d106      	bne.n	80020f2 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4619      	mov	r1, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f006 fb59 	bl	80087a2 <HAL_PCD_DataInStageCallback>
 80020f0:	e01b      	b.n	800212a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80020f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020fa:	441a      	add	r2, r3
 80020fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fe:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002102:	69da      	ldr	r2, [r3, #28]
 8002104:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002108:	441a      	add	r2, r3
 800210a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002114:	4618      	mov	r0, r3
 8002116:	f002 ff8c 	bl	8005032 <USB_EPStartXfer>
 800211a:	e006      	b.n	800212a <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800211c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002120:	461a      	mov	r2, r3
 8002122:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f91b 	bl	8002360 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002132:	b29b      	uxth	r3, r3
 8002134:	b21b      	sxth	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	f6ff ac3b 	blt.w	80019b2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3758      	adds	r7, #88	@ 0x58
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b088      	sub	sp, #32
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	4613      	mov	r3, r2
 8002152:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d07e      	beq.n	800225c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002166:	b29b      	uxth	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	3302      	adds	r3, #2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002186:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	699a      	ldr	r2, [r3, #24]
 800218c:	8b7b      	ldrh	r3, [r7, #26]
 800218e:	429a      	cmp	r2, r3
 8002190:	d306      	bcc.n	80021a0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	8b7b      	ldrh	r3, [r7, #26]
 8002198:	1ad2      	subs	r2, r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	619a      	str	r2, [r3, #24]
 800219e:	e002      	b.n	80021a6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d123      	bne.n	80021f6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021c8:	833b      	strh	r3, [r7, #24]
 80021ca:	8b3b      	ldrh	r3, [r7, #24]
 80021cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80021d0:	833b      	strh	r3, [r7, #24]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	441a      	add	r2, r3
 80021e0:	8b3b      	ldrh	r3, [r7, #24]
 80021e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01f      	beq.n	8002240 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b29b      	uxth	r3, r3
 8002212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800221a:	82fb      	strh	r3, [r7, #22]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	441a      	add	r2, r3
 800222a:	8afb      	ldrh	r3, [r7, #22]
 800222c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002230:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002234:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002238:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800223c:	b29b      	uxth	r3, r3
 800223e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002240:	8b7b      	ldrh	r3, [r7, #26]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8087 	beq.w	8002356 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	6959      	ldr	r1, [r3, #20]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	891a      	ldrh	r2, [r3, #8]
 8002254:	8b7b      	ldrh	r3, [r7, #26]
 8002256:	f004 fc13 	bl	8006a80 <USB_ReadPMA>
 800225a:	e07c      	b.n	8002356 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002264:	b29b      	uxth	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4413      	add	r3, r2
 8002270:	3306      	adds	r3, #6
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	4413      	add	r3, r2
 800227a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002284:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	8b7b      	ldrh	r3, [r7, #26]
 800228c:	429a      	cmp	r2, r3
 800228e:	d306      	bcc.n	800229e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	699a      	ldr	r2, [r3, #24]
 8002294:	8b7b      	ldrh	r3, [r7, #26]
 8002296:	1ad2      	subs	r2, r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	619a      	str	r2, [r3, #24]
 800229c:	e002      	b.n	80022a4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d123      	bne.n	80022f4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022c6:	83fb      	strh	r3, [r7, #30]
 80022c8:	8bfb      	ldrh	r3, [r7, #30]
 80022ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80022ce:	83fb      	strh	r3, [r7, #30]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	441a      	add	r2, r3
 80022de:	8bfb      	ldrh	r3, [r7, #30]
 80022e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d11f      	bne.n	800233e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002318:	83bb      	strh	r3, [r7, #28]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	441a      	add	r2, r3
 8002328:	8bbb      	ldrh	r3, [r7, #28]
 800232a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800232e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002336:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800233a:	b29b      	uxth	r3, r3
 800233c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800233e:	8b7b      	ldrh	r3, [r7, #26]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	6959      	ldr	r1, [r3, #20]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	895a      	ldrh	r2, [r3, #10]
 8002350:	8b7b      	ldrh	r3, [r7, #26]
 8002352:	f004 fb95 	bl	8006a80 <USB_ReadPMA>
    }
  }

  return count;
 8002356:	8b7b      	ldrh	r3, [r7, #26]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b0a4      	sub	sp, #144	@ 0x90
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	4613      	mov	r3, r2
 800236c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 81dd 	beq.w	8002734 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002382:	b29b      	uxth	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	3302      	adds	r3, #2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	4413      	add	r3, r2
 8002398:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023a2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d907      	bls.n	80023c2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	619a      	str	r2, [r3, #24]
 80023c0:	e002      	b.n	80023c8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f040 80b9 	bne.w	8002544 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	785b      	ldrb	r3, [r3, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d126      	bne.n	8002428 <HAL_PCD_EP_DB_Transmit+0xc8>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ee:	4413      	add	r3, r2
 80023f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	011a      	lsls	r2, r3, #4
 80023f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fa:	4413      	add	r3, r2
 80023fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800240c:	b29a      	uxth	r2, r3
 800240e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002410:	801a      	strh	r2, [r3, #0]
 8002412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800241c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002420:	b29a      	uxth	r2, r3
 8002422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002424:	801a      	strh	r2, [r3, #0]
 8002426:	e01a      	b.n	800245e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	785b      	ldrb	r3, [r3, #1]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d116      	bne.n	800245e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	637b      	str	r3, [r7, #52]	@ 0x34
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800243e:	b29b      	uxth	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002444:	4413      	add	r3, r2
 8002446:	637b      	str	r3, [r7, #52]	@ 0x34
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	011a      	lsls	r2, r3, #4
 800244e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002450:	4413      	add	r3, r2
 8002452:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002456:	633b      	str	r3, [r7, #48]	@ 0x30
 8002458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245a:	2200      	movs	r2, #0
 800245c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	785b      	ldrb	r3, [r3, #1]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d126      	bne.n	80024ba <HAL_PCD_EP_DB_Transmit+0x15a>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800247a:	b29b      	uxth	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	4413      	add	r3, r2
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	011a      	lsls	r2, r3, #4
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	4413      	add	r3, r2
 800248e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	b29b      	uxth	r3, r3
 800249a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800249e:	b29a      	uxth	r2, r3
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	801a      	strh	r2, [r3, #0]
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	801a      	strh	r2, [r3, #0]
 80024b8:	e017      	b.n	80024ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	785b      	ldrb	r3, [r3, #1]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d113      	bne.n	80024ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	4413      	add	r3, r2
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	011a      	lsls	r2, r3, #4
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	4413      	add	r3, r2
 80024de:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80024e2:	623b      	str	r3, [r7, #32]
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	2200      	movs	r2, #0
 80024e8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	4619      	mov	r1, r3
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f006 f956 	bl	80087a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 82fc 	beq.w	8002afa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800251c:	82fb      	strh	r3, [r7, #22]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	441a      	add	r2, r3
 800252c:	8afb      	ldrh	r3, [r7, #22]
 800252e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002532:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002536:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800253a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800253e:	b29b      	uxth	r3, r3
 8002540:	8013      	strh	r3, [r2, #0]
 8002542:	e2da      	b.n	8002afa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d021      	beq.n	8002592 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	b29b      	uxth	r3, r3
 8002560:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002568:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	441a      	add	r2, r3
 800257a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800257e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002582:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002586:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800258a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800258e:	b29b      	uxth	r3, r3
 8002590:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002598:	2b01      	cmp	r3, #1
 800259a:	f040 82ae 	bne.w	8002afa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80025a6:	441a      	add	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80025b4:	441a      	add	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	6a1a      	ldr	r2, [r3, #32]
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d30b      	bcc.n	80025de <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	6a1a      	ldr	r2, [r3, #32]
 80025d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025d6:	1ad2      	subs	r2, r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	621a      	str	r2, [r3, #32]
 80025dc:	e017      	b.n	800260e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d108      	bne.n	80025f8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80025e6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80025ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80025f6:	e00a      	b.n	800260e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2200      	movs	r2, #0
 800260c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	785b      	ldrb	r3, [r3, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d165      	bne.n	80026e2 <HAL_PCD_EP_DB_Transmit+0x382>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002624:	b29b      	uxth	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800262a:	4413      	add	r3, r2
 800262c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	011a      	lsls	r2, r3, #4
 8002634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002636:	4413      	add	r3, r2
 8002638:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800263c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800263e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002648:	b29a      	uxth	r2, r3
 800264a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800264c:	801a      	strh	r2, [r3, #0]
 800264e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10a      	bne.n	800266c <HAL_PCD_EP_DB_Transmit+0x30c>
 8002656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002664:	b29a      	uxth	r2, r3
 8002666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002668:	801a      	strh	r2, [r3, #0]
 800266a:	e057      	b.n	800271c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800266c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002670:	2b3e      	cmp	r3, #62	@ 0x3e
 8002672:	d818      	bhi.n	80026a6 <HAL_PCD_EP_DB_Transmit+0x346>
 8002674:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002678:	085b      	lsrs	r3, r3, #1
 800267a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800267c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <HAL_PCD_EP_DB_Transmit+0x32e>
 8002688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800268a:	3301      	adds	r3, #1
 800268c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800268e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29a      	uxth	r2, r3
 8002694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002696:	b29b      	uxth	r3, r3
 8002698:	029b      	lsls	r3, r3, #10
 800269a:	b29b      	uxth	r3, r3
 800269c:	4313      	orrs	r3, r2
 800269e:	b29a      	uxth	r2, r3
 80026a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a2:	801a      	strh	r2, [r3, #0]
 80026a4:	e03a      	b.n	800271c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80026a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d102      	bne.n	80026c0 <HAL_PCD_EP_DB_Transmit+0x360>
 80026ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026bc:	3b01      	subs	r3, #1
 80026be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	029b      	lsls	r3, r3, #10
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	4313      	orrs	r3, r2
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026da:	b29a      	uxth	r2, r3
 80026dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026de:	801a      	strh	r2, [r3, #0]
 80026e0:	e01c      	b.n	800271c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	785b      	ldrb	r3, [r3, #1]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d118      	bne.n	800271c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026fe:	4413      	add	r3, r2
 8002700:	647b      	str	r3, [r7, #68]	@ 0x44
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	011a      	lsls	r2, r3, #4
 8002708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800270a:	4413      	add	r3, r2
 800270c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002710:	643b      	str	r3, [r7, #64]	@ 0x40
 8002712:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002716:	b29a      	uxth	r2, r3
 8002718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800271a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	6959      	ldr	r1, [r3, #20]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	891a      	ldrh	r2, [r3, #8]
 8002728:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800272c:	b29b      	uxth	r3, r3
 800272e:	f004 f960 	bl	80069f2 <USB_WritePMA>
 8002732:	e1e2      	b.n	8002afa <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800273c:	b29b      	uxth	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	3306      	adds	r3, #6
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	4413      	add	r3, r2
 8002752:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800275c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	699a      	ldr	r2, [r3, #24]
 8002764:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002768:	429a      	cmp	r2, r3
 800276a:	d307      	bcc.n	800277c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	699a      	ldr	r2, [r3, #24]
 8002770:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002774:	1ad2      	subs	r2, r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	619a      	str	r2, [r3, #24]
 800277a:	e002      	b.n	8002782 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2200      	movs	r2, #0
 8002780:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 80c0 	bne.w	800290c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	785b      	ldrb	r3, [r3, #1]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d126      	bne.n	80027e2 <HAL_PCD_EP_DB_Transmit+0x482>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027a8:	4413      	add	r3, r2
 80027aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	011a      	lsls	r2, r3, #4
 80027b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027b4:	4413      	add	r3, r2
 80027b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80027ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ca:	801a      	strh	r2, [r3, #0]
 80027cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027da:	b29a      	uxth	r2, r3
 80027dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027de:	801a      	strh	r2, [r3, #0]
 80027e0:	e01a      	b.n	8002818 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	785b      	ldrb	r3, [r3, #1]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d116      	bne.n	8002818 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027fe:	4413      	add	r3, r2
 8002800:	667b      	str	r3, [r7, #100]	@ 0x64
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	011a      	lsls	r2, r3, #4
 8002808:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800280a:	4413      	add	r3, r2
 800280c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002810:	663b      	str	r3, [r7, #96]	@ 0x60
 8002812:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002814:	2200      	movs	r2, #0
 8002816:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	677b      	str	r3, [r7, #116]	@ 0x74
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	785b      	ldrb	r3, [r3, #1]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d12b      	bne.n	800287e <HAL_PCD_EP_DB_Transmit+0x51e>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002834:	b29b      	uxth	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800283a:	4413      	add	r3, r2
 800283c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	011a      	lsls	r2, r3, #4
 8002844:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002846:	4413      	add	r3, r2
 8002848:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800284c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002850:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	b29b      	uxth	r3, r3
 8002858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800285c:	b29a      	uxth	r2, r3
 800285e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002862:	801a      	strh	r2, [r3, #0]
 8002864:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002874:	b29a      	uxth	r2, r3
 8002876:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800287a:	801a      	strh	r2, [r3, #0]
 800287c:	e017      	b.n	80028ae <HAL_PCD_EP_DB_Transmit+0x54e>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	785b      	ldrb	r3, [r3, #1]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d113      	bne.n	80028ae <HAL_PCD_EP_DB_Transmit+0x54e>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800288e:	b29b      	uxth	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002894:	4413      	add	r3, r2
 8002896:	677b      	str	r3, [r7, #116]	@ 0x74
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	011a      	lsls	r2, r3, #4
 800289e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028a0:	4413      	add	r3, r2
 80028a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80028a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028aa:	2200      	movs	r2, #0
 80028ac:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	4619      	mov	r1, r3
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f005 ff74 	bl	80087a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f040 811a 	bne.w	8002afa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028e0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	441a      	add	r2, r3
 80028f2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80028f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002906:	b29b      	uxth	r3, r3
 8002908:	8013      	strh	r3, [r2, #0]
 800290a:	e0f6      	b.n	8002afa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d121      	bne.n	800295a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	b29b      	uxth	r3, r3
 8002928:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800292c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002930:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	441a      	add	r2, r3
 8002942:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002946:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800294a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800294e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002956:	b29b      	uxth	r3, r3
 8002958:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002960:	2b01      	cmp	r3, #1
 8002962:	f040 80ca 	bne.w	8002afa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800296e:	441a      	add	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800297c:	441a      	add	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	6a1a      	ldr	r2, [r3, #32]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	429a      	cmp	r2, r3
 800298c:	d30b      	bcc.n	80029a6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	6a1a      	ldr	r2, [r3, #32]
 800299a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800299e:	1ad2      	subs	r2, r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	621a      	str	r2, [r3, #32]
 80029a4:	e017      	b.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d108      	bne.n	80029c0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80029ae:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80029b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80029be:	e00a      	b.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2200      	movs	r2, #0
 80029cc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	657b      	str	r3, [r7, #84]	@ 0x54
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	785b      	ldrb	r3, [r3, #1]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d165      	bne.n	8002ab0 <HAL_PCD_EP_DB_Transmit+0x750>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029f8:	4413      	add	r3, r2
 80029fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	011a      	lsls	r2, r3, #4
 8002a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a04:	4413      	add	r3, r2
 8002a06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a1a:	801a      	strh	r2, [r3, #0]
 8002a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <HAL_PCD_EP_DB_Transmit+0x6da>
 8002a24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a36:	801a      	strh	r2, [r3, #0]
 8002a38:	e054      	b.n	8002ae4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a40:	d818      	bhi.n	8002a74 <HAL_PCD_EP_DB_Transmit+0x714>
 8002a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002a56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a58:	3301      	adds	r3, #1
 8002a5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	029b      	lsls	r3, r3, #10
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a70:	801a      	strh	r2, [r3, #0]
 8002a72:	e037      	b.n	8002ae4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d102      	bne.n	8002a8e <HAL_PCD_EP_DB_Transmit+0x72e>
 8002a88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	029b      	lsls	r3, r3, #10
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aac:	801a      	strh	r2, [r3, #0]
 8002aae:	e019      	b.n	8002ae4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	785b      	ldrb	r3, [r3, #1]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d115      	bne.n	8002ae4 <HAL_PCD_EP_DB_Transmit+0x784>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac6:	4413      	add	r3, r2
 8002ac8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	011a      	lsls	r2, r3, #4
 8002ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ad8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ae2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	6959      	ldr	r1, [r3, #20]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	895a      	ldrh	r2, [r3, #10]
 8002af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f003 ff7c 	bl	80069f2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b14:	82bb      	strh	r3, [r7, #20]
 8002b16:	8abb      	ldrh	r3, [r7, #20]
 8002b18:	f083 0310 	eor.w	r3, r3, #16
 8002b1c:	82bb      	strh	r3, [r7, #20]
 8002b1e:	8abb      	ldrh	r3, [r7, #20]
 8002b20:	f083 0320 	eor.w	r3, r3, #32
 8002b24:	82bb      	strh	r3, [r7, #20]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	441a      	add	r2, r3
 8002b34:	8abb      	ldrh	r3, [r7, #20]
 8002b36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3790      	adds	r7, #144	@ 0x90
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	817b      	strh	r3, [r7, #10]
 8002b62:	4613      	mov	r3, r2
 8002b64:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b72:	897b      	ldrh	r3, [r7, #10]
 8002b74:	f003 0207 	and.w	r2, r3, #7
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	3310      	adds	r3, #16
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4413      	add	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	e009      	b.n	8002b9e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b8a:	897a      	ldrh	r2, [r7, #10]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b9e:	893b      	ldrh	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	80da      	strh	r2, [r3, #6]
 8002bb2:	e00b      	b.n	8002bcc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	f000 bff4 	b.w	8003bea <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 816d 	beq.w	8002ef2 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c18:	4bb4      	ldr	r3, [pc, #720]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d00c      	beq.n	8002c3e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c24:	4bb1      	ldr	r3, [pc, #708]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d157      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x104>
 8002c30:	4bae      	ldr	r3, [pc, #696]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c3c:	d150      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x104>
 8002c3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c42:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c46:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c52:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c5e:	d802      	bhi.n	8002c66 <HAL_RCC_OscConfig+0x8a>
 8002c60:	4ba2      	ldr	r3, [pc, #648]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	e015      	b.n	8002c92 <HAL_RCC_OscConfig+0xb6>
 8002c66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c6a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002c7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c7e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002c82:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002c8e:	4b97      	ldr	r3, [pc, #604]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c92:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c96:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002c9a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002c9e:	fa92 f2a2 	rbit	r2, r2
 8002ca2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002ca6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002caa:	fab2 f282 	clz	r2, r2
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	f042 0220 	orr.w	r2, r2, #32
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	f002 021f 	and.w	r2, r2, #31
 8002cba:	2101      	movs	r1, #1
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8114 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x314>
 8002cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ccc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f040 810b 	bne.w	8002ef0 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f000 bf85 	b.w	8003bea <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x124>
 8002cf2:	4b7e      	ldr	r3, [pc, #504]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a7d      	ldr	r2, [pc, #500]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e036      	b.n	8002d6e <HAL_RCC_OscConfig+0x192>
 8002d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10c      	bne.n	8002d2a <HAL_RCC_OscConfig+0x14e>
 8002d10:	4b76      	ldr	r3, [pc, #472]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a75      	ldr	r2, [pc, #468]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	4b73      	ldr	r3, [pc, #460]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a72      	ldr	r2, [pc, #456]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002d22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	e021      	b.n	8002d6e <HAL_RCC_OscConfig+0x192>
 8002d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d3a:	d10c      	bne.n	8002d56 <HAL_RCC_OscConfig+0x17a>
 8002d3c:	4b6b      	ldr	r3, [pc, #428]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a6a      	ldr	r2, [pc, #424]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002d42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b68      	ldr	r3, [pc, #416]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a67      	ldr	r2, [pc, #412]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	e00b      	b.n	8002d6e <HAL_RCC_OscConfig+0x192>
 8002d56:	4b65      	ldr	r3, [pc, #404]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a64      	ldr	r2, [pc, #400]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	4b62      	ldr	r3, [pc, #392]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a61      	ldr	r2, [pc, #388]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002d68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d6c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d72:	f023 020f 	bic.w	r2, r3, #15
 8002d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	495a      	ldr	r1, [pc, #360]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d054      	beq.n	8002e42 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7fd fe50 	bl	8000a3c <HAL_GetTick>
 8002d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da2:	f7fd fe4b 	bl	8000a3c <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	@ 0x64
 8002db0:	d902      	bls.n	8002db8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	f000 bf19 	b.w	8003bea <HAL_RCC_OscConfig+0x100e>
 8002db8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dbc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002dcc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002dd8:	d802      	bhi.n	8002de0 <HAL_RCC_OscConfig+0x204>
 8002dda:	4b44      	ldr	r3, [pc, #272]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	e015      	b.n	8002e0c <HAL_RCC_OscConfig+0x230>
 8002de0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002de4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002df4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002df8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002dfc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002e08:	4b38      	ldr	r3, [pc, #224]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e10:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002e14:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002e18:	fa92 f2a2 	rbit	r2, r2
 8002e1c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002e20:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002e24:	fab2 f282 	clz	r2, r2
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	f042 0220 	orr.w	r2, r2, #32
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	f002 021f 	and.w	r2, r2, #31
 8002e34:	2101      	movs	r1, #1
 8002e36:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0b0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x1c6>
 8002e40:	e057      	b.n	8002ef2 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e42:	f7fd fdfb 	bl	8000a3c <HAL_GetTick>
 8002e46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e4c:	f7fd fdf6 	bl	8000a3c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b64      	cmp	r3, #100	@ 0x64
 8002e5a:	d902      	bls.n	8002e62 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	f000 bec4 	b.w	8003bea <HAL_RCC_OscConfig+0x100e>
 8002e62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e66:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002e76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e82:	d802      	bhi.n	8002e8a <HAL_RCC_OscConfig+0x2ae>
 8002e84:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	e015      	b.n	8002eb6 <HAL_RCC_OscConfig+0x2da>
 8002e8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e8e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002e9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ea2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002ea6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002eec <HAL_RCC_OscConfig+0x310>)
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002eba:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002ebe:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002ec2:	fa92 f2a2 	rbit	r2, r2
 8002ec6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002eca:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002ece:	fab2 f282 	clz	r2, r2
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	f042 0220 	orr.w	r2, r2, #32
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	f002 021f 	and.w	r2, r2, #31
 8002ede:	2101      	movs	r1, #1
 8002ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1b0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x270>
 8002eea:	e002      	b.n	8002ef2 <HAL_RCC_OscConfig+0x316>
 8002eec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 816c 	beq.w	80031e0 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f08:	4bcc      	ldr	r3, [pc, #816]	@ (800323c <HAL_RCC_OscConfig+0x660>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00b      	beq.n	8002f2c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f14:	4bc9      	ldr	r3, [pc, #804]	@ (800323c <HAL_RCC_OscConfig+0x660>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 030c 	and.w	r3, r3, #12
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d16d      	bne.n	8002ffc <HAL_RCC_OscConfig+0x420>
 8002f20:	4bc6      	ldr	r3, [pc, #792]	@ (800323c <HAL_RCC_OscConfig+0x660>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d167      	bne.n	8002ffc <HAL_RCC_OscConfig+0x420>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002f3e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f4a:	d802      	bhi.n	8002f52 <HAL_RCC_OscConfig+0x376>
 8002f4c:	4bbb      	ldr	r3, [pc, #748]	@ (800323c <HAL_RCC_OscConfig+0x660>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	e013      	b.n	8002f7a <HAL_RCC_OscConfig+0x39e>
 8002f52:	2302      	movs	r3, #2
 8002f54:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002f64:	2302      	movs	r3, #2
 8002f66:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002f6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002f6e:	fa93 f3a3 	rbit	r3, r3
 8002f72:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002f76:	4bb1      	ldr	r3, [pc, #708]	@ (800323c <HAL_RCC_OscConfig+0x660>)
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002f80:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002f84:	fa92 f2a2 	rbit	r2, r2
 8002f88:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002f8c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002f90:	fab2 f282 	clz	r2, r2
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	f042 0220 	orr.w	r2, r2, #32
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	f002 021f 	and.w	r2, r2, #31
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x3e6>
 8002fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d002      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f000 be14 	b.w	8003bea <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc2:	4b9e      	ldr	r3, [pc, #632]	@ (800323c <HAL_RCC_OscConfig+0x660>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	21f8      	movs	r1, #248	@ 0xf8
 8002fd8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002fe0:	fa91 f1a1 	rbit	r1, r1
 8002fe4:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002fe8:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002fec:	fab1 f181 	clz	r1, r1
 8002ff0:	b2c9      	uxtb	r1, r1
 8002ff2:	408b      	lsls	r3, r1
 8002ff4:	4991      	ldr	r1, [pc, #580]	@ (800323c <HAL_RCC_OscConfig+0x660>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffa:	e0f1      	b.n	80031e0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003000:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8083 	beq.w	8003114 <HAL_RCC_OscConfig+0x538>
 800300e:	2301      	movs	r3, #1
 8003010:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003020:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800302e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	461a      	mov	r2, r3
 8003036:	2301      	movs	r3, #1
 8003038:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303a:	f7fd fcff 	bl	8000a3c <HAL_GetTick>
 800303e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003042:	e00a      	b.n	800305a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003044:	f7fd fcfa 	bl	8000a3c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d902      	bls.n	800305a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	f000 bdc8 	b.w	8003bea <HAL_RCC_OscConfig+0x100e>
 800305a:	2302      	movs	r3, #2
 800305c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800306c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b3f      	cmp	r3, #63	@ 0x3f
 8003078:	d802      	bhi.n	8003080 <HAL_RCC_OscConfig+0x4a4>
 800307a:	4b70      	ldr	r3, [pc, #448]	@ (800323c <HAL_RCC_OscConfig+0x660>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	e013      	b.n	80030a8 <HAL_RCC_OscConfig+0x4cc>
 8003080:	2302      	movs	r3, #2
 8003082:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003092:	2302      	movs	r3, #2
 8003094:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003098:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80030a4:	4b65      	ldr	r3, [pc, #404]	@ (800323c <HAL_RCC_OscConfig+0x660>)
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	2202      	movs	r2, #2
 80030aa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80030ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80030b2:	fa92 f2a2 	rbit	r2, r2
 80030b6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80030ba:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80030be:	fab2 f282 	clz	r2, r2
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	f042 0220 	orr.w	r2, r2, #32
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	f002 021f 	and.w	r2, r2, #31
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f202 	lsl.w	r2, r1, r2
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0b4      	beq.n	8003044 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030da:	4b58      	ldr	r3, [pc, #352]	@ (800323c <HAL_RCC_OscConfig+0x660>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	21f8      	movs	r1, #248	@ 0xf8
 80030f0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80030f8:	fa91 f1a1 	rbit	r1, r1
 80030fc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003100:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003104:	fab1 f181 	clz	r1, r1
 8003108:	b2c9      	uxtb	r1, r1
 800310a:	408b      	lsls	r3, r1
 800310c:	494b      	ldr	r1, [pc, #300]	@ (800323c <HAL_RCC_OscConfig+0x660>)
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
 8003112:	e065      	b.n	80031e0 <HAL_RCC_OscConfig+0x604>
 8003114:	2301      	movs	r3, #1
 8003116:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003126:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003134:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	461a      	mov	r2, r3
 800313c:	2300      	movs	r3, #0
 800313e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fd fc7c 	bl	8000a3c <HAL_GetTick>
 8003144:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003148:	e00a      	b.n	8003160 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314a:	f7fd fc77 	bl	8000a3c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d902      	bls.n	8003160 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	f000 bd45 	b.w	8003bea <HAL_RCC_OscConfig+0x100e>
 8003160:	2302      	movs	r3, #2
 8003162:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003172:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b3f      	cmp	r3, #63	@ 0x3f
 800317e:	d802      	bhi.n	8003186 <HAL_RCC_OscConfig+0x5aa>
 8003180:	4b2e      	ldr	r3, [pc, #184]	@ (800323c <HAL_RCC_OscConfig+0x660>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	e013      	b.n	80031ae <HAL_RCC_OscConfig+0x5d2>
 8003186:	2302      	movs	r3, #2
 8003188:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003198:	2302      	movs	r3, #2
 800319a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800319e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80031aa:	4b24      	ldr	r3, [pc, #144]	@ (800323c <HAL_RCC_OscConfig+0x660>)
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	2202      	movs	r2, #2
 80031b0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80031b4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80031b8:	fa92 f2a2 	rbit	r2, r2
 80031bc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80031c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80031c4:	fab2 f282 	clz	r2, r2
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	f042 0220 	orr.w	r2, r2, #32
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	f002 021f 	and.w	r2, r2, #31
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f202 	lsl.w	r2, r1, r2
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1b4      	bne.n	800314a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8115 	beq.w	8003420 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d07e      	beq.n	8003304 <HAL_RCC_OscConfig+0x728>
 8003206:	2301      	movs	r3, #1
 8003208:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003210:	fa93 f3a3 	rbit	r3, r3
 8003214:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800321c:	fab3 f383 	clz	r3, r3
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <HAL_RCC_OscConfig+0x664>)
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	461a      	mov	r2, r3
 800322c:	2301      	movs	r3, #1
 800322e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003230:	f7fd fc04 	bl	8000a3c <HAL_GetTick>
 8003234:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003238:	e00f      	b.n	800325a <HAL_RCC_OscConfig+0x67e>
 800323a:	bf00      	nop
 800323c:	40021000 	.word	0x40021000
 8003240:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003244:	f7fd fbfa 	bl	8000a3c <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d902      	bls.n	800325a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	f000 bcc8 	b.w	8003bea <HAL_RCC_OscConfig+0x100e>
 800325a:	2302      	movs	r3, #2
 800325c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800326c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003270:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003274:	2202      	movs	r2, #2
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	fa93 f2a3 	rbit	r2, r3
 8003286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003298:	2202      	movs	r2, #2
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	fa93 f2a3 	rbit	r2, r3
 80032aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80032b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b4:	4bb0      	ldr	r3, [pc, #704]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 80032b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80032c0:	2102      	movs	r1, #2
 80032c2:	6019      	str	r1, [r3, #0]
 80032c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	fa93 f1a3 	rbit	r1, r3
 80032d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80032da:	6019      	str	r1, [r3, #0]
  return result;
 80032dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2101      	movs	r1, #1
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0a0      	beq.n	8003244 <HAL_RCC_OscConfig+0x668>
 8003302:	e08d      	b.n	8003420 <HAL_RCC_OscConfig+0x844>
 8003304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003308:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800330c:	2201      	movs	r2, #1
 800330e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003314:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	fa93 f2a3 	rbit	r2, r3
 800331e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003322:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003326:	601a      	str	r2, [r3, #0]
  return result;
 8003328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003330:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	4b90      	ldr	r3, [pc, #576]	@ (800357c <HAL_RCC_OscConfig+0x9a0>)
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	461a      	mov	r2, r3
 8003342:	2300      	movs	r3, #0
 8003344:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003346:	f7fd fb79 	bl	8000a3c <HAL_GetTick>
 800334a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334e:	e00a      	b.n	8003366 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003350:	f7fd fb74 	bl	8000a3c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d902      	bls.n	8003366 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	f000 bc42 	b.w	8003bea <HAL_RCC_OscConfig+0x100e>
 8003366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800336e:	2202      	movs	r2, #2
 8003370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003376:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	fa93 f2a3 	rbit	r2, r3
 8003380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003384:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800338e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003392:	2202      	movs	r2, #2
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	fa93 f2a3 	rbit	r2, r3
 80033a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80033b6:	2202      	movs	r2, #2
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	fa93 f2a3 	rbit	r2, r3
 80033c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80033d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d2:	4b69      	ldr	r3, [pc, #420]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 80033d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80033de:	2102      	movs	r1, #2
 80033e0:	6019      	str	r1, [r3, #0]
 80033e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	fa93 f1a3 	rbit	r1, r3
 80033f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80033f8:	6019      	str	r1, [r3, #0]
  return result;
 80033fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f303 	lsl.w	r3, r1, r3
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d197      	bne.n	8003350 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003424:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 819e 	beq.w	8003772 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003436:	2300      	movs	r3, #0
 8003438:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343c:	4b4e      	ldr	r3, [pc, #312]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d116      	bne.n	8003476 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003448:	4b4b      	ldr	r3, [pc, #300]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	4a4a      	ldr	r2, [pc, #296]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003452:	61d3      	str	r3, [r2, #28]
 8003454:	4b48      	ldr	r3, [pc, #288]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800345c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003460:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800346e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	4b42      	ldr	r3, [pc, #264]	@ (8003580 <HAL_RCC_OscConfig+0x9a4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11a      	bne.n	80034b8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003482:	4b3f      	ldr	r3, [pc, #252]	@ (8003580 <HAL_RCC_OscConfig+0x9a4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a3e      	ldr	r2, [pc, #248]	@ (8003580 <HAL_RCC_OscConfig+0x9a4>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800348c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348e:	f7fd fad5 	bl	8000a3c <HAL_GetTick>
 8003492:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003496:	e009      	b.n	80034ac <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003498:	f7fd fad0 	bl	8000a3c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b64      	cmp	r3, #100	@ 0x64
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e39e      	b.n	8003bea <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ac:	4b34      	ldr	r3, [pc, #208]	@ (8003580 <HAL_RCC_OscConfig+0x9a4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0ef      	beq.n	8003498 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d106      	bne.n	80034d6 <HAL_RCC_OscConfig+0x8fa>
 80034c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6213      	str	r3, [r2, #32]
 80034d4:	e035      	b.n	8003542 <HAL_RCC_OscConfig+0x966>
 80034d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x924>
 80034e6:	4b24      	ldr	r3, [pc, #144]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4a23      	ldr	r2, [pc, #140]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	6213      	str	r3, [r2, #32]
 80034f2:	4b21      	ldr	r3, [pc, #132]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4a20      	ldr	r2, [pc, #128]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	6213      	str	r3, [r2, #32]
 80034fe:	e020      	b.n	8003542 <HAL_RCC_OscConfig+0x966>
 8003500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003504:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b05      	cmp	r3, #5
 800350e:	d10c      	bne.n	800352a <HAL_RCC_OscConfig+0x94e>
 8003510:	4b19      	ldr	r3, [pc, #100]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	4a18      	ldr	r2, [pc, #96]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 8003516:	f043 0304 	orr.w	r3, r3, #4
 800351a:	6213      	str	r3, [r2, #32]
 800351c:	4b16      	ldr	r3, [pc, #88]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	4a15      	ldr	r2, [pc, #84]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	6213      	str	r3, [r2, #32]
 8003528:	e00b      	b.n	8003542 <HAL_RCC_OscConfig+0x966>
 800352a:	4b13      	ldr	r3, [pc, #76]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4a12      	ldr	r2, [pc, #72]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	6213      	str	r3, [r2, #32]
 8003536:	4b10      	ldr	r3, [pc, #64]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4a0f      	ldr	r2, [pc, #60]	@ (8003578 <HAL_RCC_OscConfig+0x99c>)
 800353c:	f023 0304 	bic.w	r3, r3, #4
 8003540:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003546:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8087 	beq.w	8003662 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003554:	f7fd fa72 	bl	8000a3c <HAL_GetTick>
 8003558:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	e012      	b.n	8003584 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fd fa6d 	bl	8000a3c <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	d908      	bls.n	8003584 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e339      	b.n	8003bea <HAL_RCC_OscConfig+0x100e>
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	10908120 	.word	0x10908120
 8003580:	40007000 	.word	0x40007000
 8003584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003588:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800358c:	2202      	movs	r2, #2
 800358e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003594:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	fa93 f2a3 	rbit	r2, r3
 800359e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80035b0:	2202      	movs	r2, #2
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	fa93 f2a3 	rbit	r2, r3
 80035c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80035ca:	601a      	str	r2, [r3, #0]
  return result;
 80035cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80035d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d102      	bne.n	80035ec <HAL_RCC_OscConfig+0xa10>
 80035e6:	4b98      	ldr	r3, [pc, #608]	@ (8003848 <HAL_RCC_OscConfig+0xc6c>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	e013      	b.n	8003614 <HAL_RCC_OscConfig+0xa38>
 80035ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80035f4:	2202      	movs	r2, #2
 80035f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	fa93 f2a3 	rbit	r2, r3
 8003606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	4b8d      	ldr	r3, [pc, #564]	@ (8003848 <HAL_RCC_OscConfig+0xc6c>)
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003618:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800361c:	2102      	movs	r1, #2
 800361e:	6011      	str	r1, [r2, #0]
 8003620:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003624:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	fa92 f1a2 	rbit	r1, r2
 800362e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003632:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003636:	6011      	str	r1, [r2, #0]
  return result;
 8003638:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800363c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	fab2 f282 	clz	r2, r2
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	f002 021f 	and.w	r2, r2, #31
 8003652:	2101      	movs	r1, #1
 8003654:	fa01 f202 	lsl.w	r2, r1, r2
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	f43f af7f 	beq.w	800355e <HAL_RCC_OscConfig+0x982>
 8003660:	e07d      	b.n	800375e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003662:	f7fd f9eb 	bl	8000a3c <HAL_GetTick>
 8003666:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366a:	e00b      	b.n	8003684 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7fd f9e6 	bl	8000a3c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e2b2      	b.n	8003bea <HAL_RCC_OscConfig+0x100e>
 8003684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003688:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800368c:	2202      	movs	r2, #2
 800368e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003694:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	fa93 f2a3 	rbit	r2, r3
 800369e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ac:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80036b0:	2202      	movs	r2, #2
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	fa93 f2a3 	rbit	r2, r3
 80036c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80036ca:	601a      	str	r2, [r3, #0]
  return result;
 80036cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80036d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <HAL_RCC_OscConfig+0xb10>
 80036e6:	4b58      	ldr	r3, [pc, #352]	@ (8003848 <HAL_RCC_OscConfig+0xc6c>)
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	e013      	b.n	8003714 <HAL_RCC_OscConfig+0xb38>
 80036ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80036f4:	2202      	movs	r2, #2
 80036f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	fa93 f2a3 	rbit	r2, r3
 8003706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800370a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	4b4d      	ldr	r3, [pc, #308]	@ (8003848 <HAL_RCC_OscConfig+0xc6c>)
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003718:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800371c:	2102      	movs	r1, #2
 800371e:	6011      	str	r1, [r2, #0]
 8003720:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003724:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	fa92 f1a2 	rbit	r1, r2
 800372e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003732:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003736:	6011      	str	r1, [r2, #0]
  return result;
 8003738:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800373c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	fab2 f282 	clz	r2, r2
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	f002 021f 	and.w	r2, r2, #31
 8003752:	2101      	movs	r1, #1
 8003754:	fa01 f202 	lsl.w	r2, r1, r2
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d186      	bne.n	800366c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800375e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003762:	2b01      	cmp	r3, #1
 8003764:	d105      	bne.n	8003772 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003766:	4b38      	ldr	r3, [pc, #224]	@ (8003848 <HAL_RCC_OscConfig+0xc6c>)
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	4a37      	ldr	r2, [pc, #220]	@ (8003848 <HAL_RCC_OscConfig+0xc6c>)
 800376c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003770:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003776:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8232 	beq.w	8003be8 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003784:	4b30      	ldr	r3, [pc, #192]	@ (8003848 <HAL_RCC_OscConfig+0xc6c>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b08      	cmp	r3, #8
 800378e:	f000 8201 	beq.w	8003b94 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003796:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	f040 8157 	bne.w	8003a52 <HAL_RCC_OscConfig+0xe76>
 80037a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80037ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	fa93 f2a3 	rbit	r2, r3
 80037c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80037c8:	601a      	str	r2, [r3, #0]
  return result;
 80037ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ce:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80037d2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d4:	fab3 f383 	clz	r3, r3
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037de:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	461a      	mov	r2, r3
 80037e6:	2300      	movs	r3, #0
 80037e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ea:	f7fd f927 	bl	8000a3c <HAL_GetTick>
 80037ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f2:	e009      	b.n	8003808 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f4:	f7fd f922 	bl	8000a3c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e1f0      	b.n	8003bea <HAL_RCC_OscConfig+0x100e>
 8003808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800380c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003810:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003814:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	fa93 f2a3 	rbit	r2, r3
 8003824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003828:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800382c:	601a      	str	r2, [r3, #0]
  return result;
 800382e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003832:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003836:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003838:	fab3 f383 	clz	r3, r3
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003840:	d804      	bhi.n	800384c <HAL_RCC_OscConfig+0xc70>
 8003842:	4b01      	ldr	r3, [pc, #4]	@ (8003848 <HAL_RCC_OscConfig+0xc6c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	e029      	b.n	800389c <HAL_RCC_OscConfig+0xcc0>
 8003848:	40021000 	.word	0x40021000
 800384c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003850:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003854:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800385e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	fa93 f2a3 	rbit	r2, r3
 8003868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003876:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800387a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003884:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	fa93 f2a3 	rbit	r2, r3
 800388e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003892:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	4bc3      	ldr	r3, [pc, #780]	@ (8003ba8 <HAL_RCC_OscConfig+0xfcc>)
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038a0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80038a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80038a8:	6011      	str	r1, [r2, #0]
 80038aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038ae:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	fa92 f1a2 	rbit	r1, r2
 80038b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038bc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80038c0:	6011      	str	r1, [r2, #0]
  return result;
 80038c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038c6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	fab2 f282 	clz	r2, r2
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	f042 0220 	orr.w	r2, r2, #32
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	f002 021f 	and.w	r2, r2, #31
 80038dc:	2101      	movs	r1, #1
 80038de:	fa01 f202 	lsl.w	r2, r1, r2
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d185      	bne.n	80037f4 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038e8:	4baf      	ldr	r3, [pc, #700]	@ (8003ba8 <HAL_RCC_OscConfig+0xfcc>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80038f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80038fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003900:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	430b      	orrs	r3, r1
 800390a:	49a7      	ldr	r1, [pc, #668]	@ (8003ba8 <HAL_RCC_OscConfig+0xfcc>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]
 8003910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003914:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003918:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800391c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003922:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	fa93 f2a3 	rbit	r2, r3
 800392c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003930:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003934:	601a      	str	r2, [r3, #0]
  return result;
 8003936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800393e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003940:	fab3 f383 	clz	r3, r3
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800394a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	461a      	mov	r2, r3
 8003952:	2301      	movs	r3, #1
 8003954:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003956:	f7fd f871 	bl	8000a3c <HAL_GetTick>
 800395a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800395e:	e009      	b.n	8003974 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003960:	f7fd f86c 	bl	8000a3c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e13a      	b.n	8003bea <HAL_RCC_OscConfig+0x100e>
 8003974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003978:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800397c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003986:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	fa93 f2a3 	rbit	r2, r3
 8003990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003994:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003998:	601a      	str	r2, [r3, #0]
  return result;
 800399a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800399e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80039a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039a4:	fab3 f383 	clz	r3, r3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80039ac:	d802      	bhi.n	80039b4 <HAL_RCC_OscConfig+0xdd8>
 80039ae:	4b7e      	ldr	r3, [pc, #504]	@ (8003ba8 <HAL_RCC_OscConfig+0xfcc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	e027      	b.n	8003a04 <HAL_RCC_OscConfig+0xe28>
 80039b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80039bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	fa93 f2a3 	rbit	r2, r3
 80039d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039de:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80039e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ec:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	fa93 f2a3 	rbit	r2, r3
 80039f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	4b69      	ldr	r3, [pc, #420]	@ (8003ba8 <HAL_RCC_OscConfig+0xfcc>)
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a08:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003a0c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003a10:	6011      	str	r1, [r2, #0]
 8003a12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a16:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	fa92 f1a2 	rbit	r1, r2
 8003a20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a24:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003a28:	6011      	str	r1, [r2, #0]
  return result;
 8003a2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a2e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003a32:	6812      	ldr	r2, [r2, #0]
 8003a34:	fab2 f282 	clz	r2, r2
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	f042 0220 	orr.w	r2, r2, #32
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	f002 021f 	and.w	r2, r2, #31
 8003a44:	2101      	movs	r1, #1
 8003a46:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d087      	beq.n	8003960 <HAL_RCC_OscConfig+0xd84>
 8003a50:	e0ca      	b.n	8003be8 <HAL_RCC_OscConfig+0x100c>
 8003a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a56:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003a5a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a64:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	fa93 f2a3 	rbit	r2, r3
 8003a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a72:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a76:	601a      	str	r2, [r3, #0]
  return result;
 8003a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a80:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a8c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	461a      	mov	r2, r3
 8003a94:	2300      	movs	r3, #0
 8003a96:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fc ffd0 	bl	8000a3c <HAL_GetTick>
 8003a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa0:	e009      	b.n	8003ab6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa2:	f7fc ffcb 	bl	8000a3c <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e099      	b.n	8003bea <HAL_RCC_OscConfig+0x100e>
 8003ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aba:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003abe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	fa93 f2a3 	rbit	r2, r3
 8003ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003ada:	601a      	str	r2, [r3, #0]
  return result;
 8003adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003ae4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae6:	fab3 f383 	clz	r3, r3
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b3f      	cmp	r3, #63	@ 0x3f
 8003aee:	d802      	bhi.n	8003af6 <HAL_RCC_OscConfig+0xf1a>
 8003af0:	4b2d      	ldr	r3, [pc, #180]	@ (8003ba8 <HAL_RCC_OscConfig+0xfcc>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	e027      	b.n	8003b46 <HAL_RCC_OscConfig+0xf6a>
 8003af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003afa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003afe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b08:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	fa93 f2a3 	rbit	r2, r3
 8003b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b16:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b20:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003b24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b2e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	fa93 f2a3 	rbit	r2, r3
 8003b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b3c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	4b19      	ldr	r3, [pc, #100]	@ (8003ba8 <HAL_RCC_OscConfig+0xfcc>)
 8003b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b4a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003b4e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b52:	6011      	str	r1, [r2, #0]
 8003b54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b58:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	fa92 f1a2 	rbit	r1, r2
 8003b62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b66:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b6a:	6011      	str	r1, [r2, #0]
  return result;
 8003b6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b70:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	fab2 f282 	clz	r2, r2
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	f042 0220 	orr.w	r2, r2, #32
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	f002 021f 	and.w	r2, r2, #31
 8003b86:	2101      	movs	r1, #1
 8003b88:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d187      	bne.n	8003aa2 <HAL_RCC_OscConfig+0xec6>
 8003b92:	e029      	b.n	8003be8 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d103      	bne.n	8003bac <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e020      	b.n	8003bea <HAL_RCC_OscConfig+0x100e>
 8003ba8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bac:	4b11      	ldr	r3, [pc, #68]	@ (8003bf4 <HAL_RCC_OscConfig+0x1018>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bb4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003bb8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d10b      	bne.n	8003be4 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003bcc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003bd0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40021000 	.word	0x40021000

08003bf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b09e      	sub	sp, #120	@ 0x78
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e154      	b.n	8003eba <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c10:	4b89      	ldr	r3, [pc, #548]	@ (8003e38 <HAL_RCC_ClockConfig+0x240>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d910      	bls.n	8003c40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1e:	4b86      	ldr	r3, [pc, #536]	@ (8003e38 <HAL_RCC_ClockConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 0207 	bic.w	r2, r3, #7
 8003c26:	4984      	ldr	r1, [pc, #528]	@ (8003e38 <HAL_RCC_ClockConfig+0x240>)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2e:	4b82      	ldr	r3, [pc, #520]	@ (8003e38 <HAL_RCC_ClockConfig+0x240>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e13c      	b.n	8003eba <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c4c:	4b7b      	ldr	r3, [pc, #492]	@ (8003e3c <HAL_RCC_ClockConfig+0x244>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	4978      	ldr	r1, [pc, #480]	@ (8003e3c <HAL_RCC_ClockConfig+0x244>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 80cd 	beq.w	8003e06 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d137      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xec>
 8003c74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c78:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003c82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c84:	fab3 f383 	clz	r3, r3
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c8c:	d802      	bhi.n	8003c94 <HAL_RCC_ClockConfig+0x9c>
 8003c8e:	4b6b      	ldr	r3, [pc, #428]	@ (8003e3c <HAL_RCC_ClockConfig+0x244>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	e00f      	b.n	8003cb4 <HAL_RCC_ClockConfig+0xbc>
 8003c94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c9c:	fa93 f3a3 	rbit	r3, r3
 8003ca0:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ca2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ca6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ca8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003caa:	fa93 f3a3 	rbit	r3, r3
 8003cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cb0:	4b62      	ldr	r3, [pc, #392]	@ (8003e3c <HAL_RCC_ClockConfig+0x244>)
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003cb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003cba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cbc:	fa92 f2a2 	rbit	r2, r2
 8003cc0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003cc2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003cc4:	fab2 f282 	clz	r2, r2
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	f042 0220 	orr.w	r2, r2, #32
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	f002 021f 	and.w	r2, r2, #31
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d171      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0ea      	b.n	8003eba <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d137      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x164>
 8003cec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cf0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cf4:	fa93 f3a3 	rbit	r3, r3
 8003cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfc:	fab3 f383 	clz	r3, r3
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d04:	d802      	bhi.n	8003d0c <HAL_RCC_ClockConfig+0x114>
 8003d06:	4b4d      	ldr	r3, [pc, #308]	@ (8003e3c <HAL_RCC_ClockConfig+0x244>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	e00f      	b.n	8003d2c <HAL_RCC_ClockConfig+0x134>
 8003d0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d10:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d14:	fa93 f3a3 	rbit	r3, r3
 8003d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d28:	4b44      	ldr	r3, [pc, #272]	@ (8003e3c <HAL_RCC_ClockConfig+0x244>)
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d30:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003d32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d34:	fa92 f2a2 	rbit	r2, r2
 8003d38:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003d3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d3c:	fab2 f282 	clz	r2, r2
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	f042 0220 	orr.w	r2, r2, #32
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	f002 021f 	and.w	r2, r2, #31
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d135      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0ae      	b.n	8003eba <HAL_RCC_ClockConfig+0x2c2>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6a:	fab3 f383 	clz	r3, r3
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d72:	d802      	bhi.n	8003d7a <HAL_RCC_ClockConfig+0x182>
 8003d74:	4b31      	ldr	r3, [pc, #196]	@ (8003e3c <HAL_RCC_ClockConfig+0x244>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	e00d      	b.n	8003d96 <HAL_RCC_ClockConfig+0x19e>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	fa93 f3a3 	rbit	r3, r3
 8003d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d86:	2302      	movs	r3, #2
 8003d88:	623b      	str	r3, [r7, #32]
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	fa93 f3a3 	rbit	r3, r3
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	4b2a      	ldr	r3, [pc, #168]	@ (8003e3c <HAL_RCC_ClockConfig+0x244>)
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	2202      	movs	r2, #2
 8003d98:	61ba      	str	r2, [r7, #24]
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	fa92 f2a2 	rbit	r2, r2
 8003da0:	617a      	str	r2, [r7, #20]
  return result;
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	fab2 f282 	clz	r2, r2
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	f042 0220 	orr.w	r2, r2, #32
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	f002 021f 	and.w	r2, r2, #31
 8003db4:	2101      	movs	r1, #1
 8003db6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e07a      	b.n	8003eba <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e3c <HAL_RCC_ClockConfig+0x244>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f023 0203 	bic.w	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	491a      	ldr	r1, [pc, #104]	@ (8003e3c <HAL_RCC_ClockConfig+0x244>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dd6:	f7fc fe31 	bl	8000a3c <HAL_GetTick>
 8003dda:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dde:	f7fc fe2d 	bl	8000a3c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e062      	b.n	8003eba <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df4:	4b11      	ldr	r3, [pc, #68]	@ (8003e3c <HAL_RCC_ClockConfig+0x244>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 020c 	and.w	r2, r3, #12
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d1eb      	bne.n	8003dde <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e06:	4b0c      	ldr	r3, [pc, #48]	@ (8003e38 <HAL_RCC_ClockConfig+0x240>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d215      	bcs.n	8003e40 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e14:	4b08      	ldr	r3, [pc, #32]	@ (8003e38 <HAL_RCC_ClockConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f023 0207 	bic.w	r2, r3, #7
 8003e1c:	4906      	ldr	r1, [pc, #24]	@ (8003e38 <HAL_RCC_ClockConfig+0x240>)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e24:	4b04      	ldr	r3, [pc, #16]	@ (8003e38 <HAL_RCC_ClockConfig+0x240>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d006      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e041      	b.n	8003eba <HAL_RCC_ClockConfig+0x2c2>
 8003e36:	bf00      	nop
 8003e38:	40022000 	.word	0x40022000
 8003e3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec4 <HAL_RCC_ClockConfig+0x2cc>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	491a      	ldr	r1, [pc, #104]	@ (8003ec4 <HAL_RCC_ClockConfig+0x2cc>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e6a:	4b16      	ldr	r3, [pc, #88]	@ (8003ec4 <HAL_RCC_ClockConfig+0x2cc>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4912      	ldr	r1, [pc, #72]	@ (8003ec4 <HAL_RCC_ClockConfig+0x2cc>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e7e:	f000 f829 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 8003e82:	4601      	mov	r1, r0
 8003e84:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec4 <HAL_RCC_ClockConfig+0x2cc>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e8c:	22f0      	movs	r2, #240	@ 0xf0
 8003e8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	fa92 f2a2 	rbit	r2, r2
 8003e96:	60fa      	str	r2, [r7, #12]
  return result;
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	fab2 f282 	clz	r2, r2
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	40d3      	lsrs	r3, r2
 8003ea2:	4a09      	ldr	r2, [pc, #36]	@ (8003ec8 <HAL_RCC_ClockConfig+0x2d0>)
 8003ea4:	5cd3      	ldrb	r3, [r2, r3]
 8003ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8003eaa:	4a08      	ldr	r2, [pc, #32]	@ (8003ecc <HAL_RCC_ClockConfig+0x2d4>)
 8003eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003eae:	4b08      	ldr	r3, [pc, #32]	@ (8003ed0 <HAL_RCC_ClockConfig+0x2d8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fc fd7e 	bl	80009b4 <HAL_InitTick>
  
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3778      	adds	r7, #120	@ 0x78
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	08009e00 	.word	0x08009e00
 8003ecc:	20000000 	.word	0x20000000
 8003ed0:	20000004 	.word	0x20000004

08003ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003eee:	4b1e      	ldr	r3, [pc, #120]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d002      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0x30>
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d003      	beq.n	8003f0a <HAL_RCC_GetSysClockFreq+0x36>
 8003f02:	e026      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f04:	4b19      	ldr	r3, [pc, #100]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f06:	613b      	str	r3, [r7, #16]
      break;
 8003f08:	e026      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	0c9b      	lsrs	r3, r3, #18
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	4a17      	ldr	r2, [pc, #92]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f14:	5cd3      	ldrb	r3, [r2, r3]
 8003f16:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003f18:	4b13      	ldr	r3, [pc, #76]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	4a14      	ldr	r2, [pc, #80]	@ (8003f74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f22:	5cd3      	ldrb	r3, [r2, r3]
 8003f24:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f30:	4a0e      	ldr	r2, [pc, #56]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e004      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a0c      	ldr	r2, [pc, #48]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	613b      	str	r3, [r7, #16]
      break;
 8003f50:	e002      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f52:	4b06      	ldr	r3, [pc, #24]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f54:	613b      	str	r3, [r7, #16]
      break;
 8003f56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f58:	693b      	ldr	r3, [r7, #16]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	007a1200 	.word	0x007a1200
 8003f70:	08009e10 	.word	0x08009e10
 8003f74:	08009e20 	.word	0x08009e20
 8003f78:	003d0900 	.word	0x003d0900

08003f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b092      	sub	sp, #72	@ 0x48
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 80d2 	beq.w	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa0:	4b4d      	ldr	r3, [pc, #308]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10e      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fac:	4b4a      	ldr	r3, [pc, #296]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	4a49      	ldr	r2, [pc, #292]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fb6:	61d3      	str	r3, [r2, #28]
 8003fb8:	4b47      	ldr	r3, [pc, #284]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fca:	4b44      	ldr	r3, [pc, #272]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d118      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fd6:	4b41      	ldr	r3, [pc, #260]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a40      	ldr	r2, [pc, #256]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe2:	f7fc fd2b 	bl	8000a3c <HAL_GetTick>
 8003fe6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe8:	e008      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fea:	f7fc fd27 	bl	8000a3c <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b64      	cmp	r3, #100	@ 0x64
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e167      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffc:	4b37      	ldr	r3, [pc, #220]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f0      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004008:	4b33      	ldr	r3, [pc, #204]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004010:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8082 	beq.w	800411e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004022:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004024:	429a      	cmp	r2, r3
 8004026:	d07a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004028:	4b2b      	ldr	r3, [pc, #172]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004030:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004032:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004036:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004042:	fab3 f383 	clz	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	4b25      	ldr	r3, [pc, #148]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	461a      	mov	r2, r3
 8004052:	2301      	movs	r3, #1
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800405a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800405e:	fa93 f3a3 	rbit	r3, r3
 8004062:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004066:	fab3 f383 	clz	r3, r3
 800406a:	b2db      	uxtb	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	4b1c      	ldr	r3, [pc, #112]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	461a      	mov	r2, r3
 8004076:	2300      	movs	r3, #0
 8004078:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800407a:	4a17      	ldr	r2, [pc, #92]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800407c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800407e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d049      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408a:	f7fc fcd7 	bl	8000a3c <HAL_GetTick>
 800408e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004090:	e00a      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004092:	f7fc fcd3 	bl	8000a3c <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e111      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x350>
 80040a8:	2302      	movs	r3, #2
 80040aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ae:	fa93 f3a3 	rbit	r3, r3
 80040b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b4:	2302      	movs	r3, #2
 80040b6:	623b      	str	r3, [r7, #32]
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	fa93 f3a3 	rbit	r3, r3
 80040be:	61fb      	str	r3, [r7, #28]
  return result;
 80040c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c2:	fab3 f383 	clz	r3, r3
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d108      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80040d2:	4b01      	ldr	r3, [pc, #4]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	e00d      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40007000 	.word	0x40007000
 80040e0:	10908100 	.word	0x10908100
 80040e4:	2302      	movs	r3, #2
 80040e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	fa93 f3a3 	rbit	r3, r3
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	4b78      	ldr	r3, [pc, #480]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	2202      	movs	r2, #2
 80040f6:	613a      	str	r2, [r7, #16]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	fa92 f2a2 	rbit	r2, r2
 80040fe:	60fa      	str	r2, [r7, #12]
  return result;
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	fab2 f282 	clz	r2, r2
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	f002 021f 	and.w	r2, r2, #31
 8004112:	2101      	movs	r1, #1
 8004114:	fa01 f202 	lsl.w	r2, r1, r2
 8004118:	4013      	ands	r3, r2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0b9      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800411e:	4b6d      	ldr	r3, [pc, #436]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	496a      	ldr	r1, [pc, #424]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800412c:	4313      	orrs	r3, r2
 800412e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004130:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004134:	2b01      	cmp	r3, #1
 8004136:	d105      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004138:	4b66      	ldr	r3, [pc, #408]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	4a65      	ldr	r2, [pc, #404]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800413e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004142:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004150:	4b60      	ldr	r3, [pc, #384]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004154:	f023 0203 	bic.w	r2, r3, #3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	495d      	ldr	r1, [pc, #372]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800415e:	4313      	orrs	r3, r2
 8004160:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800416e:	4b59      	ldr	r3, [pc, #356]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	4956      	ldr	r1, [pc, #344]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800417c:	4313      	orrs	r3, r2
 800417e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800418c:	4b51      	ldr	r3, [pc, #324]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800418e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004190:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	494e      	ldr	r1, [pc, #312]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800419a:	4313      	orrs	r3, r2
 800419c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041aa:	4b4a      	ldr	r3, [pc, #296]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	f023 0210 	bic.w	r2, r3, #16
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	4947      	ldr	r1, [pc, #284]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80041c8:	4b42      	ldr	r3, [pc, #264]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d4:	493f      	ldr	r1, [pc, #252]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041e6:	4b3b      	ldr	r3, [pc, #236]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ea:	f023 0220 	bic.w	r2, r3, #32
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	4938      	ldr	r1, [pc, #224]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004204:	4b33      	ldr	r3, [pc, #204]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004208:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	4930      	ldr	r1, [pc, #192]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004212:	4313      	orrs	r3, r2
 8004214:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004222:	4b2c      	ldr	r3, [pc, #176]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004226:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	4929      	ldr	r1, [pc, #164]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004230:	4313      	orrs	r3, r2
 8004232:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004240:	4b24      	ldr	r3, [pc, #144]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	4921      	ldr	r1, [pc, #132]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800424e:	4313      	orrs	r3, r2
 8004250:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800425e:	4b1d      	ldr	r3, [pc, #116]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004262:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	491a      	ldr	r1, [pc, #104]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800426c:	4313      	orrs	r3, r2
 800426e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800427c:	4b15      	ldr	r3, [pc, #84]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800427e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004280:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004288:	4912      	ldr	r1, [pc, #72]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800428a:	4313      	orrs	r3, r2
 800428c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800429a:	4b0e      	ldr	r3, [pc, #56]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a6:	490b      	ldr	r1, [pc, #44]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80042b8:	4b06      	ldr	r3, [pc, #24]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80042ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c4:	4903      	ldr	r1, [pc, #12]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3748      	adds	r7, #72	@ 0x48
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021000 	.word	0x40021000

080042d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e09d      	b.n	8004426 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d108      	bne.n	8004304 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042fa:	d009      	beq.n	8004310 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	61da      	str	r2, [r3, #28]
 8004302:	e005      	b.n	8004310 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fc fa74 	bl	8000818 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004346:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004350:	d902      	bls.n	8004358 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	e002      	b.n	800435e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800435c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004366:	d007      	beq.n	8004378 <HAL_SPI_Init+0xa0>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004370:	d002      	beq.n	8004378 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ba:	ea42 0103 	orr.w	r1, r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	0c1b      	lsrs	r3, r3, #16
 80043d4:	f003 0204 	and.w	r2, r3, #4
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80043f4:	ea42 0103 	orr.w	r1, r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004414:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800442e:	b480      	push	{r7}
 8004430:	b085      	sub	sp, #20
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800443e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004442:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	b29a      	uxth	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004464:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004468:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	b29b      	uxth	r3, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	b29b      	uxth	r3, r3
 800447a:	4013      	ands	r3, r2
 800447c:	b29a      	uxth	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	1d3b      	adds	r3, r7, #4
 800449c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b09d      	sub	sp, #116	@ 0x74
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80044f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	78db      	ldrb	r3, [r3, #3]
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d81f      	bhi.n	8004542 <USB_ActivateEndpoint+0x72>
 8004502:	a201      	add	r2, pc, #4	@ (adr r2, 8004508 <USB_ActivateEndpoint+0x38>)
 8004504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004508:	08004519 	.word	0x08004519
 800450c:	08004535 	.word	0x08004535
 8004510:	0800454b 	.word	0x0800454b
 8004514:	08004527 	.word	0x08004527
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004518:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800451c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004520:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004524:	e012      	b.n	800454c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004526:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800452a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800452e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004532:	e00b      	b.n	800454c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004534:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004538:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800453c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004540:	e004      	b.n	800454c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004548:	e000      	b.n	800454c <USB_ActivateEndpoint+0x7c>
      break;
 800454a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	441a      	add	r2, r3
 8004556:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800455a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800455e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800456a:	b29b      	uxth	r3, r3
 800456c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	b21b      	sxth	r3, r3
 800457e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004586:	b21a      	sxth	r2, r3
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	b21b      	sxth	r3, r3
 800458e:	4313      	orrs	r3, r2
 8004590:	b21b      	sxth	r3, r3
 8004592:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	441a      	add	r2, r3
 80045a0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80045a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	7b1b      	ldrb	r3, [r3, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f040 8178 	bne.w	80048b2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	785b      	ldrb	r3, [r3, #1]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 8084 	beq.w	80046d4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	4413      	add	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	011a      	lsls	r2, r3, #4
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	88db      	ldrh	r3, [r3, #6]
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	827b      	strh	r3, [r7, #18]
 800460e:	8a7b      	ldrh	r3, [r7, #18]
 8004610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01b      	beq.n	8004650 <USB_ActivateEndpoint+0x180>
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800462a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462e:	823b      	strh	r3, [r7, #16]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	8a3b      	ldrh	r3, [r7, #16]
 800463c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004648:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800464c:	b29b      	uxth	r3, r3
 800464e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	78db      	ldrb	r3, [r3, #3]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d020      	beq.n	800469a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800466a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800466e:	81bb      	strh	r3, [r7, #12]
 8004670:	89bb      	ldrh	r3, [r7, #12]
 8004672:	f083 0320 	eor.w	r3, r3, #32
 8004676:	81bb      	strh	r3, [r7, #12]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	441a      	add	r2, r3
 8004682:	89bb      	ldrh	r3, [r7, #12]
 8004684:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004688:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800468c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004694:	b29b      	uxth	r3, r3
 8004696:	8013      	strh	r3, [r2, #0]
 8004698:	e2d5      	b.n	8004c46 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046b0:	81fb      	strh	r3, [r7, #14]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	441a      	add	r2, r3
 80046bc:	89fb      	ldrh	r3, [r7, #14]
 80046be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	8013      	strh	r3, [r2, #0]
 80046d2:	e2b8      	b.n	8004c46 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046de:	b29b      	uxth	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e4:	4413      	add	r3, r2
 80046e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	011a      	lsls	r2, r3, #4
 80046ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80046f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	88db      	ldrh	r3, [r3, #6]
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	b29b      	uxth	r3, r3
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004706:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004712:	b29b      	uxth	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004718:	4413      	add	r3, r2
 800471a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	011a      	lsls	r2, r3, #4
 8004722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004724:	4413      	add	r3, r2
 8004726:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24
 800472c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	b29b      	uxth	r3, r3
 8004732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004736:	b29a      	uxth	r2, r3
 8004738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473a:	801a      	strh	r2, [r3, #0]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <USB_ActivateEndpoint+0x28a>
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	b29b      	uxth	r3, r3
 800474a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800474e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004752:	b29a      	uxth	r2, r3
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	801a      	strh	r2, [r3, #0]
 8004758:	e039      	b.n	80047ce <USB_ActivateEndpoint+0x2fe>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004760:	d818      	bhi.n	8004794 <USB_ActivateEndpoint+0x2c4>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	085b      	lsrs	r3, r3, #1
 8004768:	66bb      	str	r3, [r7, #104]	@ 0x68
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <USB_ActivateEndpoint+0x2ac>
 8004776:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004778:	3301      	adds	r3, #1
 800477a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	881b      	ldrh	r3, [r3, #0]
 8004780:	b29a      	uxth	r2, r3
 8004782:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004784:	b29b      	uxth	r3, r3
 8004786:	029b      	lsls	r3, r3, #10
 8004788:	b29b      	uxth	r3, r3
 800478a:	4313      	orrs	r3, r2
 800478c:	b29a      	uxth	r2, r3
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	801a      	strh	r2, [r3, #0]
 8004792:	e01c      	b.n	80047ce <USB_ActivateEndpoint+0x2fe>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d102      	bne.n	80047ae <USB_ActivateEndpoint+0x2de>
 80047a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047aa:	3b01      	subs	r3, #1
 80047ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	029b      	lsls	r3, r3, #10
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	4313      	orrs	r3, r2
 80047be:	b29b      	uxth	r3, r3
 80047c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	847b      	strh	r3, [r7, #34]	@ 0x22
 80047dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80047de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01b      	beq.n	800481e <USB_ActivateEndpoint+0x34e>
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047fc:	843b      	strh	r3, [r7, #32]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	441a      	add	r2, r3
 8004808:	8c3b      	ldrh	r3, [r7, #32]
 800480a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800480e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004812:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800481a:	b29b      	uxth	r3, r3
 800481c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d124      	bne.n	8004870 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800483c:	83bb      	strh	r3, [r7, #28]
 800483e:	8bbb      	ldrh	r3, [r7, #28]
 8004840:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004844:	83bb      	strh	r3, [r7, #28]
 8004846:	8bbb      	ldrh	r3, [r7, #28]
 8004848:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800484c:	83bb      	strh	r3, [r7, #28]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	8bbb      	ldrh	r3, [r7, #28]
 800485a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800485e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800486a:	b29b      	uxth	r3, r3
 800486c:	8013      	strh	r3, [r2, #0]
 800486e:	e1ea      	b.n	8004c46 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	b29b      	uxth	r3, r3
 800487e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004886:	83fb      	strh	r3, [r7, #30]
 8004888:	8bfb      	ldrh	r3, [r7, #30]
 800488a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800488e:	83fb      	strh	r3, [r7, #30]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	441a      	add	r2, r3
 800489a:	8bfb      	ldrh	r3, [r7, #30]
 800489c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	8013      	strh	r3, [r2, #0]
 80048b0:	e1c9      	b.n	8004c46 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	78db      	ldrb	r3, [r3, #3]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d11e      	bne.n	80048f8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	441a      	add	r2, r3
 80048de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80048e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80048ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	8013      	strh	r3, [r2, #0]
 80048f6:	e01d      	b.n	8004934 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800490a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800490e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	441a      	add	r2, r3
 800491c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800492c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004930:	b29b      	uxth	r3, r3
 8004932:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800493e:	b29b      	uxth	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004944:	4413      	add	r3, r2
 8004946:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	011a      	lsls	r2, r3, #4
 800494e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004950:	4413      	add	r3, r2
 8004952:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004956:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	891b      	ldrh	r3, [r3, #8]
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	b29b      	uxth	r3, r3
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004966:	801a      	strh	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	657b      	str	r3, [r7, #84]	@ 0x54
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004972:	b29b      	uxth	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004978:	4413      	add	r3, r2
 800497a:	657b      	str	r3, [r7, #84]	@ 0x54
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	011a      	lsls	r2, r3, #4
 8004982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004984:	4413      	add	r3, r2
 8004986:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800498a:	653b      	str	r3, [r7, #80]	@ 0x50
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	895b      	ldrh	r3, [r3, #10]
 8004990:	085b      	lsrs	r3, r3, #1
 8004992:	b29b      	uxth	r3, r3
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800499a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	785b      	ldrb	r3, [r3, #1]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f040 8093 	bne.w	8004acc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80049b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80049ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d01b      	beq.n	80049fa <USB_ActivateEndpoint+0x52a>
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	441a      	add	r2, r3
 80049e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80049e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004a08:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d01b      	beq.n	8004a4a <USB_ActivateEndpoint+0x57a>
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a28:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	441a      	add	r2, r3
 8004a34:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004a36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a60:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004a62:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004a64:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004a68:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004a6a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004a6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a70:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	441a      	add	r2, r3
 8004a7c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004a7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aa8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	441a      	add	r2, r3
 8004ab4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	8013      	strh	r3, [r2, #0]
 8004aca:	e0bc      	b.n	8004c46 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004adc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004ae0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d01d      	beq.n	8004b24 <USB_ActivateEndpoint+0x654>
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afe:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	441a      	add	r2, r3
 8004b0c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004b10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004b34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01d      	beq.n	8004b7c <USB_ActivateEndpoint+0x6ac>
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b56:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	441a      	add	r2, r3
 8004b64:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004b68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	78db      	ldrb	r3, [r3, #3]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d024      	beq.n	8004bce <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b9a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004b9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004ba2:	f083 0320 	eor.w	r3, r3, #32
 8004ba6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	441a      	add	r2, r3
 8004bb4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004bb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	8013      	strh	r3, [r2, #0]
 8004bcc:	e01d      	b.n	8004c0a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004be0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004be4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	441a      	add	r2, r3
 8004bf2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004bf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c20:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	441a      	add	r2, r3
 8004c2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004c32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004c46:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3774      	adds	r7, #116	@ 0x74
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop

08004c58 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b08d      	sub	sp, #52	@ 0x34
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	7b1b      	ldrb	r3, [r3, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f040 808e 	bne.w	8004d88 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d044      	beq.n	8004cfe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	81bb      	strh	r3, [r7, #12]
 8004c82:	89bb      	ldrh	r3, [r7, #12]
 8004c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01b      	beq.n	8004cc4 <USB_DeactivateEndpoint+0x6c>
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca2:	817b      	strh	r3, [r7, #10]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	441a      	add	r2, r3
 8004cae:	897b      	ldrh	r3, [r7, #10]
 8004cb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cda:	813b      	strh	r3, [r7, #8]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	441a      	add	r2, r3
 8004ce6:	893b      	ldrh	r3, [r7, #8]
 8004ce8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	8013      	strh	r3, [r2, #0]
 8004cfc:	e192      	b.n	8005024 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	827b      	strh	r3, [r7, #18]
 8004d0c:	8a7b      	ldrh	r3, [r7, #18]
 8004d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01b      	beq.n	8004d4e <USB_DeactivateEndpoint+0xf6>
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d2c:	823b      	strh	r3, [r7, #16]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	441a      	add	r2, r3
 8004d38:	8a3b      	ldrh	r3, [r7, #16]
 8004d3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d64:	81fb      	strh	r3, [r7, #14]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	441a      	add	r2, r3
 8004d70:	89fb      	ldrh	r3, [r7, #14]
 8004d72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	8013      	strh	r3, [r2, #0]
 8004d86:	e14d      	b.n	8005024 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	785b      	ldrb	r3, [r3, #1]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f040 80a5 	bne.w	8004edc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	843b      	strh	r3, [r7, #32]
 8004da0:	8c3b      	ldrh	r3, [r7, #32]
 8004da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d01b      	beq.n	8004de2 <USB_DeactivateEndpoint+0x18a>
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc0:	83fb      	strh	r3, [r7, #30]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	441a      	add	r2, r3
 8004dcc:	8bfb      	ldrh	r3, [r7, #30]
 8004dce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	83bb      	strh	r3, [r7, #28]
 8004df0:	8bbb      	ldrh	r3, [r7, #28]
 8004df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01b      	beq.n	8004e32 <USB_DeactivateEndpoint+0x1da>
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e10:	837b      	strh	r3, [r7, #26]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	441a      	add	r2, r3
 8004e1c:	8b7b      	ldrh	r3, [r7, #26]
 8004e1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e48:	833b      	strh	r3, [r7, #24]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	441a      	add	r2, r3
 8004e54:	8b3b      	ldrh	r3, [r7, #24]
 8004e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e80:	82fb      	strh	r3, [r7, #22]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	441a      	add	r2, r3
 8004e8c:	8afb      	ldrh	r3, [r7, #22]
 8004e8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eb8:	82bb      	strh	r3, [r7, #20]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	8abb      	ldrh	r3, [r7, #20]
 8004ec6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ece:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	8013      	strh	r3, [r2, #0]
 8004eda:	e0a3      	b.n	8005024 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004eea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004eec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01b      	beq.n	8004f2c <USB_DeactivateEndpoint+0x2d4>
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f0a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	441a      	add	r2, r3
 8004f16:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004f18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004f3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01b      	beq.n	8004f7c <USB_DeactivateEndpoint+0x324>
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f5a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004f68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f92:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	441a      	add	r2, r3
 8004f9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004fa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fa8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fca:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	441a      	add	r2, r3
 8004fd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fe0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005002:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	441a      	add	r2, r3
 800500e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005010:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005014:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005018:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800501c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005020:	b29b      	uxth	r3, r3
 8005022:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3734      	adds	r7, #52	@ 0x34
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b0c2      	sub	sp, #264	@ 0x108
 8005036:	af00      	add	r7, sp, #0
 8005038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800503c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005040:	6018      	str	r0, [r3, #0]
 8005042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800504a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800504c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	785b      	ldrb	r3, [r3, #1]
 8005058:	2b01      	cmp	r3, #1
 800505a:	f040 86b7 	bne.w	8005dcc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800505e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699a      	ldr	r2, [r3, #24]
 800506a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800506e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	429a      	cmp	r2, r3
 8005078:	d908      	bls.n	800508c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800507a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800507e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800508a:	e007      	b.n	800509c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800508c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800509c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	7b1b      	ldrb	r3, [r3, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d13a      	bne.n	8005122 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80050ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6959      	ldr	r1, [r3, #20]
 80050b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	88da      	ldrh	r2, [r3, #6]
 80050c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80050ce:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80050d2:	6800      	ldr	r0, [r0, #0]
 80050d4:	f001 fc8d 	bl	80069f2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4413      	add	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	011a      	lsls	r2, r3, #4
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4413      	add	r3, r2
 800510e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	801a      	strh	r2, [r3, #0]
 800511e:	f000 be1f 	b.w	8005d60 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	78db      	ldrb	r3, [r3, #3]
 800512e:	2b02      	cmp	r3, #2
 8005130:	f040 8462 	bne.w	80059f8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6a1a      	ldr	r2, [r3, #32]
 8005140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	429a      	cmp	r2, r3
 800514e:	f240 83df 	bls.w	8005910 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005156:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29b      	uxth	r3, r3
 8005170:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005178:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800517c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005180:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800518a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	441a      	add	r2, r3
 8005196:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800519a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800519e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051a2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80051a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80051ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6a1a      	ldr	r2, [r3, #32]
 80051ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051be:	1ad2      	subs	r2, r2, r3
 80051c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 81c7 	beq.w	8005582 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	785b      	ldrb	r3, [r3, #1]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d177      	bne.n	8005300 <USB_EPStartXfer+0x2ce>
 8005210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005214:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800521c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005220:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800522a:	b29b      	uxth	r3, r3
 800522c:	461a      	mov	r2, r3
 800522e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005230:	4413      	add	r3, r2
 8005232:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	011a      	lsls	r2, r3, #4
 8005242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005244:	4413      	add	r3, r2
 8005246:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800524a:	627b      	str	r3, [r7, #36]	@ 0x24
 800524c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005256:	b29a      	uxth	r2, r3
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	801a      	strh	r2, [r3, #0]
 800525c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <USB_EPStartXfer+0x248>
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800526e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005272:	b29a      	uxth	r2, r3
 8005274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005276:	801a      	strh	r2, [r3, #0]
 8005278:	e067      	b.n	800534a <USB_EPStartXfer+0x318>
 800527a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800527e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005280:	d81c      	bhi.n	80052bc <USB_EPStartXfer+0x28a>
 8005282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005286:	085b      	lsrs	r3, r3, #1
 8005288:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800528c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <USB_EPStartXfer+0x270>
 8005298:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800529c:	3301      	adds	r3, #1
 800529e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	029b      	lsls	r3, r3, #10
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	4313      	orrs	r3, r2
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	801a      	strh	r2, [r3, #0]
 80052ba:	e046      	b.n	800534a <USB_EPStartXfer+0x318>
 80052bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c0:	095b      	lsrs	r3, r3, #5
 80052c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d104      	bne.n	80052dc <USB_EPStartXfer+0x2aa>
 80052d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80052d6:	3b01      	subs	r3, #1
 80052d8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	029b      	lsls	r3, r3, #10
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	4313      	orrs	r3, r2
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	801a      	strh	r2, [r3, #0]
 80052fe:	e024      	b.n	800534a <USB_EPStartXfer+0x318>
 8005300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	785b      	ldrb	r3, [r3, #1]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d11c      	bne.n	800534a <USB_EPStartXfer+0x318>
 8005310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800531e:	b29b      	uxth	r3, r3
 8005320:	461a      	mov	r2, r3
 8005322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005324:	4413      	add	r3, r2
 8005326:	633b      	str	r3, [r7, #48]	@ 0x30
 8005328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800532c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	011a      	lsls	r2, r3, #4
 8005336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005338:	4413      	add	r3, r2
 800533a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800533e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005344:	b29a      	uxth	r2, r3
 8005346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005348:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800534a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	895b      	ldrh	r3, [r3, #10]
 8005356:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800535a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6959      	ldr	r1, [r3, #20]
 8005366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536a:	b29b      	uxth	r3, r3
 800536c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005370:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005374:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005378:	6800      	ldr	r0, [r0, #0]
 800537a:	f001 fb3a 	bl	80069f2 <USB_WritePMA>
            ep->xfer_buff += len;
 800537e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695a      	ldr	r2, [r3, #20]
 800538a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538e:	441a      	add	r2, r3
 8005390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800539c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6a1a      	ldr	r2, [r3, #32]
 80053a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d90f      	bls.n	80053d8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80053b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6a1a      	ldr	r2, [r3, #32]
 80053c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c8:	1ad2      	subs	r2, r2, r3
 80053ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	621a      	str	r2, [r3, #32]
 80053d6:	e00e      	b.n	80053f6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80053d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80053e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2200      	movs	r2, #0
 80053f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	785b      	ldrb	r3, [r3, #1]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d177      	bne.n	80054f6 <USB_EPStartXfer+0x4c4>
 8005406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005416:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005420:	b29b      	uxth	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	4413      	add	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800542e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	011a      	lsls	r2, r3, #4
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	4413      	add	r3, r2
 800543c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29b      	uxth	r3, r3
 8005448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800544c:	b29a      	uxth	r2, r3
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	801a      	strh	r2, [r3, #0]
 8005452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <USB_EPStartXfer+0x43e>
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005468:	b29a      	uxth	r2, r3
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	801a      	strh	r2, [r3, #0]
 800546e:	e06d      	b.n	800554c <USB_EPStartXfer+0x51a>
 8005470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005474:	2b3e      	cmp	r3, #62	@ 0x3e
 8005476:	d81c      	bhi.n	80054b2 <USB_EPStartXfer+0x480>
 8005478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800547c:	085b      	lsrs	r3, r3, #1
 800547e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d004      	beq.n	8005498 <USB_EPStartXfer+0x466>
 800548e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005492:	3301      	adds	r3, #1
 8005494:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b29a      	uxth	r2, r3
 800549e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	029b      	lsls	r3, r3, #10
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	4313      	orrs	r3, r2
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	801a      	strh	r2, [r3, #0]
 80054b0:	e04c      	b.n	800554c <USB_EPStartXfer+0x51a>
 80054b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80054bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c0:	f003 031f 	and.w	r3, r3, #31
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <USB_EPStartXfer+0x4a0>
 80054c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054cc:	3b01      	subs	r3, #1
 80054ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054dc:	b29b      	uxth	r3, r3
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	4313      	orrs	r3, r2
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	801a      	strh	r2, [r3, #0]
 80054f4:	e02a      	b.n	800554c <USB_EPStartXfer+0x51a>
 80054f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	785b      	ldrb	r3, [r3, #1]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d122      	bne.n	800554c <USB_EPStartXfer+0x51a>
 8005506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800550a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	623b      	str	r3, [r7, #32]
 8005512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005516:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005520:	b29b      	uxth	r3, r3
 8005522:	461a      	mov	r2, r3
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	4413      	add	r3, r2
 8005528:	623b      	str	r3, [r7, #32]
 800552a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800552e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	011a      	lsls	r2, r3, #4
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	4413      	add	r3, r2
 800553c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005546:	b29a      	uxth	r2, r3
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800554c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	891b      	ldrh	r3, [r3, #8]
 8005558:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800555c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6959      	ldr	r1, [r3, #20]
 8005568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800556c:	b29b      	uxth	r3, r3
 800556e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005572:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005576:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	f001 fa39 	bl	80069f2 <USB_WritePMA>
 8005580:	e3ee      	b.n	8005d60 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005586:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d177      	bne.n	8005682 <USB_EPStartXfer+0x650>
 8005592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005596:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800559e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055b2:	4413      	add	r3, r2
 80055b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	011a      	lsls	r2, r3, #4
 80055c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055c6:	4413      	add	r3, r2
 80055c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80055cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055d8:	b29a      	uxth	r2, r3
 80055da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10a      	bne.n	80055fc <USB_EPStartXfer+0x5ca>
 80055e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055f8:	801a      	strh	r2, [r3, #0]
 80055fa:	e06d      	b.n	80056d8 <USB_EPStartXfer+0x6a6>
 80055fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005600:	2b3e      	cmp	r3, #62	@ 0x3e
 8005602:	d81c      	bhi.n	800563e <USB_EPStartXfer+0x60c>
 8005604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005608:	085b      	lsrs	r3, r3, #1
 800560a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800560e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d004      	beq.n	8005624 <USB_EPStartXfer+0x5f2>
 800561a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800561e:	3301      	adds	r3, #1
 8005620:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	b29a      	uxth	r2, r3
 800562a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800562e:	b29b      	uxth	r3, r3
 8005630:	029b      	lsls	r3, r3, #10
 8005632:	b29b      	uxth	r3, r3
 8005634:	4313      	orrs	r3, r2
 8005636:	b29a      	uxth	r2, r3
 8005638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800563a:	801a      	strh	r2, [r3, #0]
 800563c:	e04c      	b.n	80056d8 <USB_EPStartXfer+0x6a6>
 800563e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800564c:	f003 031f 	and.w	r3, r3, #31
 8005650:	2b00      	cmp	r3, #0
 8005652:	d104      	bne.n	800565e <USB_EPStartXfer+0x62c>
 8005654:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005658:	3b01      	subs	r3, #1
 800565a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800565e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b29a      	uxth	r2, r3
 8005664:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005668:	b29b      	uxth	r3, r3
 800566a:	029b      	lsls	r3, r3, #10
 800566c:	b29b      	uxth	r3, r3
 800566e:	4313      	orrs	r3, r2
 8005670:	b29b      	uxth	r3, r3
 8005672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800567a:	b29a      	uxth	r2, r3
 800567c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800567e:	801a      	strh	r2, [r3, #0]
 8005680:	e02a      	b.n	80056d8 <USB_EPStartXfer+0x6a6>
 8005682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	785b      	ldrb	r3, [r3, #1]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d122      	bne.n	80056d8 <USB_EPStartXfer+0x6a6>
 8005692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005696:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	653b      	str	r3, [r7, #80]	@ 0x50
 800569e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056b2:	4413      	add	r3, r2
 80056b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80056b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	011a      	lsls	r2, r3, #4
 80056c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056c6:	4413      	add	r3, r2
 80056c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80056cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	891b      	ldrh	r3, [r3, #8]
 80056e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6959      	ldr	r1, [r3, #20]
 80056f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80056fe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005702:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005706:	6800      	ldr	r0, [r0, #0]
 8005708:	f001 f973 	bl	80069f2 <USB_WritePMA>
            ep->xfer_buff += len;
 800570c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800571c:	441a      	add	r2, r3
 800571e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800572a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6a1a      	ldr	r2, [r3, #32]
 8005736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	429a      	cmp	r2, r3
 8005744:	d90f      	bls.n	8005766 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800574a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6a1a      	ldr	r2, [r3, #32]
 8005752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005756:	1ad2      	subs	r2, r2, r3
 8005758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800575c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	621a      	str	r2, [r3, #32]
 8005764:	e00e      	b.n	8005784 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800577a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2200      	movs	r2, #0
 8005782:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005788:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	785b      	ldrb	r3, [r3, #1]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d177      	bne.n	8005890 <USB_EPStartXfer+0x85e>
 80057a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	461a      	mov	r2, r3
 80057be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c0:	4413      	add	r3, r2
 80057c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	011a      	lsls	r2, r3, #4
 80057d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d4:	4413      	add	r3, r2
 80057d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80057da:	637b      	str	r3, [r7, #52]	@ 0x34
 80057dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ea:	801a      	strh	r2, [r3, #0]
 80057ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <USB_EPStartXfer+0x7d8>
 80057f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005802:	b29a      	uxth	r2, r3
 8005804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005806:	801a      	strh	r2, [r3, #0]
 8005808:	e067      	b.n	80058da <USB_EPStartXfer+0x8a8>
 800580a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800580e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005810:	d81c      	bhi.n	800584c <USB_EPStartXfer+0x81a>
 8005812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005816:	085b      	lsrs	r3, r3, #1
 8005818:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	d004      	beq.n	8005832 <USB_EPStartXfer+0x800>
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800582c:	3301      	adds	r3, #1
 800582e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	b29a      	uxth	r2, r3
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583c:	b29b      	uxth	r3, r3
 800583e:	029b      	lsls	r3, r3, #10
 8005840:	b29b      	uxth	r3, r3
 8005842:	4313      	orrs	r3, r2
 8005844:	b29a      	uxth	r2, r3
 8005846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	e046      	b.n	80058da <USB_EPStartXfer+0x8a8>
 800584c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585a:	f003 031f 	and.w	r3, r3, #31
 800585e:	2b00      	cmp	r3, #0
 8005860:	d104      	bne.n	800586c <USB_EPStartXfer+0x83a>
 8005862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005866:	3b01      	subs	r3, #1
 8005868:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800586c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29a      	uxth	r2, r3
 8005872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005876:	b29b      	uxth	r3, r3
 8005878:	029b      	lsls	r3, r3, #10
 800587a:	b29b      	uxth	r3, r3
 800587c:	4313      	orrs	r3, r2
 800587e:	b29b      	uxth	r3, r3
 8005880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005888:	b29a      	uxth	r2, r3
 800588a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588c:	801a      	strh	r2, [r3, #0]
 800588e:	e024      	b.n	80058da <USB_EPStartXfer+0x8a8>
 8005890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	785b      	ldrb	r3, [r3, #1]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d11c      	bne.n	80058da <USB_EPStartXfer+0x8a8>
 80058a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	461a      	mov	r2, r3
 80058b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058b4:	4413      	add	r3, r2
 80058b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80058b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	011a      	lsls	r2, r3, #4
 80058c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058c8:	4413      	add	r3, r2
 80058ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	895b      	ldrh	r3, [r3, #10]
 80058e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6959      	ldr	r1, [r3, #20]
 80058f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005900:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005904:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005908:	6800      	ldr	r0, [r0, #0]
 800590a:	f001 f872 	bl	80069f2 <USB_WritePMA>
 800590e:	e227      	b.n	8005d60 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005924:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800592e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	b29b      	uxth	r3, r3
 800593e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005946:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800594a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	441a      	add	r2, r3
 8005964:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800596c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005978:	b29b      	uxth	r3, r3
 800597a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800597c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005980:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005996:	b29b      	uxth	r3, r3
 8005998:	461a      	mov	r2, r3
 800599a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800599c:	4413      	add	r3, r2
 800599e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	011a      	lsls	r2, r3, #4
 80059ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059b0:	4413      	add	r3, r2
 80059b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059bc:	b29a      	uxth	r2, r3
 80059be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	891b      	ldrh	r3, [r3, #8]
 80059ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6959      	ldr	r1, [r3, #20]
 80059de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80059e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80059ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80059f0:	6800      	ldr	r0, [r0, #0]
 80059f2:	f000 fffe 	bl	80069f2 <USB_WritePMA>
 80059f6:	e1b3      	b.n	8005d60 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80059f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6a1a      	ldr	r2, [r3, #32]
 8005a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a08:	1ad2      	subs	r2, r2, r3
 8005a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 80c6 	beq.w	8005bca <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	785b      	ldrb	r3, [r3, #1]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d177      	bne.n	8005b4a <USB_EPStartXfer+0xb18>
 8005a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a7a:	4413      	add	r3, r2
 8005a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	011a      	lsls	r2, r3, #4
 8005a8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a8e:	4413      	add	r3, r2
 8005a90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a94:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005aa4:	801a      	strh	r2, [r3, #0]
 8005aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10a      	bne.n	8005ac4 <USB_EPStartXfer+0xa92>
 8005aae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ac0:	801a      	strh	r2, [r3, #0]
 8005ac2:	e067      	b.n	8005b94 <USB_EPStartXfer+0xb62>
 8005ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005aca:	d81c      	bhi.n	8005b06 <USB_EPStartXfer+0xad4>
 8005acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad0:	085b      	lsrs	r3, r3, #1
 8005ad2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d004      	beq.n	8005aec <USB_EPStartXfer+0xaba>
 8005ae2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005aec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	029b      	lsls	r3, r3, #10
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	4313      	orrs	r3, r2
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	e046      	b.n	8005b94 <USB_EPStartXfer+0xb62>
 8005b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b14:	f003 031f 	and.w	r3, r3, #31
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d104      	bne.n	8005b26 <USB_EPStartXfer+0xaf4>
 8005b1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b20:	3b01      	subs	r3, #1
 8005b22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	029b      	lsls	r3, r3, #10
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	4313      	orrs	r3, r2
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b46:	801a      	strh	r2, [r3, #0]
 8005b48:	e024      	b.n	8005b94 <USB_EPStartXfer+0xb62>
 8005b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	785b      	ldrb	r3, [r3, #1]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d11c      	bne.n	8005b94 <USB_EPStartXfer+0xb62>
 8005b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b6e:	4413      	add	r3, r2
 8005b70:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	011a      	lsls	r2, r3, #4
 8005b80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b82:	4413      	add	r3, r2
 8005b84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b92:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	895b      	ldrh	r3, [r3, #10]
 8005ba0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6959      	ldr	r1, [r3, #20]
 8005bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005bba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005bbe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005bc2:	6800      	ldr	r0, [r0, #0]
 8005bc4:	f000 ff15 	bl	80069f2 <USB_WritePMA>
 8005bc8:	e0ca      	b.n	8005d60 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d177      	bne.n	8005cca <USB_EPStartXfer+0xc98>
 8005bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bfa:	4413      	add	r3, r2
 8005bfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	011a      	lsls	r2, r3, #4
 8005c0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c0e:	4413      	add	r3, r2
 8005c10:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c24:	801a      	strh	r2, [r3, #0]
 8005c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10a      	bne.n	8005c44 <USB_EPStartXfer+0xc12>
 8005c2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	e073      	b.n	8005d2c <USB_EPStartXfer+0xcfa>
 8005c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c48:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c4a:	d81c      	bhi.n	8005c86 <USB_EPStartXfer+0xc54>
 8005c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d004      	beq.n	8005c6c <USB_EPStartXfer+0xc3a>
 8005c62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005c66:	3301      	adds	r3, #1
 8005c68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	029b      	lsls	r3, r3, #10
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c82:	801a      	strh	r2, [r3, #0]
 8005c84:	e052      	b.n	8005d2c <USB_EPStartXfer+0xcfa>
 8005c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c94:	f003 031f 	and.w	r3, r3, #31
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d104      	bne.n	8005ca6 <USB_EPStartXfer+0xc74>
 8005c9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ca6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	029b      	lsls	r3, r3, #10
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cc6:	801a      	strh	r2, [r3, #0]
 8005cc8:	e030      	b.n	8005d2c <USB_EPStartXfer+0xcfa>
 8005cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d128      	bne.n	8005d2c <USB_EPStartXfer+0xcfa>
 8005cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cfe:	4413      	add	r3, r2
 8005d00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	011a      	lsls	r2, r3, #4
 8005d12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d16:	4413      	add	r3, r2
 8005d18:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	891b      	ldrh	r3, [r3, #8]
 8005d38:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6959      	ldr	r1, [r3, #20]
 8005d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d52:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d56:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d5a:	6800      	ldr	r0, [r0, #0]
 8005d5c:	f000 fe49 	bl	80069f2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d86:	817b      	strh	r3, [r7, #10]
 8005d88:	897b      	ldrh	r3, [r7, #10]
 8005d8a:	f083 0310 	eor.w	r3, r3, #16
 8005d8e:	817b      	strh	r3, [r7, #10]
 8005d90:	897b      	ldrh	r3, [r7, #10]
 8005d92:	f083 0320 	eor.w	r3, r3, #32
 8005d96:	817b      	strh	r3, [r7, #10]
 8005d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	441a      	add	r2, r3
 8005db2:	897b      	ldrh	r3, [r7, #10]
 8005db4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005db8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	8013      	strh	r3, [r2, #0]
 8005dc8:	f000 bcdf 	b.w	800678a <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	7b1b      	ldrb	r3, [r3, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f040 80bc 	bne.w	8005f56 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d917      	bls.n	8005e2a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e1a:	1ad2      	subs	r2, r2, r3
 8005e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	619a      	str	r2, [r3, #24]
 8005e28:	e00e      	b.n	8005e48 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2200      	movs	r2, #0
 8005e46:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	461a      	mov	r2, r3
 8005e68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	011a      	lsls	r2, r3, #4
 8005e80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e84:	4413      	add	r3, r2
 8005e86:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ea0:	801a      	strh	r2, [r3, #0]
 8005ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10d      	bne.n	8005ec6 <USB_EPStartXfer+0xe94>
 8005eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ec0:	801a      	strh	r2, [r3, #0]
 8005ec2:	f000 bc28 	b.w	8006716 <USB_EPStartXfer+0x16e4>
 8005ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eca:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ecc:	d81f      	bhi.n	8005f0e <USB_EPStartXfer+0xedc>
 8005ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d004      	beq.n	8005eee <USB_EPStartXfer+0xebc>
 8005ee4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ee8:	3301      	adds	r3, #1
 8005eea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	029b      	lsls	r3, r3, #10
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	4313      	orrs	r3, r2
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f08:	801a      	strh	r2, [r3, #0]
 8005f0a:	f000 bc04 	b.w	8006716 <USB_EPStartXfer+0x16e4>
 8005f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d104      	bne.n	8005f2e <USB_EPStartXfer+0xefc>
 8005f24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	029b      	lsls	r3, r3, #10
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	4313      	orrs	r3, r2
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f52:	801a      	strh	r2, [r3, #0]
 8005f54:	e3df      	b.n	8006716 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	78db      	ldrb	r3, [r3, #3]
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	f040 8218 	bne.w	8006398 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f040 809d 	bne.w	80060b4 <USB_EPStartXfer+0x1082>
 8005f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	011a      	lsls	r2, r3, #4
 8005fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005fd2:	801a      	strh	r2, [r3, #0]
 8005fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10c      	bne.n	8005ffe <USB_EPStartXfer+0xfcc>
 8005fe4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ffa:	801a      	strh	r2, [r3, #0]
 8005ffc:	e08f      	b.n	800611e <USB_EPStartXfer+0x10ec>
 8005ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	2b3e      	cmp	r3, #62	@ 0x3e
 800600c:	d826      	bhi.n	800605c <USB_EPStartXfer+0x102a>
 800600e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	085b      	lsrs	r3, r3, #1
 800601c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d004      	beq.n	800603e <USB_EPStartXfer+0x100c>
 8006034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006038:	3301      	adds	r3, #1
 800603a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800603e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	b29a      	uxth	r2, r3
 8006046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800604a:	b29b      	uxth	r3, r3
 800604c:	029b      	lsls	r3, r3, #10
 800604e:	b29b      	uxth	r3, r3
 8006050:	4313      	orrs	r3, r2
 8006052:	b29a      	uxth	r2, r3
 8006054:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	e060      	b.n	800611e <USB_EPStartXfer+0x10ec>
 800605c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	095b      	lsrs	r3, r3, #5
 800606a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800606e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 031f 	and.w	r3, r3, #31
 800607e:	2b00      	cmp	r3, #0
 8006080:	d104      	bne.n	800608c <USB_EPStartXfer+0x105a>
 8006082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006086:	3b01      	subs	r3, #1
 8006088:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800608c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	b29a      	uxth	r2, r3
 8006094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006098:	b29b      	uxth	r3, r3
 800609a:	029b      	lsls	r3, r3, #10
 800609c:	b29b      	uxth	r3, r3
 800609e:	4313      	orrs	r3, r2
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060b0:	801a      	strh	r2, [r3, #0]
 80060b2:	e034      	b.n	800611e <USB_EPStartXfer+0x10ec>
 80060b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d12c      	bne.n	800611e <USB_EPStartXfer+0x10ec>
 80060c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	461a      	mov	r2, r3
 80060e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80060e8:	4413      	add	r3, r2
 80060ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	011a      	lsls	r2, r3, #4
 80060fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006100:	4413      	add	r3, r2
 8006102:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006106:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800610a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	b29a      	uxth	r2, r3
 8006118:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800611c:	801a      	strh	r2, [r3, #0]
 800611e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006122:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800612c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	785b      	ldrb	r3, [r3, #1]
 8006138:	2b00      	cmp	r3, #0
 800613a:	f040 809d 	bne.w	8006278 <USB_EPStartXfer+0x1246>
 800613e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006142:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800614c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006150:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800615a:	b29b      	uxth	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006162:	4413      	add	r3, r2
 8006164:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	011a      	lsls	r2, r3, #4
 8006176:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800617a:	4413      	add	r3, r2
 800617c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006184:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006190:	b29a      	uxth	r2, r3
 8006192:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006196:	801a      	strh	r2, [r3, #0]
 8006198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10c      	bne.n	80061c2 <USB_EPStartXfer+0x1190>
 80061a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061be:	801a      	strh	r2, [r3, #0]
 80061c0:	e088      	b.n	80062d4 <USB_EPStartXfer+0x12a2>
 80061c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80061d0:	d826      	bhi.n	8006220 <USB_EPStartXfer+0x11ee>
 80061d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d004      	beq.n	8006202 <USB_EPStartXfer+0x11d0>
 80061f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061fc:	3301      	adds	r3, #1
 80061fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006202:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b29a      	uxth	r2, r3
 800620a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800620e:	b29b      	uxth	r3, r3
 8006210:	029b      	lsls	r3, r3, #10
 8006212:	b29b      	uxth	r3, r3
 8006214:	4313      	orrs	r3, r2
 8006216:	b29a      	uxth	r2, r3
 8006218:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800621c:	801a      	strh	r2, [r3, #0]
 800621e:	e059      	b.n	80062d4 <USB_EPStartXfer+0x12a2>
 8006220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	2b00      	cmp	r3, #0
 8006244:	d104      	bne.n	8006250 <USB_EPStartXfer+0x121e>
 8006246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800624a:	3b01      	subs	r3, #1
 800624c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006250:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29a      	uxth	r2, r3
 8006258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800625c:	b29b      	uxth	r3, r3
 800625e:	029b      	lsls	r3, r3, #10
 8006260:	b29b      	uxth	r3, r3
 8006262:	4313      	orrs	r3, r2
 8006264:	b29b      	uxth	r3, r3
 8006266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800626a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800626e:	b29a      	uxth	r2, r3
 8006270:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006274:	801a      	strh	r2, [r3, #0]
 8006276:	e02d      	b.n	80062d4 <USB_EPStartXfer+0x12a2>
 8006278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	785b      	ldrb	r3, [r3, #1]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d125      	bne.n	80062d4 <USB_EPStartXfer+0x12a2>
 8006288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006296:	b29b      	uxth	r3, r3
 8006298:	461a      	mov	r2, r3
 800629a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800629e:	4413      	add	r3, r2
 80062a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80062a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	011a      	lsls	r2, r3, #4
 80062b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80062b6:	4413      	add	r3, r2
 80062b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062d2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80062d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8218 	beq.w	8006716 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80062e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006306:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800630a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <USB_EPStartXfer+0x12ec>
 8006312:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10d      	bne.n	800633a <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800631e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006326:	2b00      	cmp	r3, #0
 8006328:	f040 81f5 	bne.w	8006716 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800632c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	f040 81ee 	bne.w	8006716 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800633a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800635c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006360:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006368:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	441a      	add	r2, r3
 800637e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006382:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800638a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800638e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006392:	b29b      	uxth	r3, r3
 8006394:	8013      	strh	r3, [r2, #0]
 8006396:	e1be      	b.n	8006716 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	78db      	ldrb	r3, [r3, #3]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	f040 81b4 	bne.w	8006712 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80063aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d917      	bls.n	80063f6 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 80063c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80063d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e6:	1ad2      	subs	r2, r2, r3
 80063e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	619a      	str	r2, [r3, #24]
 80063f4:	e00e      	b.n	8006414 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 80063f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2200      	movs	r2, #0
 8006412:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	2b00      	cmp	r3, #0
 8006422:	f040 8085 	bne.w	8006530 <USB_EPStartXfer+0x14fe>
 8006426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800642a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006438:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006442:	b29b      	uxth	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800644a:	4413      	add	r3, r2
 800644c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	011a      	lsls	r2, r3, #4
 800645e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006462:	4413      	add	r3, r2
 8006464:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006468:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800646c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006478:	b29a      	uxth	r2, r3
 800647a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800647e:	801a      	strh	r2, [r3, #0]
 8006480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10c      	bne.n	80064a2 <USB_EPStartXfer+0x1470>
 8006488:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 8006490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006498:	b29a      	uxth	r2, r3
 800649a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800649e:	801a      	strh	r2, [r3, #0]
 80064a0:	e077      	b.n	8006592 <USB_EPStartXfer+0x1560>
 80064a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80064a8:	d81e      	bhi.n	80064e8 <USB_EPStartXfer+0x14b6>
 80064aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ae:	085b      	lsrs	r3, r3, #1
 80064b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80064b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d004      	beq.n	80064ca <USB_EPStartXfer+0x1498>
 80064c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064c4:	3301      	adds	r3, #1
 80064c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80064ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	029b      	lsls	r3, r3, #10
 80064da:	b29b      	uxth	r3, r3
 80064dc:	4313      	orrs	r3, r2
 80064de:	b29a      	uxth	r2, r3
 80064e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064e4:	801a      	strh	r2, [r3, #0]
 80064e6:	e054      	b.n	8006592 <USB_EPStartXfer+0x1560>
 80064e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80064f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d104      	bne.n	8006508 <USB_EPStartXfer+0x14d6>
 80064fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006502:	3b01      	subs	r3, #1
 8006504:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006508:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	b29a      	uxth	r2, r3
 8006510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006514:	b29b      	uxth	r3, r3
 8006516:	029b      	lsls	r3, r3, #10
 8006518:	b29b      	uxth	r3, r3
 800651a:	4313      	orrs	r3, r2
 800651c:	b29b      	uxth	r3, r3
 800651e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006526:	b29a      	uxth	r2, r3
 8006528:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	e030      	b.n	8006592 <USB_EPStartXfer+0x1560>
 8006530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	785b      	ldrb	r3, [r3, #1]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d128      	bne.n	8006592 <USB_EPStartXfer+0x1560>
 8006540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006544:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800654e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006552:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800655c:	b29b      	uxth	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006564:	4413      	add	r3, r2
 8006566:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800656a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	011a      	lsls	r2, r3, #4
 8006578:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800657c:	4413      	add	r3, r2
 800657e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006582:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658a:	b29a      	uxth	r2, r3
 800658c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006590:	801a      	strh	r2, [r3, #0]
 8006592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006596:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	785b      	ldrb	r3, [r3, #1]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f040 8085 	bne.w	80066bc <USB_EPStartXfer+0x168a>
 80065b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80065c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80065d6:	4413      	add	r3, r2
 80065d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80065dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	011a      	lsls	r2, r3, #4
 80065ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80065ee:	4413      	add	r3, r2
 80065f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006604:	b29a      	uxth	r2, r3
 8006606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800660a:	801a      	strh	r2, [r3, #0]
 800660c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10c      	bne.n	800662e <USB_EPStartXfer+0x15fc>
 8006614:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29b      	uxth	r3, r3
 800661c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006624:	b29a      	uxth	r2, r3
 8006626:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800662a:	801a      	strh	r2, [r3, #0]
 800662c:	e073      	b.n	8006716 <USB_EPStartXfer+0x16e4>
 800662e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006632:	2b3e      	cmp	r3, #62	@ 0x3e
 8006634:	d81e      	bhi.n	8006674 <USB_EPStartXfer+0x1642>
 8006636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663a:	085b      	lsrs	r3, r3, #1
 800663c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d004      	beq.n	8006656 <USB_EPStartXfer+0x1624>
 800664c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006650:	3301      	adds	r3, #1
 8006652:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006656:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	b29a      	uxth	r2, r3
 800665e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006662:	b29b      	uxth	r3, r3
 8006664:	029b      	lsls	r3, r3, #10
 8006666:	b29b      	uxth	r3, r3
 8006668:	4313      	orrs	r3, r2
 800666a:	b29a      	uxth	r2, r3
 800666c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006670:	801a      	strh	r2, [r3, #0]
 8006672:	e050      	b.n	8006716 <USB_EPStartXfer+0x16e4>
 8006674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006678:	095b      	lsrs	r3, r3, #5
 800667a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800667e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006682:	f003 031f 	and.w	r3, r3, #31
 8006686:	2b00      	cmp	r3, #0
 8006688:	d104      	bne.n	8006694 <USB_EPStartXfer+0x1662>
 800668a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800668e:	3b01      	subs	r3, #1
 8006690:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006694:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	b29a      	uxth	r2, r3
 800669c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	029b      	lsls	r3, r3, #10
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	4313      	orrs	r3, r2
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066b8:	801a      	strh	r2, [r3, #0]
 80066ba:	e02c      	b.n	8006716 <USB_EPStartXfer+0x16e4>
 80066bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	785b      	ldrb	r3, [r3, #1]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d124      	bne.n	8006716 <USB_EPStartXfer+0x16e4>
 80066cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066da:	b29b      	uxth	r3, r3
 80066dc:	461a      	mov	r2, r3
 80066de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80066e2:	4413      	add	r3, r2
 80066e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	011a      	lsls	r2, r3, #4
 80066f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80066fa:	4413      	add	r3, r2
 80066fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006700:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006708:	b29a      	uxth	r2, r3
 800670a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800670e:	801a      	strh	r2, [r3, #0]
 8006710:	e001      	b.n	8006716 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e03a      	b.n	800678c <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006740:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006744:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006748:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800674c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006750:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006754:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	441a      	add	r2, r3
 8006772:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006776:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800677a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800677e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006786:	b29b      	uxth	r3, r3
 8006788:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	785b      	ldrb	r3, [r3, #1]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d020      	beq.n	80067ea <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067be:	81bb      	strh	r3, [r7, #12]
 80067c0:	89bb      	ldrh	r3, [r7, #12]
 80067c2:	f083 0310 	eor.w	r3, r3, #16
 80067c6:	81bb      	strh	r3, [r7, #12]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	441a      	add	r2, r3
 80067d2:	89bb      	ldrh	r3, [r7, #12]
 80067d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	8013      	strh	r3, [r2, #0]
 80067e8:	e01f      	b.n	800682a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006800:	81fb      	strh	r3, [r7, #14]
 8006802:	89fb      	ldrh	r3, [r7, #14]
 8006804:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006808:	81fb      	strh	r3, [r7, #14]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	441a      	add	r2, r3
 8006814:	89fb      	ldrh	r3, [r7, #14]
 8006816:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800681a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800681e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006826:	b29b      	uxth	r3, r3
 8006828:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	7b1b      	ldrb	r3, [r3, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	f040 809d 	bne.w	8006986 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d04c      	beq.n	80068ee <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	823b      	strh	r3, [r7, #16]
 8006862:	8a3b      	ldrh	r3, [r7, #16]
 8006864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01b      	beq.n	80068a4 <USB_EPClearStall+0x6c>
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	b29b      	uxth	r3, r3
 800687a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800687e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006882:	81fb      	strh	r3, [r7, #14]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	441a      	add	r2, r3
 800688e:	89fb      	ldrh	r3, [r7, #14]
 8006890:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006894:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006898:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800689c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	78db      	ldrb	r3, [r3, #3]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d06c      	beq.n	8006986 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068c2:	81bb      	strh	r3, [r7, #12]
 80068c4:	89bb      	ldrh	r3, [r7, #12]
 80068c6:	f083 0320 	eor.w	r3, r3, #32
 80068ca:	81bb      	strh	r3, [r7, #12]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	441a      	add	r2, r3
 80068d6:	89bb      	ldrh	r3, [r7, #12]
 80068d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	8013      	strh	r3, [r2, #0]
 80068ec:	e04b      	b.n	8006986 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	82fb      	strh	r3, [r7, #22]
 80068fc:	8afb      	ldrh	r3, [r7, #22]
 80068fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d01b      	beq.n	800693e <USB_EPClearStall+0x106>
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	b29b      	uxth	r3, r3
 8006914:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800691c:	82bb      	strh	r3, [r7, #20]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	441a      	add	r2, r3
 8006928:	8abb      	ldrh	r3, [r7, #20]
 800692a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800692e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006932:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800693a:	b29b      	uxth	r3, r3
 800693c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	b29b      	uxth	r3, r3
 800694c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006954:	827b      	strh	r3, [r7, #18]
 8006956:	8a7b      	ldrh	r3, [r7, #18]
 8006958:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800695c:	827b      	strh	r3, [r7, #18]
 800695e:	8a7b      	ldrh	r3, [r7, #18]
 8006960:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006964:	827b      	strh	r3, [r7, #18]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	441a      	add	r2, r3
 8006970:	8a7b      	ldrh	r3, [r7, #18]
 8006972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800697a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800697e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006982:	b29b      	uxth	r3, r3
 8006984:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d103      	bne.n	80069ae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2280      	movs	r2, #128	@ 0x80
 80069aa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b085      	sub	sp, #20
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80069e4:	68fb      	ldr	r3, [r7, #12]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b08b      	sub	sp, #44	@ 0x2c
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	4611      	mov	r1, r2
 80069fe:	461a      	mov	r2, r3
 8006a00:	460b      	mov	r3, r1
 8006a02:	80fb      	strh	r3, [r7, #6]
 8006a04:	4613      	mov	r3, r2
 8006a06:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a08:	88bb      	ldrh	r3, [r7, #4]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	085b      	lsrs	r3, r3, #1
 8006a0e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a18:	88fb      	ldrh	r3, [r7, #6]
 8006a1a:	005a      	lsls	r2, r3, #1
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a24:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a2a:	e01f      	b.n	8006a6c <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	3301      	adds	r3, #1
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	b21b      	sxth	r3, r3
 8006a3a:	021b      	lsls	r3, r3, #8
 8006a3c:	b21a      	sxth	r2, r3
 8006a3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	b21b      	sxth	r3, r3
 8006a46:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	8a7a      	ldrh	r2, [r7, #18]
 8006a4c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	3302      	adds	r3, #2
 8006a52:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	3302      	adds	r3, #2
 8006a58:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	3301      	adds	r3, #1
 8006a64:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1dc      	bne.n	8006a2c <USB_WritePMA+0x3a>
  }
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	372c      	adds	r7, #44	@ 0x2c
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b08b      	sub	sp, #44	@ 0x2c
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	460b      	mov	r3, r1
 8006a90:	80fb      	strh	r3, [r7, #6]
 8006a92:	4613      	mov	r3, r2
 8006a94:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006a96:	88bb      	ldrh	r3, [r7, #4]
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006aa6:	88fb      	ldrh	r3, [r7, #6]
 8006aa8:	005a      	lsls	r2, r3, #1
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ab2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ab8:	e01b      	b.n	8006af2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	3302      	adds	r3, #2
 8006ac6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	0a1b      	lsrs	r3, r3, #8
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	3302      	adds	r3, #2
 8006aea:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aee:	3b01      	subs	r3, #1
 8006af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e0      	bne.n	8006aba <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006af8:	88bb      	ldrh	r3, [r7, #4]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d007      	beq.n	8006b14 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	701a      	strb	r2, [r3, #0]
  }
}
 8006b14:	bf00      	nop
 8006b16:	372c      	adds	r7, #44	@ 0x2c
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	7c1b      	ldrb	r3, [r3, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d115      	bne.n	8006b64 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	2181      	movs	r1, #129	@ 0x81
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 ff12 	bl	800896a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b50:	2202      	movs	r2, #2
 8006b52:	2101      	movs	r1, #1
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 ff08 	bl	800896a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006b62:	e012      	b.n	8006b8a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b64:	2340      	movs	r3, #64	@ 0x40
 8006b66:	2202      	movs	r2, #2
 8006b68:	2181      	movs	r1, #129	@ 0x81
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 fefd 	bl	800896a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b76:	2340      	movs	r3, #64	@ 0x40
 8006b78:	2202      	movs	r2, #2
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 fef4 	bl	800896a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b8a:	2308      	movs	r3, #8
 8006b8c:	2203      	movs	r2, #3
 8006b8e:	2182      	movs	r1, #130	@ 0x82
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f001 feea 	bl	800896a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b9c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006ba0:	f002 f80a 	bl	8008bb8 <USBD_static_malloc>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d102      	bne.n	8006bbc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	73fb      	strb	r3, [r7, #15]
 8006bba:	e026      	b.n	8006c0a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bc2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	7c1b      	ldrb	r3, [r3, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d109      	bne.n	8006bfa <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006bec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f001 ffaa 	bl	8008b4c <USBD_LL_PrepareReceive>
 8006bf8:	e007      	b.n	8006c0a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c00:	2340      	movs	r3, #64	@ 0x40
 8006c02:	2101      	movs	r1, #1
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 ffa1 	bl	8008b4c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c24:	2181      	movs	r1, #129	@ 0x81
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f001 fec5 	bl	80089b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c32:	2101      	movs	r1, #1
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 febe 	bl	80089b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006c42:	2182      	movs	r1, #130	@ 0x82
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 feb6 	bl	80089b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00e      	beq.n	8006c78 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f001 ffb2 	bl	8008bd4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b086      	sub	sp, #24
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c92:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d039      	beq.n	8006d20 <USBD_CDC_Setup+0x9e>
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	d17f      	bne.n	8006db0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	88db      	ldrh	r3, [r3, #6]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d029      	beq.n	8006d0c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	b25b      	sxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	da11      	bge.n	8006ce6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006cce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	88d2      	ldrh	r2, [r2, #6]
 8006cd4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006cd6:	6939      	ldr	r1, [r7, #16]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	88db      	ldrh	r3, [r3, #6]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f001 fa10 	bl	8008104 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006ce4:	e06b      	b.n	8006dbe <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	785a      	ldrb	r2, [r3, #1]
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	88db      	ldrh	r3, [r3, #6]
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006cfc:	6939      	ldr	r1, [r7, #16]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	88db      	ldrh	r3, [r3, #6]
 8006d02:	461a      	mov	r2, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 fa2b 	bl	8008160 <USBD_CtlPrepareRx>
      break;
 8006d0a:	e058      	b.n	8006dbe <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	7850      	ldrb	r0, [r2, #1]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	4798      	blx	r3
      break;
 8006d1e:	e04e      	b.n	8006dbe <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	785b      	ldrb	r3, [r3, #1]
 8006d24:	2b0b      	cmp	r3, #11
 8006d26:	d02e      	beq.n	8006d86 <USBD_CDC_Setup+0x104>
 8006d28:	2b0b      	cmp	r3, #11
 8006d2a:	dc38      	bgt.n	8006d9e <USBD_CDC_Setup+0x11c>
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <USBD_CDC_Setup+0xb4>
 8006d30:	2b0a      	cmp	r3, #10
 8006d32:	d014      	beq.n	8006d5e <USBD_CDC_Setup+0xdc>
 8006d34:	e033      	b.n	8006d9e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d107      	bne.n	8006d50 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d40:	f107 030c 	add.w	r3, r7, #12
 8006d44:	2202      	movs	r2, #2
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 f9db 	bl	8008104 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d4e:	e02e      	b.n	8006dae <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 f96b 	bl	800802e <USBD_CtlError>
            ret = USBD_FAIL;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	75fb      	strb	r3, [r7, #23]
          break;
 8006d5c:	e027      	b.n	8006dae <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d107      	bne.n	8006d78 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d68:	f107 030f 	add.w	r3, r7, #15
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 f9c7 	bl	8008104 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d76:	e01a      	b.n	8006dae <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 f957 	bl	800802e <USBD_CtlError>
            ret = USBD_FAIL;
 8006d80:	2302      	movs	r3, #2
 8006d82:	75fb      	strb	r3, [r7, #23]
          break;
 8006d84:	e013      	b.n	8006dae <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d00d      	beq.n	8006dac <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f001 f94b 	bl	800802e <USBD_CtlError>
            ret = USBD_FAIL;
 8006d98:	2302      	movs	r3, #2
 8006d9a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d9c:	e006      	b.n	8006dac <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 f944 	bl	800802e <USBD_CtlError>
          ret = USBD_FAIL;
 8006da6:	2302      	movs	r3, #2
 8006da8:	75fb      	strb	r3, [r7, #23]
          break;
 8006daa:	e000      	b.n	8006dae <USBD_CDC_Setup+0x12c>
          break;
 8006dac:	bf00      	nop
      }
      break;
 8006dae:	e006      	b.n	8006dbe <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f001 f93b 	bl	800802e <USBD_CtlError>
      ret = USBD_FAIL;
 8006db8:	2302      	movs	r3, #2
 8006dba:	75fb      	strb	r3, [r7, #23]
      break;
 8006dbc:	bf00      	nop
  }

  return ret;
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dda:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006de2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d03a      	beq.n	8006e64 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006dee:	78fa      	ldrb	r2, [r7, #3]
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	331c      	adds	r3, #28
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d029      	beq.n	8006e58 <USBD_CDC_DataIn+0x90>
 8006e04:	78fa      	ldrb	r2, [r7, #3]
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	331c      	adds	r3, #28
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	78f9      	ldrb	r1, [r7, #3]
 8006e18:	68b8      	ldr	r0, [r7, #8]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	440b      	add	r3, r1
 8006e20:	00db      	lsls	r3, r3, #3
 8006e22:	4403      	add	r3, r0
 8006e24:	3320      	adds	r3, #32
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e2c:	fb01 f303 	mul.w	r3, r1, r3
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d110      	bne.n	8006e58 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006e36:	78fa      	ldrb	r2, [r7, #3]
 8006e38:	6879      	ldr	r1, [r7, #4]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	440b      	add	r3, r1
 8006e44:	331c      	adds	r3, #28
 8006e46:	2200      	movs	r2, #0
 8006e48:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e4a:	78f9      	ldrb	r1, [r7, #3]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	2200      	movs	r2, #0
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 fe58 	bl	8008b06 <USBD_LL_Transmit>
 8006e56:	e003      	b.n	8006e60 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	e000      	b.n	8006e66 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006e64:	2302      	movs	r3, #2
  }
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	460b      	mov	r3, r1
 8006e78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e80:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e82:	78fb      	ldrb	r3, [r7, #3]
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 fe83 	bl	8008b92 <USBD_LL_GetRxDataSize>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00d      	beq.n	8006eba <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4798      	blx	r3

    return USBD_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e000      	b.n	8006ebc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006eba:	2302      	movs	r3, #2
  }
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ed2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d014      	beq.n	8006f08 <USBD_CDC_EP0_RxReady+0x44>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006ee4:	2bff      	cmp	r3, #255	@ 0xff
 8006ee6:	d00f      	beq.n	8006f08 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006ef6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006efe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	22ff      	movs	r2, #255	@ 0xff
 8006f04:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2243      	movs	r2, #67	@ 0x43
 8006f20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006f22:	4b03      	ldr	r3, [pc, #12]	@ (8006f30 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	20000094 	.word	0x20000094

08006f34 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2243      	movs	r2, #67	@ 0x43
 8006f40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006f42:	4b03      	ldr	r3, [pc, #12]	@ (8006f50 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	20000050 	.word	0x20000050

08006f54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2243      	movs	r2, #67	@ 0x43
 8006f60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006f62:	4b03      	ldr	r3, [pc, #12]	@ (8006f70 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	200000d8 	.word	0x200000d8

08006f74 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	220a      	movs	r2, #10
 8006f80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006f82:	4b03      	ldr	r3, [pc, #12]	@ (8006f90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	2000000c 	.word	0x2000000c

08006f94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d005      	beq.n	8006fb4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b087      	sub	sp, #28
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fd6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006fe0:	88fa      	ldrh	r2, [r7, #6]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	371c      	adds	r7, #28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b085      	sub	sp, #20
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007006:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800702c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01c      	beq.n	8007072 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800703e:	2b00      	cmp	r3, #0
 8007040:	d115      	bne.n	800706e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007060:	b29b      	uxth	r3, r3
 8007062:	2181      	movs	r1, #129	@ 0x81
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 fd4e 	bl	8008b06 <USBD_LL_Transmit>

      return USBD_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	e002      	b.n	8007074 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800706e:	2301      	movs	r3, #1
 8007070:	e000      	b.n	8007074 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007072:	2302      	movs	r3, #2
  }
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800708a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007092:	2b00      	cmp	r3, #0
 8007094:	d017      	beq.n	80070c6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	7c1b      	ldrb	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d109      	bne.n	80070b2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070a8:	2101      	movs	r1, #1
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 fd4e 	bl	8008b4c <USBD_LL_PrepareReceive>
 80070b0:	e007      	b.n	80070c2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80070b8:	2340      	movs	r3, #64	@ 0x40
 80070ba:	2101      	movs	r1, #1
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 fd45 	bl	8008b4c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	e000      	b.n	80070c8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80070c6:	2302      	movs	r3, #2
  }
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	4613      	mov	r3, r2
 80070dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80070e4:	2302      	movs	r3, #2
 80070e6:	e01a      	b.n	800711e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	79fa      	ldrb	r2, [r7, #7]
 8007114:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f001 fbb2 	bl	8008880 <USBD_LL_Init>

  return USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007126:	b480      	push	{r7}
 8007128:	b085      	sub	sp, #20
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d006      	beq.n	8007148 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	73fb      	strb	r3, [r7, #15]
 8007146:	e001      	b.n	800714c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007148:	2302      	movs	r3, #2
 800714a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 fbe6 	bl	8008934 <USBD_LL_Start>

  return USBD_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	460b      	mov	r3, r1
 8007192:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007194:	2302      	movs	r3, #2
 8007196:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00c      	beq.n	80071bc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	78fa      	ldrb	r2, [r7, #3]
 80071ac:	4611      	mov	r1, r2
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	4798      	blx	r3
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b082      	sub	sp, #8
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	460b      	mov	r3, r1
 80071d0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	78fa      	ldrb	r2, [r7, #3]
 80071dc:	4611      	mov	r1, r2
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	4798      	blx	r3

  return USBD_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 fedb 	bl	8007fba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007212:	461a      	mov	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007220:	f003 031f 	and.w	r3, r3, #31
 8007224:	2b02      	cmp	r3, #2
 8007226:	d016      	beq.n	8007256 <USBD_LL_SetupStage+0x6a>
 8007228:	2b02      	cmp	r3, #2
 800722a:	d81c      	bhi.n	8007266 <USBD_LL_SetupStage+0x7a>
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <USBD_LL_SetupStage+0x4a>
 8007230:	2b01      	cmp	r3, #1
 8007232:	d008      	beq.n	8007246 <USBD_LL_SetupStage+0x5a>
 8007234:	e017      	b.n	8007266 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f9ce 	bl	80075e0 <USBD_StdDevReq>
      break;
 8007244:	e01a      	b.n	800727c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fa30 	bl	80076b4 <USBD_StdItfReq>
      break;
 8007254:	e012      	b.n	800727c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa70 	bl	8007744 <USBD_StdEPReq>
      break;
 8007264:	e00a      	b.n	800727c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800726c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007270:	b2db      	uxtb	r3, r3
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 fbbd 	bl	80089f4 <USBD_LL_StallEP>
      break;
 800727a:	bf00      	nop
  }

  return USBD_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b086      	sub	sp, #24
 800728a:	af00      	add	r7, sp, #0
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	460b      	mov	r3, r1
 8007290:	607a      	str	r2, [r7, #4]
 8007292:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007294:	7afb      	ldrb	r3, [r7, #11]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d14b      	bne.n	8007332 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80072a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d134      	bne.n	8007316 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	68da      	ldr	r2, [r3, #12]
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d919      	bls.n	80072ec <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	1ad2      	subs	r2, r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d203      	bcs.n	80072da <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	e002      	b.n	80072e0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072de:	b29b      	uxth	r3, r3
 80072e0:	461a      	mov	r2, r3
 80072e2:	6879      	ldr	r1, [r7, #4]
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 ff59 	bl	800819c <USBD_CtlContinueRx>
 80072ea:	e038      	b.n	800735e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00a      	beq.n	800730e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d105      	bne.n	800730e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 ff56 	bl	80081c0 <USBD_CtlSendStatus>
 8007314:	e023      	b.n	800735e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800731c:	2b05      	cmp	r3, #5
 800731e:	d11e      	bne.n	800735e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007328:	2100      	movs	r1, #0
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f001 fb62 	bl	80089f4 <USBD_LL_StallEP>
 8007330:	e015      	b.n	800735e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00d      	beq.n	800735a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007344:	2b03      	cmp	r3, #3
 8007346:	d108      	bne.n	800735a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	7afa      	ldrb	r2, [r7, #11]
 8007352:	4611      	mov	r1, r2
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	4798      	blx	r3
 8007358:	e001      	b.n	800735e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800735a:	2302      	movs	r3, #2
 800735c:	e000      	b.n	8007360 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	460b      	mov	r3, r1
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007376:	7afb      	ldrb	r3, [r7, #11]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d17f      	bne.n	800747c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3314      	adds	r3, #20
 8007380:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007388:	2b02      	cmp	r3, #2
 800738a:	d15c      	bne.n	8007446 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	68da      	ldr	r2, [r3, #12]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	429a      	cmp	r2, r3
 8007396:	d915      	bls.n	80073c4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	1ad2      	subs	r2, r2, r3
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 fec3 	bl	800813c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073b6:	2300      	movs	r3, #0
 80073b8:	2200      	movs	r2, #0
 80073ba:	2100      	movs	r1, #0
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f001 fbc5 	bl	8008b4c <USBD_LL_PrepareReceive>
 80073c2:	e04e      	b.n	8007462 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	6912      	ldr	r2, [r2, #16]
 80073cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80073d0:	fb01 f202 	mul.w	r2, r1, r2
 80073d4:	1a9b      	subs	r3, r3, r2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d11c      	bne.n	8007414 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	689a      	ldr	r2, [r3, #8]
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d316      	bcc.n	8007414 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	689a      	ldr	r2, [r3, #8]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d20f      	bcs.n	8007414 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073f4:	2200      	movs	r2, #0
 80073f6:	2100      	movs	r1, #0
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 fe9f 	bl	800813c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007406:	2300      	movs	r3, #0
 8007408:	2200      	movs	r2, #0
 800740a:	2100      	movs	r1, #0
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f001 fb9d 	bl	8008b4c <USBD_LL_PrepareReceive>
 8007412:	e026      	b.n	8007462 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007426:	2b03      	cmp	r3, #3
 8007428:	d105      	bne.n	8007436 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007436:	2180      	movs	r1, #128	@ 0x80
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f001 fadb 	bl	80089f4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 fed1 	bl	80081e6 <USBD_CtlReceiveStatus>
 8007444:	e00d      	b.n	8007462 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800744c:	2b04      	cmp	r3, #4
 800744e:	d004      	beq.n	800745a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007456:	2b00      	cmp	r3, #0
 8007458:	d103      	bne.n	8007462 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800745a:	2180      	movs	r1, #128	@ 0x80
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f001 fac9 	bl	80089f4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007468:	2b01      	cmp	r3, #1
 800746a:	d11d      	bne.n	80074a8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f7ff fe80 	bl	8007172 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800747a:	e015      	b.n	80074a8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00d      	beq.n	80074a4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800748e:	2b03      	cmp	r3, #3
 8007490:	d108      	bne.n	80074a4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	7afa      	ldrb	r2, [r7, #11]
 800749c:	4611      	mov	r1, r2
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	4798      	blx	r3
 80074a2:	e001      	b.n	80074a8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074a4:	2302      	movs	r3, #2
 80074a6:	e000      	b.n	80074aa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074ba:	2340      	movs	r3, #64	@ 0x40
 80074bc:	2200      	movs	r2, #0
 80074be:	2100      	movs	r1, #0
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 fa52 	bl	800896a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2240      	movs	r2, #64	@ 0x40
 80074d2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074d6:	2340      	movs	r3, #64	@ 0x40
 80074d8:	2200      	movs	r2, #0
 80074da:	2180      	movs	r1, #128	@ 0x80
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f001 fa44 	bl	800896a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2240      	movs	r2, #64	@ 0x40
 80074ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007512:	2b00      	cmp	r3, #0
 8007514:	d009      	beq.n	800752a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6852      	ldr	r2, [r2, #4]
 8007522:	b2d2      	uxtb	r2, r2
 8007524:	4611      	mov	r1, r2
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	4798      	blx	r3
  }

  return USBD_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	78fa      	ldrb	r2, [r7, #3]
 8007544:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2204      	movs	r2, #4
 800756c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800758c:	2b04      	cmp	r3, #4
 800758e:	d105      	bne.n	800759c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b082      	sub	sp, #8
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d10b      	bne.n	80075d4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d005      	beq.n	80075d4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
	...

080075e0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075f6:	2b40      	cmp	r3, #64	@ 0x40
 80075f8:	d005      	beq.n	8007606 <USBD_StdDevReq+0x26>
 80075fa:	2b40      	cmp	r3, #64	@ 0x40
 80075fc:	d84f      	bhi.n	800769e <USBD_StdDevReq+0xbe>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d009      	beq.n	8007616 <USBD_StdDevReq+0x36>
 8007602:	2b20      	cmp	r3, #32
 8007604:	d14b      	bne.n	800769e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
      break;
 8007614:	e048      	b.n	80076a8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	785b      	ldrb	r3, [r3, #1]
 800761a:	2b09      	cmp	r3, #9
 800761c:	d839      	bhi.n	8007692 <USBD_StdDevReq+0xb2>
 800761e:	a201      	add	r2, pc, #4	@ (adr r2, 8007624 <USBD_StdDevReq+0x44>)
 8007620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007624:	08007675 	.word	0x08007675
 8007628:	08007689 	.word	0x08007689
 800762c:	08007693 	.word	0x08007693
 8007630:	0800767f 	.word	0x0800767f
 8007634:	08007693 	.word	0x08007693
 8007638:	08007657 	.word	0x08007657
 800763c:	0800764d 	.word	0x0800764d
 8007640:	08007693 	.word	0x08007693
 8007644:	0800766b 	.word	0x0800766b
 8007648:	08007661 	.word	0x08007661
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f9dc 	bl	8007a0c <USBD_GetDescriptor>
          break;
 8007654:	e022      	b.n	800769c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fb3f 	bl	8007cdc <USBD_SetAddress>
          break;
 800765e:	e01d      	b.n	800769c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fb7e 	bl	8007d64 <USBD_SetConfig>
          break;
 8007668:	e018      	b.n	800769c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fc07 	bl	8007e80 <USBD_GetConfig>
          break;
 8007672:	e013      	b.n	800769c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fc37 	bl	8007eea <USBD_GetStatus>
          break;
 800767c:	e00e      	b.n	800769c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fc65 	bl	8007f50 <USBD_SetFeature>
          break;
 8007686:	e009      	b.n	800769c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fc74 	bl	8007f78 <USBD_ClrFeature>
          break;
 8007690:	e004      	b.n	800769c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fcca 	bl	800802e <USBD_CtlError>
          break;
 800769a:	bf00      	nop
      }
      break;
 800769c:	e004      	b.n	80076a8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fcc4 	bl	800802e <USBD_CtlError>
      break;
 80076a6:	bf00      	nop
  }

  return ret;
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop

080076b4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076ca:	2b40      	cmp	r3, #64	@ 0x40
 80076cc:	d005      	beq.n	80076da <USBD_StdItfReq+0x26>
 80076ce:	2b40      	cmp	r3, #64	@ 0x40
 80076d0:	d82e      	bhi.n	8007730 <USBD_StdItfReq+0x7c>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <USBD_StdItfReq+0x26>
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d12a      	bne.n	8007730 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076e0:	3b01      	subs	r3, #1
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d81d      	bhi.n	8007722 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	889b      	ldrh	r3, [r3, #4]
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d813      	bhi.n	8007718 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	4798      	blx	r3
 80076fe:	4603      	mov	r3, r0
 8007700:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	88db      	ldrh	r3, [r3, #6]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d110      	bne.n	800772c <USBD_StdItfReq+0x78>
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10d      	bne.n	800772c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fd55 	bl	80081c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007716:	e009      	b.n	800772c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fc87 	bl	800802e <USBD_CtlError>
          break;
 8007720:	e004      	b.n	800772c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fc82 	bl	800802e <USBD_CtlError>
          break;
 800772a:	e000      	b.n	800772e <USBD_StdItfReq+0x7a>
          break;
 800772c:	bf00      	nop
      }
      break;
 800772e:	e004      	b.n	800773a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fc7b 	bl	800802e <USBD_CtlError>
      break;
 8007738:	bf00      	nop
  }

  return USBD_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	889b      	ldrh	r3, [r3, #4]
 8007756:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007760:	2b40      	cmp	r3, #64	@ 0x40
 8007762:	d007      	beq.n	8007774 <USBD_StdEPReq+0x30>
 8007764:	2b40      	cmp	r3, #64	@ 0x40
 8007766:	f200 8146 	bhi.w	80079f6 <USBD_StdEPReq+0x2b2>
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <USBD_StdEPReq+0x40>
 800776e:	2b20      	cmp	r3, #32
 8007770:	f040 8141 	bne.w	80079f6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	4798      	blx	r3
      break;
 8007782:	e13d      	b.n	8007a00 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800778c:	2b20      	cmp	r3, #32
 800778e:	d10a      	bne.n	80077a6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	4798      	blx	r3
 800779e:	4603      	mov	r3, r0
 80077a0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	e12d      	b.n	8007a02 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	785b      	ldrb	r3, [r3, #1]
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d007      	beq.n	80077be <USBD_StdEPReq+0x7a>
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	f300 811b 	bgt.w	80079ea <USBD_StdEPReq+0x2a6>
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d072      	beq.n	800789e <USBD_StdEPReq+0x15a>
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d03a      	beq.n	8007832 <USBD_StdEPReq+0xee>
 80077bc:	e115      	b.n	80079ea <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d002      	beq.n	80077ce <USBD_StdEPReq+0x8a>
 80077c8:	2b03      	cmp	r3, #3
 80077ca:	d015      	beq.n	80077f8 <USBD_StdEPReq+0xb4>
 80077cc:	e02b      	b.n	8007826 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00c      	beq.n	80077ee <USBD_StdEPReq+0xaa>
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	2b80      	cmp	r3, #128	@ 0x80
 80077d8:	d009      	beq.n	80077ee <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	4619      	mov	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f001 f908 	bl	80089f4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80077e4:	2180      	movs	r1, #128	@ 0x80
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f001 f904 	bl	80089f4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077ec:	e020      	b.n	8007830 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fc1c 	bl	800802e <USBD_CtlError>
              break;
 80077f6:	e01b      	b.n	8007830 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	885b      	ldrh	r3, [r3, #2]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10e      	bne.n	800781e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007800:	7bbb      	ldrb	r3, [r7, #14]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00b      	beq.n	800781e <USBD_StdEPReq+0xda>
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b80      	cmp	r3, #128	@ 0x80
 800780a:	d008      	beq.n	800781e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	88db      	ldrh	r3, [r3, #6]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d104      	bne.n	800781e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 f8eb 	bl	80089f4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fcce 	bl	80081c0 <USBD_CtlSendStatus>

              break;
 8007824:	e004      	b.n	8007830 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fc00 	bl	800802e <USBD_CtlError>
              break;
 800782e:	bf00      	nop
          }
          break;
 8007830:	e0e0      	b.n	80079f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007838:	2b02      	cmp	r3, #2
 800783a:	d002      	beq.n	8007842 <USBD_StdEPReq+0xfe>
 800783c:	2b03      	cmp	r3, #3
 800783e:	d015      	beq.n	800786c <USBD_StdEPReq+0x128>
 8007840:	e026      	b.n	8007890 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00c      	beq.n	8007862 <USBD_StdEPReq+0x11e>
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	2b80      	cmp	r3, #128	@ 0x80
 800784c:	d009      	beq.n	8007862 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 f8ce 	bl	80089f4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007858:	2180      	movs	r1, #128	@ 0x80
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 f8ca 	bl	80089f4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007860:	e01c      	b.n	800789c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fbe2 	bl	800802e <USBD_CtlError>
              break;
 800786a:	e017      	b.n	800789c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	885b      	ldrh	r3, [r3, #2]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d112      	bne.n	800789a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800787a:	2b00      	cmp	r3, #0
 800787c:	d004      	beq.n	8007888 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 f8d5 	bl	8008a32 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fc99 	bl	80081c0 <USBD_CtlSendStatus>
              }
              break;
 800788e:	e004      	b.n	800789a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fbcb 	bl	800802e <USBD_CtlError>
              break;
 8007898:	e000      	b.n	800789c <USBD_StdEPReq+0x158>
              break;
 800789a:	bf00      	nop
          }
          break;
 800789c:	e0aa      	b.n	80079f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d002      	beq.n	80078ae <USBD_StdEPReq+0x16a>
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d032      	beq.n	8007912 <USBD_StdEPReq+0x1ce>
 80078ac:	e097      	b.n	80079de <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d007      	beq.n	80078c4 <USBD_StdEPReq+0x180>
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2b80      	cmp	r3, #128	@ 0x80
 80078b8:	d004      	beq.n	80078c4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fbb6 	bl	800802e <USBD_CtlError>
                break;
 80078c2:	e091      	b.n	80079e8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	da0b      	bge.n	80078e4 <USBD_StdEPReq+0x1a0>
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80078d2:	4613      	mov	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	3310      	adds	r3, #16
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	4413      	add	r3, r2
 80078e0:	3304      	adds	r3, #4
 80078e2:	e00b      	b.n	80078fc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	4413      	add	r3, r2
 80078fa:	3304      	adds	r3, #4
 80078fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2200      	movs	r2, #0
 8007902:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2202      	movs	r2, #2
 8007908:	4619      	mov	r1, r3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fbfa 	bl	8008104 <USBD_CtlSendData>
              break;
 8007910:	e06a      	b.n	80079e8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007912:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007916:	2b00      	cmp	r3, #0
 8007918:	da11      	bge.n	800793e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	f003 020f 	and.w	r2, r3, #15
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	4613      	mov	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	440b      	add	r3, r1
 800792c:	3318      	adds	r3, #24
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d117      	bne.n	8007964 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fb79 	bl	800802e <USBD_CtlError>
                  break;
 800793c:	e054      	b.n	80079e8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	f003 020f 	and.w	r2, r3, #15
 8007944:	6879      	ldr	r1, [r7, #4]
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	440b      	add	r3, r1
 8007950:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d104      	bne.n	8007964 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fb66 	bl	800802e <USBD_CtlError>
                  break;
 8007962:	e041      	b.n	80079e8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007964:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007968:	2b00      	cmp	r3, #0
 800796a:	da0b      	bge.n	8007984 <USBD_StdEPReq+0x240>
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007972:	4613      	mov	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4413      	add	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	3310      	adds	r3, #16
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	4413      	add	r3, r2
 8007980:	3304      	adds	r3, #4
 8007982:	e00b      	b.n	800799c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007984:	7bbb      	ldrb	r3, [r7, #14]
 8007986:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800798a:	4613      	mov	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	4413      	add	r3, r2
 800799a:	3304      	adds	r3, #4
 800799c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <USBD_StdEPReq+0x266>
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	2b80      	cmp	r3, #128	@ 0x80
 80079a8:	d103      	bne.n	80079b2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2200      	movs	r2, #0
 80079ae:	601a      	str	r2, [r3, #0]
 80079b0:	e00e      	b.n	80079d0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 f85a 	bl	8008a70 <USBD_LL_IsStallEP>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2201      	movs	r2, #1
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	e002      	b.n	80079d0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2202      	movs	r2, #2
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fb94 	bl	8008104 <USBD_CtlSendData>
              break;
 80079dc:	e004      	b.n	80079e8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fb24 	bl	800802e <USBD_CtlError>
              break;
 80079e6:	bf00      	nop
          }
          break;
 80079e8:	e004      	b.n	80079f4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fb1e 	bl	800802e <USBD_CtlError>
          break;
 80079f2:	bf00      	nop
      }
      break;
 80079f4:	e004      	b.n	8007a00 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fb18 	bl	800802e <USBD_CtlError>
      break;
 80079fe:	bf00      	nop
  }

  return ret;
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	885b      	ldrh	r3, [r3, #2]
 8007a26:	0a1b      	lsrs	r3, r3, #8
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	2b06      	cmp	r3, #6
 8007a2e:	f200 8128 	bhi.w	8007c82 <USBD_GetDescriptor+0x276>
 8007a32:	a201      	add	r2, pc, #4	@ (adr r2, 8007a38 <USBD_GetDescriptor+0x2c>)
 8007a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a38:	08007a55 	.word	0x08007a55
 8007a3c:	08007a6d 	.word	0x08007a6d
 8007a40:	08007aad 	.word	0x08007aad
 8007a44:	08007c83 	.word	0x08007c83
 8007a48:	08007c83 	.word	0x08007c83
 8007a4c:	08007c23 	.word	0x08007c23
 8007a50:	08007c4f 	.word	0x08007c4f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	7c12      	ldrb	r2, [r2, #16]
 8007a60:	f107 0108 	add.w	r1, r7, #8
 8007a64:	4610      	mov	r0, r2
 8007a66:	4798      	blx	r3
 8007a68:	60f8      	str	r0, [r7, #12]
      break;
 8007a6a:	e112      	b.n	8007c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	7c1b      	ldrb	r3, [r3, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10d      	bne.n	8007a90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a7c:	f107 0208 	add.w	r2, r7, #8
 8007a80:	4610      	mov	r0, r2
 8007a82:	4798      	blx	r3
 8007a84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a8e:	e100      	b.n	8007c92 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a98:	f107 0208 	add.w	r2, r7, #8
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4798      	blx	r3
 8007aa0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	701a      	strb	r2, [r3, #0]
      break;
 8007aaa:	e0f2      	b.n	8007c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	885b      	ldrh	r3, [r3, #2]
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b05      	cmp	r3, #5
 8007ab4:	f200 80ac 	bhi.w	8007c10 <USBD_GetDescriptor+0x204>
 8007ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac0 <USBD_GetDescriptor+0xb4>)
 8007aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abe:	bf00      	nop
 8007ac0:	08007ad9 	.word	0x08007ad9
 8007ac4:	08007b0d 	.word	0x08007b0d
 8007ac8:	08007b41 	.word	0x08007b41
 8007acc:	08007b75 	.word	0x08007b75
 8007ad0:	08007ba9 	.word	0x08007ba9
 8007ad4:	08007bdd 	.word	0x08007bdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00b      	beq.n	8007afc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	7c12      	ldrb	r2, [r2, #16]
 8007af0:	f107 0108 	add.w	r1, r7, #8
 8007af4:	4610      	mov	r0, r2
 8007af6:	4798      	blx	r3
 8007af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007afa:	e091      	b.n	8007c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fa95 	bl	800802e <USBD_CtlError>
            err++;
 8007b04:	7afb      	ldrb	r3, [r7, #11]
 8007b06:	3301      	adds	r3, #1
 8007b08:	72fb      	strb	r3, [r7, #11]
          break;
 8007b0a:	e089      	b.n	8007c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00b      	beq.n	8007b30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	7c12      	ldrb	r2, [r2, #16]
 8007b24:	f107 0108 	add.w	r1, r7, #8
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4798      	blx	r3
 8007b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b2e:	e077      	b.n	8007c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fa7b 	bl	800802e <USBD_CtlError>
            err++;
 8007b38:	7afb      	ldrb	r3, [r7, #11]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b3e:	e06f      	b.n	8007c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	7c12      	ldrb	r2, [r2, #16]
 8007b58:	f107 0108 	add.w	r1, r7, #8
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
 8007b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b62:	e05d      	b.n	8007c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fa61 	bl	800802e <USBD_CtlError>
            err++;
 8007b6c:	7afb      	ldrb	r3, [r7, #11]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	72fb      	strb	r3, [r7, #11]
          break;
 8007b72:	e055      	b.n	8007c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00b      	beq.n	8007b98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	7c12      	ldrb	r2, [r2, #16]
 8007b8c:	f107 0108 	add.w	r1, r7, #8
 8007b90:	4610      	mov	r0, r2
 8007b92:	4798      	blx	r3
 8007b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b96:	e043      	b.n	8007c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fa47 	bl	800802e <USBD_CtlError>
            err++;
 8007ba0:	7afb      	ldrb	r3, [r7, #11]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ba6:	e03b      	b.n	8007c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00b      	beq.n	8007bcc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	7c12      	ldrb	r2, [r2, #16]
 8007bc0:	f107 0108 	add.w	r1, r7, #8
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
 8007bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bca:	e029      	b.n	8007c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fa2d 	bl	800802e <USBD_CtlError>
            err++;
 8007bd4:	7afb      	ldrb	r3, [r7, #11]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bda:	e021      	b.n	8007c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00b      	beq.n	8007c00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	7c12      	ldrb	r2, [r2, #16]
 8007bf4:	f107 0108 	add.w	r1, r7, #8
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4798      	blx	r3
 8007bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bfe:	e00f      	b.n	8007c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fa13 	bl	800802e <USBD_CtlError>
            err++;
 8007c08:	7afb      	ldrb	r3, [r7, #11]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c0e:	e007      	b.n	8007c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fa0b 	bl	800802e <USBD_CtlError>
          err++;
 8007c18:	7afb      	ldrb	r3, [r7, #11]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007c1e:	e038      	b.n	8007c92 <USBD_GetDescriptor+0x286>
 8007c20:	e037      	b.n	8007c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	7c1b      	ldrb	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d109      	bne.n	8007c3e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c32:	f107 0208 	add.w	r2, r7, #8
 8007c36:	4610      	mov	r0, r2
 8007c38:	4798      	blx	r3
 8007c3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c3c:	e029      	b.n	8007c92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f9f4 	bl	800802e <USBD_CtlError>
        err++;
 8007c46:	7afb      	ldrb	r3, [r7, #11]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c4c:	e021      	b.n	8007c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	7c1b      	ldrb	r3, [r3, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10d      	bne.n	8007c72 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c5e:	f107 0208 	add.w	r2, r7, #8
 8007c62:	4610      	mov	r0, r2
 8007c64:	4798      	blx	r3
 8007c66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	2207      	movs	r2, #7
 8007c6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c70:	e00f      	b.n	8007c92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f9da 	bl	800802e <USBD_CtlError>
        err++;
 8007c7a:	7afb      	ldrb	r3, [r7, #11]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c80:	e007      	b.n	8007c92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f9d2 	bl	800802e <USBD_CtlError>
      err++;
 8007c8a:	7afb      	ldrb	r3, [r7, #11]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c90:	bf00      	nop
  }

  if (err != 0U)
 8007c92:	7afb      	ldrb	r3, [r7, #11]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d11c      	bne.n	8007cd2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007c98:	893b      	ldrh	r3, [r7, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d011      	beq.n	8007cc2 <USBD_GetDescriptor+0x2b6>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	88db      	ldrh	r3, [r3, #6]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00d      	beq.n	8007cc2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	88da      	ldrh	r2, [r3, #6]
 8007caa:	893b      	ldrh	r3, [r7, #8]
 8007cac:	4293      	cmp	r3, r2
 8007cae:	bf28      	it	cs
 8007cb0:	4613      	movcs	r3, r2
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cb6:	893b      	ldrh	r3, [r7, #8]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	68f9      	ldr	r1, [r7, #12]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fa21 	bl	8008104 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	88db      	ldrh	r3, [r3, #6]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d104      	bne.n	8007cd4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fa78 	bl	80081c0 <USBD_CtlSendStatus>
 8007cd0:	e000      	b.n	8007cd4 <USBD_GetDescriptor+0x2c8>
    return;
 8007cd2:	bf00      	nop
    }
  }
}
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop

08007cdc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	889b      	ldrh	r3, [r3, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d130      	bne.n	8007d50 <USBD_SetAddress+0x74>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	88db      	ldrh	r3, [r3, #6]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d12c      	bne.n	8007d50 <USBD_SetAddress+0x74>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	885b      	ldrh	r3, [r3, #2]
 8007cfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8007cfc:	d828      	bhi.n	8007d50 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	885b      	ldrh	r3, [r3, #2]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d104      	bne.n	8007d1e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f989 	bl	800802e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d1c:	e01d      	b.n	8007d5a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7bfa      	ldrb	r2, [r7, #15]
 8007d22:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fecc 	bl	8008ac8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fa45 	bl	80081c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d44:	e009      	b.n	8007d5a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4e:	e004      	b.n	8007d5a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f96b 	bl	800802e <USBD_CtlError>
  }
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	885b      	ldrh	r3, [r3, #2]
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	4b41      	ldr	r3, [pc, #260]	@ (8007e7c <USBD_SetConfig+0x118>)
 8007d76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d78:	4b40      	ldr	r3, [pc, #256]	@ (8007e7c <USBD_SetConfig+0x118>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d904      	bls.n	8007d8a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f953 	bl	800802e <USBD_CtlError>
 8007d88:	e075      	b.n	8007e76 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d002      	beq.n	8007d9a <USBD_SetConfig+0x36>
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d023      	beq.n	8007de0 <USBD_SetConfig+0x7c>
 8007d98:	e062      	b.n	8007e60 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007d9a:	4b38      	ldr	r3, [pc, #224]	@ (8007e7c <USBD_SetConfig+0x118>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d01a      	beq.n	8007dd8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007da2:	4b36      	ldr	r3, [pc, #216]	@ (8007e7c <USBD_SetConfig+0x118>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2203      	movs	r2, #3
 8007db0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007db4:	4b31      	ldr	r3, [pc, #196]	@ (8007e7c <USBD_SetConfig+0x118>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7ff f9e4 	bl	8007188 <USBD_SetClassConfig>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d104      	bne.n	8007dd0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f930 	bl	800802e <USBD_CtlError>
            return;
 8007dce:	e052      	b.n	8007e76 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f9f5 	bl	80081c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007dd6:	e04e      	b.n	8007e76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f9f1 	bl	80081c0 <USBD_CtlSendStatus>
        break;
 8007dde:	e04a      	b.n	8007e76 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007de0:	4b26      	ldr	r3, [pc, #152]	@ (8007e7c <USBD_SetConfig+0x118>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d112      	bne.n	8007e0e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007df0:	4b22      	ldr	r3, [pc, #136]	@ (8007e7c <USBD_SetConfig+0x118>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	461a      	mov	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007dfa:	4b20      	ldr	r3, [pc, #128]	@ (8007e7c <USBD_SetConfig+0x118>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7ff f9e0 	bl	80071c6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f9da 	bl	80081c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e0c:	e033      	b.n	8007e76 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8007e7c <USBD_SetConfig+0x118>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	461a      	mov	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d01d      	beq.n	8007e58 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff f9ce 	bl	80071c6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007e2a:	4b14      	ldr	r3, [pc, #80]	@ (8007e7c <USBD_SetConfig+0x118>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e34:	4b11      	ldr	r3, [pc, #68]	@ (8007e7c <USBD_SetConfig+0x118>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7ff f9a4 	bl	8007188 <USBD_SetClassConfig>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d104      	bne.n	8007e50 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f8f0 	bl	800802e <USBD_CtlError>
            return;
 8007e4e:	e012      	b.n	8007e76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f9b5 	bl	80081c0 <USBD_CtlSendStatus>
        break;
 8007e56:	e00e      	b.n	8007e76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f9b1 	bl	80081c0 <USBD_CtlSendStatus>
        break;
 8007e5e:	e00a      	b.n	8007e76 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f8e3 	bl	800802e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007e68:	4b04      	ldr	r3, [pc, #16]	@ (8007e7c <USBD_SetConfig+0x118>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7ff f9a9 	bl	80071c6 <USBD_ClrClassConfig>
        break;
 8007e74:	bf00      	nop
    }
  }
}
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	200002a4 	.word	0x200002a4

08007e80 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	88db      	ldrh	r3, [r3, #6]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d004      	beq.n	8007e9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f8ca 	bl	800802e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e9a:	e022      	b.n	8007ee2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	dc02      	bgt.n	8007eac <USBD_GetConfig+0x2c>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	dc03      	bgt.n	8007eb2 <USBD_GetConfig+0x32>
 8007eaa:	e015      	b.n	8007ed8 <USBD_GetConfig+0x58>
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d00b      	beq.n	8007ec8 <USBD_GetConfig+0x48>
 8007eb0:	e012      	b.n	8007ed8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3308      	adds	r3, #8
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f91f 	bl	8008104 <USBD_CtlSendData>
        break;
 8007ec6:	e00c      	b.n	8007ee2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	2201      	movs	r2, #1
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f917 	bl	8008104 <USBD_CtlSendData>
        break;
 8007ed6:	e004      	b.n	8007ee2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f8a7 	bl	800802e <USBD_CtlError>
        break;
 8007ee0:	bf00      	nop
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b082      	sub	sp, #8
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007efa:	3b01      	subs	r3, #1
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d81e      	bhi.n	8007f3e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	88db      	ldrh	r3, [r3, #6]
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d004      	beq.n	8007f12 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f88f 	bl	800802e <USBD_CtlError>
        break;
 8007f10:	e01a      	b.n	8007f48 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d005      	beq.n	8007f2e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	f043 0202 	orr.w	r2, r3, #2
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	330c      	adds	r3, #12
 8007f32:	2202      	movs	r2, #2
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f8e4 	bl	8008104 <USBD_CtlSendData>
      break;
 8007f3c:	e004      	b.n	8007f48 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f874 	bl	800802e <USBD_CtlError>
      break;
 8007f46:	bf00      	nop
  }
}
 8007f48:	bf00      	nop
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	885b      	ldrh	r3, [r3, #2]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d106      	bne.n	8007f70 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f928 	bl	80081c0 <USBD_CtlSendStatus>
  }
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d80b      	bhi.n	8007fa6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	885b      	ldrh	r3, [r3, #2]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d10c      	bne.n	8007fb0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f90e 	bl	80081c0 <USBD_CtlSendStatus>
      }
      break;
 8007fa4:	e004      	b.n	8007fb0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f840 	bl	800802e <USBD_CtlError>
      break;
 8007fae:	e000      	b.n	8007fb2 <USBD_ClrFeature+0x3a>
      break;
 8007fb0:	bf00      	nop
  }
}
 8007fb2:	bf00      	nop
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b083      	sub	sp, #12
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781a      	ldrb	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	785a      	ldrb	r2, [r3, #1]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	3302      	adds	r3, #2
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	3303      	adds	r3, #3
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	021b      	lsls	r3, r3, #8
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	4413      	add	r3, r2
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	3305      	adds	r3, #5
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	021b      	lsls	r3, r3, #8
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	4413      	add	r3, r2
 8008002:	b29a      	uxth	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	3306      	adds	r3, #6
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	3307      	adds	r3, #7
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	021b      	lsls	r3, r3, #8
 8008018:	b29b      	uxth	r3, r3
 800801a:	4413      	add	r3, r2
 800801c:	b29a      	uxth	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	80da      	strh	r2, [r3, #6]

}
 8008022:	bf00      	nop
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008038:	2180      	movs	r1, #128	@ 0x80
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fcda 	bl	80089f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008040:	2100      	movs	r1, #0
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fcd6 	bl	80089f4 <USBD_LL_StallEP>
}
 8008048:	bf00      	nop
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d032      	beq.n	80080cc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 f834 	bl	80080d4 <USBD_GetLen>
 800806c:	4603      	mov	r3, r0
 800806e:	3301      	adds	r3, #1
 8008070:	b29b      	uxth	r3, r3
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	b29a      	uxth	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	1c5a      	adds	r2, r3, #1
 800807e:	75fa      	strb	r2, [r7, #23]
 8008080:	461a      	mov	r2, r3
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	4413      	add	r3, r2
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	7812      	ldrb	r2, [r2, #0]
 800808a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800808c:	7dfb      	ldrb	r3, [r7, #23]
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	75fa      	strb	r2, [r7, #23]
 8008092:	461a      	mov	r2, r3
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	4413      	add	r3, r2
 8008098:	2203      	movs	r2, #3
 800809a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800809c:	e012      	b.n	80080c4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	1c5a      	adds	r2, r3, #1
 80080a2:	60fa      	str	r2, [r7, #12]
 80080a4:	7dfa      	ldrb	r2, [r7, #23]
 80080a6:	1c51      	adds	r1, r2, #1
 80080a8:	75f9      	strb	r1, [r7, #23]
 80080aa:	4611      	mov	r1, r2
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	440a      	add	r2, r1
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	1c5a      	adds	r2, r3, #1
 80080b8:	75fa      	strb	r2, [r7, #23]
 80080ba:	461a      	mov	r2, r3
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	4413      	add	r3, r2
 80080c0:	2200      	movs	r2, #0
 80080c2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1e8      	bne.n	800809e <USBD_GetString+0x4e>
    }
  }
}
 80080cc:	bf00      	nop
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80080e0:	e005      	b.n	80080ee <USBD_GetLen+0x1a>
  {
    len++;
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	3301      	adds	r3, #1
 80080e6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3301      	adds	r3, #1
 80080ec:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1f5      	bne.n	80080e2 <USBD_GetLen+0xe>
  }

  return len;
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	4613      	mov	r3, r2
 8008110:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2202      	movs	r2, #2
 8008116:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800811a:	88fa      	ldrh	r2, [r7, #6]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008120:	88fa      	ldrh	r2, [r7, #6]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008126:	88fb      	ldrh	r3, [r7, #6]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	2100      	movs	r1, #0
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 fcea 	bl	8008b06 <USBD_LL_Transmit>

  return USBD_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	4613      	mov	r3, r2
 8008148:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800814a:	88fb      	ldrh	r3, [r7, #6]
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	2100      	movs	r1, #0
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 fcd8 	bl	8008b06 <USBD_LL_Transmit>

  return USBD_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	4613      	mov	r3, r2
 800816c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2203      	movs	r2, #3
 8008172:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008176:	88fa      	ldrh	r2, [r7, #6]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800817e:	88fa      	ldrh	r2, [r7, #6]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008186:	88fb      	ldrh	r3, [r7, #6]
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	2100      	movs	r1, #0
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 fcdd 	bl	8008b4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	4613      	mov	r3, r2
 80081a8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081aa:	88fb      	ldrh	r3, [r7, #6]
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	2100      	movs	r1, #0
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 fccb 	bl	8008b4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2204      	movs	r2, #4
 80081cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081d0:	2300      	movs	r3, #0
 80081d2:	2200      	movs	r2, #0
 80081d4:	2100      	movs	r1, #0
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fc95 	bl	8008b06 <USBD_LL_Transmit>

  return USBD_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b082      	sub	sp, #8
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2205      	movs	r2, #5
 80081f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081f6:	2300      	movs	r3, #0
 80081f8:	2200      	movs	r2, #0
 80081fa:	2100      	movs	r1, #0
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fca5 	bl	8008b4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008210:	2200      	movs	r2, #0
 8008212:	4912      	ldr	r1, [pc, #72]	@ (800825c <MX_USB_DEVICE_Init+0x50>)
 8008214:	4812      	ldr	r0, [pc, #72]	@ (8008260 <MX_USB_DEVICE_Init+0x54>)
 8008216:	f7fe ff5b 	bl	80070d0 <USBD_Init>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008220:	f7f8 fa8c 	bl	800073c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008224:	490f      	ldr	r1, [pc, #60]	@ (8008264 <MX_USB_DEVICE_Init+0x58>)
 8008226:	480e      	ldr	r0, [pc, #56]	@ (8008260 <MX_USB_DEVICE_Init+0x54>)
 8008228:	f7fe ff7d 	bl	8007126 <USBD_RegisterClass>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008232:	f7f8 fa83 	bl	800073c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008236:	490c      	ldr	r1, [pc, #48]	@ (8008268 <MX_USB_DEVICE_Init+0x5c>)
 8008238:	4809      	ldr	r0, [pc, #36]	@ (8008260 <MX_USB_DEVICE_Init+0x54>)
 800823a:	f7fe feab 	bl	8006f94 <USBD_CDC_RegisterInterface>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008244:	f7f8 fa7a 	bl	800073c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008248:	4805      	ldr	r0, [pc, #20]	@ (8008260 <MX_USB_DEVICE_Init+0x54>)
 800824a:	f7fe ff86 	bl	800715a <USBD_Start>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d001      	beq.n	8008258 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008254:	f7f8 fa72 	bl	800073c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008258:	bf00      	nop
 800825a:	bd80      	pop	{r7, pc}
 800825c:	2000012c 	.word	0x2000012c
 8008260:	200002a8 	.word	0x200002a8
 8008264:	20000018 	.word	0x20000018
 8008268:	2000011c 	.word	0x2000011c

0800826c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008270:	2200      	movs	r2, #0
 8008272:	4905      	ldr	r1, [pc, #20]	@ (8008288 <CDC_Init_FS+0x1c>)
 8008274:	4805      	ldr	r0, [pc, #20]	@ (800828c <CDC_Init_FS+0x20>)
 8008276:	f7fe fea4 	bl	8006fc2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800827a:	4905      	ldr	r1, [pc, #20]	@ (8008290 <CDC_Init_FS+0x24>)
 800827c:	4803      	ldr	r0, [pc, #12]	@ (800828c <CDC_Init_FS+0x20>)
 800827e:	f7fe feba 	bl	8006ff6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008282:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008284:	4618      	mov	r0, r3
 8008286:	bd80      	pop	{r7, pc}
 8008288:	20003df0 	.word	0x20003df0
 800828c:	200002a8 	.word	0x200002a8
 8008290:	200039f0 	.word	0x200039f0

08008294 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008294:	b480      	push	{r7}
 8008296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008298:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800829a:	4618      	mov	r0, r3
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	4603      	mov	r3, r0
 80082ac:	6039      	str	r1, [r7, #0]
 80082ae:	71fb      	strb	r3, [r7, #7]
 80082b0:	4613      	mov	r3, r2
 80082b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	2b23      	cmp	r3, #35	@ 0x23
 80082b8:	d84a      	bhi.n	8008350 <CDC_Control_FS+0xac>
 80082ba:	a201      	add	r2, pc, #4	@ (adr r2, 80082c0 <CDC_Control_FS+0x1c>)
 80082bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c0:	08008351 	.word	0x08008351
 80082c4:	08008351 	.word	0x08008351
 80082c8:	08008351 	.word	0x08008351
 80082cc:	08008351 	.word	0x08008351
 80082d0:	08008351 	.word	0x08008351
 80082d4:	08008351 	.word	0x08008351
 80082d8:	08008351 	.word	0x08008351
 80082dc:	08008351 	.word	0x08008351
 80082e0:	08008351 	.word	0x08008351
 80082e4:	08008351 	.word	0x08008351
 80082e8:	08008351 	.word	0x08008351
 80082ec:	08008351 	.word	0x08008351
 80082f0:	08008351 	.word	0x08008351
 80082f4:	08008351 	.word	0x08008351
 80082f8:	08008351 	.word	0x08008351
 80082fc:	08008351 	.word	0x08008351
 8008300:	08008351 	.word	0x08008351
 8008304:	08008351 	.word	0x08008351
 8008308:	08008351 	.word	0x08008351
 800830c:	08008351 	.word	0x08008351
 8008310:	08008351 	.word	0x08008351
 8008314:	08008351 	.word	0x08008351
 8008318:	08008351 	.word	0x08008351
 800831c:	08008351 	.word	0x08008351
 8008320:	08008351 	.word	0x08008351
 8008324:	08008351 	.word	0x08008351
 8008328:	08008351 	.word	0x08008351
 800832c:	08008351 	.word	0x08008351
 8008330:	08008351 	.word	0x08008351
 8008334:	08008351 	.word	0x08008351
 8008338:	08008351 	.word	0x08008351
 800833c:	08008351 	.word	0x08008351
 8008340:	08008351 	.word	0x08008351
 8008344:	08008351 	.word	0x08008351
 8008348:	08008351 	.word	0x08008351
 800834c:	08008351 	.word	0x08008351
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008350:	bf00      	nop
  }

  return (USBD_OK);
 8008352:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


	// prima fase metadati_completi == 0
	if(metadati_completi == 0){
 800836a:	4b31      	ldr	r3, [pc, #196]	@ (8008430 <CDC_Receive_FS+0xd0>)
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d125      	bne.n	80083be <CDC_Receive_FS+0x5e>
		if(rx_index + *Len <= META_TARGET_LEN){
 8008372:	4b30      	ldr	r3, [pc, #192]	@ (8008434 <CDC_Receive_FS+0xd4>)
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4413      	add	r3, r2
 800837e:	2b08      	cmp	r3, #8
 8008380:	d81d      	bhi.n	80083be <CDC_Receive_FS+0x5e>
			memcpy(&rx_buffer[rx_index], Buf, *Len);
 8008382:	4b2c      	ldr	r3, [pc, #176]	@ (8008434 <CDC_Receive_FS+0xd4>)
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	4b2b      	ldr	r3, [pc, #172]	@ (8008438 <CDC_Receive_FS+0xd8>)
 800838a:	18d0      	adds	r0, r2, r3
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	6879      	ldr	r1, [r7, #4]
 8008394:	f000 fde2 	bl	8008f5c <memcpy>
			rx_index+= *Len;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	b29a      	uxth	r2, r3
 800839e:	4b25      	ldr	r3, [pc, #148]	@ (8008434 <CDC_Receive_FS+0xd4>)
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	4413      	add	r3, r2
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	4b23      	ldr	r3, [pc, #140]	@ (8008434 <CDC_Receive_FS+0xd4>)
 80083a8:	801a      	strh	r2, [r3, #0]
			if(rx_index == META_TARGET_LEN){
 80083aa:	4b22      	ldr	r3, [pc, #136]	@ (8008434 <CDC_Receive_FS+0xd4>)
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	2b08      	cmp	r3, #8
 80083b0:	d105      	bne.n	80083be <CDC_Receive_FS+0x5e>
				metadati_completi = 1;
 80083b2:	4b1f      	ldr	r3, [pc, #124]	@ (8008430 <CDC_Receive_FS+0xd0>)
 80083b4:	2201      	movs	r2, #1
 80083b6:	701a      	strb	r2, [r3, #0]
				rx_index = 0;
 80083b8:	4b1e      	ldr	r3, [pc, #120]	@ (8008434 <CDC_Receive_FS+0xd4>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	if (!rx_complete && metadati_completi==1) {
 80083be:	4b1f      	ldr	r3, [pc, #124]	@ (800843c <CDC_Receive_FS+0xdc>)
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d12b      	bne.n	800841e <CDC_Receive_FS+0xbe>
 80083c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008430 <CDC_Receive_FS+0xd0>)
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d127      	bne.n	800841e <CDC_Receive_FS+0xbe>
		if (rx_index + *Len <= RX_TARGET_LEN) {
 80083ce:	4b19      	ldr	r3, [pc, #100]	@ (8008434 <CDC_Receive_FS+0xd4>)
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4413      	add	r3, r2
 80083da:	f5b3 5f52 	cmp.w	r3, #13440	@ 0x3480
 80083de:	d81e      	bhi.n	800841e <CDC_Receive_FS+0xbe>
		  memcpy(&rx_buffer[rx_index], Buf, *Len);
 80083e0:	4b14      	ldr	r3, [pc, #80]	@ (8008434 <CDC_Receive_FS+0xd4>)
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	461a      	mov	r2, r3
 80083e6:	4b14      	ldr	r3, [pc, #80]	@ (8008438 <CDC_Receive_FS+0xd8>)
 80083e8:	18d0      	adds	r0, r2, r3
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	f000 fdb3 	bl	8008f5c <memcpy>
		  rx_index += *Len;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008434 <CDC_Receive_FS+0xd4>)
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	4413      	add	r3, r2
 8008402:	b29a      	uxth	r2, r3
 8008404:	4b0b      	ldr	r3, [pc, #44]	@ (8008434 <CDC_Receive_FS+0xd4>)
 8008406:	801a      	strh	r2, [r3, #0]

		  if (rx_index >= RX_TARGET_LEN) {
 8008408:	4b0a      	ldr	r3, [pc, #40]	@ (8008434 <CDC_Receive_FS+0xd4>)
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	f5b3 5f52 	cmp.w	r3, #13440	@ 0x3480
 8008410:	d305      	bcc.n	800841e <CDC_Receive_FS+0xbe>
			rx_complete = 1;  // Segnala che la ricezione è completa
 8008412:	4b0a      	ldr	r3, [pc, #40]	@ (800843c <CDC_Receive_FS+0xdc>)
 8008414:	2201      	movs	r2, #1
 8008416:	701a      	strb	r2, [r3, #0]
			rx_index = 0;     // Resetta l'indice (facoltativo)
 8008418:	4b06      	ldr	r3, [pc, #24]	@ (8008434 <CDC_Receive_FS+0xd4>)
 800841a:	2200      	movs	r2, #0
 800841c:	801a      	strh	r2, [r3, #0]
		  }
		}
	}
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800841e:	4808      	ldr	r0, [pc, #32]	@ (8008440 <CDC_Receive_FS+0xe0>)
 8008420:	f7fe fe2c 	bl	800707c <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8008424:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	200039ef 	.word	0x200039ef
 8008434:	200039ec 	.word	0x200039ec
 8008438:	2000056c 	.word	0x2000056c
 800843c:	200039ee 	.word	0x200039ee
 8008440:	200002a8 	.word	0x200002a8

08008444 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008454:	4b0d      	ldr	r3, [pc, #52]	@ (800848c <CDC_Transmit_FS+0x48>)
 8008456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800845a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008466:	2301      	movs	r3, #1
 8008468:	e00b      	b.n	8008482 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800846a:	887b      	ldrh	r3, [r7, #2]
 800846c:	461a      	mov	r2, r3
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	4806      	ldr	r0, [pc, #24]	@ (800848c <CDC_Transmit_FS+0x48>)
 8008472:	f7fe fda6 	bl	8006fc2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008476:	4805      	ldr	r0, [pc, #20]	@ (800848c <CDC_Transmit_FS+0x48>)
 8008478:	f7fe fdd1 	bl	800701e <USBD_CDC_TransmitPacket>
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008480:	7bfb      	ldrb	r3, [r7, #15]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	200002a8 	.word	0x200002a8

08008490 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	6039      	str	r1, [r7, #0]
 800849a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2212      	movs	r2, #18
 80084a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084a2:	4b03      	ldr	r3, [pc, #12]	@ (80084b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	20000148 	.word	0x20000148

080084b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	4603      	mov	r3, r0
 80084bc:	6039      	str	r1, [r7, #0]
 80084be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2204      	movs	r2, #4
 80084c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084c6:	4b03      	ldr	r3, [pc, #12]	@ (80084d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr
 80084d4:	2000015c 	.word	0x2000015c

080084d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	4603      	mov	r3, r0
 80084e0:	6039      	str	r1, [r7, #0]
 80084e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084e4:	79fb      	ldrb	r3, [r7, #7]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d105      	bne.n	80084f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	4907      	ldr	r1, [pc, #28]	@ (800850c <USBD_FS_ProductStrDescriptor+0x34>)
 80084ee:	4808      	ldr	r0, [pc, #32]	@ (8008510 <USBD_FS_ProductStrDescriptor+0x38>)
 80084f0:	f7ff fdae 	bl	8008050 <USBD_GetString>
 80084f4:	e004      	b.n	8008500 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	4904      	ldr	r1, [pc, #16]	@ (800850c <USBD_FS_ProductStrDescriptor+0x34>)
 80084fa:	4805      	ldr	r0, [pc, #20]	@ (8008510 <USBD_FS_ProductStrDescriptor+0x38>)
 80084fc:	f7ff fda8 	bl	8008050 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008500:	4b02      	ldr	r3, [pc, #8]	@ (800850c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008502:	4618      	mov	r0, r3
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	200041f0 	.word	0x200041f0
 8008510:	08009db8 	.word	0x08009db8

08008514 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	6039      	str	r1, [r7, #0]
 800851e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	4904      	ldr	r1, [pc, #16]	@ (8008534 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008524:	4804      	ldr	r0, [pc, #16]	@ (8008538 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008526:	f7ff fd93 	bl	8008050 <USBD_GetString>
  return USBD_StrDesc;
 800852a:	4b02      	ldr	r3, [pc, #8]	@ (8008534 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800852c:	4618      	mov	r0, r3
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	200041f0 	.word	0x200041f0
 8008538:	08009dd0 	.word	0x08009dd0

0800853c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	4603      	mov	r3, r0
 8008544:	6039      	str	r1, [r7, #0]
 8008546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	221a      	movs	r2, #26
 800854c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800854e:	f000 f843 	bl	80085d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008552:	4b02      	ldr	r3, [pc, #8]	@ (800855c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008554:	4618      	mov	r0, r3
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	20000160 	.word	0x20000160

08008560 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	4603      	mov	r3, r0
 8008568:	6039      	str	r1, [r7, #0]
 800856a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800856c:	79fb      	ldrb	r3, [r7, #7]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d105      	bne.n	800857e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	4907      	ldr	r1, [pc, #28]	@ (8008594 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008576:	4808      	ldr	r0, [pc, #32]	@ (8008598 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008578:	f7ff fd6a 	bl	8008050 <USBD_GetString>
 800857c:	e004      	b.n	8008588 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	4904      	ldr	r1, [pc, #16]	@ (8008594 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008582:	4805      	ldr	r0, [pc, #20]	@ (8008598 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008584:	f7ff fd64 	bl	8008050 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008588:	4b02      	ldr	r3, [pc, #8]	@ (8008594 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800858a:	4618      	mov	r0, r3
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	200041f0 	.word	0x200041f0
 8008598:	08009de4 	.word	0x08009de4

0800859c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	4603      	mov	r3, r0
 80085a4:	6039      	str	r1, [r7, #0]
 80085a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085a8:	79fb      	ldrb	r3, [r7, #7]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d105      	bne.n	80085ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	4907      	ldr	r1, [pc, #28]	@ (80085d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085b2:	4808      	ldr	r0, [pc, #32]	@ (80085d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085b4:	f7ff fd4c 	bl	8008050 <USBD_GetString>
 80085b8:	e004      	b.n	80085c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	4904      	ldr	r1, [pc, #16]	@ (80085d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085be:	4805      	ldr	r0, [pc, #20]	@ (80085d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085c0:	f7ff fd46 	bl	8008050 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085c4:	4b02      	ldr	r3, [pc, #8]	@ (80085d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	200041f0 	.word	0x200041f0
 80085d4:	08009df0 	.word	0x08009df0

080085d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80085de:	4b0f      	ldr	r3, [pc, #60]	@ (800861c <Get_SerialNum+0x44>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80085e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008620 <Get_SerialNum+0x48>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80085ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008624 <Get_SerialNum+0x4c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4413      	add	r3, r2
 80085f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d009      	beq.n	8008612 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80085fe:	2208      	movs	r2, #8
 8008600:	4909      	ldr	r1, [pc, #36]	@ (8008628 <Get_SerialNum+0x50>)
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 f814 	bl	8008630 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008608:	2204      	movs	r2, #4
 800860a:	4908      	ldr	r1, [pc, #32]	@ (800862c <Get_SerialNum+0x54>)
 800860c:	68b8      	ldr	r0, [r7, #8]
 800860e:	f000 f80f 	bl	8008630 <IntToUnicode>
  }
}
 8008612:	bf00      	nop
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	1ffff7ac 	.word	0x1ffff7ac
 8008620:	1ffff7b0 	.word	0x1ffff7b0
 8008624:	1ffff7b4 	.word	0x1ffff7b4
 8008628:	20000162 	.word	0x20000162
 800862c:	20000172 	.word	0x20000172

08008630 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008630:	b480      	push	{r7}
 8008632:	b087      	sub	sp, #28
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	4613      	mov	r3, r2
 800863c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008642:	2300      	movs	r3, #0
 8008644:	75fb      	strb	r3, [r7, #23]
 8008646:	e027      	b.n	8008698 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	0f1b      	lsrs	r3, r3, #28
 800864c:	2b09      	cmp	r3, #9
 800864e:	d80b      	bhi.n	8008668 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	0f1b      	lsrs	r3, r3, #28
 8008654:	b2da      	uxtb	r2, r3
 8008656:	7dfb      	ldrb	r3, [r7, #23]
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	4619      	mov	r1, r3
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	440b      	add	r3, r1
 8008660:	3230      	adds	r2, #48	@ 0x30
 8008662:	b2d2      	uxtb	r2, r2
 8008664:	701a      	strb	r2, [r3, #0]
 8008666:	e00a      	b.n	800867e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	0f1b      	lsrs	r3, r3, #28
 800866c:	b2da      	uxtb	r2, r3
 800866e:	7dfb      	ldrb	r3, [r7, #23]
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	4619      	mov	r1, r3
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	440b      	add	r3, r1
 8008678:	3237      	adds	r2, #55	@ 0x37
 800867a:	b2d2      	uxtb	r2, r2
 800867c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	011b      	lsls	r3, r3, #4
 8008682:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	005b      	lsls	r3, r3, #1
 8008688:	3301      	adds	r3, #1
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	4413      	add	r3, r2
 800868e:	2200      	movs	r2, #0
 8008690:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008692:	7dfb      	ldrb	r3, [r7, #23]
 8008694:	3301      	adds	r3, #1
 8008696:	75fb      	strb	r3, [r7, #23]
 8008698:	7dfa      	ldrb	r2, [r7, #23]
 800869a:	79fb      	ldrb	r3, [r7, #7]
 800869c:	429a      	cmp	r2, r3
 800869e:	d3d3      	bcc.n	8008648 <IntToUnicode+0x18>
  }
}
 80086a0:	bf00      	nop
 80086a2:	bf00      	nop
 80086a4:	371c      	adds	r7, #28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
	...

080086b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08a      	sub	sp, #40	@ 0x28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086b8:	f107 0314 	add.w	r3, r7, #20
 80086bc:	2200      	movs	r2, #0
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	605a      	str	r2, [r3, #4]
 80086c2:	609a      	str	r2, [r3, #8]
 80086c4:	60da      	str	r2, [r3, #12]
 80086c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008740 <HAL_PCD_MspInit+0x90>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d131      	bne.n	8008736 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086d2:	4b1c      	ldr	r3, [pc, #112]	@ (8008744 <HAL_PCD_MspInit+0x94>)
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	4a1b      	ldr	r2, [pc, #108]	@ (8008744 <HAL_PCD_MspInit+0x94>)
 80086d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086dc:	6153      	str	r3, [r2, #20]
 80086de:	4b19      	ldr	r3, [pc, #100]	@ (8008744 <HAL_PCD_MspInit+0x94>)
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086e6:	613b      	str	r3, [r7, #16]
 80086e8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80086ea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80086ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086f0:	2302      	movs	r3, #2
 80086f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086f4:	2300      	movs	r3, #0
 80086f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80086f8:	2303      	movs	r3, #3
 80086fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80086fc:	230e      	movs	r3, #14
 80086fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008700:	f107 0314 	add.w	r3, r7, #20
 8008704:	4619      	mov	r1, r3
 8008706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800870a:	f7f8 fad9 	bl	8000cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800870e:	4b0d      	ldr	r3, [pc, #52]	@ (8008744 <HAL_PCD_MspInit+0x94>)
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	4a0c      	ldr	r2, [pc, #48]	@ (8008744 <HAL_PCD_MspInit+0x94>)
 8008714:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008718:	61d3      	str	r3, [r2, #28]
 800871a:	4b0a      	ldr	r3, [pc, #40]	@ (8008744 <HAL_PCD_MspInit+0x94>)
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008722:	60fb      	str	r3, [r7, #12]
 8008724:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8008726:	2200      	movs	r2, #0
 8008728:	2100      	movs	r1, #0
 800872a:	2014      	movs	r0, #20
 800872c:	f7f8 fa91 	bl	8000c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8008730:	2014      	movs	r0, #20
 8008732:	f7f8 faaa 	bl	8000c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008736:	bf00      	nop
 8008738:	3728      	adds	r7, #40	@ 0x28
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	40005c00 	.word	0x40005c00
 8008744:	40021000 	.word	0x40021000

08008748 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800875c:	4619      	mov	r1, r3
 800875e:	4610      	mov	r0, r2
 8008760:	f7fe fd44 	bl	80071ec <USBD_LL_SetupStage>
}
 8008764:	bf00      	nop
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800877e:	78fa      	ldrb	r2, [r7, #3]
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	440b      	add	r3, r1
 800878c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	78fb      	ldrb	r3, [r7, #3]
 8008794:	4619      	mov	r1, r3
 8008796:	f7fe fd76 	bl	8007286 <USBD_LL_DataOutStage>
}
 800879a:	bf00      	nop
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b082      	sub	sp, #8
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	460b      	mov	r3, r1
 80087ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 80087b4:	78fa      	ldrb	r2, [r7, #3]
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	4613      	mov	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	00db      	lsls	r3, r3, #3
 80087c0:	440b      	add	r3, r1
 80087c2:	3324      	adds	r3, #36	@ 0x24
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	78fb      	ldrb	r3, [r7, #3]
 80087c8:	4619      	mov	r1, r3
 80087ca:	f7fe fdcd 	bl	8007368 <USBD_LL_DataInStage>
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b082      	sub	sp, #8
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fe fee0 	bl	80075aa <USBD_LL_SOF>
}
 80087ea:	bf00      	nop
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087fa:	2301      	movs	r3, #1
 80087fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	795b      	ldrb	r3, [r3, #5]
 8008802:	2b02      	cmp	r3, #2
 8008804:	d001      	beq.n	800880a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008806:	f7f7 ff99 	bl	800073c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008810:	7bfa      	ldrb	r2, [r7, #15]
 8008812:	4611      	mov	r1, r2
 8008814:	4618      	mov	r0, r3
 8008816:	f7fe fe8d 	bl	8007534 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008820:	4618      	mov	r0, r3
 8008822:	f7fe fe46 	bl	80074b2 <USBD_LL_Reset>
}
 8008826:	bf00      	nop
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
	...

08008830 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800883e:	4618      	mov	r0, r3
 8008840:	f7fe fe88 	bl	8007554 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	7a5b      	ldrb	r3, [r3, #9]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d005      	beq.n	8008858 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800884c:	4b04      	ldr	r3, [pc, #16]	@ (8008860 <HAL_PCD_SuspendCallback+0x30>)
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	4a03      	ldr	r2, [pc, #12]	@ (8008860 <HAL_PCD_SuspendCallback+0x30>)
 8008852:	f043 0306 	orr.w	r3, r3, #6
 8008856:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008858:	bf00      	nop
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	e000ed00 	.word	0xe000ed00

08008864 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008872:	4618      	mov	r0, r3
 8008874:	f7fe fe83 	bl	800757e <USBD_LL_Resume>
}
 8008878:	bf00      	nop
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008888:	4a28      	ldr	r2, [pc, #160]	@ (800892c <USBD_LL_Init+0xac>)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a26      	ldr	r2, [pc, #152]	@ (800892c <USBD_LL_Init+0xac>)
 8008894:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008898:	4b24      	ldr	r3, [pc, #144]	@ (800892c <USBD_LL_Init+0xac>)
 800889a:	4a25      	ldr	r2, [pc, #148]	@ (8008930 <USBD_LL_Init+0xb0>)
 800889c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800889e:	4b23      	ldr	r3, [pc, #140]	@ (800892c <USBD_LL_Init+0xac>)
 80088a0:	2208      	movs	r2, #8
 80088a2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80088a4:	4b21      	ldr	r3, [pc, #132]	@ (800892c <USBD_LL_Init+0xac>)
 80088a6:	2202      	movs	r2, #2
 80088a8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80088aa:	4b20      	ldr	r3, [pc, #128]	@ (800892c <USBD_LL_Init+0xac>)
 80088ac:	2202      	movs	r2, #2
 80088ae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80088b0:	4b1e      	ldr	r3, [pc, #120]	@ (800892c <USBD_LL_Init+0xac>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80088b6:	4b1d      	ldr	r3, [pc, #116]	@ (800892c <USBD_LL_Init+0xac>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80088bc:	481b      	ldr	r0, [pc, #108]	@ (800892c <USBD_LL_Init+0xac>)
 80088be:	f7f8 fcc3 	bl	8001248 <HAL_PCD_Init>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80088c8:	f7f7 ff38 	bl	800073c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80088d2:	2318      	movs	r3, #24
 80088d4:	2200      	movs	r2, #0
 80088d6:	2100      	movs	r1, #0
 80088d8:	f7fa f93c 	bl	8002b54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80088e2:	2358      	movs	r3, #88	@ 0x58
 80088e4:	2200      	movs	r2, #0
 80088e6:	2180      	movs	r1, #128	@ 0x80
 80088e8:	f7fa f934 	bl	8002b54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80088f2:	23c0      	movs	r3, #192	@ 0xc0
 80088f4:	2200      	movs	r2, #0
 80088f6:	2181      	movs	r1, #129	@ 0x81
 80088f8:	f7fa f92c 	bl	8002b54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008902:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008906:	2200      	movs	r2, #0
 8008908:	2101      	movs	r1, #1
 800890a:	f7fa f923 	bl	8002b54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008914:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008918:	2200      	movs	r2, #0
 800891a:	2182      	movs	r1, #130	@ 0x82
 800891c:	f7fa f91a 	bl	8002b54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	200043f0 	.word	0x200043f0
 8008930:	40005c00 	.word	0x40005c00

08008934 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800894a:	4618      	mov	r0, r3
 800894c:	f7f8 fd43 	bl	80013d6 <HAL_PCD_Start>
 8008950:	4603      	mov	r3, r0
 8008952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008954:	7bfb      	ldrb	r3, [r7, #15]
 8008956:	4618      	mov	r0, r3
 8008958:	f000 f952 	bl	8008c00 <USBD_Get_USB_Status>
 800895c:	4603      	mov	r3, r0
 800895e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008960:	7bbb      	ldrb	r3, [r7, #14]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	4608      	mov	r0, r1
 8008974:	4611      	mov	r1, r2
 8008976:	461a      	mov	r2, r3
 8008978:	4603      	mov	r3, r0
 800897a:	70fb      	strb	r3, [r7, #3]
 800897c:	460b      	mov	r3, r1
 800897e:	70bb      	strb	r3, [r7, #2]
 8008980:	4613      	mov	r3, r2
 8008982:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008992:	78bb      	ldrb	r3, [r7, #2]
 8008994:	883a      	ldrh	r2, [r7, #0]
 8008996:	78f9      	ldrb	r1, [r7, #3]
 8008998:	f7f8 fe3b 	bl	8001612 <HAL_PCD_EP_Open>
 800899c:	4603      	mov	r3, r0
 800899e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 f92c 	bl	8008c00 <USBD_Get_USB_Status>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	460b      	mov	r3, r1
 80089c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80089d0:	78fa      	ldrb	r2, [r7, #3]
 80089d2:	4611      	mov	r1, r2
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7f8 fe79 	bl	80016cc <HAL_PCD_EP_Close>
 80089da:	4603      	mov	r3, r0
 80089dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089de:	7bfb      	ldrb	r3, [r7, #15]
 80089e0:	4618      	mov	r0, r3
 80089e2:	f000 f90d 	bl	8008c00 <USBD_Get_USB_Status>
 80089e6:	4603      	mov	r3, r0
 80089e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a0e:	78fa      	ldrb	r2, [r7, #3]
 8008a10:	4611      	mov	r1, r2
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7f8 ff22 	bl	800185c <HAL_PCD_EP_SetStall>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 f8ee 	bl	8008c00 <USBD_Get_USB_Status>
 8008a24:	4603      	mov	r3, r0
 8008a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b084      	sub	sp, #16
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a4c:	78fa      	ldrb	r2, [r7, #3]
 8008a4e:	4611      	mov	r1, r2
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7f8 ff55 	bl	8001900 <HAL_PCD_EP_ClrStall>
 8008a56:	4603      	mov	r3, r0
 8008a58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 f8cf 	bl	8008c00 <USBD_Get_USB_Status>
 8008a62:	4603      	mov	r3, r0
 8008a64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a66:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	da0b      	bge.n	8008aa4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a8c:	78fb      	ldrb	r3, [r7, #3]
 8008a8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a92:	68f9      	ldr	r1, [r7, #12]
 8008a94:	4613      	mov	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	440b      	add	r3, r1
 8008a9e:	3312      	adds	r3, #18
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	e00b      	b.n	8008abc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008aa4:	78fb      	ldrb	r3, [r7, #3]
 8008aa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008aaa:	68f9      	ldr	r1, [r7, #12]
 8008aac:	4613      	mov	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	00db      	lsls	r3, r3, #3
 8008ab4:	440b      	add	r3, r1
 8008ab6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008aba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3714      	adds	r7, #20
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ae2:	78fa      	ldrb	r2, [r7, #3]
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7f8 fd6f 	bl	80015ca <HAL_PCD_SetAddress>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 f884 	bl	8008c00 <USBD_Get_USB_Status>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b086      	sub	sp, #24
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	60f8      	str	r0, [r7, #12]
 8008b0e:	607a      	str	r2, [r7, #4]
 8008b10:	461a      	mov	r2, r3
 8008b12:	460b      	mov	r3, r1
 8008b14:	72fb      	strb	r3, [r7, #11]
 8008b16:	4613      	mov	r3, r2
 8008b18:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b28:	893b      	ldrh	r3, [r7, #8]
 8008b2a:	7af9      	ldrb	r1, [r7, #11]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	f7f8 fe5e 	bl	80017ee <HAL_PCD_EP_Transmit>
 8008b32:	4603      	mov	r3, r0
 8008b34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 f861 	bl	8008c00 <USBD_Get_USB_Status>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b42:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	607a      	str	r2, [r7, #4]
 8008b56:	461a      	mov	r2, r3
 8008b58:	460b      	mov	r3, r1
 8008b5a:	72fb      	strb	r3, [r7, #11]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b6e:	893b      	ldrh	r3, [r7, #8]
 8008b70:	7af9      	ldrb	r1, [r7, #11]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	f7f8 fdf2 	bl	800175c <HAL_PCD_EP_Receive>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f83e 	bl	8008c00 <USBD_Get_USB_Status>
 8008b84:	4603      	mov	r3, r0
 8008b86:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b88:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b082      	sub	sp, #8
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ba4:	78fa      	ldrb	r2, [r7, #3]
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7f8 fe08 	bl	80017be <HAL_PCD_EP_GetRxCount>
 8008bae:	4603      	mov	r3, r0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008bc0:	4b03      	ldr	r3, [pc, #12]	@ (8008bd0 <USBD_static_malloc+0x18>)
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	200046c4 	.word	0x200046c4

08008bd4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]

}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	4603      	mov	r3, r0
 8008c08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c0e:	79fb      	ldrb	r3, [r7, #7]
 8008c10:	2b03      	cmp	r3, #3
 8008c12:	d817      	bhi.n	8008c44 <USBD_Get_USB_Status+0x44>
 8008c14:	a201      	add	r2, pc, #4	@ (adr r2, 8008c1c <USBD_Get_USB_Status+0x1c>)
 8008c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1a:	bf00      	nop
 8008c1c:	08008c2d 	.word	0x08008c2d
 8008c20:	08008c33 	.word	0x08008c33
 8008c24:	08008c39 	.word	0x08008c39
 8008c28:	08008c3f 	.word	0x08008c3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c30:	e00b      	b.n	8008c4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c32:	2302      	movs	r3, #2
 8008c34:	73fb      	strb	r3, [r7, #15]
    break;
 8008c36:	e008      	b.n	8008c4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c3c:	e005      	b.n	8008c4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c3e:	2302      	movs	r3, #2
 8008c40:	73fb      	strb	r3, [r7, #15]
    break;
 8008c42:	e002      	b.n	8008c4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c44:	2302      	movs	r3, #2
 8008c46:	73fb      	strb	r3, [r7, #15]
    break;
 8008c48:	bf00      	nop
  }
  return usb_status;
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <arm_fft>:
 8008c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5c:	ed2d 8b02 	vpush	{d8}
 8008c60:	2a01      	cmp	r2, #1
 8008c62:	b087      	sub	sp, #28
 8008c64:	460d      	mov	r5, r1
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	d079      	beq.n	8008d5e <arm_fft+0x106>
 8008c6a:	4693      	mov	fp, r2
 8008c6c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8008c70:	ea4f 0a62 	mov.w	sl, r2, asr #1
 8008c74:	dd7c      	ble.n	8008d70 <arm_fft+0x118>
 8008c76:	f8df e128 	ldr.w	lr, [pc, #296]	@ 8008da0 <arm_fft+0x148>
 8008c7a:	4a48      	ldr	r2, [pc, #288]	@ (8008d9c <arm_fft+0x144>)
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2400      	movs	r4, #0
 8008c80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008c84:	eb0e 06c4 	add.w	r6, lr, r4, lsl #3
 8008c88:	e886 0003 	stmia.w	r6, {r0, r1}
 8008c8c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008c90:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
 8008c94:	3401      	adds	r4, #1
 8008c96:	4554      	cmp	r4, sl
 8008c98:	e886 0003 	stmia.w	r6, {r0, r1}
 8008c9c:	f103 0310 	add.w	r3, r3, #16
 8008ca0:	dbee      	blt.n	8008c80 <arm_fft+0x28>
 8008ca2:	466b      	mov	r3, sp
 8008ca4:	ee08 3a10 	vmov	s16, r3
 8008ca8:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8008cac:	469d      	mov	sp, r3
 8008cae:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8008cb2:	46e8      	mov	r8, sp
 8008cb4:	469d      	mov	sp, r3
 8008cb6:	483a      	ldr	r0, [pc, #232]	@ (8008da0 <arm_fft+0x148>)
 8008cb8:	4641      	mov	r1, r8
 8008cba:	4652      	mov	r2, sl
 8008cbc:	466e      	mov	r6, sp
 8008cbe:	f7ff ffcb 	bl	8008c58 <arm_fft>
 8008cc2:	4836      	ldr	r0, [pc, #216]	@ (8008d9c <arm_fft+0x144>)
 8008cc4:	4652      	mov	r2, sl
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	f7ff ffc6 	bl	8008c58 <arm_fft>
 8008ccc:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008cd0:	607b      	str	r3, [r7, #4]
 8008cd2:	f04f 0900 	mov.w	r9, #0
 8008cd6:	4648      	mov	r0, r9
 8008cd8:	4659      	mov	r1, fp
 8008cda:	f000 f8e5 	bl	8008ea8 <esponenziale_negj>
 8008cde:	eb06 03c9 	add.w	r3, r6, r9, lsl #3
 8008ce2:	ed93 1a00 	vldr	s2, [r3]
 8008ce6:	edd3 1a01 	vldr	s3, [r3, #4]
 8008cea:	ed87 0a02 	vstr	s0, [r7, #8]
 8008cee:	edc7 0a03 	vstr	s1, [r7, #12]
 8008cf2:	f000 f8cb 	bl	8008e8c <prodotto_c>
 8008cf6:	ea4f 04c9 	mov.w	r4, r9, lsl #3
 8008cfa:	4444      	add	r4, r8
 8008cfc:	eeb0 1a40 	vmov.f32	s2, s0
 8008d00:	eef0 1a60 	vmov.f32	s3, s1
 8008d04:	ed94 0a00 	vldr	s0, [r4]
 8008d08:	edd4 0a01 	vldr	s1, [r4, #4]
 8008d0c:	edc7 1a05 	vstr	s3, [r7, #20]
 8008d10:	ed87 1a04 	vstr	s2, [r7, #16]
 8008d14:	f000 f8aa 	bl	8008e6c <somma_c>
 8008d18:	ed97 1a04 	vldr	s2, [r7, #16]
 8008d1c:	ed85 0a00 	vstr	s0, [r5]
 8008d20:	edc5 0a01 	vstr	s1, [r5, #4]
 8008d24:	ed94 0a00 	vldr	s0, [r4]
 8008d28:	edd4 0a01 	vldr	s1, [r4, #4]
 8008d2c:	edd7 1a05 	vldr	s3, [r7, #20]
 8008d30:	f000 f8a4 	bl	8008e7c <sottrazione_c>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f109 0901 	add.w	r9, r9, #1
 8008d3a:	442b      	add	r3, r5
 8008d3c:	45d1      	cmp	r9, sl
 8008d3e:	ed83 0a00 	vstr	s0, [r3]
 8008d42:	f105 0508 	add.w	r5, r5, #8
 8008d46:	edc3 0a01 	vstr	s1, [r3, #4]
 8008d4a:	dbc4      	blt.n	8008cd6 <arm_fft+0x7e>
 8008d4c:	ee18 3a10 	vmov	r3, s16
 8008d50:	371c      	adds	r7, #28
 8008d52:	469d      	mov	sp, r3
 8008d54:	46bd      	mov	sp, r7
 8008d56:	ecbd 8b02 	vpop	{d8}
 8008d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5e:	c803      	ldmia	r0, {r0, r1}
 8008d60:	371c      	adds	r7, #28
 8008d62:	e885 0003 	stmia.w	r5, {r0, r1}
 8008d66:	46bd      	mov	sp, r7
 8008d68:	ecbd 8b02 	vpop	{d8}
 8008d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d70:	466b      	mov	r3, sp
 8008d72:	ee08 3a10 	vmov	s16, r3
 8008d76:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8008d7a:	469d      	mov	sp, r3
 8008d7c:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8008d80:	4669      	mov	r1, sp
 8008d82:	469d      	mov	sp, r3
 8008d84:	4652      	mov	r2, sl
 8008d86:	4806      	ldr	r0, [pc, #24]	@ (8008da0 <arm_fft+0x148>)
 8008d88:	466c      	mov	r4, sp
 8008d8a:	f7ff ff65 	bl	8008c58 <arm_fft>
 8008d8e:	4803      	ldr	r0, [pc, #12]	@ (8008d9c <arm_fft+0x144>)
 8008d90:	4652      	mov	r2, sl
 8008d92:	4621      	mov	r1, r4
 8008d94:	f7ff ff60 	bl	8008c58 <arm_fft>
 8008d98:	e7d8      	b.n	8008d4c <arm_fft+0xf4>
 8008d9a:	bf00      	nop
 8008d9c:	200048e4 	.word	0x200048e4
 8008da0:	200068e4 	.word	0x200068e4

08008da4 <fft_to_spectrogram>:
 8008da4:	2a00      	cmp	r2, #0
 8008da6:	dd50      	ble.n	8008e4a <fft_to_spectrogram+0xa6>
 8008da8:	b570      	push	{r4, r5, r6, lr}
 8008daa:	ed2d 8b04 	vpush	{d8-d9}
 8008dae:	eddf 8a2d 	vldr	s17, [pc, #180]	@ 8008e64 <fft_to_spectrogram+0xc0>
 8008db2:	b084      	sub	sp, #16
 8008db4:	eeb0 8a40 	vmov.f32	s16, s0
 8008db8:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	460d      	mov	r5, r1
 8008dc0:	edd0 7a01 	vldr	s15, [r0, #4]
 8008dc4:	ed90 7a00 	vldr	s14, [r0]
 8008dc8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008dcc:	3008      	adds	r0, #8
 8008dce:	eee7 7a07 	vfma.f32	s15, s14, s14
 8008dd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dda:	eeb1 9ae7 	vsqrt.f32	s18, s15
 8008dde:	d435      	bmi.n	8008e4c <fft_to_spectrogram+0xa8>
 8008de0:	eeb4 9a68 	vcmp.f32	s18, s17
 8008de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de8:	bfc8      	it	gt
 8008dea:	eef0 8a49 	vmovgt.f32	s17, s18
 8008dee:	42b0      	cmp	r0, r6
 8008df0:	eca5 9a01 	vstmia	r5!, {s18}
 8008df4:	d1e4      	bne.n	8008dc0 <fft_to_spectrogram+0x1c>
 8008df6:	ed9f 9a1c 	vldr	s18, [pc, #112]	@ 8008e68 <fft_to_spectrogram+0xc4>
 8008dfa:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8008dfe:	eef3 9a04 	vmov.f32	s19, #52	@ 0x41a00000  20.0
 8008e02:	ed94 0a00 	vldr	s0, [r4]
 8008e06:	eeb4 0a49 	vcmp.f32	s0, s18
 8008e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e0e:	bf48      	it	mi
 8008e10:	eeb0 0a49 	vmovmi.f32	s0, s18
 8008e14:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8008e18:	f000 f8ae 	bl	8008f78 <log10f>
 8008e1c:	ee20 0a29 	vmul.f32	s0, s0, s19
 8008e20:	eeb4 0a48 	vcmp.f32	s0, s16
 8008e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e28:	bf48      	it	mi
 8008e2a:	eeb0 0a48 	vmovmi.f32	s0, s16
 8008e2e:	ee70 7a48 	vsub.f32	s15, s0, s16
 8008e32:	eef1 7a67 	vneg.f32	s15, s15
 8008e36:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8008e3a:	eca4 7a01 	vstmia	r4!, {s14}
 8008e3e:	42a5      	cmp	r5, r4
 8008e40:	d1df      	bne.n	8008e02 <fft_to_spectrogram+0x5e>
 8008e42:	b004      	add	sp, #16
 8008e44:	ecbd 8b04 	vpop	{d8-d9}
 8008e48:	bd70      	pop	{r4, r5, r6, pc}
 8008e4a:	4770      	bx	lr
 8008e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8008e50:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008e54:	9001      	str	r0, [sp, #4]
 8008e56:	f000 f8bd 	bl	8008fd4 <sqrtf>
 8008e5a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008e5e:	9801      	ldr	r0, [sp, #4]
 8008e60:	e7be      	b.n	8008de0 <fft_to_spectrogram+0x3c>
 8008e62:	bf00      	nop
 8008e64:	00000000 	.word	0x00000000
 8008e68:	2b8cbccc 	.word	0x2b8cbccc

08008e6c <somma_c>:
 8008e6c:	ee30 0a01 	vadd.f32	s0, s0, s2
 8008e70:	ee70 0aa1 	vadd.f32	s1, s1, s3
 8008e74:	b088      	sub	sp, #32
 8008e76:	b008      	add	sp, #32
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop

08008e7c <sottrazione_c>:
 8008e7c:	ee30 0a41 	vsub.f32	s0, s0, s2
 8008e80:	ee70 0ae1 	vsub.f32	s1, s1, s3
 8008e84:	b088      	sub	sp, #32
 8008e86:	b008      	add	sp, #32
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop

08008e8c <prodotto_c>:
 8008e8c:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8008e90:	ee60 0a81 	vmul.f32	s1, s1, s2
 8008e94:	eee0 7a01 	vfma.f32	s15, s0, s2
 8008e98:	b088      	sub	sp, #32
 8008e9a:	eee0 0a21 	vfma.f32	s1, s0, s3
 8008e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8008ea2:	b008      	add	sp, #32
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop

08008ea8 <esponenziale_negj>:
 8008ea8:	ee07 0a90 	vmov	s15, r0
 8008eac:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8008ef4 <esponenziale_negj+0x4c>
 8008eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008eb4:	b500      	push	{lr}
 8008eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008eba:	ee07 1a10 	vmov	s14, r1
 8008ebe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008ec2:	ed2d 8b02 	vpush	{d8}
 8008ec6:	eec7 8a87 	vdiv.f32	s17, s15, s14
 8008eca:	b085      	sub	sp, #20
 8008ecc:	eeb0 0a68 	vmov.f32	s0, s17
 8008ed0:	f000 f89e 	bl	8009010 <cosf>
 8008ed4:	eeb0 8a40 	vmov.f32	s16, s0
 8008ed8:	eeb0 0a68 	vmov.f32	s0, s17
 8008edc:	f000 f8dc 	bl	8009098 <sinf>
 8008ee0:	eef0 0a40 	vmov.f32	s1, s0
 8008ee4:	eeb0 0a48 	vmov.f32	s0, s16
 8008ee8:	b005      	add	sp, #20
 8008eea:	ecbd 8b02 	vpop	{d8}
 8008eee:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ef2:	bf00      	nop
 8008ef4:	c0c90fdb 	.word	0xc0c90fdb

08008ef8 <memset>:
 8008ef8:	4402      	add	r2, r0
 8008efa:	4603      	mov	r3, r0
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d100      	bne.n	8008f02 <memset+0xa>
 8008f00:	4770      	bx	lr
 8008f02:	f803 1b01 	strb.w	r1, [r3], #1
 8008f06:	e7f9      	b.n	8008efc <memset+0x4>

08008f08 <__errno>:
 8008f08:	4b01      	ldr	r3, [pc, #4]	@ (8008f10 <__errno+0x8>)
 8008f0a:	6818      	ldr	r0, [r3, #0]
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	2000017c 	.word	0x2000017c

08008f14 <__libc_init_array>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	4d0d      	ldr	r5, [pc, #52]	@ (8008f4c <__libc_init_array+0x38>)
 8008f18:	4c0d      	ldr	r4, [pc, #52]	@ (8008f50 <__libc_init_array+0x3c>)
 8008f1a:	1b64      	subs	r4, r4, r5
 8008f1c:	10a4      	asrs	r4, r4, #2
 8008f1e:	2600      	movs	r6, #0
 8008f20:	42a6      	cmp	r6, r4
 8008f22:	d109      	bne.n	8008f38 <__libc_init_array+0x24>
 8008f24:	4d0b      	ldr	r5, [pc, #44]	@ (8008f54 <__libc_init_array+0x40>)
 8008f26:	4c0c      	ldr	r4, [pc, #48]	@ (8008f58 <__libc_init_array+0x44>)
 8008f28:	f000 ff3a 	bl	8009da0 <_init>
 8008f2c:	1b64      	subs	r4, r4, r5
 8008f2e:	10a4      	asrs	r4, r4, #2
 8008f30:	2600      	movs	r6, #0
 8008f32:	42a6      	cmp	r6, r4
 8008f34:	d105      	bne.n	8008f42 <__libc_init_array+0x2e>
 8008f36:	bd70      	pop	{r4, r5, r6, pc}
 8008f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f3c:	4798      	blx	r3
 8008f3e:	3601      	adds	r6, #1
 8008f40:	e7ee      	b.n	8008f20 <__libc_init_array+0xc>
 8008f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f46:	4798      	blx	r3
 8008f48:	3601      	adds	r6, #1
 8008f4a:	e7f2      	b.n	8008f32 <__libc_init_array+0x1e>
 8008f4c:	0800a204 	.word	0x0800a204
 8008f50:	0800a204 	.word	0x0800a204
 8008f54:	0800a204 	.word	0x0800a204
 8008f58:	0800a208 	.word	0x0800a208

08008f5c <memcpy>:
 8008f5c:	440a      	add	r2, r1
 8008f5e:	4291      	cmp	r1, r2
 8008f60:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f64:	d100      	bne.n	8008f68 <memcpy+0xc>
 8008f66:	4770      	bx	lr
 8008f68:	b510      	push	{r4, lr}
 8008f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f72:	4291      	cmp	r1, r2
 8008f74:	d1f9      	bne.n	8008f6a <memcpy+0xe>
 8008f76:	bd10      	pop	{r4, pc}

08008f78 <log10f>:
 8008f78:	b508      	push	{r3, lr}
 8008f7a:	ed2d 8b02 	vpush	{d8}
 8008f7e:	eeb0 8a40 	vmov.f32	s16, s0
 8008f82:	f000 f979 	bl	8009278 <__ieee754_log10f>
 8008f86:	eeb4 8a48 	vcmp.f32	s16, s16
 8008f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8e:	d60f      	bvs.n	8008fb0 <log10f+0x38>
 8008f90:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f98:	d80a      	bhi.n	8008fb0 <log10f+0x38>
 8008f9a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa2:	d108      	bne.n	8008fb6 <log10f+0x3e>
 8008fa4:	f7ff ffb0 	bl	8008f08 <__errno>
 8008fa8:	2322      	movs	r3, #34	@ 0x22
 8008faa:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008fcc <log10f+0x54>
 8008fae:	6003      	str	r3, [r0, #0]
 8008fb0:	ecbd 8b02 	vpop	{d8}
 8008fb4:	bd08      	pop	{r3, pc}
 8008fb6:	f7ff ffa7 	bl	8008f08 <__errno>
 8008fba:	ecbd 8b02 	vpop	{d8}
 8008fbe:	2321      	movs	r3, #33	@ 0x21
 8008fc0:	6003      	str	r3, [r0, #0]
 8008fc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008fc6:	4802      	ldr	r0, [pc, #8]	@ (8008fd0 <log10f+0x58>)
 8008fc8:	f000 b8ac 	b.w	8009124 <nanf>
 8008fcc:	ff800000 	.word	0xff800000
 8008fd0:	08009e30 	.word	0x08009e30

08008fd4 <sqrtf>:
 8008fd4:	b508      	push	{r3, lr}
 8008fd6:	ed2d 8b02 	vpush	{d8}
 8008fda:	eeb0 8a40 	vmov.f32	s16, s0
 8008fde:	f000 f8a7 	bl	8009130 <__ieee754_sqrtf>
 8008fe2:	eeb4 8a48 	vcmp.f32	s16, s16
 8008fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fea:	d60c      	bvs.n	8009006 <sqrtf+0x32>
 8008fec:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800900c <sqrtf+0x38>
 8008ff0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff8:	d505      	bpl.n	8009006 <sqrtf+0x32>
 8008ffa:	f7ff ff85 	bl	8008f08 <__errno>
 8008ffe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009002:	2321      	movs	r3, #33	@ 0x21
 8009004:	6003      	str	r3, [r0, #0]
 8009006:	ecbd 8b02 	vpop	{d8}
 800900a:	bd08      	pop	{r3, pc}
 800900c:	00000000 	.word	0x00000000

08009010 <cosf>:
 8009010:	ee10 3a10 	vmov	r3, s0
 8009014:	b507      	push	{r0, r1, r2, lr}
 8009016:	4a1e      	ldr	r2, [pc, #120]	@ (8009090 <cosf+0x80>)
 8009018:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800901c:	4293      	cmp	r3, r2
 800901e:	d806      	bhi.n	800902e <cosf+0x1e>
 8009020:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8009094 <cosf+0x84>
 8009024:	b003      	add	sp, #12
 8009026:	f85d eb04 	ldr.w	lr, [sp], #4
 800902a:	f000 b885 	b.w	8009138 <__kernel_cosf>
 800902e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009032:	d304      	bcc.n	800903e <cosf+0x2e>
 8009034:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009038:	b003      	add	sp, #12
 800903a:	f85d fb04 	ldr.w	pc, [sp], #4
 800903e:	4668      	mov	r0, sp
 8009040:	f000 f972 	bl	8009328 <__ieee754_rem_pio2f>
 8009044:	f000 0003 	and.w	r0, r0, #3
 8009048:	2801      	cmp	r0, #1
 800904a:	d009      	beq.n	8009060 <cosf+0x50>
 800904c:	2802      	cmp	r0, #2
 800904e:	d010      	beq.n	8009072 <cosf+0x62>
 8009050:	b9b0      	cbnz	r0, 8009080 <cosf+0x70>
 8009052:	eddd 0a01 	vldr	s1, [sp, #4]
 8009056:	ed9d 0a00 	vldr	s0, [sp]
 800905a:	f000 f86d 	bl	8009138 <__kernel_cosf>
 800905e:	e7eb      	b.n	8009038 <cosf+0x28>
 8009060:	eddd 0a01 	vldr	s1, [sp, #4]
 8009064:	ed9d 0a00 	vldr	s0, [sp]
 8009068:	f000 f8be 	bl	80091e8 <__kernel_sinf>
 800906c:	eeb1 0a40 	vneg.f32	s0, s0
 8009070:	e7e2      	b.n	8009038 <cosf+0x28>
 8009072:	eddd 0a01 	vldr	s1, [sp, #4]
 8009076:	ed9d 0a00 	vldr	s0, [sp]
 800907a:	f000 f85d 	bl	8009138 <__kernel_cosf>
 800907e:	e7f5      	b.n	800906c <cosf+0x5c>
 8009080:	eddd 0a01 	vldr	s1, [sp, #4]
 8009084:	ed9d 0a00 	vldr	s0, [sp]
 8009088:	2001      	movs	r0, #1
 800908a:	f000 f8ad 	bl	80091e8 <__kernel_sinf>
 800908e:	e7d3      	b.n	8009038 <cosf+0x28>
 8009090:	3f490fd8 	.word	0x3f490fd8
 8009094:	00000000 	.word	0x00000000

08009098 <sinf>:
 8009098:	ee10 3a10 	vmov	r3, s0
 800909c:	b507      	push	{r0, r1, r2, lr}
 800909e:	4a1f      	ldr	r2, [pc, #124]	@ (800911c <sinf+0x84>)
 80090a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d807      	bhi.n	80090b8 <sinf+0x20>
 80090a8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8009120 <sinf+0x88>
 80090ac:	2000      	movs	r0, #0
 80090ae:	b003      	add	sp, #12
 80090b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090b4:	f000 b898 	b.w	80091e8 <__kernel_sinf>
 80090b8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80090bc:	d304      	bcc.n	80090c8 <sinf+0x30>
 80090be:	ee30 0a40 	vsub.f32	s0, s0, s0
 80090c2:	b003      	add	sp, #12
 80090c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80090c8:	4668      	mov	r0, sp
 80090ca:	f000 f92d 	bl	8009328 <__ieee754_rem_pio2f>
 80090ce:	f000 0003 	and.w	r0, r0, #3
 80090d2:	2801      	cmp	r0, #1
 80090d4:	d00a      	beq.n	80090ec <sinf+0x54>
 80090d6:	2802      	cmp	r0, #2
 80090d8:	d00f      	beq.n	80090fa <sinf+0x62>
 80090da:	b9c0      	cbnz	r0, 800910e <sinf+0x76>
 80090dc:	eddd 0a01 	vldr	s1, [sp, #4]
 80090e0:	ed9d 0a00 	vldr	s0, [sp]
 80090e4:	2001      	movs	r0, #1
 80090e6:	f000 f87f 	bl	80091e8 <__kernel_sinf>
 80090ea:	e7ea      	b.n	80090c2 <sinf+0x2a>
 80090ec:	eddd 0a01 	vldr	s1, [sp, #4]
 80090f0:	ed9d 0a00 	vldr	s0, [sp]
 80090f4:	f000 f820 	bl	8009138 <__kernel_cosf>
 80090f8:	e7e3      	b.n	80090c2 <sinf+0x2a>
 80090fa:	eddd 0a01 	vldr	s1, [sp, #4]
 80090fe:	ed9d 0a00 	vldr	s0, [sp]
 8009102:	2001      	movs	r0, #1
 8009104:	f000 f870 	bl	80091e8 <__kernel_sinf>
 8009108:	eeb1 0a40 	vneg.f32	s0, s0
 800910c:	e7d9      	b.n	80090c2 <sinf+0x2a>
 800910e:	eddd 0a01 	vldr	s1, [sp, #4]
 8009112:	ed9d 0a00 	vldr	s0, [sp]
 8009116:	f000 f80f 	bl	8009138 <__kernel_cosf>
 800911a:	e7f5      	b.n	8009108 <sinf+0x70>
 800911c:	3f490fd8 	.word	0x3f490fd8
 8009120:	00000000 	.word	0x00000000

08009124 <nanf>:
 8009124:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800912c <nanf+0x8>
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	7fc00000 	.word	0x7fc00000

08009130 <__ieee754_sqrtf>:
 8009130:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009134:	4770      	bx	lr
	...

08009138 <__kernel_cosf>:
 8009138:	ee10 3a10 	vmov	r3, s0
 800913c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009140:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009144:	eef0 6a40 	vmov.f32	s13, s0
 8009148:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800914c:	d204      	bcs.n	8009158 <__kernel_cosf+0x20>
 800914e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8009152:	ee17 2a90 	vmov	r2, s15
 8009156:	b342      	cbz	r2, 80091aa <__kernel_cosf+0x72>
 8009158:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800915c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80091c8 <__kernel_cosf+0x90>
 8009160:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80091cc <__kernel_cosf+0x94>
 8009164:	4a1a      	ldr	r2, [pc, #104]	@ (80091d0 <__kernel_cosf+0x98>)
 8009166:	eea7 6a27 	vfma.f32	s12, s14, s15
 800916a:	4293      	cmp	r3, r2
 800916c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80091d4 <__kernel_cosf+0x9c>
 8009170:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009174:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80091d8 <__kernel_cosf+0xa0>
 8009178:	eea7 6a87 	vfma.f32	s12, s15, s14
 800917c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80091dc <__kernel_cosf+0xa4>
 8009180:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009184:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80091e0 <__kernel_cosf+0xa8>
 8009188:	eea7 6a87 	vfma.f32	s12, s15, s14
 800918c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8009190:	ee26 6a07 	vmul.f32	s12, s12, s14
 8009194:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009198:	eee7 0a06 	vfma.f32	s1, s14, s12
 800919c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a0:	d804      	bhi.n	80091ac <__kernel_cosf+0x74>
 80091a2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80091a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80091aa:	4770      	bx	lr
 80091ac:	4a0d      	ldr	r2, [pc, #52]	@ (80091e4 <__kernel_cosf+0xac>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	bf9a      	itte	ls
 80091b2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80091b6:	ee07 3a10 	vmovls	s14, r3
 80091ba:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80091be:	ee30 0a47 	vsub.f32	s0, s0, s14
 80091c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091c6:	e7ec      	b.n	80091a2 <__kernel_cosf+0x6a>
 80091c8:	ad47d74e 	.word	0xad47d74e
 80091cc:	310f74f6 	.word	0x310f74f6
 80091d0:	3e999999 	.word	0x3e999999
 80091d4:	b493f27c 	.word	0xb493f27c
 80091d8:	37d00d01 	.word	0x37d00d01
 80091dc:	bab60b61 	.word	0xbab60b61
 80091e0:	3d2aaaab 	.word	0x3d2aaaab
 80091e4:	3f480000 	.word	0x3f480000

080091e8 <__kernel_sinf>:
 80091e8:	ee10 3a10 	vmov	r3, s0
 80091ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091f0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80091f4:	d204      	bcs.n	8009200 <__kernel_sinf+0x18>
 80091f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80091fa:	ee17 3a90 	vmov	r3, s15
 80091fe:	b35b      	cbz	r3, 8009258 <__kernel_sinf+0x70>
 8009200:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009204:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800925c <__kernel_sinf+0x74>
 8009208:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8009260 <__kernel_sinf+0x78>
 800920c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009210:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8009264 <__kernel_sinf+0x7c>
 8009214:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009218:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8009268 <__kernel_sinf+0x80>
 800921c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009220:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800926c <__kernel_sinf+0x84>
 8009224:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009228:	eee6 7a07 	vfma.f32	s15, s12, s14
 800922c:	b930      	cbnz	r0, 800923c <__kernel_sinf+0x54>
 800922e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8009270 <__kernel_sinf+0x88>
 8009232:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009236:	eea6 0a26 	vfma.f32	s0, s12, s13
 800923a:	4770      	bx	lr
 800923c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009240:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009244:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009248:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800924c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8009274 <__kernel_sinf+0x8c>
 8009250:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009254:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	2f2ec9d3 	.word	0x2f2ec9d3
 8009260:	b2d72f34 	.word	0xb2d72f34
 8009264:	3638ef1b 	.word	0x3638ef1b
 8009268:	b9500d01 	.word	0xb9500d01
 800926c:	3c088889 	.word	0x3c088889
 8009270:	be2aaaab 	.word	0xbe2aaaab
 8009274:	3e2aaaab 	.word	0x3e2aaaab

08009278 <__ieee754_log10f>:
 8009278:	b508      	push	{r3, lr}
 800927a:	ee10 3a10 	vmov	r3, s0
 800927e:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009282:	ed2d 8b02 	vpush	{d8}
 8009286:	d108      	bne.n	800929a <__ieee754_log10f+0x22>
 8009288:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8009310 <__ieee754_log10f+0x98>
 800928c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8009314 <__ieee754_log10f+0x9c>
 8009290:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009294:	ecbd 8b02 	vpop	{d8}
 8009298:	bd08      	pop	{r3, pc}
 800929a:	2b00      	cmp	r3, #0
 800929c:	461a      	mov	r2, r3
 800929e:	da02      	bge.n	80092a6 <__ieee754_log10f+0x2e>
 80092a0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80092a4:	e7f2      	b.n	800928c <__ieee754_log10f+0x14>
 80092a6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80092aa:	db02      	blt.n	80092b2 <__ieee754_log10f+0x3a>
 80092ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 80092b0:	e7f0      	b.n	8009294 <__ieee754_log10f+0x1c>
 80092b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80092b6:	bfbf      	itttt	lt
 80092b8:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 8009318 <__ieee754_log10f+0xa0>
 80092bc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80092c0:	f06f 0118 	mvnlt.w	r1, #24
 80092c4:	ee17 2a90 	vmovlt	r2, s15
 80092c8:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80092cc:	bfa8      	it	ge
 80092ce:	2100      	movge	r1, #0
 80092d0:	3b7f      	subs	r3, #127	@ 0x7f
 80092d2:	440b      	add	r3, r1
 80092d4:	0fd9      	lsrs	r1, r3, #31
 80092d6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80092e2:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 80092e6:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80092ea:	ee00 3a10 	vmov	s0, r3
 80092ee:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80092f2:	f000 fbb9 	bl	8009a68 <__ieee754_logf>
 80092f6:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800931c <__ieee754_log10f+0xa4>
 80092fa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80092fe:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009320 <__ieee754_log10f+0xa8>
 8009302:	eea8 0a27 	vfma.f32	s0, s16, s15
 8009306:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8009324 <__ieee754_log10f+0xac>
 800930a:	eea8 0a27 	vfma.f32	s0, s16, s15
 800930e:	e7c1      	b.n	8009294 <__ieee754_log10f+0x1c>
 8009310:	cc000000 	.word	0xcc000000
 8009314:	00000000 	.word	0x00000000
 8009318:	4c000000 	.word	0x4c000000
 800931c:	3ede5bd9 	.word	0x3ede5bd9
 8009320:	355427db 	.word	0x355427db
 8009324:	3e9a2080 	.word	0x3e9a2080

08009328 <__ieee754_rem_pio2f>:
 8009328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800932a:	ee10 6a10 	vmov	r6, s0
 800932e:	4b88      	ldr	r3, [pc, #544]	@ (8009550 <__ieee754_rem_pio2f+0x228>)
 8009330:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8009334:	429d      	cmp	r5, r3
 8009336:	b087      	sub	sp, #28
 8009338:	4604      	mov	r4, r0
 800933a:	d805      	bhi.n	8009348 <__ieee754_rem_pio2f+0x20>
 800933c:	2300      	movs	r3, #0
 800933e:	ed80 0a00 	vstr	s0, [r0]
 8009342:	6043      	str	r3, [r0, #4]
 8009344:	2000      	movs	r0, #0
 8009346:	e022      	b.n	800938e <__ieee754_rem_pio2f+0x66>
 8009348:	4b82      	ldr	r3, [pc, #520]	@ (8009554 <__ieee754_rem_pio2f+0x22c>)
 800934a:	429d      	cmp	r5, r3
 800934c:	d83a      	bhi.n	80093c4 <__ieee754_rem_pio2f+0x9c>
 800934e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009352:	2e00      	cmp	r6, #0
 8009354:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8009558 <__ieee754_rem_pio2f+0x230>
 8009358:	4a80      	ldr	r2, [pc, #512]	@ (800955c <__ieee754_rem_pio2f+0x234>)
 800935a:	f023 030f 	bic.w	r3, r3, #15
 800935e:	dd18      	ble.n	8009392 <__ieee754_rem_pio2f+0x6a>
 8009360:	4293      	cmp	r3, r2
 8009362:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009366:	bf09      	itett	eq
 8009368:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8009560 <__ieee754_rem_pio2f+0x238>
 800936c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8009564 <__ieee754_rem_pio2f+0x23c>
 8009370:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8009568 <__ieee754_rem_pio2f+0x240>
 8009374:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009378:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800937c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009380:	ed80 7a00 	vstr	s14, [r0]
 8009384:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009388:	edc0 7a01 	vstr	s15, [r0, #4]
 800938c:	2001      	movs	r0, #1
 800938e:	b007      	add	sp, #28
 8009390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009392:	4293      	cmp	r3, r2
 8009394:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009398:	bf09      	itett	eq
 800939a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8009560 <__ieee754_rem_pio2f+0x238>
 800939e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8009564 <__ieee754_rem_pio2f+0x23c>
 80093a2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8009568 <__ieee754_rem_pio2f+0x240>
 80093a6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80093aa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80093ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093b2:	ed80 7a00 	vstr	s14, [r0]
 80093b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ba:	edc0 7a01 	vstr	s15, [r0, #4]
 80093be:	f04f 30ff 	mov.w	r0, #4294967295
 80093c2:	e7e4      	b.n	800938e <__ieee754_rem_pio2f+0x66>
 80093c4:	4b69      	ldr	r3, [pc, #420]	@ (800956c <__ieee754_rem_pio2f+0x244>)
 80093c6:	429d      	cmp	r5, r3
 80093c8:	d873      	bhi.n	80094b2 <__ieee754_rem_pio2f+0x18a>
 80093ca:	f000 f8dd 	bl	8009588 <fabsf>
 80093ce:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8009570 <__ieee754_rem_pio2f+0x248>
 80093d2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80093d6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80093da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093e2:	ee17 0a90 	vmov	r0, s15
 80093e6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009558 <__ieee754_rem_pio2f+0x230>
 80093ea:	eea7 0a67 	vfms.f32	s0, s14, s15
 80093ee:	281f      	cmp	r0, #31
 80093f0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009564 <__ieee754_rem_pio2f+0x23c>
 80093f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f8:	eeb1 6a47 	vneg.f32	s12, s14
 80093fc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009400:	ee16 1a90 	vmov	r1, s13
 8009404:	dc09      	bgt.n	800941a <__ieee754_rem_pio2f+0xf2>
 8009406:	4a5b      	ldr	r2, [pc, #364]	@ (8009574 <__ieee754_rem_pio2f+0x24c>)
 8009408:	1e47      	subs	r7, r0, #1
 800940a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800940e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8009412:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009416:	4293      	cmp	r3, r2
 8009418:	d107      	bne.n	800942a <__ieee754_rem_pio2f+0x102>
 800941a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800941e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8009422:	2a08      	cmp	r2, #8
 8009424:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8009428:	dc14      	bgt.n	8009454 <__ieee754_rem_pio2f+0x12c>
 800942a:	6021      	str	r1, [r4, #0]
 800942c:	ed94 7a00 	vldr	s14, [r4]
 8009430:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009434:	2e00      	cmp	r6, #0
 8009436:	ee30 0a67 	vsub.f32	s0, s0, s15
 800943a:	ed84 0a01 	vstr	s0, [r4, #4]
 800943e:	daa6      	bge.n	800938e <__ieee754_rem_pio2f+0x66>
 8009440:	eeb1 7a47 	vneg.f32	s14, s14
 8009444:	eeb1 0a40 	vneg.f32	s0, s0
 8009448:	ed84 7a00 	vstr	s14, [r4]
 800944c:	ed84 0a01 	vstr	s0, [r4, #4]
 8009450:	4240      	negs	r0, r0
 8009452:	e79c      	b.n	800938e <__ieee754_rem_pio2f+0x66>
 8009454:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8009560 <__ieee754_rem_pio2f+0x238>
 8009458:	eef0 6a40 	vmov.f32	s13, s0
 800945c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009460:	ee70 7a66 	vsub.f32	s15, s0, s13
 8009464:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009468:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009568 <__ieee754_rem_pio2f+0x240>
 800946c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009470:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009474:	ee15 2a90 	vmov	r2, s11
 8009478:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800947c:	1a5b      	subs	r3, r3, r1
 800947e:	2b19      	cmp	r3, #25
 8009480:	dc04      	bgt.n	800948c <__ieee754_rem_pio2f+0x164>
 8009482:	edc4 5a00 	vstr	s11, [r4]
 8009486:	eeb0 0a66 	vmov.f32	s0, s13
 800948a:	e7cf      	b.n	800942c <__ieee754_rem_pio2f+0x104>
 800948c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8009578 <__ieee754_rem_pio2f+0x250>
 8009490:	eeb0 0a66 	vmov.f32	s0, s13
 8009494:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009498:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800949c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800957c <__ieee754_rem_pio2f+0x254>
 80094a0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80094a4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80094a8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80094ac:	ed84 7a00 	vstr	s14, [r4]
 80094b0:	e7bc      	b.n	800942c <__ieee754_rem_pio2f+0x104>
 80094b2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80094b6:	d306      	bcc.n	80094c6 <__ieee754_rem_pio2f+0x19e>
 80094b8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80094bc:	edc0 7a01 	vstr	s15, [r0, #4]
 80094c0:	edc0 7a00 	vstr	s15, [r0]
 80094c4:	e73e      	b.n	8009344 <__ieee754_rem_pio2f+0x1c>
 80094c6:	15ea      	asrs	r2, r5, #23
 80094c8:	3a86      	subs	r2, #134	@ 0x86
 80094ca:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80094d6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8009580 <__ieee754_rem_pio2f+0x258>
 80094da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80094de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094e2:	ed8d 7a03 	vstr	s14, [sp, #12]
 80094e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80094ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80094ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80094f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094f6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80094fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80094fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009506:	edcd 7a05 	vstr	s15, [sp, #20]
 800950a:	d11e      	bne.n	800954a <__ieee754_rem_pio2f+0x222>
 800950c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009514:	bf0c      	ite	eq
 8009516:	2301      	moveq	r3, #1
 8009518:	2302      	movne	r3, #2
 800951a:	491a      	ldr	r1, [pc, #104]	@ (8009584 <__ieee754_rem_pio2f+0x25c>)
 800951c:	9101      	str	r1, [sp, #4]
 800951e:	2102      	movs	r1, #2
 8009520:	9100      	str	r1, [sp, #0]
 8009522:	a803      	add	r0, sp, #12
 8009524:	4621      	mov	r1, r4
 8009526:	f000 f837 	bl	8009598 <__kernel_rem_pio2f>
 800952a:	2e00      	cmp	r6, #0
 800952c:	f6bf af2f 	bge.w	800938e <__ieee754_rem_pio2f+0x66>
 8009530:	edd4 7a00 	vldr	s15, [r4]
 8009534:	eef1 7a67 	vneg.f32	s15, s15
 8009538:	edc4 7a00 	vstr	s15, [r4]
 800953c:	edd4 7a01 	vldr	s15, [r4, #4]
 8009540:	eef1 7a67 	vneg.f32	s15, s15
 8009544:	edc4 7a01 	vstr	s15, [r4, #4]
 8009548:	e782      	b.n	8009450 <__ieee754_rem_pio2f+0x128>
 800954a:	2303      	movs	r3, #3
 800954c:	e7e5      	b.n	800951a <__ieee754_rem_pio2f+0x1f2>
 800954e:	bf00      	nop
 8009550:	3f490fd8 	.word	0x3f490fd8
 8009554:	4016cbe3 	.word	0x4016cbe3
 8009558:	3fc90f80 	.word	0x3fc90f80
 800955c:	3fc90fd0 	.word	0x3fc90fd0
 8009560:	37354400 	.word	0x37354400
 8009564:	37354443 	.word	0x37354443
 8009568:	2e85a308 	.word	0x2e85a308
 800956c:	43490f80 	.word	0x43490f80
 8009570:	3f22f984 	.word	0x3f22f984
 8009574:	08009e34 	.word	0x08009e34
 8009578:	2e85a300 	.word	0x2e85a300
 800957c:	248d3132 	.word	0x248d3132
 8009580:	43800000 	.word	0x43800000
 8009584:	08009eb4 	.word	0x08009eb4

08009588 <fabsf>:
 8009588:	ee10 3a10 	vmov	r3, s0
 800958c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009590:	ee00 3a10 	vmov	s0, r3
 8009594:	4770      	bx	lr
	...

08009598 <__kernel_rem_pio2f>:
 8009598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	ed2d 8b04 	vpush	{d8-d9}
 80095a0:	b0d9      	sub	sp, #356	@ 0x164
 80095a2:	4690      	mov	r8, r2
 80095a4:	9001      	str	r0, [sp, #4]
 80095a6:	4ab6      	ldr	r2, [pc, #728]	@ (8009880 <__kernel_rem_pio2f+0x2e8>)
 80095a8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80095aa:	f118 0f04 	cmn.w	r8, #4
 80095ae:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80095b2:	460f      	mov	r7, r1
 80095b4:	f103 3bff 	add.w	fp, r3, #4294967295
 80095b8:	db26      	blt.n	8009608 <__kernel_rem_pio2f+0x70>
 80095ba:	f1b8 0203 	subs.w	r2, r8, #3
 80095be:	bf48      	it	mi
 80095c0:	f108 0204 	addmi.w	r2, r8, #4
 80095c4:	10d2      	asrs	r2, r2, #3
 80095c6:	1c55      	adds	r5, r2, #1
 80095c8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80095ca:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8009890 <__kernel_rem_pio2f+0x2f8>
 80095ce:	00e8      	lsls	r0, r5, #3
 80095d0:	eba2 060b 	sub.w	r6, r2, fp
 80095d4:	9002      	str	r0, [sp, #8]
 80095d6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80095da:	eb0a 0c0b 	add.w	ip, sl, fp
 80095de:	ac1c      	add	r4, sp, #112	@ 0x70
 80095e0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80095e4:	2000      	movs	r0, #0
 80095e6:	4560      	cmp	r0, ip
 80095e8:	dd10      	ble.n	800960c <__kernel_rem_pio2f+0x74>
 80095ea:	a91c      	add	r1, sp, #112	@ 0x70
 80095ec:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80095f0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80095f4:	2600      	movs	r6, #0
 80095f6:	4556      	cmp	r6, sl
 80095f8:	dc24      	bgt.n	8009644 <__kernel_rem_pio2f+0xac>
 80095fa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80095fe:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8009890 <__kernel_rem_pio2f+0x2f8>
 8009602:	4684      	mov	ip, r0
 8009604:	2400      	movs	r4, #0
 8009606:	e016      	b.n	8009636 <__kernel_rem_pio2f+0x9e>
 8009608:	2200      	movs	r2, #0
 800960a:	e7dc      	b.n	80095c6 <__kernel_rem_pio2f+0x2e>
 800960c:	42c6      	cmn	r6, r0
 800960e:	bf5d      	ittte	pl
 8009610:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8009614:	ee07 1a90 	vmovpl	s15, r1
 8009618:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800961c:	eef0 7a47 	vmovmi.f32	s15, s14
 8009620:	ece4 7a01 	vstmia	r4!, {s15}
 8009624:	3001      	adds	r0, #1
 8009626:	e7de      	b.n	80095e6 <__kernel_rem_pio2f+0x4e>
 8009628:	ecfe 6a01 	vldmia	lr!, {s13}
 800962c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8009630:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009634:	3401      	adds	r4, #1
 8009636:	455c      	cmp	r4, fp
 8009638:	ddf6      	ble.n	8009628 <__kernel_rem_pio2f+0x90>
 800963a:	ece9 7a01 	vstmia	r9!, {s15}
 800963e:	3601      	adds	r6, #1
 8009640:	3004      	adds	r0, #4
 8009642:	e7d8      	b.n	80095f6 <__kernel_rem_pio2f+0x5e>
 8009644:	a908      	add	r1, sp, #32
 8009646:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800964a:	9104      	str	r1, [sp, #16]
 800964c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800964e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800988c <__kernel_rem_pio2f+0x2f4>
 8009652:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8009888 <__kernel_rem_pio2f+0x2f0>
 8009656:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800965a:	9203      	str	r2, [sp, #12]
 800965c:	4654      	mov	r4, sl
 800965e:	00a2      	lsls	r2, r4, #2
 8009660:	9205      	str	r2, [sp, #20]
 8009662:	aa58      	add	r2, sp, #352	@ 0x160
 8009664:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8009668:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800966c:	a944      	add	r1, sp, #272	@ 0x110
 800966e:	aa08      	add	r2, sp, #32
 8009670:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009674:	4694      	mov	ip, r2
 8009676:	4626      	mov	r6, r4
 8009678:	2e00      	cmp	r6, #0
 800967a:	dc4c      	bgt.n	8009716 <__kernel_rem_pio2f+0x17e>
 800967c:	4628      	mov	r0, r5
 800967e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009682:	f000 fae3 	bl	8009c4c <scalbnf>
 8009686:	eeb0 8a40 	vmov.f32	s16, s0
 800968a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800968e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009692:	f000 fb41 	bl	8009d18 <floorf>
 8009696:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800969a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800969e:	2d00      	cmp	r5, #0
 80096a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096a4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80096a8:	ee17 9a90 	vmov	r9, s15
 80096ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096b0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80096b4:	dd41      	ble.n	800973a <__kernel_rem_pio2f+0x1a2>
 80096b6:	f104 3cff 	add.w	ip, r4, #4294967295
 80096ba:	a908      	add	r1, sp, #32
 80096bc:	f1c5 0e08 	rsb	lr, r5, #8
 80096c0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80096c4:	fa46 f00e 	asr.w	r0, r6, lr
 80096c8:	4481      	add	r9, r0
 80096ca:	fa00 f00e 	lsl.w	r0, r0, lr
 80096ce:	1a36      	subs	r6, r6, r0
 80096d0:	f1c5 0007 	rsb	r0, r5, #7
 80096d4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80096d8:	4106      	asrs	r6, r0
 80096da:	2e00      	cmp	r6, #0
 80096dc:	dd3c      	ble.n	8009758 <__kernel_rem_pio2f+0x1c0>
 80096de:	f04f 0e00 	mov.w	lr, #0
 80096e2:	f109 0901 	add.w	r9, r9, #1
 80096e6:	4670      	mov	r0, lr
 80096e8:	4574      	cmp	r4, lr
 80096ea:	dc68      	bgt.n	80097be <__kernel_rem_pio2f+0x226>
 80096ec:	2d00      	cmp	r5, #0
 80096ee:	dd03      	ble.n	80096f8 <__kernel_rem_pio2f+0x160>
 80096f0:	2d01      	cmp	r5, #1
 80096f2:	d074      	beq.n	80097de <__kernel_rem_pio2f+0x246>
 80096f4:	2d02      	cmp	r5, #2
 80096f6:	d07d      	beq.n	80097f4 <__kernel_rem_pio2f+0x25c>
 80096f8:	2e02      	cmp	r6, #2
 80096fa:	d12d      	bne.n	8009758 <__kernel_rem_pio2f+0x1c0>
 80096fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009700:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009704:	b340      	cbz	r0, 8009758 <__kernel_rem_pio2f+0x1c0>
 8009706:	4628      	mov	r0, r5
 8009708:	9306      	str	r3, [sp, #24]
 800970a:	f000 fa9f 	bl	8009c4c <scalbnf>
 800970e:	9b06      	ldr	r3, [sp, #24]
 8009710:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009714:	e020      	b.n	8009758 <__kernel_rem_pio2f+0x1c0>
 8009716:	ee60 7a28 	vmul.f32	s15, s0, s17
 800971a:	3e01      	subs	r6, #1
 800971c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009724:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009728:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800972c:	ecac 0a01 	vstmia	ip!, {s0}
 8009730:	ed30 0a01 	vldmdb	r0!, {s0}
 8009734:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009738:	e79e      	b.n	8009678 <__kernel_rem_pio2f+0xe0>
 800973a:	d105      	bne.n	8009748 <__kernel_rem_pio2f+0x1b0>
 800973c:	1e60      	subs	r0, r4, #1
 800973e:	a908      	add	r1, sp, #32
 8009740:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8009744:	11f6      	asrs	r6, r6, #7
 8009746:	e7c8      	b.n	80096da <__kernel_rem_pio2f+0x142>
 8009748:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800974c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009754:	da31      	bge.n	80097ba <__kernel_rem_pio2f+0x222>
 8009756:	2600      	movs	r6, #0
 8009758:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800975c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009760:	f040 8098 	bne.w	8009894 <__kernel_rem_pio2f+0x2fc>
 8009764:	1e60      	subs	r0, r4, #1
 8009766:	2200      	movs	r2, #0
 8009768:	4550      	cmp	r0, sl
 800976a:	da4b      	bge.n	8009804 <__kernel_rem_pio2f+0x26c>
 800976c:	2a00      	cmp	r2, #0
 800976e:	d065      	beq.n	800983c <__kernel_rem_pio2f+0x2a4>
 8009770:	3c01      	subs	r4, #1
 8009772:	ab08      	add	r3, sp, #32
 8009774:	3d08      	subs	r5, #8
 8009776:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d0f8      	beq.n	8009770 <__kernel_rem_pio2f+0x1d8>
 800977e:	4628      	mov	r0, r5
 8009780:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009784:	f000 fa62 	bl	8009c4c <scalbnf>
 8009788:	1c63      	adds	r3, r4, #1
 800978a:	aa44      	add	r2, sp, #272	@ 0x110
 800978c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800988c <__kernel_rem_pio2f+0x2f4>
 8009790:	0099      	lsls	r1, r3, #2
 8009792:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009796:	4623      	mov	r3, r4
 8009798:	2b00      	cmp	r3, #0
 800979a:	f280 80a9 	bge.w	80098f0 <__kernel_rem_pio2f+0x358>
 800979e:	4623      	mov	r3, r4
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f2c0 80c7 	blt.w	8009934 <__kernel_rem_pio2f+0x39c>
 80097a6:	aa44      	add	r2, sp, #272	@ 0x110
 80097a8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80097ac:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8009884 <__kernel_rem_pio2f+0x2ec>
 80097b0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8009890 <__kernel_rem_pio2f+0x2f8>
 80097b4:	2000      	movs	r0, #0
 80097b6:	1ae2      	subs	r2, r4, r3
 80097b8:	e0b1      	b.n	800991e <__kernel_rem_pio2f+0x386>
 80097ba:	2602      	movs	r6, #2
 80097bc:	e78f      	b.n	80096de <__kernel_rem_pio2f+0x146>
 80097be:	f852 1b04 	ldr.w	r1, [r2], #4
 80097c2:	b948      	cbnz	r0, 80097d8 <__kernel_rem_pio2f+0x240>
 80097c4:	b121      	cbz	r1, 80097d0 <__kernel_rem_pio2f+0x238>
 80097c6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80097ca:	f842 1c04 	str.w	r1, [r2, #-4]
 80097ce:	2101      	movs	r1, #1
 80097d0:	f10e 0e01 	add.w	lr, lr, #1
 80097d4:	4608      	mov	r0, r1
 80097d6:	e787      	b.n	80096e8 <__kernel_rem_pio2f+0x150>
 80097d8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80097dc:	e7f5      	b.n	80097ca <__kernel_rem_pio2f+0x232>
 80097de:	f104 3cff 	add.w	ip, r4, #4294967295
 80097e2:	aa08      	add	r2, sp, #32
 80097e4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80097e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80097ec:	a908      	add	r1, sp, #32
 80097ee:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80097f2:	e781      	b.n	80096f8 <__kernel_rem_pio2f+0x160>
 80097f4:	f104 3cff 	add.w	ip, r4, #4294967295
 80097f8:	aa08      	add	r2, sp, #32
 80097fa:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80097fe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009802:	e7f3      	b.n	80097ec <__kernel_rem_pio2f+0x254>
 8009804:	a908      	add	r1, sp, #32
 8009806:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800980a:	3801      	subs	r0, #1
 800980c:	430a      	orrs	r2, r1
 800980e:	e7ab      	b.n	8009768 <__kernel_rem_pio2f+0x1d0>
 8009810:	3201      	adds	r2, #1
 8009812:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8009816:	2e00      	cmp	r6, #0
 8009818:	d0fa      	beq.n	8009810 <__kernel_rem_pio2f+0x278>
 800981a:	9905      	ldr	r1, [sp, #20]
 800981c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8009820:	eb0d 0001 	add.w	r0, sp, r1
 8009824:	18e6      	adds	r6, r4, r3
 8009826:	a91c      	add	r1, sp, #112	@ 0x70
 8009828:	f104 0c01 	add.w	ip, r4, #1
 800982c:	384c      	subs	r0, #76	@ 0x4c
 800982e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8009832:	4422      	add	r2, r4
 8009834:	4562      	cmp	r2, ip
 8009836:	da04      	bge.n	8009842 <__kernel_rem_pio2f+0x2aa>
 8009838:	4614      	mov	r4, r2
 800983a:	e710      	b.n	800965e <__kernel_rem_pio2f+0xc6>
 800983c:	9804      	ldr	r0, [sp, #16]
 800983e:	2201      	movs	r2, #1
 8009840:	e7e7      	b.n	8009812 <__kernel_rem_pio2f+0x27a>
 8009842:	9903      	ldr	r1, [sp, #12]
 8009844:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009848:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800984c:	9105      	str	r1, [sp, #20]
 800984e:	ee07 1a90 	vmov	s15, r1
 8009852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009856:	2400      	movs	r4, #0
 8009858:	ece6 7a01 	vstmia	r6!, {s15}
 800985c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8009890 <__kernel_rem_pio2f+0x2f8>
 8009860:	46b1      	mov	r9, r6
 8009862:	455c      	cmp	r4, fp
 8009864:	dd04      	ble.n	8009870 <__kernel_rem_pio2f+0x2d8>
 8009866:	ece0 7a01 	vstmia	r0!, {s15}
 800986a:	f10c 0c01 	add.w	ip, ip, #1
 800986e:	e7e1      	b.n	8009834 <__kernel_rem_pio2f+0x29c>
 8009870:	ecfe 6a01 	vldmia	lr!, {s13}
 8009874:	ed39 7a01 	vldmdb	r9!, {s14}
 8009878:	3401      	adds	r4, #1
 800987a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800987e:	e7f0      	b.n	8009862 <__kernel_rem_pio2f+0x2ca>
 8009880:	0800a1f8 	.word	0x0800a1f8
 8009884:	0800a1cc 	.word	0x0800a1cc
 8009888:	43800000 	.word	0x43800000
 800988c:	3b800000 	.word	0x3b800000
 8009890:	00000000 	.word	0x00000000
 8009894:	9b02      	ldr	r3, [sp, #8]
 8009896:	eeb0 0a48 	vmov.f32	s0, s16
 800989a:	eba3 0008 	sub.w	r0, r3, r8
 800989e:	f000 f9d5 	bl	8009c4c <scalbnf>
 80098a2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8009888 <__kernel_rem_pio2f+0x2f0>
 80098a6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80098aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ae:	db19      	blt.n	80098e4 <__kernel_rem_pio2f+0x34c>
 80098b0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800988c <__kernel_rem_pio2f+0x2f4>
 80098b4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80098b8:	aa08      	add	r2, sp, #32
 80098ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80098be:	3508      	adds	r5, #8
 80098c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098c4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80098c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80098cc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80098d0:	ee10 3a10 	vmov	r3, s0
 80098d4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80098d8:	ee17 3a90 	vmov	r3, s15
 80098dc:	3401      	adds	r4, #1
 80098de:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80098e2:	e74c      	b.n	800977e <__kernel_rem_pio2f+0x1e6>
 80098e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80098e8:	aa08      	add	r2, sp, #32
 80098ea:	ee10 3a10 	vmov	r3, s0
 80098ee:	e7f6      	b.n	80098de <__kernel_rem_pio2f+0x346>
 80098f0:	a808      	add	r0, sp, #32
 80098f2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80098f6:	9001      	str	r0, [sp, #4]
 80098f8:	ee07 0a90 	vmov	s15, r0
 80098fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009900:	3b01      	subs	r3, #1
 8009902:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009906:	ee20 0a07 	vmul.f32	s0, s0, s14
 800990a:	ed62 7a01 	vstmdb	r2!, {s15}
 800990e:	e743      	b.n	8009798 <__kernel_rem_pio2f+0x200>
 8009910:	ecfc 6a01 	vldmia	ip!, {s13}
 8009914:	ecb5 7a01 	vldmia	r5!, {s14}
 8009918:	eee6 7a87 	vfma.f32	s15, s13, s14
 800991c:	3001      	adds	r0, #1
 800991e:	4550      	cmp	r0, sl
 8009920:	dc01      	bgt.n	8009926 <__kernel_rem_pio2f+0x38e>
 8009922:	4290      	cmp	r0, r2
 8009924:	ddf4      	ble.n	8009910 <__kernel_rem_pio2f+0x378>
 8009926:	a858      	add	r0, sp, #352	@ 0x160
 8009928:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800992c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8009930:	3b01      	subs	r3, #1
 8009932:	e735      	b.n	80097a0 <__kernel_rem_pio2f+0x208>
 8009934:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009936:	2b02      	cmp	r3, #2
 8009938:	dc09      	bgt.n	800994e <__kernel_rem_pio2f+0x3b6>
 800993a:	2b00      	cmp	r3, #0
 800993c:	dc27      	bgt.n	800998e <__kernel_rem_pio2f+0x3f6>
 800993e:	d040      	beq.n	80099c2 <__kernel_rem_pio2f+0x42a>
 8009940:	f009 0007 	and.w	r0, r9, #7
 8009944:	b059      	add	sp, #356	@ 0x164
 8009946:	ecbd 8b04 	vpop	{d8-d9}
 800994a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800994e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009950:	2b03      	cmp	r3, #3
 8009952:	d1f5      	bne.n	8009940 <__kernel_rem_pio2f+0x3a8>
 8009954:	aa30      	add	r2, sp, #192	@ 0xc0
 8009956:	1f0b      	subs	r3, r1, #4
 8009958:	4413      	add	r3, r2
 800995a:	461a      	mov	r2, r3
 800995c:	4620      	mov	r0, r4
 800995e:	2800      	cmp	r0, #0
 8009960:	dc50      	bgt.n	8009a04 <__kernel_rem_pio2f+0x46c>
 8009962:	4622      	mov	r2, r4
 8009964:	2a01      	cmp	r2, #1
 8009966:	dc5d      	bgt.n	8009a24 <__kernel_rem_pio2f+0x48c>
 8009968:	ab30      	add	r3, sp, #192	@ 0xc0
 800996a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8009890 <__kernel_rem_pio2f+0x2f8>
 800996e:	440b      	add	r3, r1
 8009970:	2c01      	cmp	r4, #1
 8009972:	dc67      	bgt.n	8009a44 <__kernel_rem_pio2f+0x4ac>
 8009974:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8009978:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800997c:	2e00      	cmp	r6, #0
 800997e:	d167      	bne.n	8009a50 <__kernel_rem_pio2f+0x4b8>
 8009980:	edc7 6a00 	vstr	s13, [r7]
 8009984:	ed87 7a01 	vstr	s14, [r7, #4]
 8009988:	edc7 7a02 	vstr	s15, [r7, #8]
 800998c:	e7d8      	b.n	8009940 <__kernel_rem_pio2f+0x3a8>
 800998e:	ab30      	add	r3, sp, #192	@ 0xc0
 8009990:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8009890 <__kernel_rem_pio2f+0x2f8>
 8009994:	440b      	add	r3, r1
 8009996:	4622      	mov	r2, r4
 8009998:	2a00      	cmp	r2, #0
 800999a:	da24      	bge.n	80099e6 <__kernel_rem_pio2f+0x44e>
 800999c:	b34e      	cbz	r6, 80099f2 <__kernel_rem_pio2f+0x45a>
 800999e:	eef1 7a47 	vneg.f32	s15, s14
 80099a2:	edc7 7a00 	vstr	s15, [r7]
 80099a6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80099aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099ae:	aa31      	add	r2, sp, #196	@ 0xc4
 80099b0:	2301      	movs	r3, #1
 80099b2:	429c      	cmp	r4, r3
 80099b4:	da20      	bge.n	80099f8 <__kernel_rem_pio2f+0x460>
 80099b6:	b10e      	cbz	r6, 80099bc <__kernel_rem_pio2f+0x424>
 80099b8:	eef1 7a67 	vneg.f32	s15, s15
 80099bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80099c0:	e7be      	b.n	8009940 <__kernel_rem_pio2f+0x3a8>
 80099c2:	ab30      	add	r3, sp, #192	@ 0xc0
 80099c4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8009890 <__kernel_rem_pio2f+0x2f8>
 80099c8:	440b      	add	r3, r1
 80099ca:	2c00      	cmp	r4, #0
 80099cc:	da05      	bge.n	80099da <__kernel_rem_pio2f+0x442>
 80099ce:	b10e      	cbz	r6, 80099d4 <__kernel_rem_pio2f+0x43c>
 80099d0:	eef1 7a67 	vneg.f32	s15, s15
 80099d4:	edc7 7a00 	vstr	s15, [r7]
 80099d8:	e7b2      	b.n	8009940 <__kernel_rem_pio2f+0x3a8>
 80099da:	ed33 7a01 	vldmdb	r3!, {s14}
 80099de:	3c01      	subs	r4, #1
 80099e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099e4:	e7f1      	b.n	80099ca <__kernel_rem_pio2f+0x432>
 80099e6:	ed73 7a01 	vldmdb	r3!, {s15}
 80099ea:	3a01      	subs	r2, #1
 80099ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099f0:	e7d2      	b.n	8009998 <__kernel_rem_pio2f+0x400>
 80099f2:	eef0 7a47 	vmov.f32	s15, s14
 80099f6:	e7d4      	b.n	80099a2 <__kernel_rem_pio2f+0x40a>
 80099f8:	ecb2 7a01 	vldmia	r2!, {s14}
 80099fc:	3301      	adds	r3, #1
 80099fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a02:	e7d6      	b.n	80099b2 <__kernel_rem_pio2f+0x41a>
 8009a04:	ed72 7a01 	vldmdb	r2!, {s15}
 8009a08:	edd2 6a01 	vldr	s13, [r2, #4]
 8009a0c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009a10:	3801      	subs	r0, #1
 8009a12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a16:	ed82 7a00 	vstr	s14, [r2]
 8009a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a1e:	edc2 7a01 	vstr	s15, [r2, #4]
 8009a22:	e79c      	b.n	800995e <__kernel_rem_pio2f+0x3c6>
 8009a24:	ed73 7a01 	vldmdb	r3!, {s15}
 8009a28:	edd3 6a01 	vldr	s13, [r3, #4]
 8009a2c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009a30:	3a01      	subs	r2, #1
 8009a32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a36:	ed83 7a00 	vstr	s14, [r3]
 8009a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a3e:	edc3 7a01 	vstr	s15, [r3, #4]
 8009a42:	e78f      	b.n	8009964 <__kernel_rem_pio2f+0x3cc>
 8009a44:	ed33 7a01 	vldmdb	r3!, {s14}
 8009a48:	3c01      	subs	r4, #1
 8009a4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a4e:	e78f      	b.n	8009970 <__kernel_rem_pio2f+0x3d8>
 8009a50:	eef1 6a66 	vneg.f32	s13, s13
 8009a54:	eeb1 7a47 	vneg.f32	s14, s14
 8009a58:	edc7 6a00 	vstr	s13, [r7]
 8009a5c:	ed87 7a01 	vstr	s14, [r7, #4]
 8009a60:	eef1 7a67 	vneg.f32	s15, s15
 8009a64:	e790      	b.n	8009988 <__kernel_rem_pio2f+0x3f0>
 8009a66:	bf00      	nop

08009a68 <__ieee754_logf>:
 8009a68:	ee10 3a10 	vmov	r3, s0
 8009a6c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009a70:	d106      	bne.n	8009a80 <__ieee754_logf+0x18>
 8009a72:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8009c0c <__ieee754_logf+0x1a4>
 8009a76:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8009c10 <__ieee754_logf+0x1a8>
 8009a7a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009a7e:	4770      	bx	lr
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	461a      	mov	r2, r3
 8009a84:	da02      	bge.n	8009a8c <__ieee754_logf+0x24>
 8009a86:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009a8a:	e7f4      	b.n	8009a76 <__ieee754_logf+0xe>
 8009a8c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009a90:	db02      	blt.n	8009a98 <__ieee754_logf+0x30>
 8009a92:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009a96:	4770      	bx	lr
 8009a98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a9c:	bfb8      	it	lt
 8009a9e:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8009c14 <__ieee754_logf+0x1ac>
 8009aa2:	485d      	ldr	r0, [pc, #372]	@ (8009c18 <__ieee754_logf+0x1b0>)
 8009aa4:	bfbe      	ittt	lt
 8009aa6:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009aaa:	f06f 0118 	mvnlt.w	r1, #24
 8009aae:	ee17 2a90 	vmovlt	r2, s15
 8009ab2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8009ab6:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8009aba:	4410      	add	r0, r2
 8009abc:	bfa8      	it	ge
 8009abe:	2100      	movge	r1, #0
 8009ac0:	3b7f      	subs	r3, #127	@ 0x7f
 8009ac2:	440b      	add	r3, r1
 8009ac4:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8009ac8:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8009acc:	4311      	orrs	r1, r2
 8009ace:	ee00 1a10 	vmov	s0, r1
 8009ad2:	4952      	ldr	r1, [pc, #328]	@ (8009c1c <__ieee754_logf+0x1b4>)
 8009ad4:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8009ad8:	f102 000f 	add.w	r0, r2, #15
 8009adc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009ae0:	4001      	ands	r1, r0
 8009ae2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009ae6:	bb89      	cbnz	r1, 8009b4c <__ieee754_logf+0xe4>
 8009ae8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009af0:	d10f      	bne.n	8009b12 <__ieee754_logf+0xaa>
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 8087 	beq.w	8009c06 <__ieee754_logf+0x19e>
 8009af8:	ee07 3a90 	vmov	s15, r3
 8009afc:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8009c20 <__ieee754_logf+0x1b8>
 8009b00:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8009c24 <__ieee754_logf+0x1bc>
 8009b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b08:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009b0c:	eea7 0a87 	vfma.f32	s0, s15, s14
 8009b10:	4770      	bx	lr
 8009b12:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8009c28 <__ieee754_logf+0x1c0>
 8009b16:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009b1a:	eee0 7a66 	vfms.f32	s15, s0, s13
 8009b1e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b26:	b913      	cbnz	r3, 8009b2e <__ieee754_logf+0xc6>
 8009b28:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009b2c:	4770      	bx	lr
 8009b2e:	ee07 3a90 	vmov	s15, r3
 8009b32:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009c20 <__ieee754_logf+0x1b8>
 8009b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b3a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009b3e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009b42:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8009c24 <__ieee754_logf+0x1bc>
 8009b46:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8009b4a:	4770      	bx	lr
 8009b4c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8009b50:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009b54:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8009c2c <__ieee754_logf+0x1c4>
 8009b58:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8009c30 <__ieee754_logf+0x1c8>
 8009b5c:	4935      	ldr	r1, [pc, #212]	@ (8009c34 <__ieee754_logf+0x1cc>)
 8009b5e:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8009b62:	4411      	add	r1, r2
 8009b64:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8009b68:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8009b6c:	430a      	orrs	r2, r1
 8009b6e:	2a00      	cmp	r2, #0
 8009b70:	ee07 3a90 	vmov	s15, r3
 8009b74:	ee26 5a06 	vmul.f32	s10, s12, s12
 8009b78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009b7c:	ee25 7a05 	vmul.f32	s14, s10, s10
 8009b80:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8009c38 <__ieee754_logf+0x1d0>
 8009b84:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009b88:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8009c3c <__ieee754_logf+0x1d4>
 8009b8c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009b90:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8009c40 <__ieee754_logf+0x1d8>
 8009b94:	eee7 7a24 	vfma.f32	s15, s14, s9
 8009b98:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8009c44 <__ieee754_logf+0x1dc>
 8009b9c:	eee7 4a87 	vfma.f32	s9, s15, s14
 8009ba0:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8009c48 <__ieee754_logf+0x1e0>
 8009ba4:	eee4 7a87 	vfma.f32	s15, s9, s14
 8009ba8:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009bac:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009bb0:	dd1a      	ble.n	8009be8 <__ieee754_logf+0x180>
 8009bb2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009bb6:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009bba:	ee27 7a00 	vmul.f32	s14, s14, s0
 8009bbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009bc2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009bc6:	b913      	cbnz	r3, 8009bce <__ieee754_logf+0x166>
 8009bc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009bcc:	e7ac      	b.n	8009b28 <__ieee754_logf+0xc0>
 8009bce:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8009c20 <__ieee754_logf+0x1b8>
 8009bd2:	eee6 7a86 	vfma.f32	s15, s13, s12
 8009bd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009bda:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009bde:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8009c24 <__ieee754_logf+0x1bc>
 8009be2:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8009be6:	4770      	bx	lr
 8009be8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009bec:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009bf0:	b913      	cbnz	r3, 8009bf8 <__ieee754_logf+0x190>
 8009bf2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009bf6:	4770      	bx	lr
 8009bf8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8009c20 <__ieee754_logf+0x1b8>
 8009bfc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8009c00:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009c04:	e7eb      	b.n	8009bde <__ieee754_logf+0x176>
 8009c06:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8009c10 <__ieee754_logf+0x1a8>
 8009c0a:	4770      	bx	lr
 8009c0c:	cc000000 	.word	0xcc000000
 8009c10:	00000000 	.word	0x00000000
 8009c14:	4c000000 	.word	0x4c000000
 8009c18:	004afb20 	.word	0x004afb20
 8009c1c:	007ffff0 	.word	0x007ffff0
 8009c20:	3717f7d1 	.word	0x3717f7d1
 8009c24:	3f317180 	.word	0x3f317180
 8009c28:	3eaaaaab 	.word	0x3eaaaaab
 8009c2c:	3e1cd04f 	.word	0x3e1cd04f
 8009c30:	3e178897 	.word	0x3e178897
 8009c34:	ffcf5c30 	.word	0xffcf5c30
 8009c38:	3e638e29 	.word	0x3e638e29
 8009c3c:	3ecccccd 	.word	0x3ecccccd
 8009c40:	3e3a3325 	.word	0x3e3a3325
 8009c44:	3e924925 	.word	0x3e924925
 8009c48:	3f2aaaab 	.word	0x3f2aaaab

08009c4c <scalbnf>:
 8009c4c:	ee10 3a10 	vmov	r3, s0
 8009c50:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009c54:	d02b      	beq.n	8009cae <scalbnf+0x62>
 8009c56:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009c5a:	d302      	bcc.n	8009c62 <scalbnf+0x16>
 8009c5c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c60:	4770      	bx	lr
 8009c62:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009c66:	d123      	bne.n	8009cb0 <scalbnf+0x64>
 8009c68:	4b24      	ldr	r3, [pc, #144]	@ (8009cfc <scalbnf+0xb0>)
 8009c6a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009d00 <scalbnf+0xb4>
 8009c6e:	4298      	cmp	r0, r3
 8009c70:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009c74:	db17      	blt.n	8009ca6 <scalbnf+0x5a>
 8009c76:	ee10 3a10 	vmov	r3, s0
 8009c7a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009c7e:	3a19      	subs	r2, #25
 8009c80:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009c84:	4288      	cmp	r0, r1
 8009c86:	dd15      	ble.n	8009cb4 <scalbnf+0x68>
 8009c88:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009d04 <scalbnf+0xb8>
 8009c8c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8009d08 <scalbnf+0xbc>
 8009c90:	ee10 3a10 	vmov	r3, s0
 8009c94:	eeb0 7a67 	vmov.f32	s14, s15
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	bfb8      	it	lt
 8009c9c:	eef0 7a66 	vmovlt.f32	s15, s13
 8009ca0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009ca4:	4770      	bx	lr
 8009ca6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009d0c <scalbnf+0xc0>
 8009caa:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009cae:	4770      	bx	lr
 8009cb0:	0dd2      	lsrs	r2, r2, #23
 8009cb2:	e7e5      	b.n	8009c80 <scalbnf+0x34>
 8009cb4:	4410      	add	r0, r2
 8009cb6:	28fe      	cmp	r0, #254	@ 0xfe
 8009cb8:	dce6      	bgt.n	8009c88 <scalbnf+0x3c>
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	dd06      	ble.n	8009ccc <scalbnf+0x80>
 8009cbe:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009cc2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009cc6:	ee00 3a10 	vmov	s0, r3
 8009cca:	4770      	bx	lr
 8009ccc:	f110 0f16 	cmn.w	r0, #22
 8009cd0:	da09      	bge.n	8009ce6 <scalbnf+0x9a>
 8009cd2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009d0c <scalbnf+0xc0>
 8009cd6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009d10 <scalbnf+0xc4>
 8009cda:	ee10 3a10 	vmov	r3, s0
 8009cde:	eeb0 7a67 	vmov.f32	s14, s15
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	e7d9      	b.n	8009c9a <scalbnf+0x4e>
 8009ce6:	3019      	adds	r0, #25
 8009ce8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009cec:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009cf0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009d14 <scalbnf+0xc8>
 8009cf4:	ee07 3a90 	vmov	s15, r3
 8009cf8:	e7d7      	b.n	8009caa <scalbnf+0x5e>
 8009cfa:	bf00      	nop
 8009cfc:	ffff3cb0 	.word	0xffff3cb0
 8009d00:	4c000000 	.word	0x4c000000
 8009d04:	7149f2ca 	.word	0x7149f2ca
 8009d08:	f149f2ca 	.word	0xf149f2ca
 8009d0c:	0da24260 	.word	0x0da24260
 8009d10:	8da24260 	.word	0x8da24260
 8009d14:	33000000 	.word	0x33000000

08009d18 <floorf>:
 8009d18:	ee10 3a10 	vmov	r3, s0
 8009d1c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009d20:	3a7f      	subs	r2, #127	@ 0x7f
 8009d22:	2a16      	cmp	r2, #22
 8009d24:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d28:	dc2b      	bgt.n	8009d82 <floorf+0x6a>
 8009d2a:	2a00      	cmp	r2, #0
 8009d2c:	da12      	bge.n	8009d54 <floorf+0x3c>
 8009d2e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009d94 <floorf+0x7c>
 8009d32:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3e:	dd06      	ble.n	8009d4e <floorf+0x36>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	da24      	bge.n	8009d8e <floorf+0x76>
 8009d44:	2900      	cmp	r1, #0
 8009d46:	4b14      	ldr	r3, [pc, #80]	@ (8009d98 <floorf+0x80>)
 8009d48:	bf08      	it	eq
 8009d4a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8009d4e:	ee00 3a10 	vmov	s0, r3
 8009d52:	4770      	bx	lr
 8009d54:	4911      	ldr	r1, [pc, #68]	@ (8009d9c <floorf+0x84>)
 8009d56:	4111      	asrs	r1, r2
 8009d58:	420b      	tst	r3, r1
 8009d5a:	d0fa      	beq.n	8009d52 <floorf+0x3a>
 8009d5c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8009d94 <floorf+0x7c>
 8009d60:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6c:	ddef      	ble.n	8009d4e <floorf+0x36>
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	bfbe      	ittt	lt
 8009d72:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8009d76:	fa40 f202 	asrlt.w	r2, r0, r2
 8009d7a:	189b      	addlt	r3, r3, r2
 8009d7c:	ea23 0301 	bic.w	r3, r3, r1
 8009d80:	e7e5      	b.n	8009d4e <floorf+0x36>
 8009d82:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009d86:	d3e4      	bcc.n	8009d52 <floorf+0x3a>
 8009d88:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009d8c:	4770      	bx	lr
 8009d8e:	2300      	movs	r3, #0
 8009d90:	e7dd      	b.n	8009d4e <floorf+0x36>
 8009d92:	bf00      	nop
 8009d94:	7149f2ca 	.word	0x7149f2ca
 8009d98:	bf800000 	.word	0xbf800000
 8009d9c:	007fffff 	.word	0x007fffff

08009da0 <_init>:
 8009da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da2:	bf00      	nop
 8009da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009da6:	bc08      	pop	{r3}
 8009da8:	469e      	mov	lr, r3
 8009daa:	4770      	bx	lr

08009dac <_fini>:
 8009dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dae:	bf00      	nop
 8009db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009db2:	bc08      	pop	{r3}
 8009db4:	469e      	mov	lr, r3
 8009db6:	4770      	bx	lr
