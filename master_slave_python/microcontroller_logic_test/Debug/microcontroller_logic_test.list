
microcontroller_logic_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b4c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08009cd4  08009cd4  0000acd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a120  0800a120  0000c1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a120  0800a120  0000c1cc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a120  0800a120  0000c1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a120  0800a120  0000b120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a124  0800a124  0000b124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800a128  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1cc  2**0
                  CONTENTS
 10 .bss          000054d0  200001cc  200001cc  0000c1cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000569c  2000569c  0000c1cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012571  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032bb  00000000  00000000  0001e76d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  00021a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b94  00000000  00000000  00022980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff73  00000000  00000000  00023514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ddd  00000000  00000000  00043487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b11d5  00000000  00000000  00059264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000009c  00000000  00000000  0010a439  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004280  00000000  00000000  0010a4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a4  00000000  00000000  0010e758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001cc 	.word	0x200001cc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009cbc 	.word	0x08009cbc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001d0 	.word	0x200001d0
 80001c4:	08009cbc 	.word	0x08009cbc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	f5ad 5da8 	sub.w	sp, sp, #5376	@ 0x1500
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fb99 	bl	8000908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f8fd 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f9db 	bl	8000594 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001de:	f000 f95b 	bl	8000498 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001e2:	f000 f999 	bl	8000518 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80001e6:	f007 ffd1 	bl	800818c <MX_USB_DEVICE_Init>
  Complesso x[256];
  Complesso X[256];
  uint8_t indici[256];
  float magnitude[256];

  while(rx_complete == 0){
 80001ea:	e00f      	b.n	800020c <main+0x44>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80001ec:	2201      	movs	r2, #1
 80001ee:	2110      	movs	r1, #16
 80001f0:	4871      	ldr	r0, [pc, #452]	@ (80003b8 <main+0x1f0>)
 80001f2:	f000 fe9f 	bl	8000f34 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80001f6:	2064      	movs	r0, #100	@ 0x64
 80001f8:	f000 fbec 	bl	80009d4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2110      	movs	r1, #16
 8000200:	486d      	ldr	r0, [pc, #436]	@ (80003b8 <main+0x1f0>)
 8000202:	f000 fe97 	bl	8000f34 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000206:	2064      	movs	r0, #100	@ 0x64
 8000208:	f000 fbe4 	bl	80009d4 <HAL_Delay>
  while(rx_complete == 0){
 800020c:	4b6b      	ldr	r3, [pc, #428]	@ (80003bc <main+0x1f4>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	b2db      	uxtb	r3, r3
 8000212:	2b00      	cmp	r3, #0
 8000214:	d0ea      	beq.n	80001ec <main+0x24>
  }
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000216:	2201      	movs	r2, #1
 8000218:	2110      	movs	r1, #16
 800021a:	4867      	ldr	r0, [pc, #412]	@ (80003b8 <main+0x1f0>)
 800021c:	f000 fe8a 	bl	8000f34 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000220:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000224:	f000 fbd6 	bl	80009d4 <HAL_Delay>

  for(int i=0; i<256; i++){
 8000228:	2300      	movs	r3, #0
 800022a:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 800022e:	f102 020c 	add.w	r2, r2, #12
 8000232:	6013      	str	r3, [r2, #0]
 8000234:	e042      	b.n	80002bc <main+0xf4>
	  x[i].re = (float)((rx_buffer[i]/127.5f) - 1.0f)*47.0f;
 8000236:	4a62      	ldr	r2, [pc, #392]	@ (80003c0 <main+0x1f8>)
 8000238:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 800023c:	f103 030c 	add.w	r3, r3, #12
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4413      	add	r3, r2
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	ee07 3a90 	vmov	s15, r3
 800024a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800024e:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 80003c4 <main+0x1fc>
 8000252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000256:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800025a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800025e:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80003c8 <main+0x200>
 8000262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000266:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 800026a:	f103 0310 	add.w	r3, r3, #16
 800026e:	f6a3 0208 	subw	r2, r3, #2056	@ 0x808
 8000272:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8000276:	f103 030c 	add.w	r3, r3, #12
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	00db      	lsls	r3, r3, #3
 800027e:	4413      	add	r3, r2
 8000280:	edc3 7a00 	vstr	s15, [r3]
	  x[i].im = 0;
 8000284:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8000288:	f103 0310 	add.w	r3, r3, #16
 800028c:	f6a3 0208 	subw	r2, r3, #2056	@ 0x808
 8000290:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8000294:	f103 030c 	add.w	r3, r3, #12
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	00db      	lsls	r3, r3, #3
 800029c:	4413      	add	r3, r2
 800029e:	3304      	adds	r3, #4
 80002a0:	f04f 0200 	mov.w	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
  for(int i=0; i<256; i++){
 80002a6:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 80002aa:	f103 030c 	add.w	r3, r3, #12
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	3301      	adds	r3, #1
 80002b2:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 80002b6:	f102 020c 	add.w	r2, r2, #12
 80002ba:	6013      	str	r3, [r2, #0]
 80002bc:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 80002c0:	f103 030c 	add.w	r3, r3, #12
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2bff      	cmp	r3, #255	@ 0xff
 80002c8:	ddb5      	ble.n	8000236 <main+0x6e>
  }

  arm_fft(x,X,256);
 80002ca:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80002ce:	3b08      	subs	r3, #8
 80002d0:	f607 5008 	addw	r0, r7, #3336	@ 0xd08
 80002d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002d8:	4619      	mov	r1, r3
 80002da:	f008 fc4b 	bl	8008b74 <arm_fft>
  fft_to_spectrogram(x,magnitude, 256, -80.0f);
 80002de:	f107 0310 	add.w	r3, r7, #16
 80002e2:	3b08      	subs	r3, #8
 80002e4:	f607 5008 	addw	r0, r7, #3336	@ 0xd08
 80002e8:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 80003cc <main+0x204>
 80002ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002f0:	4619      	mov	r1, r3
 80002f2:	f008 fce5 	bl	8008cc0 <fft_to_spectrogram>

  for(int i=0; i<256; i++){
 80002f6:	2300      	movs	r3, #0
 80002f8:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 80002fc:	f102 0208 	add.w	r2, r2, #8
 8000300:	6013      	str	r3, [r2, #0]
 8000302:	e02d      	b.n	8000360 <main+0x198>
	  indici[i] = (uint8_t)(magnitude[i]*255);
 8000304:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000308:	f5a3 62a1 	sub.w	r2, r3, #1288	@ 0x508
 800030c:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8000310:	f103 0308 	add.w	r3, r3, #8
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	4413      	add	r3, r2
 800031a:	edd3 7a00 	vldr	s15, [r3]
 800031e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80003d0 <main+0x208>
 8000322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800032a:	edc7 7a01 	vstr	s15, [r7, #4]
 800032e:	793b      	ldrb	r3, [r7, #4]
 8000330:	b2d9      	uxtb	r1, r3
 8000332:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000336:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 800033a:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 800033e:	f103 0308 	add.w	r3, r3, #8
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4413      	add	r3, r2
 8000346:	460a      	mov	r2, r1
 8000348:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<256; i++){
 800034a:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 800034e:	f103 0308 	add.w	r3, r3, #8
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	3301      	adds	r3, #1
 8000356:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 800035a:	f102 0208 	add.w	r2, r2, #8
 800035e:	6013      	str	r3, [r2, #0]
 8000360:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8000364:	f103 0308 	add.w	r3, r3, #8
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2bff      	cmp	r3, #255	@ 0xff
 800036c:	ddca      	ble.n	8000304 <main+0x13c>
  }

  CDC_Transmit_FS(indici, 256);
 800036e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000372:	3b08      	subs	r3, #8
 8000374:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000378:	4618      	mov	r0, r3
 800037a:	f007 fff1 	bl	8008360 <CDC_Transmit_FS>

  //accende il led se ha finito la ricezione



  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2110      	movs	r1, #16
 8000382:	480d      	ldr	r0, [pc, #52]	@ (80003b8 <main+0x1f0>)
 8000384:	f000 fdd6 	bl	8000f34 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000388:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800038c:	f000 fb22 	bl	80009d4 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000390:	2201      	movs	r2, #1
 8000392:	2110      	movs	r1, #16
 8000394:	4808      	ldr	r0, [pc, #32]	@ (80003b8 <main+0x1f0>)
 8000396:	f000 fdcd 	bl	8000f34 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800039a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800039e:	f000 fb19 	bl	80009d4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2110      	movs	r1, #16
 80003a6:	4804      	ldr	r0, [pc, #16]	@ (80003b8 <main+0x1f0>)
 80003a8:	f000 fdc4 	bl	8000f34 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80003ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003b0:	f000 fb10 	bl	80009d4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80003b4:	bf00      	nop
 80003b6:	e7eb      	b.n	8000390 <main+0x1c8>
 80003b8:	48000800 	.word	0x48000800
 80003bc:	2000066e 	.word	0x2000066e
 80003c0:	2000056c 	.word	0x2000056c
 80003c4:	42ff0000 	.word	0x42ff0000
 80003c8:	423c0000 	.word	0x423c0000
 80003cc:	c2a00000 	.word	0xc2a00000
 80003d0:	437f0000 	.word	0x437f0000

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b09e      	sub	sp, #120	@ 0x78
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80003de:	2228      	movs	r2, #40	@ 0x28
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f008 fd16 	bl	8008e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f8:	463b      	mov	r3, r7
 80003fa:	223c      	movs	r2, #60	@ 0x3c
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f008 fd08 	bl	8008e14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000404:	2303      	movs	r3, #3
 8000406:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000408:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800040c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000412:	2301      	movs	r3, #1
 8000414:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000416:	2310      	movs	r3, #16
 8000418:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041a:	2302      	movs	r3, #2
 800041c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000422:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000424:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000428:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800042e:	4618      	mov	r0, r3
 8000430:	f002 fb94 	bl	8002b5c <HAL_RCC_OscConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800043a:	f000 f93f 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043e:	230f      	movs	r3, #15
 8000440:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000442:	2302      	movs	r3, #2
 8000444:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800044a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800044e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000454:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000458:	2101      	movs	r1, #1
 800045a:	4618      	mov	r0, r3
 800045c:	f003 fb8c 	bl	8003b78 <HAL_RCC_ClockConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000466:	f000 f929 	bl	80006bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800046a:	4b0a      	ldr	r3, [pc, #40]	@ (8000494 <SystemClock_Config+0xc0>)
 800046c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000472:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000476:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000478:	463b      	mov	r3, r7
 800047a:	4618      	mov	r0, r3
 800047c:	f003 fd3e 	bl	8003efc <HAL_RCCEx_PeriphCLKConfig>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000486:	f000 f919 	bl	80006bc <Error_Handler>
  }
}
 800048a:	bf00      	nop
 800048c:	3778      	adds	r7, #120	@ 0x78
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	00020020 	.word	0x00020020

08000498 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800049c:	4b1b      	ldr	r3, [pc, #108]	@ (800050c <MX_I2C1_Init+0x74>)
 800049e:	4a1c      	ldr	r2, [pc, #112]	@ (8000510 <MX_I2C1_Init+0x78>)
 80004a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004a2:	4b1a      	ldr	r3, [pc, #104]	@ (800050c <MX_I2C1_Init+0x74>)
 80004a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000514 <MX_I2C1_Init+0x7c>)
 80004a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004a8:	4b18      	ldr	r3, [pc, #96]	@ (800050c <MX_I2C1_Init+0x74>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004ae:	4b17      	ldr	r3, [pc, #92]	@ (800050c <MX_I2C1_Init+0x74>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b4:	4b15      	ldr	r3, [pc, #84]	@ (800050c <MX_I2C1_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004ba:	4b14      	ldr	r3, [pc, #80]	@ (800050c <MX_I2C1_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004c0:	4b12      	ldr	r3, [pc, #72]	@ (800050c <MX_I2C1_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004c6:	4b11      	ldr	r3, [pc, #68]	@ (800050c <MX_I2C1_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <MX_I2C1_Init+0x74>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004d2:	480e      	ldr	r0, [pc, #56]	@ (800050c <MX_I2C1_Init+0x74>)
 80004d4:	f000 fd46 	bl	8000f64 <HAL_I2C_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004de:	f000 f8ed 	bl	80006bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4809      	ldr	r0, [pc, #36]	@ (800050c <MX_I2C1_Init+0x74>)
 80004e6:	f000 fdd8 	bl	800109a <HAL_I2CEx_ConfigAnalogFilter>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004f0:	f000 f8e4 	bl	80006bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004f4:	2100      	movs	r1, #0
 80004f6:	4805      	ldr	r0, [pc, #20]	@ (800050c <MX_I2C1_Init+0x74>)
 80004f8:	f000 fe1a 	bl	8001130 <HAL_I2CEx_ConfigDigitalFilter>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000502:	f000 f8db 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200001e8 	.word	0x200001e8
 8000510:	40005400 	.word	0x40005400
 8000514:	2000090e 	.word	0x2000090e

08000518 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800051c:	4b1b      	ldr	r3, [pc, #108]	@ (800058c <MX_SPI1_Init+0x74>)
 800051e:	4a1c      	ldr	r2, [pc, #112]	@ (8000590 <MX_SPI1_Init+0x78>)
 8000520:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000522:	4b1a      	ldr	r3, [pc, #104]	@ (800058c <MX_SPI1_Init+0x74>)
 8000524:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000528:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800052a:	4b18      	ldr	r3, [pc, #96]	@ (800058c <MX_SPI1_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000530:	4b16      	ldr	r3, [pc, #88]	@ (800058c <MX_SPI1_Init+0x74>)
 8000532:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000536:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000538:	4b14      	ldr	r3, [pc, #80]	@ (800058c <MX_SPI1_Init+0x74>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800053e:	4b13      	ldr	r3, [pc, #76]	@ (800058c <MX_SPI1_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000544:	4b11      	ldr	r3, [pc, #68]	@ (800058c <MX_SPI1_Init+0x74>)
 8000546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800054a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800054c:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <MX_SPI1_Init+0x74>)
 800054e:	2208      	movs	r2, #8
 8000550:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000552:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <MX_SPI1_Init+0x74>)
 8000554:	2200      	movs	r2, #0
 8000556:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000558:	4b0c      	ldr	r3, [pc, #48]	@ (800058c <MX_SPI1_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800055e:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <MX_SPI1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000564:	4b09      	ldr	r3, [pc, #36]	@ (800058c <MX_SPI1_Init+0x74>)
 8000566:	2207      	movs	r2, #7
 8000568:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800056a:	4b08      	ldr	r3, [pc, #32]	@ (800058c <MX_SPI1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <MX_SPI1_Init+0x74>)
 8000572:	2208      	movs	r2, #8
 8000574:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000576:	4805      	ldr	r0, [pc, #20]	@ (800058c <MX_SPI1_Init+0x74>)
 8000578:	f003 fe6e 	bl	8004258 <HAL_SPI_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000582:	f000 f89b 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	2000023c 	.word	0x2000023c
 8000590:	40013000 	.word	0x40013000

08000594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	@ 0x28
 8000598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005aa:	4b41      	ldr	r3, [pc, #260]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a40      	ldr	r2, [pc, #256]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 80005b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b3e      	ldr	r3, [pc, #248]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	4b3b      	ldr	r3, [pc, #236]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a3a      	ldr	r2, [pc, #232]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 80005c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b38      	ldr	r3, [pc, #224]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005da:	4b35      	ldr	r3, [pc, #212]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a34      	ldr	r2, [pc, #208]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 80005e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b32      	ldr	r3, [pc, #200]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b2f      	ldr	r3, [pc, #188]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a2e      	ldr	r2, [pc, #184]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b2c      	ldr	r3, [pc, #176]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a28      	ldr	r2, [pc, #160]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 8000610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b26      	ldr	r3, [pc, #152]	@ (80006b0 <MX_GPIO_Init+0x11c>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000622:	2200      	movs	r2, #0
 8000624:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000628:	4822      	ldr	r0, [pc, #136]	@ (80006b4 <MX_GPIO_Init+0x120>)
 800062a:	f000 fc83 	bl	8000f34 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2110      	movs	r1, #16
 8000632:	4821      	ldr	r0, [pc, #132]	@ (80006b8 <MX_GPIO_Init+0x124>)
 8000634:	f000 fc7e 	bl	8000f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000638:	2337      	movs	r3, #55	@ 0x37
 800063a:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800063c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	4819      	ldr	r0, [pc, #100]	@ (80006b4 <MX_GPIO_Init+0x120>)
 800064e:	f000 faf7 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000652:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000656:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	4812      	ldr	r0, [pc, #72]	@ (80006b4 <MX_GPIO_Init+0x120>)
 800066c:	f000 fae8 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000670:	2301      	movs	r3, #1
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000686:	f000 fadb 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800068a:	2310      	movs	r3, #16
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <MX_GPIO_Init+0x124>)
 80006a2:	f000 facd 	bl	8000c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006a6:	bf00      	nop
 80006a8:	3728      	adds	r7, #40	@ 0x28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40021000 	.word	0x40021000
 80006b4:	48001000 	.word	0x48001000
 80006b8:	48000800 	.word	0x48000800

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <Error_Handler+0x8>

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <HAL_MspInit+0x44>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	4a0e      	ldr	r2, [pc, #56]	@ (800070c <HAL_MspInit+0x44>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6193      	str	r3, [r2, #24]
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <HAL_MspInit+0x44>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <HAL_MspInit+0x44>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a08      	ldr	r2, [pc, #32]	@ (800070c <HAL_MspInit+0x44>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	61d3      	str	r3, [r2, #28]
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <HAL_MspInit+0x44>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006fe:	2007      	movs	r0, #7
 8000700:	f000 fa5c 	bl	8000bbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000

08000710 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	@ 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a17      	ldr	r2, [pc, #92]	@ (800078c <HAL_I2C_MspInit+0x7c>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d127      	bne.n	8000782 <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <HAL_I2C_MspInit+0x80>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	4a16      	ldr	r2, [pc, #88]	@ (8000790 <HAL_I2C_MspInit+0x80>)
 8000738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800073c:	6153      	str	r3, [r2, #20]
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <HAL_I2C_MspInit+0x80>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800074a:	23c0      	movs	r3, #192	@ 0xc0
 800074c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800074e:	2312      	movs	r3, #18
 8000750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000752:	2301      	movs	r3, #1
 8000754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000756:	2303      	movs	r3, #3
 8000758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800075a:	2304      	movs	r3, #4
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	480b      	ldr	r0, [pc, #44]	@ (8000794 <HAL_I2C_MspInit+0x84>)
 8000766:	f000 fa6b 	bl	8000c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <HAL_I2C_MspInit+0x80>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a08      	ldr	r2, [pc, #32]	@ (8000790 <HAL_I2C_MspInit+0x80>)
 8000770:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_I2C_MspInit+0x80>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	@ 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40005400 	.word	0x40005400
 8000790:	40021000 	.word	0x40021000
 8000794:	48000400 	.word	0x48000400

08000798 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a17      	ldr	r2, [pc, #92]	@ (8000814 <HAL_SPI_MspInit+0x7c>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d128      	bne.n	800080c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007ba:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <HAL_SPI_MspInit+0x80>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	4a16      	ldr	r2, [pc, #88]	@ (8000818 <HAL_SPI_MspInit+0x80>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6193      	str	r3, [r2, #24]
 80007c6:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <HAL_SPI_MspInit+0x80>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <HAL_SPI_MspInit+0x80>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a10      	ldr	r2, [pc, #64]	@ (8000818 <HAL_SPI_MspInit+0x80>)
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <HAL_SPI_MspInit+0x80>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80007ea:	23e0      	movs	r3, #224	@ 0xe0
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007fa:	2305      	movs	r3, #5
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000808:	f000 fa1a 	bl	8000c40 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	@ 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40013000 	.word	0x40013000
 8000818:	40021000 	.word	0x40021000

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <NMI_Handler+0x4>

08000824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <MemManage_Handler+0x4>

08000834 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <UsageFault_Handler+0x4>

08000844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000872:	f000 f88f 	bl	8000994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000880:	4802      	ldr	r0, [pc, #8]	@ (800088c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000882:	f000 fd8e 	bl	80013a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20001070 	.word	0x20001070

08000890 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <SystemInit+0x20>)
 8000896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800089a:	4a05      	ldr	r2, [pc, #20]	@ (80008b0 <SystemInit+0x20>)
 800089c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008ec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008b8:	f7ff ffea 	bl	8000890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008bc:	480c      	ldr	r0, [pc, #48]	@ (80008f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008be:	490d      	ldr	r1, [pc, #52]	@ (80008f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c0:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <LoopForever+0xe>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c4:	e002      	b.n	80008cc <LoopCopyDataInit>

080008c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ca:	3304      	adds	r3, #4

080008cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d0:	d3f9      	bcc.n	80008c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d2:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000900 <LoopForever+0x16>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d8:	e001      	b.n	80008de <LoopFillZerobss>

080008da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008dc:	3204      	adds	r2, #4

080008de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e0:	d3fb      	bcc.n	80008da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008e2:	f008 faa5 	bl	8008e30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008e6:	f7ff fc6f 	bl	80001c8 <main>

080008ea <LoopForever>:

LoopForever:
    b LoopForever
 80008ea:	e7fe      	b.n	80008ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008ec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f4:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80008f8:	0800a128 	.word	0x0800a128
  ldr r2, =_sbss
 80008fc:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000900:	2000569c 	.word	0x2000569c

08000904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC1_2_IRQHandler>
	...

08000908 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <HAL_Init+0x28>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a07      	ldr	r2, [pc, #28]	@ (8000930 <HAL_Init+0x28>)
 8000912:	f043 0310 	orr.w	r3, r3, #16
 8000916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 f94f 	bl	8000bbc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091e:	2000      	movs	r0, #0
 8000920:	f000 f808 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000924:	f7ff fed0 	bl	80006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40022000 	.word	0x40022000

08000934 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800093c:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <HAL_InitTick+0x54>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <HAL_InitTick+0x58>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f967 	bl	8000c26 <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e00e      	b.n	8000980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d80a      	bhi.n	800097e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f000 f92f 	bl	8000bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000974:	4a06      	ldr	r2, [pc, #24]	@ (8000990 <HAL_InitTick+0x5c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000000 	.word	0x20000000
 800098c:	20000008 	.word	0x20000008
 8000990:	20000004 	.word	0x20000004

08000994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_IncTick+0x20>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_IncTick+0x24>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a04      	ldr	r2, [pc, #16]	@ (80009b8 <HAL_IncTick+0x24>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008
 80009b8:	200002a0 	.word	0x200002a0

080009bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;  
 80009c0:	4b03      	ldr	r3, [pc, #12]	@ (80009d0 <HAL_GetTick+0x14>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	200002a0 	.word	0x200002a0

080009d4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009dc:	f7ff ffee 	bl	80009bc <HAL_GetTick>
 80009e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ec:	d005      	beq.n	80009fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <HAL_Delay+0x44>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009fa:	bf00      	nop
 80009fc:	f7ff ffde 	bl	80009bc <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d8f7      	bhi.n	80009fc <HAL_Delay+0x28>
  {
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	db0b      	blt.n	8000aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f003 021f 	and.w	r2, r3, #31
 8000a98:	4907      	ldr	r1, [pc, #28]	@ (8000ab8 <__NVIC_EnableIRQ+0x38>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	095b      	lsrs	r3, r3, #5
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000e100 	.word	0xe000e100

08000abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	db0a      	blt.n	8000ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	490c      	ldr	r1, [pc, #48]	@ (8000b08 <__NVIC_SetPriority+0x4c>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	440b      	add	r3, r1
 8000ae0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae4:	e00a      	b.n	8000afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4908      	ldr	r1, [pc, #32]	@ (8000b0c <__NVIC_SetPriority+0x50>)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	f003 030f 	and.w	r3, r3, #15
 8000af2:	3b04      	subs	r3, #4
 8000af4:	0112      	lsls	r2, r2, #4
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	440b      	add	r3, r1
 8000afa:	761a      	strb	r2, [r3, #24]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	@ 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	f1c3 0307 	rsb	r3, r3, #7
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	bf28      	it	cs
 8000b2e:	2304      	movcs	r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3304      	adds	r3, #4
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	d902      	bls.n	8000b40 <NVIC_EncodePriority+0x30>
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3b03      	subs	r3, #3
 8000b3e:	e000      	b.n	8000b42 <NVIC_EncodePriority+0x32>
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	f04f 32ff 	mov.w	r2, #4294967295
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b58:	f04f 31ff 	mov.w	r1, #4294967295
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	43d9      	mvns	r1, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	4313      	orrs	r3, r2
         );
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3724      	adds	r7, #36	@ 0x24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b88:	d301      	bcc.n	8000b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e00f      	b.n	8000bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <SysTick_Config+0x40>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b96:	210f      	movs	r1, #15
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f7ff ff8e 	bl	8000abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba0:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <SysTick_Config+0x40>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba6:	4b04      	ldr	r3, [pc, #16]	@ (8000bb8 <SysTick_Config+0x40>)
 8000ba8:	2207      	movs	r2, #7
 8000baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	e000e010 	.word	0xe000e010

08000bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ff29 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b086      	sub	sp, #24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
 8000bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be4:	f7ff ff3e 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	6978      	ldr	r0, [r7, #20]
 8000bf0:	f7ff ff8e 	bl	8000b10 <NVIC_EncodePriority>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff5d 	bl	8000abc <__NVIC_SetPriority>
}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff31 	bl	8000a80 <__NVIC_EnableIRQ>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffa2 	bl	8000b78 <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4e:	e154      	b.n	8000efa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	2101      	movs	r1, #1
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 8146 	beq.w	8000ef4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d005      	beq.n	8000c80 <HAL_GPIO_Init+0x40>
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d130      	bne.n	8000ce2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	091b      	lsrs	r3, r3, #4
 8000ccc:	f003 0201 	and.w	r2, r3, #1
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d017      	beq.n	8000d1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d123      	bne.n	8000d72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	08da      	lsrs	r2, r3, #3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3208      	adds	r2, #8
 8000d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	691a      	ldr	r2, [r3, #16]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	6939      	ldr	r1, [r7, #16]
 8000d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0203 	and.w	r2, r3, #3
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 80a0 	beq.w	8000ef4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db4:	4b58      	ldr	r3, [pc, #352]	@ (8000f18 <HAL_GPIO_Init+0x2d8>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a57      	ldr	r2, [pc, #348]	@ (8000f18 <HAL_GPIO_Init+0x2d8>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b55      	ldr	r3, [pc, #340]	@ (8000f18 <HAL_GPIO_Init+0x2d8>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dcc:	4a53      	ldr	r2, [pc, #332]	@ (8000f1c <HAL_GPIO_Init+0x2dc>)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	220f      	movs	r2, #15
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000df6:	d019      	beq.n	8000e2c <HAL_GPIO_Init+0x1ec>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a49      	ldr	r2, [pc, #292]	@ (8000f20 <HAL_GPIO_Init+0x2e0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d013      	beq.n	8000e28 <HAL_GPIO_Init+0x1e8>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a48      	ldr	r2, [pc, #288]	@ (8000f24 <HAL_GPIO_Init+0x2e4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d00d      	beq.n	8000e24 <HAL_GPIO_Init+0x1e4>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a47      	ldr	r2, [pc, #284]	@ (8000f28 <HAL_GPIO_Init+0x2e8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d007      	beq.n	8000e20 <HAL_GPIO_Init+0x1e0>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a46      	ldr	r2, [pc, #280]	@ (8000f2c <HAL_GPIO_Init+0x2ec>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d101      	bne.n	8000e1c <HAL_GPIO_Init+0x1dc>
 8000e18:	2304      	movs	r3, #4
 8000e1a:	e008      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e1c:	2305      	movs	r3, #5
 8000e1e:	e006      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e20:	2303      	movs	r3, #3
 8000e22:	e004      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e24:	2302      	movs	r3, #2
 8000e26:	e002      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	f002 0203 	and.w	r2, r2, #3
 8000e34:	0092      	lsls	r2, r2, #2
 8000e36:	4093      	lsls	r3, r2
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e3e:	4937      	ldr	r1, [pc, #220]	@ (8000f1c <HAL_GPIO_Init+0x2dc>)
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4c:	4b38      	ldr	r3, [pc, #224]	@ (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e70:	4a2f      	ldr	r2, [pc, #188]	@ (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e76:	4b2e      	ldr	r3, [pc, #184]	@ (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e9a:	4a25      	ldr	r2, [pc, #148]	@ (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ea0:	4b23      	ldr	r3, [pc, #140]	@ (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ec4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eee:	4a10      	ldr	r2, [pc, #64]	@ (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	fa22 f303 	lsr.w	r3, r2, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f47f aea3 	bne.w	8000c50 <HAL_GPIO_Init+0x10>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	bf00      	nop
 8000f0e:	371c      	adds	r7, #28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010000 	.word	0x40010000
 8000f20:	48000400 	.word	0x48000400
 8000f24:	48000800 	.word	0x48000800
 8000f28:	48000c00 	.word	0x48000c00
 8000f2c:	48001000 	.word	0x48001000
 8000f30:	40010400 	.word	0x40010400

08000f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	4613      	mov	r3, r2
 8000f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f44:	787b      	ldrb	r3, [r7, #1]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f52:	887a      	ldrh	r2, [r7, #2]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e08d      	b.n	8001092 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d106      	bne.n	8000f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff fbc0 	bl	8000710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2224      	movs	r2, #36	@ 0x24
 8000f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0201 	bic.w	r2, r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000fb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000fc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d107      	bne.n	8000fde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	e006      	b.n	8000fec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000fea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d108      	bne.n	8001006 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	e007      	b.n	8001016 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001014:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001028:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001038:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691a      	ldr	r2, [r3, #16]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	430a      	orrs	r2, r1
 8001052:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69d9      	ldr	r1, [r3, #28]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a1a      	ldr	r2, [r3, #32]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0201 	orr.w	r2, r2, #1
 8001072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2220      	movs	r2, #32
 800107e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b20      	cmp	r3, #32
 80010ae:	d138      	bne.n	8001122 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d101      	bne.n	80010be <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e032      	b.n	8001124 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2224      	movs	r2, #36	@ 0x24
 80010ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0201 	bic.w	r2, r2, #1
 80010dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80010ec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6819      	ldr	r1, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	430a      	orrs	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f042 0201 	orr.w	r2, r2, #1
 800110c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2220      	movs	r2, #32
 8001112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001122:	2302      	movs	r3, #2
  }
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b20      	cmp	r3, #32
 8001144:	d139      	bne.n	80011ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800114c:	2b01      	cmp	r3, #1
 800114e:	d101      	bne.n	8001154 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001150:	2302      	movs	r3, #2
 8001152:	e033      	b.n	80011bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2224      	movs	r2, #36	@ 0x24
 8001160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001182:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f042 0201 	orr.w	r2, r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2220      	movs	r2, #32
 80011aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80011ba:	2302      	movs	r3, #2
  }
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e0b9      	b.n	800134e <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d106      	bne.n	80011f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f007 f9ec 	bl	80085cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2203      	movs	r2, #3
 80011f8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f003 f8eb 	bl	80043dc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001206:	2300      	movs	r3, #0
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	e03e      	b.n	800128a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	440b      	add	r3, r1
 800121a:	3311      	adds	r3, #17
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	440b      	add	r3, r1
 800122e:	3310      	adds	r3, #16
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	440b      	add	r3, r1
 8001242:	3313      	adds	r3, #19
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	440b      	add	r3, r1
 8001256:	3320      	adds	r3, #32
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	440b      	add	r3, r1
 800126a:	3324      	adds	r3, #36	@ 0x24
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	440b      	add	r3, r1
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	3301      	adds	r3, #1
 8001288:	73fb      	strb	r3, [r7, #15]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	791b      	ldrb	r3, [r3, #4]
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	429a      	cmp	r2, r3
 8001292:	d3bb      	bcc.n	800120c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	e044      	b.n	8001324 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	440b      	add	r3, r1
 80012a8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	440b      	add	r3, r1
 80012be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012c6:	7bfa      	ldrb	r2, [r7, #15]
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	440b      	add	r3, r1
 80012d4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	440b      	add	r3, r1
 80012ea:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012f2:	7bfa      	ldrb	r2, [r7, #15]
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	440b      	add	r3, r1
 8001316:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	3301      	adds	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	791b      	ldrb	r3, [r3, #4]
 8001328:	7bfa      	ldrb	r2, [r7, #15]
 800132a:	429a      	cmp	r2, r3
 800132c:	d3b5      	bcc.n	800129a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3304      	adds	r3, #4
 8001336:	e893 0006 	ldmia.w	r3, {r1, r2}
 800133a:	f003 f86a 	bl	8004412 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_PCD_Start+0x16>
 8001368:	2302      	movs	r3, #2
 800136a:	e016      	b.n	800139a <HAL_PCD_Start+0x44>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f003 f818 	bl	80043ae <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800137e:	2101      	movs	r1, #1
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f007 fbbf 	bl	8008b04 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f005 fad6 	bl	800693c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f005 facf 	bl	8006952 <USB_ReadInterrupts>
 80013b4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 fab1 	bl	8001928 <PCD_EP_ISR_Handler>

    return;
 80013c6:	e0bd      	b.n	8001544 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d013      	beq.n	80013fa <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013da:	b29a      	uxth	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013e4:	b292      	uxth	r2, r2
 80013e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f007 f98f 	bl	800870e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013f0:	2100      	movs	r1, #0
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f8a9 	bl	800154a <HAL_PCD_SetAddress>

    return;
 80013f8:	e0a4      	b.n	8001544 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00c      	beq.n	800141e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800140c:	b29a      	uxth	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001416:	b292      	uxth	r2, r2
 8001418:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800141c:	e092      	b.n	8001544 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00c      	beq.n	8001442 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001430:	b29a      	uxth	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800143a:	b292      	uxth	r2, r2
 800143c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001440:	e080      	b.n	8001544 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d027      	beq.n	800149c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001454:	b29a      	uxth	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0204 	bic.w	r2, r2, #4
 800145e:	b292      	uxth	r2, r2
 8001460:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800146c:	b29a      	uxth	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0208 	bic.w	r2, r2, #8
 8001476:	b292      	uxth	r2, r2
 8001478:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f007 f97f 	bl	8008780 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800148a:	b29a      	uxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001494:	b292      	uxth	r2, r2
 8001496:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800149a:	e053      	b.n	8001544 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d027      	beq.n	80014f6 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0208 	orr.w	r2, r2, #8
 80014b8:	b292      	uxth	r2, r2
 80014ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014d0:	b292      	uxth	r2, r2
 80014d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014de:	b29a      	uxth	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0204 	orr.w	r2, r2, #4
 80014e8:	b292      	uxth	r2, r2
 80014ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f007 f92c 	bl	800874c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80014f4:	e026      	b.n	8001544 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00f      	beq.n	8001520 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001508:	b29a      	uxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001512:	b292      	uxth	r2, r2
 8001514:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f007 f8ea 	bl	80086f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800151e:	e011      	b.n	8001544 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00c      	beq.n	8001544 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001532:	b29a      	uxth	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800153c:	b292      	uxth	r2, r2
 800153e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001542:	bf00      	nop
  }
}
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	460b      	mov	r3, r1
 8001554:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_PCD_SetAddress+0x1a>
 8001560:	2302      	movs	r3, #2
 8001562:	e012      	b.n	800158a <HAL_PCD_SetAddress+0x40>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	78fa      	ldrb	r2, [r7, #3]
 8001570:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f005 f9ca 	bl	8006914 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b084      	sub	sp, #16
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	4608      	mov	r0, r1
 800159c:	4611      	mov	r1, r2
 800159e:	461a      	mov	r2, r3
 80015a0:	4603      	mov	r3, r0
 80015a2:	70fb      	strb	r3, [r7, #3]
 80015a4:	460b      	mov	r3, r1
 80015a6:	803b      	strh	r3, [r7, #0]
 80015a8:	4613      	mov	r3, r2
 80015aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	da0e      	bge.n	80015d6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	f003 0207 	and.w	r2, r3, #7
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	3310      	adds	r3, #16
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2201      	movs	r2, #1
 80015d2:	705a      	strb	r2, [r3, #1]
 80015d4:	e00e      	b.n	80015f4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	f003 0207 	and.w	r2, r3, #7
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001600:	883a      	ldrh	r2, [r7, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	78ba      	ldrb	r2, [r7, #2]
 800160a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800160c:	78bb      	ldrb	r3, [r7, #2]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d102      	bne.n	8001618 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800161e:	2b01      	cmp	r3, #1
 8001620:	d101      	bne.n	8001626 <HAL_PCD_EP_Open+0x94>
 8001622:	2302      	movs	r3, #2
 8001624:	e00e      	b.n	8001644 <HAL_PCD_EP_Open+0xb2>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68f9      	ldr	r1, [r7, #12]
 8001634:	4618      	mov	r0, r3
 8001636:	f002 ff0b 	bl	8004450 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001642:	7afb      	ldrb	r3, [r7, #11]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800165c:	2b00      	cmp	r3, #0
 800165e:	da0e      	bge.n	800167e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	f003 0207 	and.w	r2, r3, #7
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	3310      	adds	r3, #16
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	4413      	add	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2201      	movs	r2, #1
 800167a:	705a      	strb	r2, [r3, #1]
 800167c:	e00e      	b.n	800169c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	f003 0207 	and.w	r2, r3, #7
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_PCD_EP_Close+0x6a>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e00e      	b.n	80016d4 <HAL_PCD_EP_Close+0x88>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68f9      	ldr	r1, [r7, #12]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 fa87 	bl	8004bd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	460b      	mov	r3, r1
 80016ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016ec:	7afb      	ldrb	r3, [r7, #11]
 80016ee:	f003 0207 	and.w	r2, r3, #7
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4413      	add	r3, r2
 8001702:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2200      	movs	r2, #0
 800171a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800171c:	7afb      	ldrb	r3, [r7, #11]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	b2da      	uxtb	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6979      	ldr	r1, [r7, #20]
 800172e:	4618      	mov	r0, r3
 8001730:	f003 fc3f 	bl	8004fb2 <USB_EPStartXfer>

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	f003 0207 	and.w	r2, r3, #7
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001760:	681b      	ldr	r3, [r3, #0]
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	460b      	mov	r3, r1
 800177c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800177e:	7afb      	ldrb	r3, [r7, #11]
 8001780:	f003 0207 	and.w	r2, r3, #7
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	3310      	adds	r3, #16
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	4413      	add	r3, r2
 8001792:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2200      	movs	r2, #0
 80017b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2201      	movs	r2, #1
 80017b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6979      	ldr	r1, [r7, #20]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f003 fbf0 	bl	8004fb2 <USB_EPStartXfer>

  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	7912      	ldrb	r2, [r2, #4]
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e03e      	b.n	8001878 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da0e      	bge.n	8001820 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	f003 0207 	and.w	r2, r3, #7
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	3310      	adds	r3, #16
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	705a      	strb	r2, [r3, #1]
 800181e:	e00c      	b.n	800183a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2201      	movs	r2, #1
 800183e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	b2da      	uxtb	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_PCD_EP_SetStall+0x7e>
 8001856:	2302      	movs	r3, #2
 8001858:	e00e      	b.n	8001878 <HAL_PCD_EP_SetStall+0x9c>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68f9      	ldr	r1, [r7, #12]
 8001868:	4618      	mov	r0, r3
 800186a:	f004 ff54 	bl	8006716 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	7912      	ldrb	r2, [r2, #4]
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e040      	b.n	8001920 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800189e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	da0e      	bge.n	80018c4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	f003 0207 	and.w	r2, r3, #7
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	3310      	adds	r3, #16
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2201      	movs	r2, #1
 80018c0:	705a      	strb	r2, [r3, #1]
 80018c2:	e00e      	b.n	80018e2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	f003 0207 	and.w	r2, r3, #7
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_PCD_EP_ClrStall+0x82>
 80018fe:	2302      	movs	r3, #2
 8001900:	e00e      	b.n	8001920 <HAL_PCD_EP_ClrStall+0xa0>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68f9      	ldr	r1, [r7, #12]
 8001910:	4618      	mov	r0, r3
 8001912:	f004 ff51 	bl	80067b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b096      	sub	sp, #88	@ 0x58
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001930:	e3bb      	b.n	80020aa <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800193a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800193e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 800194c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001950:	2b00      	cmp	r3, #0
 8001952:	f040 8175 	bne.w	8001c40 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001956:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800195a:	f003 0310 	and.w	r3, r3, #16
 800195e:	2b00      	cmp	r3, #0
 8001960:	d14e      	bne.n	8001a00 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	b29b      	uxth	r3, r3
 800196a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800196e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001972:	81fb      	strh	r3, [r7, #14]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	89fb      	ldrh	r3, [r7, #14]
 800197a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800197e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001982:	b29b      	uxth	r3, r3
 8001984:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3310      	adds	r3, #16
 800198a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001994:	b29b      	uxth	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4413      	add	r3, r2
 80019a0:	3302      	adds	r3, #2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80019b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	441a      	add	r2, r3
 80019c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80019c6:	2100      	movs	r1, #0
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f006 fe78 	bl	80086be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7b1b      	ldrb	r3, [r3, #12]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 8368 	beq.w	80020aa <PCD_EP_ISR_Handler+0x782>
 80019da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f040 8363 	bne.w	80020aa <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7b1b      	ldrb	r3, [r3, #12]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	731a      	strb	r2, [r3, #12]
 80019fe:	e354      	b.n	80020aa <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a06:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a12:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001a16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d034      	beq.n	8001a88 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4413      	add	r3, r2
 8001a32:	3306      	adds	r3, #6
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a48:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a56:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a5a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	f004 ffcf 	bl	8006a00 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a6e:	4013      	ands	r3, r2
 8001a70:	823b      	strh	r3, [r7, #16]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	8a3a      	ldrh	r2, [r7, #16]
 8001a78:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a7c:	b292      	uxth	r2, r2
 8001a7e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f006 fdef 	bl	8008664 <HAL_PCD_SetupStageCallback>
 8001a86:	e310      	b.n	80020aa <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a88:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f280 830c 	bge.w	80020aa <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	83fb      	strh	r3, [r7, #30]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	8bfa      	ldrh	r2, [r7, #30]
 8001aa8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001aac:	b292      	uxth	r2, r2
 8001aae:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3306      	adds	r3, #6
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ada:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d019      	beq.n	8001b18 <PCD_EP_ISR_Handler+0x1f0>
 8001ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d015      	beq.n	8001b18 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af2:	6959      	ldr	r1, [r3, #20]
 8001af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001afa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	f004 ff7f 	bl	8006a00 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	441a      	add	r2, r3
 8001b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b0e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b10:	2100      	movs	r1, #0
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f006 fdb8 	bl	8008688 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001b22:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 82bd 	bne.w	80020aa <PCD_EP_ISR_Handler+0x782>
 8001b30:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001b34:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001b38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001b3c:	f000 82b5 	beq.w	80020aa <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	61bb      	str	r3, [r7, #24]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4413      	add	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	801a      	strh	r2, [r3, #0]
 8001b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10a      	bne.n	8001b8e <PCD_EP_ISR_Handler+0x266>
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	801a      	strh	r2, [r3, #0]
 8001b8c:	e039      	b.n	8001c02 <PCD_EP_ISR_Handler+0x2da>
 8001b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	2b3e      	cmp	r3, #62	@ 0x3e
 8001b94:	d818      	bhi.n	8001bc8 <PCD_EP_ISR_Handler+0x2a0>
 8001b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	085b      	lsrs	r3, r3, #1
 8001b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <PCD_EP_ISR_Handler+0x288>
 8001baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bac:	3301      	adds	r3, #1
 8001bae:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	029b      	lsls	r3, r3, #10
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	801a      	strh	r2, [r3, #0]
 8001bc6:	e01c      	b.n	8001c02 <PCD_EP_ISR_Handler+0x2da>
 8001bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	095b      	lsrs	r3, r3, #5
 8001bce:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	f003 031f 	and.w	r3, r3, #31
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <PCD_EP_ISR_Handler+0x2ba>
 8001bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bde:	3b01      	subs	r3, #1
 8001be0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	029b      	lsls	r3, r3, #10
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c12:	827b      	strh	r3, [r7, #18]
 8001c14:	8a7b      	ldrh	r3, [r7, #18]
 8001c16:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001c1a:	827b      	strh	r3, [r7, #18]
 8001c1c:	8a7b      	ldrh	r3, [r7, #18]
 8001c1e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001c22:	827b      	strh	r3, [r7, #18]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	8a7b      	ldrh	r3, [r7, #18]
 8001c2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	8013      	strh	r3, [r2, #0]
 8001c3e:	e234      	b.n	80020aa <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c54:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f280 80fc 	bge.w	8001e56 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c74:	4013      	ands	r3, r2
 8001c76:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001c8c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c90:	b292      	uxth	r2, r2
 8001c92:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c94:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cac:	7b1b      	ldrb	r3, [r3, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d125      	bne.n	8001cfe <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3306      	adds	r3, #6
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cda:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001cde:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8092 	beq.w	8001e0c <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cee:	6959      	ldr	r1, [r3, #20]
 8001cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf2:	88da      	ldrh	r2, [r3, #6]
 8001cf4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cf8:	f004 fe82 	bl	8006a00 <USB_ReadPMA>
 8001cfc:	e086      	b.n	8001e0c <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d00:	78db      	ldrb	r3, [r3, #3]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d10a      	bne.n	8001d1c <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d06:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f9d9 	bl	80020c6 <HAL_PCD_EP_DB_Receive>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001d1a:	e077      	b.n	8001e0c <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d36:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	441a      	add	r2, r3
 8001d48:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d024      	beq.n	8001dc4 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001da6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d02e      	beq.n	8001e0c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db4:	6959      	ldr	r1, [r3, #20]
 8001db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db8:	891a      	ldrh	r2, [r3, #8]
 8001dba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dbe:	f004 fe1f 	bl	8006a00 <USB_ReadPMA>
 8001dc2:	e023      	b.n	8001e0c <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3306      	adds	r3, #6
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001df0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d009      	beq.n	8001e0c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dfe:	6959      	ldr	r1, [r3, #20]
 8001e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e02:	895a      	ldrh	r2, [r3, #10]
 8001e04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e08:	f004 fdfa 	bl	8006a00 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0e:	69da      	ldr	r2, [r3, #28]
 8001e10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e14:	441a      	add	r2, r3
 8001e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e18:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e22:	441a      	add	r2, r3
 8001e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e26:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <PCD_EP_ISR_Handler+0x514>
 8001e30:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d206      	bcs.n	8001e4a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f006 fc20 	bl	8008688 <HAL_PCD_DataOutStageCallback>
 8001e48:	e005      	b.n	8001e56 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 f8ae 	bl	8004fb2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e56:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8123 	beq.w	80020aa <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e64:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	3310      	adds	r3, #16
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e92:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	441a      	add	r2, r3
 8001ea4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb6:	78db      	ldrb	r3, [r3, #3]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	f040 80a2 	bne.w	8002002 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	7b1b      	ldrb	r3, [r3, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8093 	beq.w	8001ff4 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ece:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d046      	beq.n	8001f68 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001edc:	785b      	ldrb	r3, [r3, #1]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d126      	bne.n	8001f30 <PCD_EP_ISR_Handler+0x608>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef6:	4413      	add	r3, r2
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	011a      	lsls	r2, r3, #4
 8001f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f02:	4413      	add	r3, r2
 8001f04:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001f08:	623b      	str	r3, [r7, #32]
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	801a      	strh	r2, [r3, #0]
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	801a      	strh	r2, [r3, #0]
 8001f2e:	e061      	b.n	8001ff4 <PCD_EP_ISR_Handler+0x6cc>
 8001f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f32:	785b      	ldrb	r3, [r3, #1]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d15d      	bne.n	8001ff4 <PCD_EP_ISR_Handler+0x6cc>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f4c:	4413      	add	r3, r2
 8001f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	011a      	lsls	r2, r3, #4
 8001f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f58:	4413      	add	r3, r2
 8001f5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f62:	2200      	movs	r2, #0
 8001f64:	801a      	strh	r2, [r3, #0]
 8001f66:	e045      	b.n	8001ff4 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f70:	785b      	ldrb	r3, [r3, #1]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d126      	bne.n	8001fc4 <PCD_EP_ISR_Handler+0x69c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f8a:	4413      	add	r3, r2
 8001f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	011a      	lsls	r2, r3, #4
 8001f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f96:	4413      	add	r3, r2
 8001f98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fac:	801a      	strh	r2, [r3, #0]
 8001fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc0:	801a      	strh	r2, [r3, #0]
 8001fc2:	e017      	b.n	8001ff4 <PCD_EP_ISR_Handler+0x6cc>
 8001fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc6:	785b      	ldrb	r3, [r3, #1]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d113      	bne.n	8001ff4 <PCD_EP_ISR_Handler+0x6cc>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fda:	4413      	add	r3, r2
 8001fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	011a      	lsls	r2, r3, #4
 8001fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001fec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f006 fb5f 	bl	80086be <HAL_PCD_DataInStageCallback>
 8002000:	e053      	b.n	80020aa <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002002:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d146      	bne.n	800209c <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	3302      	adds	r3, #2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	4413      	add	r3, r2
 800202c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002036:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800203a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002042:	429a      	cmp	r2, r3
 8002044:	d907      	bls.n	8002056 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800204e:	1ad2      	subs	r2, r2, r3
 8002050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002052:	619a      	str	r2, [r3, #24]
 8002054:	e002      	b.n	800205c <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800205c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d106      	bne.n	8002072 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f006 fb27 	bl	80086be <HAL_PCD_DataInStageCallback>
 8002070:	e01b      	b.n	80020aa <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800207a:	441a      	add	r2, r3
 800207c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800207e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002082:	69da      	ldr	r2, [r3, #28]
 8002084:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002088:	441a      	add	r2, r3
 800208a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800208c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002094:	4618      	mov	r0, r3
 8002096:	f002 ff8c 	bl	8004fb2 <USB_EPStartXfer>
 800209a:	e006      	b.n	80020aa <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800209c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80020a0:	461a      	mov	r2, r3
 80020a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f91b 	bl	80022e0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	b21b      	sxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f6ff ac3b 	blt.w	8001932 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3758      	adds	r7, #88	@ 0x58
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b088      	sub	sp, #32
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	4613      	mov	r3, r2
 80020d2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d07e      	beq.n	80021dc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	3302      	adds	r3, #2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002106:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	699a      	ldr	r2, [r3, #24]
 800210c:	8b7b      	ldrh	r3, [r7, #26]
 800210e:	429a      	cmp	r2, r3
 8002110:	d306      	bcc.n	8002120 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	8b7b      	ldrh	r3, [r7, #26]
 8002118:	1ad2      	subs	r2, r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	619a      	str	r2, [r3, #24]
 800211e:	e002      	b.n	8002126 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d123      	bne.n	8002176 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002148:	833b      	strh	r3, [r7, #24]
 800214a:	8b3b      	ldrh	r3, [r7, #24]
 800214c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002150:	833b      	strh	r3, [r7, #24]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	441a      	add	r2, r3
 8002160:	8b3b      	ldrh	r3, [r7, #24]
 8002162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800216a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800216e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002172:	b29b      	uxth	r3, r3
 8002174:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800217c:	2b00      	cmp	r3, #0
 800217e:	d01f      	beq.n	80021c0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800219a:	82fb      	strh	r3, [r7, #22]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	441a      	add	r2, r3
 80021aa:	8afb      	ldrh	r3, [r7, #22]
 80021ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80021bc:	b29b      	uxth	r3, r3
 80021be:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021c0:	8b7b      	ldrh	r3, [r7, #26]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8087 	beq.w	80022d6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	6959      	ldr	r1, [r3, #20]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	891a      	ldrh	r2, [r3, #8]
 80021d4:	8b7b      	ldrh	r3, [r7, #26]
 80021d6:	f004 fc13 	bl	8006a00 <USB_ReadPMA>
 80021da:	e07c      	b.n	80022d6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	3306      	adds	r3, #6
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002204:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	8b7b      	ldrh	r3, [r7, #26]
 800220c:	429a      	cmp	r2, r3
 800220e:	d306      	bcc.n	800221e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	8b7b      	ldrh	r3, [r7, #26]
 8002216:	1ad2      	subs	r2, r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	619a      	str	r2, [r3, #24]
 800221c:	e002      	b.n	8002224 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d123      	bne.n	8002274 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	b29b      	uxth	r3, r3
 800223e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002246:	83fb      	strh	r3, [r7, #30]
 8002248:	8bfb      	ldrh	r3, [r7, #30]
 800224a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800224e:	83fb      	strh	r3, [r7, #30]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	441a      	add	r2, r3
 800225e:	8bfb      	ldrh	r3, [r7, #30]
 8002260:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002264:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800226c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002270:	b29b      	uxth	r3, r3
 8002272:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d11f      	bne.n	80022be <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002298:	83bb      	strh	r3, [r7, #28]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	441a      	add	r2, r3
 80022a8:	8bbb      	ldrh	r3, [r7, #28]
 80022aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022be:	8b7b      	ldrh	r3, [r7, #26]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	6959      	ldr	r1, [r3, #20]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	895a      	ldrh	r2, [r3, #10]
 80022d0:	8b7b      	ldrh	r3, [r7, #26]
 80022d2:	f004 fb95 	bl	8006a00 <USB_ReadPMA>
    }
  }

  return count;
 80022d6:	8b7b      	ldrh	r3, [r7, #26]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b0a4      	sub	sp, #144	@ 0x90
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	4613      	mov	r3, r2
 80022ec:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 81dd 	beq.w	80026b4 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002302:	b29b      	uxth	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	3302      	adds	r3, #2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	4413      	add	r3, r2
 8002318:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002322:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	699a      	ldr	r2, [r3, #24]
 800232a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800232e:	429a      	cmp	r2, r3
 8002330:	d907      	bls.n	8002342 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	699a      	ldr	r2, [r3, #24]
 8002336:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800233a:	1ad2      	subs	r2, r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	619a      	str	r2, [r3, #24]
 8002340:	e002      	b.n	8002348 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 80b9 	bne.w	80024c4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	785b      	ldrb	r3, [r3, #1]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d126      	bne.n	80023a8 <HAL_PCD_EP_DB_Transmit+0xc8>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002368:	b29b      	uxth	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236e:	4413      	add	r3, r2
 8002370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	011a      	lsls	r2, r3, #4
 8002378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237a:	4413      	add	r3, r2
 800237c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002380:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800238c:	b29a      	uxth	r2, r3
 800238e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002390:	801a      	strh	r2, [r3, #0]
 8002392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800239c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a4:	801a      	strh	r2, [r3, #0]
 80023a6:	e01a      	b.n	80023de <HAL_PCD_EP_DB_Transmit+0xfe>
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	785b      	ldrb	r3, [r3, #1]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d116      	bne.n	80023de <HAL_PCD_EP_DB_Transmit+0xfe>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023be:	b29b      	uxth	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c4:	4413      	add	r3, r2
 80023c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	011a      	lsls	r2, r3, #4
 80023ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d0:	4413      	add	r3, r2
 80023d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80023d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80023d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023da:	2200      	movs	r2, #0
 80023dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	785b      	ldrb	r3, [r3, #1]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d126      	bne.n	800243a <HAL_PCD_EP_DB_Transmit+0x15a>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	4413      	add	r3, r2
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	011a      	lsls	r2, r3, #4
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	4413      	add	r3, r2
 800240e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800241e:	b29a      	uxth	r2, r3
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	801a      	strh	r2, [r3, #0]
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800242e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002432:	b29a      	uxth	r2, r3
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	801a      	strh	r2, [r3, #0]
 8002438:	e017      	b.n	800246a <HAL_PCD_EP_DB_Transmit+0x18a>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	785b      	ldrb	r3, [r3, #1]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d113      	bne.n	800246a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	4413      	add	r3, r2
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	011a      	lsls	r2, r3, #4
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	4413      	add	r3, r2
 800245e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002462:	623b      	str	r3, [r7, #32]
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	2200      	movs	r2, #0
 8002468:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	4619      	mov	r1, r3
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f006 f924 	bl	80086be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 82fc 	beq.w	8002a7a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002498:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800249c:	82fb      	strh	r3, [r7, #22]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	441a      	add	r2, r3
 80024ac:	8afb      	ldrh	r3, [r7, #22]
 80024ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024be:	b29b      	uxth	r3, r3
 80024c0:	8013      	strh	r3, [r2, #0]
 80024c2:	e2da      	b.n	8002a7a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d021      	beq.n	8002512 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024e8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	441a      	add	r2, r3
 80024fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80024fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002502:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002506:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800250a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800250e:	b29b      	uxth	r3, r3
 8002510:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002518:	2b01      	cmp	r3, #1
 800251a:	f040 82ae 	bne.w	8002a7a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002526:	441a      	add	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	69da      	ldr	r2, [r3, #28]
 8002530:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002534:	441a      	add	r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	6a1a      	ldr	r2, [r3, #32]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	429a      	cmp	r2, r3
 8002544:	d30b      	bcc.n	800255e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	6a1a      	ldr	r2, [r3, #32]
 8002552:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002556:	1ad2      	subs	r2, r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	621a      	str	r2, [r3, #32]
 800255c:	e017      	b.n	800258e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d108      	bne.n	8002578 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002566:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800256a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002576:	e00a      	b.n	800258e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2200      	movs	r2, #0
 800258c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	785b      	ldrb	r3, [r3, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d165      	bne.n	8002662 <HAL_PCD_EP_DB_Transmit+0x382>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025aa:	4413      	add	r3, r2
 80025ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	011a      	lsls	r2, r3, #4
 80025b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025b6:	4413      	add	r3, r2
 80025b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10a      	bne.n	80025ec <HAL_PCD_EP_DB_Transmit+0x30c>
 80025d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e8:	801a      	strh	r2, [r3, #0]
 80025ea:	e057      	b.n	800269c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80025f2:	d818      	bhi.n	8002626 <HAL_PCD_EP_DB_Transmit+0x346>
 80025f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025f8:	085b      	lsrs	r3, r3, #1
 80025fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_PCD_EP_DB_Transmit+0x32e>
 8002608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800260a:	3301      	adds	r3, #1
 800260c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800260e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b29a      	uxth	r2, r3
 8002614:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002616:	b29b      	uxth	r3, r3
 8002618:	029b      	lsls	r3, r3, #10
 800261a:	b29b      	uxth	r3, r3
 800261c:	4313      	orrs	r3, r2
 800261e:	b29a      	uxth	r2, r3
 8002620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002622:	801a      	strh	r2, [r3, #0]
 8002624:	e03a      	b.n	800269c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002626:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800262e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	2b00      	cmp	r3, #0
 8002638:	d102      	bne.n	8002640 <HAL_PCD_EP_DB_Transmit+0x360>
 800263a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800263c:	3b01      	subs	r3, #1
 800263e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	b29a      	uxth	r2, r3
 8002646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002648:	b29b      	uxth	r3, r3
 800264a:	029b      	lsls	r3, r3, #10
 800264c:	b29b      	uxth	r3, r3
 800264e:	4313      	orrs	r3, r2
 8002650:	b29b      	uxth	r3, r3
 8002652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800265a:	b29a      	uxth	r2, r3
 800265c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800265e:	801a      	strh	r2, [r3, #0]
 8002660:	e01c      	b.n	800269c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d118      	bne.n	800269c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002678:	b29b      	uxth	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800267e:	4413      	add	r3, r2
 8002680:	647b      	str	r3, [r7, #68]	@ 0x44
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	011a      	lsls	r2, r3, #4
 8002688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800268a:	4413      	add	r3, r2
 800268c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002690:	643b      	str	r3, [r7, #64]	@ 0x40
 8002692:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002696:	b29a      	uxth	r2, r3
 8002698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800269a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	6959      	ldr	r1, [r3, #20]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	891a      	ldrh	r2, [r3, #8]
 80026a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	f004 f960 	bl	8006972 <USB_WritePMA>
 80026b2:	e1e2      	b.n	8002a7a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026bc:	b29b      	uxth	r3, r3
 80026be:	461a      	mov	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4413      	add	r3, r2
 80026c8:	3306      	adds	r3, #6
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026dc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	699a      	ldr	r2, [r3, #24]
 80026e4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d307      	bcc.n	80026fc <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80026f4:	1ad2      	subs	r2, r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	619a      	str	r2, [r3, #24]
 80026fa:	e002      	b.n	8002702 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2200      	movs	r2, #0
 8002700:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 80c0 	bne.w	800288c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	785b      	ldrb	r3, [r3, #1]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d126      	bne.n	8002762 <HAL_PCD_EP_DB_Transmit+0x482>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002722:	b29b      	uxth	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002728:	4413      	add	r3, r2
 800272a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	011a      	lsls	r2, r3, #4
 8002732:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002734:	4413      	add	r3, r2
 8002736:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800273a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800273c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002746:	b29a      	uxth	r2, r3
 8002748:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800274a:	801a      	strh	r2, [r3, #0]
 800274c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800275a:	b29a      	uxth	r2, r3
 800275c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800275e:	801a      	strh	r2, [r3, #0]
 8002760:	e01a      	b.n	8002798 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	785b      	ldrb	r3, [r3, #1]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d116      	bne.n	8002798 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002778:	b29b      	uxth	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800277e:	4413      	add	r3, r2
 8002780:	667b      	str	r3, [r7, #100]	@ 0x64
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	011a      	lsls	r2, r3, #4
 8002788:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800278a:	4413      	add	r3, r2
 800278c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002790:	663b      	str	r3, [r7, #96]	@ 0x60
 8002792:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002794:	2200      	movs	r2, #0
 8002796:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	677b      	str	r3, [r7, #116]	@ 0x74
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	785b      	ldrb	r3, [r3, #1]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d12b      	bne.n	80027fe <HAL_PCD_EP_DB_Transmit+0x51e>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027ba:	4413      	add	r3, r2
 80027bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	011a      	lsls	r2, r3, #4
 80027c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027c6:	4413      	add	r3, r2
 80027c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027dc:	b29a      	uxth	r2, r3
 80027de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027e2:	801a      	strh	r2, [r3, #0]
 80027e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027fa:	801a      	strh	r2, [r3, #0]
 80027fc:	e017      	b.n	800282e <HAL_PCD_EP_DB_Transmit+0x54e>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	785b      	ldrb	r3, [r3, #1]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d113      	bne.n	800282e <HAL_PCD_EP_DB_Transmit+0x54e>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800280e:	b29b      	uxth	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002814:	4413      	add	r3, r2
 8002816:	677b      	str	r3, [r7, #116]	@ 0x74
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	011a      	lsls	r2, r3, #4
 800281e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002820:	4413      	add	r3, r2
 8002822:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002826:	673b      	str	r3, [r7, #112]	@ 0x70
 8002828:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800282a:	2200      	movs	r2, #0
 800282c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	4619      	mov	r1, r3
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f005 ff42 	bl	80086be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002840:	2b00      	cmp	r3, #0
 8002842:	f040 811a 	bne.w	8002a7a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	b29b      	uxth	r3, r3
 8002858:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800285c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002860:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	441a      	add	r2, r3
 8002872:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8002876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800287a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800287e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002886:	b29b      	uxth	r3, r3
 8002888:	8013      	strh	r3, [r2, #0]
 800288a:	e0f6      	b.n	8002a7a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d121      	bne.n	80028da <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028b0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	441a      	add	r2, r3
 80028c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80028c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	f040 80ca 	bne.w	8002a7a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80028ee:	441a      	add	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80028fc:	441a      	add	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	6a1a      	ldr	r2, [r3, #32]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	429a      	cmp	r2, r3
 800290c:	d30b      	bcc.n	8002926 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	6a1a      	ldr	r2, [r3, #32]
 800291a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800291e:	1ad2      	subs	r2, r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	621a      	str	r2, [r3, #32]
 8002924:	e017      	b.n	8002956 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d108      	bne.n	8002940 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800292e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002932:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800293e:	e00a      	b.n	8002956 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2200      	movs	r2, #0
 800294c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	657b      	str	r3, [r7, #84]	@ 0x54
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	785b      	ldrb	r3, [r3, #1]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d165      	bne.n	8002a30 <HAL_PCD_EP_DB_Transmit+0x750>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002972:	b29b      	uxth	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002978:	4413      	add	r3, r2
 800297a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	011a      	lsls	r2, r3, #4
 8002982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002984:	4413      	add	r3, r2
 8002986:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800298a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800298c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002996:	b29a      	uxth	r2, r3
 8002998:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800299a:	801a      	strh	r2, [r3, #0]
 800299c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10a      	bne.n	80029ba <HAL_PCD_EP_DB_Transmit+0x6da>
 80029a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029b6:	801a      	strh	r2, [r3, #0]
 80029b8:	e054      	b.n	8002a64 <HAL_PCD_EP_DB_Transmit+0x784>
 80029ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029be:	2b3e      	cmp	r3, #62	@ 0x3e
 80029c0:	d818      	bhi.n	80029f4 <HAL_PCD_EP_DB_Transmit+0x714>
 80029c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_PCD_EP_DB_Transmit+0x6fc>
 80029d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029d8:	3301      	adds	r3, #1
 80029da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	029b      	lsls	r3, r3, #10
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	4313      	orrs	r3, r2
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029f0:	801a      	strh	r2, [r3, #0]
 80029f2:	e037      	b.n	8002a64 <HAL_PCD_EP_DB_Transmit+0x784>
 80029f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <HAL_PCD_EP_DB_Transmit+0x72e>
 8002a08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	029b      	lsls	r3, r3, #10
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a2c:	801a      	strh	r2, [r3, #0]
 8002a2e:	e019      	b.n	8002a64 <HAL_PCD_EP_DB_Transmit+0x784>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	785b      	ldrb	r3, [r3, #1]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d115      	bne.n	8002a64 <HAL_PCD_EP_DB_Transmit+0x784>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a46:	4413      	add	r3, r2
 8002a48:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	011a      	lsls	r2, r3, #4
 8002a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a52:	4413      	add	r3, r2
 8002a54:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a58:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a62:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6959      	ldr	r1, [r3, #20]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	895a      	ldrh	r2, [r3, #10]
 8002a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	f003 ff7c 	bl	8006972 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a94:	82bb      	strh	r3, [r7, #20]
 8002a96:	8abb      	ldrh	r3, [r7, #20]
 8002a98:	f083 0310 	eor.w	r3, r3, #16
 8002a9c:	82bb      	strh	r3, [r7, #20]
 8002a9e:	8abb      	ldrh	r3, [r7, #20]
 8002aa0:	f083 0320 	eor.w	r3, r3, #32
 8002aa4:	82bb      	strh	r3, [r7, #20]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	441a      	add	r2, r3
 8002ab4:	8abb      	ldrh	r3, [r7, #20]
 8002ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002aba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3790      	adds	r7, #144	@ 0x90
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607b      	str	r3, [r7, #4]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	817b      	strh	r3, [r7, #10]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ae6:	897b      	ldrh	r3, [r7, #10]
 8002ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002af2:	897b      	ldrh	r3, [r7, #10]
 8002af4:	f003 0207 	and.w	r2, r3, #7
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	3310      	adds	r3, #16
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4413      	add	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e009      	b.n	8002b1e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b0a:	897a      	ldrh	r2, [r7, #10]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b1e:	893b      	ldrh	r3, [r7, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2200      	movs	r2, #0
 8002b28:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	80da      	strh	r2, [r3, #6]
 8002b32:	e00b      	b.n	8002b4c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2201      	movs	r2, #1
 8002b38:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	0c1b      	lsrs	r3, r3, #16
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b6c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f000 bff4 	b.w	8003b6a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 816d 	beq.w	8002e72 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b98:	4bb4      	ldr	r3, [pc, #720]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d00c      	beq.n	8002bbe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ba4:	4bb1      	ldr	r3, [pc, #708]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d157      	bne.n	8002c60 <HAL_RCC_OscConfig+0x104>
 8002bb0:	4bae      	ldr	r3, [pc, #696]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bbc:	d150      	bne.n	8002c60 <HAL_RCC_OscConfig+0x104>
 8002bbe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bc2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bd2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bde:	d802      	bhi.n	8002be6 <HAL_RCC_OscConfig+0x8a>
 8002be0:	4ba2      	ldr	r3, [pc, #648]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	e015      	b.n	8002c12 <HAL_RCC_OscConfig+0xb6>
 8002be6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bea:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002bfa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bfe:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002c02:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002c0e:	4b97      	ldr	r3, [pc, #604]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c16:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002c1a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002c1e:	fa92 f2a2 	rbit	r2, r2
 8002c22:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002c26:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002c2a:	fab2 f282 	clz	r2, r2
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	f042 0220 	orr.w	r2, r2, #32
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f002 021f 	and.w	r2, r2, #31
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8114 	beq.w	8002e70 <HAL_RCC_OscConfig+0x314>
 8002c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 810b 	bne.w	8002e70 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f000 bf85 	b.w	8003b6a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c70:	d106      	bne.n	8002c80 <HAL_RCC_OscConfig+0x124>
 8002c72:	4b7e      	ldr	r3, [pc, #504]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7d      	ldr	r2, [pc, #500]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e036      	b.n	8002cee <HAL_RCC_OscConfig+0x192>
 8002c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10c      	bne.n	8002caa <HAL_RCC_OscConfig+0x14e>
 8002c90:	4b76      	ldr	r3, [pc, #472]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a75      	ldr	r2, [pc, #468]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b73      	ldr	r3, [pc, #460]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a72      	ldr	r2, [pc, #456]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	e021      	b.n	8002cee <HAL_RCC_OscConfig+0x192>
 8002caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cba:	d10c      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x17a>
 8002cbc:	4b6b      	ldr	r3, [pc, #428]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a6a      	ldr	r2, [pc, #424]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002cc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b68      	ldr	r3, [pc, #416]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a67      	ldr	r2, [pc, #412]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002cce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	e00b      	b.n	8002cee <HAL_RCC_OscConfig+0x192>
 8002cd6:	4b65      	ldr	r3, [pc, #404]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a64      	ldr	r2, [pc, #400]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b62      	ldr	r3, [pc, #392]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a61      	ldr	r2, [pc, #388]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002ce8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cec:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cee:	4b5f      	ldr	r3, [pc, #380]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf2:	f023 020f 	bic.w	r2, r3, #15
 8002cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	495a      	ldr	r1, [pc, #360]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d054      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fd fe50 	bl	80009bc <HAL_GetTick>
 8002d1c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d20:	e00a      	b.n	8002d38 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d22:	f7fd fe4b 	bl	80009bc <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	@ 0x64
 8002d30:	d902      	bls.n	8002d38 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	f000 bf19 	b.w	8003b6a <HAL_RCC_OscConfig+0x100e>
 8002d38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d3c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002d44:	fa93 f3a3 	rbit	r3, r3
 8002d48:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002d4c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d50:	fab3 f383 	clz	r3, r3
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d58:	d802      	bhi.n	8002d60 <HAL_RCC_OscConfig+0x204>
 8002d5a:	4b44      	ldr	r3, [pc, #272]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	e015      	b.n	8002d8c <HAL_RCC_OscConfig+0x230>
 8002d60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d64:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d68:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002d74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d78:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002d7c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002d88:	4b38      	ldr	r3, [pc, #224]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d90:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002d94:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002d98:	fa92 f2a2 	rbit	r2, r2
 8002d9c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002da0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002da4:	fab2 f282 	clz	r2, r2
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	f042 0220 	orr.w	r2, r2, #32
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	f002 021f 	and.w	r2, r2, #31
 8002db4:	2101      	movs	r1, #1
 8002db6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0b0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x1c6>
 8002dc0:	e057      	b.n	8002e72 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7fd fdfb 	bl	80009bc <HAL_GetTick>
 8002dc6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dcc:	f7fd fdf6 	bl	80009bc <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b64      	cmp	r3, #100	@ 0x64
 8002dda:	d902      	bls.n	8002de2 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	f000 bec4 	b.w	8003b6a <HAL_RCC_OscConfig+0x100e>
 8002de2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002de6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002df6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e02:	d802      	bhi.n	8002e0a <HAL_RCC_OscConfig+0x2ae>
 8002e04:	4b19      	ldr	r3, [pc, #100]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	e015      	b.n	8002e36 <HAL_RCC_OscConfig+0x2da>
 8002e0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e0e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002e1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e22:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002e26:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002e32:	4b0e      	ldr	r3, [pc, #56]	@ (8002e6c <HAL_RCC_OscConfig+0x310>)
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e3a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002e3e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002e42:	fa92 f2a2 	rbit	r2, r2
 8002e46:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002e4a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002e4e:	fab2 f282 	clz	r2, r2
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	f042 0220 	orr.w	r2, r2, #32
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	f002 021f 	and.w	r2, r2, #31
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f202 	lsl.w	r2, r1, r2
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1b0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x270>
 8002e6a:	e002      	b.n	8002e72 <HAL_RCC_OscConfig+0x316>
 8002e6c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 816c 	beq.w	8003160 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e88:	4bcc      	ldr	r3, [pc, #816]	@ (80031bc <HAL_RCC_OscConfig+0x660>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00b      	beq.n	8002eac <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e94:	4bc9      	ldr	r3, [pc, #804]	@ (80031bc <HAL_RCC_OscConfig+0x660>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d16d      	bne.n	8002f7c <HAL_RCC_OscConfig+0x420>
 8002ea0:	4bc6      	ldr	r3, [pc, #792]	@ (80031bc <HAL_RCC_OscConfig+0x660>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d167      	bne.n	8002f7c <HAL_RCC_OscConfig+0x420>
 8002eac:	2302      	movs	r3, #2
 8002eae:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002ebe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002eca:	d802      	bhi.n	8002ed2 <HAL_RCC_OscConfig+0x376>
 8002ecc:	4bbb      	ldr	r3, [pc, #748]	@ (80031bc <HAL_RCC_OscConfig+0x660>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	e013      	b.n	8002efa <HAL_RCC_OscConfig+0x39e>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002edc:	fa93 f3a3 	rbit	r3, r3
 8002ee0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002eea:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002ef6:	4bb1      	ldr	r3, [pc, #708]	@ (80031bc <HAL_RCC_OscConfig+0x660>)
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	2202      	movs	r2, #2
 8002efc:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002f00:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002f04:	fa92 f2a2 	rbit	r2, r2
 8002f08:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002f0c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002f10:	fab2 f282 	clz	r2, r2
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	f042 0220 	orr.w	r2, r2, #32
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	f002 021f 	and.w	r2, r2, #31
 8002f20:	2101      	movs	r1, #1
 8002f22:	fa01 f202 	lsl.w	r2, r1, r2
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCC_OscConfig+0x3e6>
 8002f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d002      	beq.n	8002f42 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f000 be14 	b.w	8003b6a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f42:	4b9e      	ldr	r3, [pc, #632]	@ (80031bc <HAL_RCC_OscConfig+0x660>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	21f8      	movs	r1, #248	@ 0xf8
 8002f58:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002f60:	fa91 f1a1 	rbit	r1, r1
 8002f64:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002f68:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002f6c:	fab1 f181 	clz	r1, r1
 8002f70:	b2c9      	uxtb	r1, r1
 8002f72:	408b      	lsls	r3, r1
 8002f74:	4991      	ldr	r1, [pc, #580]	@ (80031bc <HAL_RCC_OscConfig+0x660>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7a:	e0f1      	b.n	8003160 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8083 	beq.w	8003094 <HAL_RCC_OscConfig+0x538>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002f98:	fa93 f3a3 	rbit	r3, r3
 8002f9c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002fa0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa4:	fab3 f383 	clz	r3, r3
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fba:	f7fd fcff 	bl	80009bc <HAL_GetTick>
 8002fbe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc4:	f7fd fcfa 	bl	80009bc <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d902      	bls.n	8002fda <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	f000 bdc8 	b.w	8003b6a <HAL_RCC_OscConfig+0x100e>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002fec:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff0:	fab3 f383 	clz	r3, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ff8:	d802      	bhi.n	8003000 <HAL_RCC_OscConfig+0x4a4>
 8002ffa:	4b70      	ldr	r3, [pc, #448]	@ (80031bc <HAL_RCC_OscConfig+0x660>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	e013      	b.n	8003028 <HAL_RCC_OscConfig+0x4cc>
 8003000:	2302      	movs	r3, #2
 8003002:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800300a:	fa93 f3a3 	rbit	r3, r3
 800300e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003012:	2302      	movs	r3, #2
 8003014:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003018:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003024:	4b65      	ldr	r3, [pc, #404]	@ (80031bc <HAL_RCC_OscConfig+0x660>)
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	2202      	movs	r2, #2
 800302a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800302e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003032:	fa92 f2a2 	rbit	r2, r2
 8003036:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800303a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800303e:	fab2 f282 	clz	r2, r2
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	f042 0220 	orr.w	r2, r2, #32
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	f002 021f 	and.w	r2, r2, #31
 800304e:	2101      	movs	r1, #1
 8003050:	fa01 f202 	lsl.w	r2, r1, r2
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0b4      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305a:	4b58      	ldr	r3, [pc, #352]	@ (80031bc <HAL_RCC_OscConfig+0x660>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003066:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	21f8      	movs	r1, #248	@ 0xf8
 8003070:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003078:	fa91 f1a1 	rbit	r1, r1
 800307c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003080:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003084:	fab1 f181 	clz	r1, r1
 8003088:	b2c9      	uxtb	r1, r1
 800308a:	408b      	lsls	r3, r1
 800308c:	494b      	ldr	r1, [pc, #300]	@ (80031bc <HAL_RCC_OscConfig+0x660>)
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
 8003092:	e065      	b.n	8003160 <HAL_RCC_OscConfig+0x604>
 8003094:	2301      	movs	r3, #1
 8003096:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80030a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	461a      	mov	r2, r3
 80030bc:	2300      	movs	r3, #0
 80030be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fd fc7c 	bl	80009bc <HAL_GetTick>
 80030c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ca:	f7fd fc77 	bl	80009bc <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d902      	bls.n	80030e0 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	f000 bd45 	b.w	8003b6a <HAL_RCC_OscConfig+0x100e>
 80030e0:	2302      	movs	r3, #2
 80030e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80030f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80030fe:	d802      	bhi.n	8003106 <HAL_RCC_OscConfig+0x5aa>
 8003100:	4b2e      	ldr	r3, [pc, #184]	@ (80031bc <HAL_RCC_OscConfig+0x660>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	e013      	b.n	800312e <HAL_RCC_OscConfig+0x5d2>
 8003106:	2302      	movs	r3, #2
 8003108:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003110:	fa93 f3a3 	rbit	r3, r3
 8003114:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003118:	2302      	movs	r3, #2
 800311a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800311e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800312a:	4b24      	ldr	r3, [pc, #144]	@ (80031bc <HAL_RCC_OscConfig+0x660>)
 800312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312e:	2202      	movs	r2, #2
 8003130:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003134:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003138:	fa92 f2a2 	rbit	r2, r2
 800313c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003140:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003144:	fab2 f282 	clz	r2, r2
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	f042 0220 	orr.w	r2, r2, #32
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	f002 021f 	and.w	r2, r2, #31
 8003154:	2101      	movs	r1, #1
 8003156:	fa01 f202 	lsl.w	r2, r1, r2
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1b4      	bne.n	80030ca <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003164:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8115 	beq.w	80033a0 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d07e      	beq.n	8003284 <HAL_RCC_OscConfig+0x728>
 8003186:	2301      	movs	r3, #1
 8003188:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <HAL_RCC_OscConfig+0x664>)
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	461a      	mov	r2, r3
 80031ac:	2301      	movs	r3, #1
 80031ae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b0:	f7fd fc04 	bl	80009bc <HAL_GetTick>
 80031b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b8:	e00f      	b.n	80031da <HAL_RCC_OscConfig+0x67e>
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
 80031c0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c4:	f7fd fbfa 	bl	80009bc <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d902      	bls.n	80031da <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	f000 bcc8 	b.w	8003b6a <HAL_RCC_OscConfig+0x100e>
 80031da:	2302      	movs	r3, #2
 80031dc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80031ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80031f4:	2202      	movs	r2, #2
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	fa93 f2a3 	rbit	r2, r3
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003218:	2202      	movs	r2, #2
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	fa93 f2a3 	rbit	r2, r3
 800322a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003232:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003234:	4bb0      	ldr	r3, [pc, #704]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 8003236:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003240:	2102      	movs	r1, #2
 8003242:	6019      	str	r1, [r3, #0]
 8003244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003248:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	fa93 f1a3 	rbit	r1, r3
 8003252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003256:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800325a:	6019      	str	r1, [r3, #0]
  return result;
 800325c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003260:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	fab3 f383 	clz	r3, r3
 800326a:	b2db      	uxtb	r3, r3
 800326c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	2101      	movs	r1, #1
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0a0      	beq.n	80031c4 <HAL_RCC_OscConfig+0x668>
 8003282:	e08d      	b.n	80033a0 <HAL_RCC_OscConfig+0x844>
 8003284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003288:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003294:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	fa93 f2a3 	rbit	r2, r3
 800329e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032a6:	601a      	str	r2, [r3, #0]
  return result;
 80032a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032b0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b2:	fab3 f383 	clz	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b90      	ldr	r3, [pc, #576]	@ (80034fc <HAL_RCC_OscConfig+0x9a0>)
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	461a      	mov	r2, r3
 80032c2:	2300      	movs	r3, #0
 80032c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c6:	f7fd fb79 	bl	80009bc <HAL_GetTick>
 80032ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d0:	f7fd fb74 	bl	80009bc <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d902      	bls.n	80032e6 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	f000 bc42 	b.w	8003b6a <HAL_RCC_OscConfig+0x100e>
 80032e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032ee:	2202      	movs	r2, #2
 80032f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	fa93 f2a3 	rbit	r2, r3
 8003300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003304:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003312:	2202      	movs	r2, #2
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	fa93 f2a3 	rbit	r2, r3
 8003324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003328:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003332:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003336:	2202      	movs	r2, #2
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	fa93 f2a3 	rbit	r2, r3
 8003348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003350:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003352:	4b69      	ldr	r3, [pc, #420]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 8003354:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800335e:	2102      	movs	r1, #2
 8003360:	6019      	str	r1, [r3, #0]
 8003362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003366:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	fa93 f1a3 	rbit	r1, r3
 8003370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003374:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003378:	6019      	str	r1, [r3, #0]
  return result;
 800337a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	2101      	movs	r1, #1
 8003396:	fa01 f303 	lsl.w	r3, r1, r3
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d197      	bne.n	80032d0 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 819e 	beq.w	80036f2 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b6:	2300      	movs	r3, #0
 80033b8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033bc:	4b4e      	ldr	r3, [pc, #312]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d116      	bne.n	80033f6 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c8:	4b4b      	ldr	r3, [pc, #300]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	4a4a      	ldr	r2, [pc, #296]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 80033ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	61d3      	str	r3, [r2, #28]
 80033d4:	4b48      	ldr	r3, [pc, #288]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80033dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ea:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80033ee:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f6:	4b42      	ldr	r3, [pc, #264]	@ (8003500 <HAL_RCC_OscConfig+0x9a4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d11a      	bne.n	8003438 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003402:	4b3f      	ldr	r3, [pc, #252]	@ (8003500 <HAL_RCC_OscConfig+0x9a4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a3e      	ldr	r2, [pc, #248]	@ (8003500 <HAL_RCC_OscConfig+0x9a4>)
 8003408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800340c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340e:	f7fd fad5 	bl	80009bc <HAL_GetTick>
 8003412:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003416:	e009      	b.n	800342c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003418:	f7fd fad0 	bl	80009bc <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b64      	cmp	r3, #100	@ 0x64
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e39e      	b.n	8003b6a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342c:	4b34      	ldr	r3, [pc, #208]	@ (8003500 <HAL_RCC_OscConfig+0x9a4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ef      	beq.n	8003418 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d106      	bne.n	8003456 <HAL_RCC_OscConfig+0x8fa>
 8003448:	4b2b      	ldr	r3, [pc, #172]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	4a2a      	ldr	r2, [pc, #168]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6213      	str	r3, [r2, #32]
 8003454:	e035      	b.n	80034c2 <HAL_RCC_OscConfig+0x966>
 8003456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10c      	bne.n	8003480 <HAL_RCC_OscConfig+0x924>
 8003466:	4b24      	ldr	r3, [pc, #144]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	4a23      	ldr	r2, [pc, #140]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	6213      	str	r3, [r2, #32]
 8003472:	4b21      	ldr	r3, [pc, #132]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	4a20      	ldr	r2, [pc, #128]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 8003478:	f023 0304 	bic.w	r3, r3, #4
 800347c:	6213      	str	r3, [r2, #32]
 800347e:	e020      	b.n	80034c2 <HAL_RCC_OscConfig+0x966>
 8003480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003484:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b05      	cmp	r3, #5
 800348e:	d10c      	bne.n	80034aa <HAL_RCC_OscConfig+0x94e>
 8003490:	4b19      	ldr	r3, [pc, #100]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4a18      	ldr	r2, [pc, #96]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 8003496:	f043 0304 	orr.w	r3, r3, #4
 800349a:	6213      	str	r3, [r2, #32]
 800349c:	4b16      	ldr	r3, [pc, #88]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4a15      	ldr	r2, [pc, #84]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6213      	str	r3, [r2, #32]
 80034a8:	e00b      	b.n	80034c2 <HAL_RCC_OscConfig+0x966>
 80034aa:	4b13      	ldr	r3, [pc, #76]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	4a12      	ldr	r2, [pc, #72]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	6213      	str	r3, [r2, #32]
 80034b6:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	4a0f      	ldr	r2, [pc, #60]	@ (80034f8 <HAL_RCC_OscConfig+0x99c>)
 80034bc:	f023 0304 	bic.w	r3, r3, #4
 80034c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8087 	beq.w	80035e2 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d4:	f7fd fa72 	bl	80009bc <HAL_GetTick>
 80034d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034dc:	e012      	b.n	8003504 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fd fa6d 	bl	80009bc <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d908      	bls.n	8003504 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e339      	b.n	8003b6a <HAL_RCC_OscConfig+0x100e>
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000
 80034fc:	10908120 	.word	0x10908120
 8003500:	40007000 	.word	0x40007000
 8003504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003508:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800350c:	2202      	movs	r2, #2
 800350e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003514:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	fa93 f2a3 	rbit	r2, r3
 800351e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003522:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003530:	2202      	movs	r2, #2
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003538:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	fa93 f2a3 	rbit	r2, r3
 8003542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003546:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800354a:	601a      	str	r2, [r3, #0]
  return result;
 800354c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003550:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003554:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <HAL_RCC_OscConfig+0xa10>
 8003566:	4b98      	ldr	r3, [pc, #608]	@ (80037c8 <HAL_RCC_OscConfig+0xc6c>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	e013      	b.n	8003594 <HAL_RCC_OscConfig+0xa38>
 800356c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003570:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003574:	2202      	movs	r2, #2
 8003576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	fa93 f2a3 	rbit	r2, r3
 8003586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	4b8d      	ldr	r3, [pc, #564]	@ (80037c8 <HAL_RCC_OscConfig+0xc6c>)
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003598:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800359c:	2102      	movs	r1, #2
 800359e:	6011      	str	r1, [r2, #0]
 80035a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035a4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	fa92 f1a2 	rbit	r1, r2
 80035ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035b2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035b6:	6011      	str	r1, [r2, #0]
  return result;
 80035b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035bc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	fab2 f282 	clz	r2, r2
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	f002 021f 	and.w	r2, r2, #31
 80035d2:	2101      	movs	r1, #1
 80035d4:	fa01 f202 	lsl.w	r2, r1, r2
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f43f af7f 	beq.w	80034de <HAL_RCC_OscConfig+0x982>
 80035e0:	e07d      	b.n	80036de <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e2:	f7fd f9eb 	bl	80009bc <HAL_GetTick>
 80035e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7fd f9e6 	bl	80009bc <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e2b2      	b.n	8003b6a <HAL_RCC_OscConfig+0x100e>
 8003604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003608:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800360c:	2202      	movs	r2, #2
 800360e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003614:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	fa93 f2a3 	rbit	r2, r3
 800361e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003622:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800362c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003630:	2202      	movs	r2, #2
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003638:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	fa93 f2a3 	rbit	r2, r3
 8003642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003646:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800364a:	601a      	str	r2, [r3, #0]
  return result;
 800364c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003650:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003654:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003656:	fab3 f383 	clz	r3, r3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d102      	bne.n	800366c <HAL_RCC_OscConfig+0xb10>
 8003666:	4b58      	ldr	r3, [pc, #352]	@ (80037c8 <HAL_RCC_OscConfig+0xc6c>)
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	e013      	b.n	8003694 <HAL_RCC_OscConfig+0xb38>
 800366c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003670:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003674:	2202      	movs	r2, #2
 8003676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	fa93 f2a3 	rbit	r2, r3
 8003686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	4b4d      	ldr	r3, [pc, #308]	@ (80037c8 <HAL_RCC_OscConfig+0xc6c>)
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003694:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003698:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800369c:	2102      	movs	r1, #2
 800369e:	6011      	str	r1, [r2, #0]
 80036a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036a4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	fa92 f1a2 	rbit	r1, r2
 80036ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036b2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036b6:	6011      	str	r1, [r2, #0]
  return result;
 80036b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036bc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	fab2 f282 	clz	r2, r2
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	f002 021f 	and.w	r2, r2, #31
 80036d2:	2101      	movs	r1, #1
 80036d4:	fa01 f202 	lsl.w	r2, r1, r2
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d186      	bne.n	80035ec <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036de:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d105      	bne.n	80036f2 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e6:	4b38      	ldr	r3, [pc, #224]	@ (80037c8 <HAL_RCC_OscConfig+0xc6c>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	4a37      	ldr	r2, [pc, #220]	@ (80037c8 <HAL_RCC_OscConfig+0xc6c>)
 80036ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8232 	beq.w	8003b68 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003704:	4b30      	ldr	r3, [pc, #192]	@ (80037c8 <HAL_RCC_OscConfig+0xc6c>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b08      	cmp	r3, #8
 800370e:	f000 8201 	beq.w	8003b14 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003716:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	2b02      	cmp	r3, #2
 8003720:	f040 8157 	bne.w	80039d2 <HAL_RCC_OscConfig+0xe76>
 8003724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003728:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800372c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003736:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	fa93 f2a3 	rbit	r2, r3
 8003740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003744:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003748:	601a      	str	r2, [r3, #0]
  return result;
 800374a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800374e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003752:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800375e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	461a      	mov	r2, r3
 8003766:	2300      	movs	r3, #0
 8003768:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376a:	f7fd f927 	bl	80009bc <HAL_GetTick>
 800376e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003772:	e009      	b.n	8003788 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003774:	f7fd f922 	bl	80009bc <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e1f0      	b.n	8003b6a <HAL_RCC_OscConfig+0x100e>
 8003788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003790:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800379a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	fa93 f2a3 	rbit	r2, r3
 80037a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037ac:	601a      	str	r2, [r3, #0]
  return result;
 80037ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b8:	fab3 f383 	clz	r3, r3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b3f      	cmp	r3, #63	@ 0x3f
 80037c0:	d804      	bhi.n	80037cc <HAL_RCC_OscConfig+0xc70>
 80037c2:	4b01      	ldr	r3, [pc, #4]	@ (80037c8 <HAL_RCC_OscConfig+0xc6c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	e029      	b.n	800381c <HAL_RCC_OscConfig+0xcc0>
 80037c8:	40021000 	.word	0x40021000
 80037cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037de:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	fa93 f2a3 	rbit	r2, r3
 80037e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ec:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80037fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003804:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	fa93 f2a3 	rbit	r2, r3
 800380e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003812:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	4bc3      	ldr	r3, [pc, #780]	@ (8003b28 <HAL_RCC_OscConfig+0xfcc>)
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003820:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003824:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003828:	6011      	str	r1, [r2, #0]
 800382a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800382e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	fa92 f1a2 	rbit	r1, r2
 8003838:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800383c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003840:	6011      	str	r1, [r2, #0]
  return result;
 8003842:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003846:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	fab2 f282 	clz	r2, r2
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	f042 0220 	orr.w	r2, r2, #32
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f002 021f 	and.w	r2, r2, #31
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f202 	lsl.w	r2, r1, r2
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d185      	bne.n	8003774 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003868:	4baf      	ldr	r3, [pc, #700]	@ (8003b28 <HAL_RCC_OscConfig+0xfcc>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003874:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800387c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003880:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	430b      	orrs	r3, r1
 800388a:	49a7      	ldr	r1, [pc, #668]	@ (8003b28 <HAL_RCC_OscConfig+0xfcc>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]
 8003890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003894:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003898:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800389c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	fa93 f2a3 	rbit	r2, r3
 80038ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038b4:	601a      	str	r2, [r3, #0]
  return result;
 80038b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ba:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038be:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c0:	fab3 f383 	clz	r3, r3
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038ca:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	461a      	mov	r2, r3
 80038d2:	2301      	movs	r3, #1
 80038d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d6:	f7fd f871 	bl	80009bc <HAL_GetTick>
 80038da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038de:	e009      	b.n	80038f4 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fd f86c 	bl	80009bc <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e13a      	b.n	8003b6a <HAL_RCC_OscConfig+0x100e>
 80038f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80038fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003906:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	fa93 f2a3 	rbit	r2, r3
 8003910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003914:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003918:	601a      	str	r2, [r3, #0]
  return result;
 800391a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003922:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003924:	fab3 f383 	clz	r3, r3
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b3f      	cmp	r3, #63	@ 0x3f
 800392c:	d802      	bhi.n	8003934 <HAL_RCC_OscConfig+0xdd8>
 800392e:	4b7e      	ldr	r3, [pc, #504]	@ (8003b28 <HAL_RCC_OscConfig+0xfcc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	e027      	b.n	8003984 <HAL_RCC_OscConfig+0xe28>
 8003934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003938:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800393c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003946:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	fa93 f2a3 	rbit	r2, r3
 8003950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003954:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800395e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003962:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800396c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	fa93 f2a3 	rbit	r2, r3
 8003976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	4b69      	ldr	r3, [pc, #420]	@ (8003b28 <HAL_RCC_OscConfig+0xfcc>)
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003988:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800398c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003990:	6011      	str	r1, [r2, #0]
 8003992:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003996:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	fa92 f1a2 	rbit	r1, r2
 80039a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039a4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039a8:	6011      	str	r1, [r2, #0]
  return result;
 80039aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039ae:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	fab2 f282 	clz	r2, r2
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	f042 0220 	orr.w	r2, r2, #32
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	f002 021f 	and.w	r2, r2, #31
 80039c4:	2101      	movs	r1, #1
 80039c6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d087      	beq.n	80038e0 <HAL_RCC_OscConfig+0xd84>
 80039d0:	e0ca      	b.n	8003b68 <HAL_RCC_OscConfig+0x100c>
 80039d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80039da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	fa93 f2a3 	rbit	r2, r3
 80039ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80039f6:	601a      	str	r2, [r3, #0]
  return result;
 80039f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a00:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a0c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	461a      	mov	r2, r3
 8003a14:	2300      	movs	r3, #0
 8003a16:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fc ffd0 	bl	80009bc <HAL_GetTick>
 8003a1c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a20:	e009      	b.n	8003a36 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a22:	f7fc ffcb 	bl	80009bc <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e099      	b.n	8003b6a <HAL_RCC_OscConfig+0x100e>
 8003a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a48:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	fa93 f2a3 	rbit	r2, r3
 8003a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a56:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a5a:	601a      	str	r2, [r3, #0]
  return result;
 8003a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a60:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003a6e:	d802      	bhi.n	8003a76 <HAL_RCC_OscConfig+0xf1a>
 8003a70:	4b2d      	ldr	r3, [pc, #180]	@ (8003b28 <HAL_RCC_OscConfig+0xfcc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	e027      	b.n	8003ac6 <HAL_RCC_OscConfig+0xf6a>
 8003a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003a7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a88:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	fa93 f2a3 	rbit	r2, r3
 8003a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a96:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003aa4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aae:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	fa93 f2a3 	rbit	r2, r3
 8003ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003abc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	4b19      	ldr	r3, [pc, #100]	@ (8003b28 <HAL_RCC_OscConfig+0xfcc>)
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003aca:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003ace:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003ad2:	6011      	str	r1, [r2, #0]
 8003ad4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ad8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	fa92 f1a2 	rbit	r1, r2
 8003ae2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ae6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003aea:	6011      	str	r1, [r2, #0]
  return result;
 8003aec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003af0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	fab2 f282 	clz	r2, r2
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	f042 0220 	orr.w	r2, r2, #32
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	f002 021f 	and.w	r2, r2, #31
 8003b06:	2101      	movs	r1, #1
 8003b08:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d187      	bne.n	8003a22 <HAL_RCC_OscConfig+0xec6>
 8003b12:	e029      	b.n	8003b68 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d103      	bne.n	8003b2c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e020      	b.n	8003b6a <HAL_RCC_OscConfig+0x100e>
 8003b28:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b2c:	4b11      	ldr	r3, [pc, #68]	@ (8003b74 <HAL_RCC_OscConfig+0x1018>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b34:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003b38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d10b      	bne.n	8003b64 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b4c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003b50:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000

08003b78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b09e      	sub	sp, #120	@ 0x78
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e154      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b90:	4b89      	ldr	r3, [pc, #548]	@ (8003db8 <HAL_RCC_ClockConfig+0x240>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d910      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b86      	ldr	r3, [pc, #536]	@ (8003db8 <HAL_RCC_ClockConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 0207 	bic.w	r2, r3, #7
 8003ba6:	4984      	ldr	r1, [pc, #528]	@ (8003db8 <HAL_RCC_ClockConfig+0x240>)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b82      	ldr	r3, [pc, #520]	@ (8003db8 <HAL_RCC_ClockConfig+0x240>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e13c      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bcc:	4b7b      	ldr	r3, [pc, #492]	@ (8003dbc <HAL_RCC_ClockConfig+0x244>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4978      	ldr	r1, [pc, #480]	@ (8003dbc <HAL_RCC_ClockConfig+0x244>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80cd 	beq.w	8003d86 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d137      	bne.n	8003c64 <HAL_RCC_ClockConfig+0xec>
 8003bf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bfc:	fa93 f3a3 	rbit	r3, r3
 8003c00:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003c02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c04:	fab3 f383 	clz	r3, r3
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c0c:	d802      	bhi.n	8003c14 <HAL_RCC_ClockConfig+0x9c>
 8003c0e:	4b6b      	ldr	r3, [pc, #428]	@ (8003dbc <HAL_RCC_ClockConfig+0x244>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	e00f      	b.n	8003c34 <HAL_RCC_ClockConfig+0xbc>
 8003c14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c1c:	fa93 f3a3 	rbit	r3, r3
 8003c20:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c26:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c30:	4b62      	ldr	r3, [pc, #392]	@ (8003dbc <HAL_RCC_ClockConfig+0x244>)
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c38:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c3c:	fa92 f2a2 	rbit	r2, r2
 8003c40:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003c42:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c44:	fab2 f282 	clz	r2, r2
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	f042 0220 	orr.w	r2, r2, #32
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	f002 021f 	and.w	r2, r2, #31
 8003c54:	2101      	movs	r1, #1
 8003c56:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d171      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0ea      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d137      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x164>
 8003c6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c70:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c74:	fa93 f3a3 	rbit	r3, r3
 8003c78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003c7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7c:	fab3 f383 	clz	r3, r3
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c84:	d802      	bhi.n	8003c8c <HAL_RCC_ClockConfig+0x114>
 8003c86:	4b4d      	ldr	r3, [pc, #308]	@ (8003dbc <HAL_RCC_ClockConfig+0x244>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	e00f      	b.n	8003cac <HAL_RCC_ClockConfig+0x134>
 8003c8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c90:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ca8:	4b44      	ldr	r3, [pc, #272]	@ (8003dbc <HAL_RCC_ClockConfig+0x244>)
 8003caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cb0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003cb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cb4:	fa92 f2a2 	rbit	r2, r2
 8003cb8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003cba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cbc:	fab2 f282 	clz	r2, r2
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	f042 0220 	orr.w	r2, r2, #32
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	f002 021f 	and.w	r2, r2, #31
 8003ccc:	2101      	movs	r1, #1
 8003cce:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d135      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0ae      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2c2>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce2:	fa93 f3a3 	rbit	r3, r3
 8003ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cea:	fab3 f383 	clz	r3, r3
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b3f      	cmp	r3, #63	@ 0x3f
 8003cf2:	d802      	bhi.n	8003cfa <HAL_RCC_ClockConfig+0x182>
 8003cf4:	4b31      	ldr	r3, [pc, #196]	@ (8003dbc <HAL_RCC_ClockConfig+0x244>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	e00d      	b.n	8003d16 <HAL_RCC_ClockConfig+0x19e>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d00:	fa93 f3a3 	rbit	r3, r3
 8003d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d06:	2302      	movs	r3, #2
 8003d08:	623b      	str	r3, [r7, #32]
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	fa93 f3a3 	rbit	r3, r3
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	4b2a      	ldr	r3, [pc, #168]	@ (8003dbc <HAL_RCC_ClockConfig+0x244>)
 8003d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d16:	2202      	movs	r2, #2
 8003d18:	61ba      	str	r2, [r7, #24]
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	fa92 f2a2 	rbit	r2, r2
 8003d20:	617a      	str	r2, [r7, #20]
  return result;
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	fab2 f282 	clz	r2, r2
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	f042 0220 	orr.w	r2, r2, #32
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	f002 021f 	and.w	r2, r2, #31
 8003d34:	2101      	movs	r1, #1
 8003d36:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e07a      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d44:	4b1d      	ldr	r3, [pc, #116]	@ (8003dbc <HAL_RCC_ClockConfig+0x244>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f023 0203 	bic.w	r2, r3, #3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	491a      	ldr	r1, [pc, #104]	@ (8003dbc <HAL_RCC_ClockConfig+0x244>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d56:	f7fc fe31 	bl	80009bc <HAL_GetTick>
 8003d5a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5c:	e00a      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d5e:	f7fc fe2d 	bl	80009bc <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e062      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d74:	4b11      	ldr	r3, [pc, #68]	@ (8003dbc <HAL_RCC_ClockConfig+0x244>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 020c 	and.w	r2, r3, #12
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d1eb      	bne.n	8003d5e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d86:	4b0c      	ldr	r3, [pc, #48]	@ (8003db8 <HAL_RCC_ClockConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d215      	bcs.n	8003dc0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d94:	4b08      	ldr	r3, [pc, #32]	@ (8003db8 <HAL_RCC_ClockConfig+0x240>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f023 0207 	bic.w	r2, r3, #7
 8003d9c:	4906      	ldr	r1, [pc, #24]	@ (8003db8 <HAL_RCC_ClockConfig+0x240>)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da4:	4b04      	ldr	r3, [pc, #16]	@ (8003db8 <HAL_RCC_ClockConfig+0x240>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d006      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e041      	b.n	8003e3a <HAL_RCC_ClockConfig+0x2c2>
 8003db6:	bf00      	nop
 8003db8:	40022000 	.word	0x40022000
 8003dbc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e44 <HAL_RCC_ClockConfig+0x2cc>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	491a      	ldr	r1, [pc, #104]	@ (8003e44 <HAL_RCC_ClockConfig+0x2cc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dea:	4b16      	ldr	r3, [pc, #88]	@ (8003e44 <HAL_RCC_ClockConfig+0x2cc>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4912      	ldr	r1, [pc, #72]	@ (8003e44 <HAL_RCC_ClockConfig+0x2cc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003dfe:	f000 f829 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8003e02:	4601      	mov	r1, r0
 8003e04:	4b0f      	ldr	r3, [pc, #60]	@ (8003e44 <HAL_RCC_ClockConfig+0x2cc>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e0c:	22f0      	movs	r2, #240	@ 0xf0
 8003e0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	fa92 f2a2 	rbit	r2, r2
 8003e16:	60fa      	str	r2, [r7, #12]
  return result;
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	fab2 f282 	clz	r2, r2
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	40d3      	lsrs	r3, r2
 8003e22:	4a09      	ldr	r2, [pc, #36]	@ (8003e48 <HAL_RCC_ClockConfig+0x2d0>)
 8003e24:	5cd3      	ldrb	r3, [r2, r3]
 8003e26:	fa21 f303 	lsr.w	r3, r1, r3
 8003e2a:	4a08      	ldr	r2, [pc, #32]	@ (8003e4c <HAL_RCC_ClockConfig+0x2d4>)
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e2e:	4b08      	ldr	r3, [pc, #32]	@ (8003e50 <HAL_RCC_ClockConfig+0x2d8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fc fd7e 	bl	8000934 <HAL_InitTick>
  
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3778      	adds	r7, #120	@ 0x78
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40021000 	.word	0x40021000
 8003e48:	08009d1c 	.word	0x08009d1c
 8003e4c:	20000000 	.word	0x20000000
 8003e50:	20000004 	.word	0x20000004

08003e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	2300      	movs	r3, #0
 8003e68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d002      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x30>
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d003      	beq.n	8003e8a <HAL_RCC_GetSysClockFreq+0x36>
 8003e82:	e026      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e84:	4b19      	ldr	r3, [pc, #100]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x98>)
 8003e86:	613b      	str	r3, [r7, #16]
      break;
 8003e88:	e026      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	0c9b      	lsrs	r3, r3, #18
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	4a17      	ldr	r2, [pc, #92]	@ (8003ef0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e94:	5cd3      	ldrb	r3, [r2, r3]
 8003e96:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003e98:	4b13      	ldr	r3, [pc, #76]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	4a14      	ldr	r2, [pc, #80]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ea2:	5cd3      	ldrb	r3, [r2, r3]
 8003ea4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003eb0:	4a0e      	ldr	r2, [pc, #56]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x98>)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	e004      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a0c      	ldr	r2, [pc, #48]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
 8003eca:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	613b      	str	r3, [r7, #16]
      break;
 8003ed0:	e002      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ed2:	4b06      	ldr	r3, [pc, #24]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x98>)
 8003ed4:	613b      	str	r3, [r7, #16]
      break;
 8003ed6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ed8:	693b      	ldr	r3, [r7, #16]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	007a1200 	.word	0x007a1200
 8003ef0:	08009d2c 	.word	0x08009d2c
 8003ef4:	08009d3c 	.word	0x08009d3c
 8003ef8:	003d0900 	.word	0x003d0900

08003efc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b092      	sub	sp, #72	@ 0x48
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 80d2 	beq.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f20:	4b4d      	ldr	r3, [pc, #308]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10e      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f2c:	4b4a      	ldr	r3, [pc, #296]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	4a49      	ldr	r2, [pc, #292]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f36:	61d3      	str	r3, [r2, #28]
 8003f38:	4b47      	ldr	r3, [pc, #284]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4a:	4b44      	ldr	r3, [pc, #272]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d118      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f56:	4b41      	ldr	r3, [pc, #260]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a40      	ldr	r2, [pc, #256]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f62:	f7fc fd2b 	bl	80009bc <HAL_GetTick>
 8003f66:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f68:	e008      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6a:	f7fc fd27 	bl	80009bc <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b64      	cmp	r3, #100	@ 0x64
 8003f76:	d901      	bls.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e167      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7c:	4b37      	ldr	r3, [pc, #220]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f88:	4b33      	ldr	r3, [pc, #204]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 8082 	beq.w	800409e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d07a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003fb6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fba:	fa93 f3a3 	rbit	r3, r3
 8003fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fc2:	fab3 f383 	clz	r3, r3
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4b25      	ldr	r3, [pc, #148]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003fda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	4b1c      	ldr	r3, [pc, #112]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ffa:	4a17      	ldr	r2, [pc, #92]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ffe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d049      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400a:	f7fc fcd7 	bl	80009bc <HAL_GetTick>
 800400e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004010:	e00a      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004012:	f7fc fcd3 	bl	80009bc <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004020:	4293      	cmp	r3, r2
 8004022:	d901      	bls.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e111      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004028:	2302      	movs	r3, #2
 800402a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402e:	fa93 f3a3 	rbit	r3, r3
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24
 8004034:	2302      	movs	r3, #2
 8004036:	623b      	str	r3, [r7, #32]
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	61fb      	str	r3, [r7, #28]
  return result;
 8004040:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004042:	fab3 f383 	clz	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d108      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004052:	4b01      	ldr	r3, [pc, #4]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	e00d      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004058:	40021000 	.word	0x40021000
 800405c:	40007000 	.word	0x40007000
 8004060:	10908100 	.word	0x10908100
 8004064:	2302      	movs	r3, #2
 8004066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	fa93 f3a3 	rbit	r3, r3
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	4b78      	ldr	r3, [pc, #480]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	2202      	movs	r2, #2
 8004076:	613a      	str	r2, [r7, #16]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	fa92 f2a2 	rbit	r2, r2
 800407e:	60fa      	str	r2, [r7, #12]
  return result;
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	fab2 f282 	clz	r2, r2
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	f002 021f 	and.w	r2, r2, #31
 8004092:	2101      	movs	r1, #1
 8004094:	fa01 f202 	lsl.w	r2, r1, r2
 8004098:	4013      	ands	r3, r2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0b9      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800409e:	4b6d      	ldr	r3, [pc, #436]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	496a      	ldr	r1, [pc, #424]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d105      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b8:	4b66      	ldr	r3, [pc, #408]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	4a65      	ldr	r2, [pc, #404]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040d0:	4b60      	ldr	r3, [pc, #384]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d4:	f023 0203 	bic.w	r2, r3, #3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	495d      	ldr	r1, [pc, #372]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040ee:	4b59      	ldr	r3, [pc, #356]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	4956      	ldr	r1, [pc, #344]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800410c:	4b51      	ldr	r3, [pc, #324]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800410e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004110:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	494e      	ldr	r1, [pc, #312]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800411a:	4313      	orrs	r3, r2
 800411c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800412a:	4b4a      	ldr	r3, [pc, #296]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412e:	f023 0210 	bic.w	r2, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	4947      	ldr	r1, [pc, #284]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004138:	4313      	orrs	r3, r2
 800413a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004148:	4b42      	ldr	r3, [pc, #264]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004154:	493f      	ldr	r1, [pc, #252]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004156:	4313      	orrs	r3, r2
 8004158:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d008      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004166:	4b3b      	ldr	r3, [pc, #236]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416a:	f023 0220 	bic.w	r2, r3, #32
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	4938      	ldr	r1, [pc, #224]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004174:	4313      	orrs	r3, r2
 8004176:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004184:	4b33      	ldr	r3, [pc, #204]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004188:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	4930      	ldr	r1, [pc, #192]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004192:	4313      	orrs	r3, r2
 8004194:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d008      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	4929      	ldr	r1, [pc, #164]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041c0:	4b24      	ldr	r3, [pc, #144]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	4921      	ldr	r1, [pc, #132]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d008      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041de:	4b1d      	ldr	r3, [pc, #116]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ea:	491a      	ldr	r1, [pc, #104]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80041fc:	4b15      	ldr	r3, [pc, #84]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80041fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004200:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004208:	4912      	ldr	r1, [pc, #72]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800420a:	4313      	orrs	r3, r2
 800420c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d008      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800421a:	4b0e      	ldr	r3, [pc, #56]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004226:	490b      	ldr	r1, [pc, #44]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004228:	4313      	orrs	r3, r2
 800422a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004238:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800423a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004244:	4903      	ldr	r1, [pc, #12]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004246:	4313      	orrs	r3, r2
 8004248:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3748      	adds	r7, #72	@ 0x48
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40021000 	.word	0x40021000

08004258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e09d      	b.n	80043a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426e:	2b00      	cmp	r3, #0
 8004270:	d108      	bne.n	8004284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800427a:	d009      	beq.n	8004290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	61da      	str	r2, [r3, #28]
 8004282:	e005      	b.n	8004290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fc fa74 	bl	8000798 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042d0:	d902      	bls.n	80042d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	e002      	b.n	80042de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80042e6:	d007      	beq.n	80042f8 <HAL_SPI_Init+0xa0>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042f0:	d002      	beq.n	80042f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800433a:	ea42 0103 	orr.w	r1, r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004342:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	0c1b      	lsrs	r3, r3, #16
 8004354:	f003 0204 	and.w	r2, r3, #4
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004374:	ea42 0103 	orr.w	r1, r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004394:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043be:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80043c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043e4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80043e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	43db      	mvns	r3, r3
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	4013      	ands	r3, r2
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
	...

08004450 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004450:	b480      	push	{r7}
 8004452:	b09d      	sub	sp, #116	@ 0x74
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004476:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	78db      	ldrb	r3, [r3, #3]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d81f      	bhi.n	80044c2 <USB_ActivateEndpoint+0x72>
 8004482:	a201      	add	r2, pc, #4	@ (adr r2, 8004488 <USB_ActivateEndpoint+0x38>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	08004499 	.word	0x08004499
 800448c:	080044b5 	.word	0x080044b5
 8004490:	080044cb 	.word	0x080044cb
 8004494:	080044a7 	.word	0x080044a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004498:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800449c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80044a4:	e012      	b.n	80044cc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80044a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80044aa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80044ae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80044b2:	e00b      	b.n	80044cc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80044b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80044b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80044c0:	e004      	b.n	80044cc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80044c8:	e000      	b.n	80044cc <USB_ActivateEndpoint+0x7c>
      break;
 80044ca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80044da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	b21b      	sxth	r3, r3
 80044fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004506:	b21a      	sxth	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	b21b      	sxth	r3, r3
 800450e:	4313      	orrs	r3, r2
 8004510:	b21b      	sxth	r3, r3
 8004512:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	441a      	add	r2, r3
 8004520:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004524:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004528:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800452c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004534:	b29b      	uxth	r3, r3
 8004536:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	7b1b      	ldrb	r3, [r3, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f040 8178 	bne.w	8004832 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	785b      	ldrb	r3, [r3, #1]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8084 	beq.w	8004654 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004556:	b29b      	uxth	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	4413      	add	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	011a      	lsls	r2, r3, #4
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	88db      	ldrh	r3, [r3, #6]
 8004574:	085b      	lsrs	r3, r3, #1
 8004576:	b29b      	uxth	r3, r3
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	827b      	strh	r3, [r7, #18]
 800458e:	8a7b      	ldrh	r3, [r7, #18]
 8004590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01b      	beq.n	80045d0 <USB_ActivateEndpoint+0x180>
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ae:	823b      	strh	r3, [r7, #16]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	441a      	add	r2, r3
 80045ba:	8a3b      	ldrh	r3, [r7, #16]
 80045bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	78db      	ldrb	r3, [r3, #3]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d020      	beq.n	800461a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045ee:	81bb      	strh	r3, [r7, #12]
 80045f0:	89bb      	ldrh	r3, [r7, #12]
 80045f2:	f083 0320 	eor.w	r3, r3, #32
 80045f6:	81bb      	strh	r3, [r7, #12]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	441a      	add	r2, r3
 8004602:	89bb      	ldrh	r3, [r7, #12]
 8004604:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004608:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800460c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004614:	b29b      	uxth	r3, r3
 8004616:	8013      	strh	r3, [r2, #0]
 8004618:	e2d5      	b.n	8004bc6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	b29b      	uxth	r3, r3
 8004628:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800462c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004630:	81fb      	strh	r3, [r7, #14]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	441a      	add	r2, r3
 800463c:	89fb      	ldrh	r3, [r7, #14]
 800463e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004642:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800464a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800464e:	b29b      	uxth	r3, r3
 8004650:	8013      	strh	r3, [r2, #0]
 8004652:	e2b8      	b.n	8004bc6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	633b      	str	r3, [r7, #48]	@ 0x30
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800465e:	b29b      	uxth	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004664:	4413      	add	r3, r2
 8004666:	633b      	str	r3, [r7, #48]	@ 0x30
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	011a      	lsls	r2, r3, #4
 800466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004670:	4413      	add	r3, r2
 8004672:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004676:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	88db      	ldrh	r3, [r3, #6]
 800467c:	085b      	lsrs	r3, r3, #1
 800467e:	b29b      	uxth	r3, r3
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004686:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004692:	b29b      	uxth	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	4413      	add	r3, r2
 800469a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	011a      	lsls	r2, r3, #4
 80046a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a4:	4413      	add	r3, r2
 80046a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	801a      	strh	r2, [r3, #0]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <USB_ActivateEndpoint+0x28a>
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	801a      	strh	r2, [r3, #0]
 80046d8:	e039      	b.n	800474e <USB_ActivateEndpoint+0x2fe>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b3e      	cmp	r3, #62	@ 0x3e
 80046e0:	d818      	bhi.n	8004714 <USB_ActivateEndpoint+0x2c4>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	085b      	lsrs	r3, r3, #1
 80046e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <USB_ActivateEndpoint+0x2ac>
 80046f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046f8:	3301      	adds	r3, #1
 80046fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29a      	uxth	r2, r3
 8004702:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004704:	b29b      	uxth	r3, r3
 8004706:	029b      	lsls	r3, r3, #10
 8004708:	b29b      	uxth	r3, r3
 800470a:	4313      	orrs	r3, r2
 800470c:	b29a      	uxth	r2, r3
 800470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004710:	801a      	strh	r2, [r3, #0]
 8004712:	e01c      	b.n	800474e <USB_ActivateEndpoint+0x2fe>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	2b00      	cmp	r3, #0
 8004726:	d102      	bne.n	800472e <USB_ActivateEndpoint+0x2de>
 8004728:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800472a:	3b01      	subs	r3, #1
 800472c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b29a      	uxth	r2, r3
 8004734:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004736:	b29b      	uxth	r3, r3
 8004738:	029b      	lsls	r3, r3, #10
 800473a:	b29b      	uxth	r3, r3
 800473c:	4313      	orrs	r3, r2
 800473e:	b29b      	uxth	r3, r3
 8004740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004748:	b29a      	uxth	r2, r3
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800475c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800475e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d01b      	beq.n	800479e <USB_ActivateEndpoint+0x34e>
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	b29b      	uxth	r3, r3
 8004774:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800477c:	843b      	strh	r3, [r7, #32]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	441a      	add	r2, r3
 8004788:	8c3b      	ldrh	r3, [r7, #32]
 800478a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800478e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004792:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800479a:	b29b      	uxth	r3, r3
 800479c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d124      	bne.n	80047f0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047bc:	83bb      	strh	r3, [r7, #28]
 80047be:	8bbb      	ldrh	r3, [r7, #28]
 80047c0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80047c4:	83bb      	strh	r3, [r7, #28]
 80047c6:	8bbb      	ldrh	r3, [r7, #28]
 80047c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80047cc:	83bb      	strh	r3, [r7, #28]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	441a      	add	r2, r3
 80047d8:	8bbb      	ldrh	r3, [r7, #28]
 80047da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	8013      	strh	r3, [r2, #0]
 80047ee:	e1ea      	b.n	8004bc6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004806:	83fb      	strh	r3, [r7, #30]
 8004808:	8bfb      	ldrh	r3, [r7, #30]
 800480a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800480e:	83fb      	strh	r3, [r7, #30]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	441a      	add	r2, r3
 800481a:	8bfb      	ldrh	r3, [r7, #30]
 800481c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004820:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004824:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800482c:	b29b      	uxth	r3, r3
 800482e:	8013      	strh	r3, [r2, #0]
 8004830:	e1c9      	b.n	8004bc6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	78db      	ldrb	r3, [r3, #3]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d11e      	bne.n	8004878 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800484c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004850:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	441a      	add	r2, r3
 800485e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004862:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004866:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800486a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800486e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004872:	b29b      	uxth	r3, r3
 8004874:	8013      	strh	r3, [r2, #0]
 8004876:	e01d      	b.n	80048b4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800488a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800488e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	441a      	add	r2, r3
 800489c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80048a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048be:	b29b      	uxth	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048c4:	4413      	add	r3, r2
 80048c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	011a      	lsls	r2, r3, #4
 80048ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80048d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	891b      	ldrh	r3, [r3, #8]
 80048dc:	085b      	lsrs	r3, r3, #1
 80048de:	b29b      	uxth	r3, r3
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	461a      	mov	r2, r3
 80048f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f8:	4413      	add	r3, r2
 80048fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	011a      	lsls	r2, r3, #4
 8004902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004904:	4413      	add	r3, r2
 8004906:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800490a:	653b      	str	r3, [r7, #80]	@ 0x50
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	895b      	ldrh	r3, [r3, #10]
 8004910:	085b      	lsrs	r3, r3, #1
 8004912:	b29b      	uxth	r3, r3
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800491a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	785b      	ldrb	r3, [r3, #1]
 8004920:	2b00      	cmp	r3, #0
 8004922:	f040 8093 	bne.w	8004a4c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004936:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800493a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01b      	beq.n	800497a <USB_ActivateEndpoint+0x52a>
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	b29b      	uxth	r3, r3
 8004950:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004954:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004958:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	441a      	add	r2, r3
 8004964:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004966:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800496a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800496e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004976:	b29b      	uxth	r3, r3
 8004978:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004988:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800498a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	d01b      	beq.n	80049ca <USB_ActivateEndpoint+0x57a>
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	441a      	add	r2, r3
 80049b4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80049b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e0:	873b      	strh	r3, [r7, #56]	@ 0x38
 80049e2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80049e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80049e8:	873b      	strh	r3, [r7, #56]	@ 0x38
 80049ea:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80049ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80049f0:	873b      	strh	r3, [r7, #56]	@ 0x38
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	441a      	add	r2, r3
 80049fc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80049fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a28:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	441a      	add	r2, r3
 8004a34:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004a36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	8013      	strh	r3, [r2, #0]
 8004a4a:	e0bc      	b.n	8004bc6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004a5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004a60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01d      	beq.n	8004aa4 <USB_ActivateEndpoint+0x654>
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	441a      	add	r2, r3
 8004a8c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004a90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004ab4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01d      	beq.n	8004afc <USB_ActivateEndpoint+0x6ac>
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	441a      	add	r2, r3
 8004ae4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004ae8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004af4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	78db      	ldrb	r3, [r3, #3]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d024      	beq.n	8004b4e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b1a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004b1e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004b22:	f083 0320 	eor.w	r3, r3, #32
 8004b26:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	441a      	add	r2, r3
 8004b34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	8013      	strh	r3, [r2, #0]
 8004b4c:	e01d      	b.n	8004b8a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b64:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	441a      	add	r2, r3
 8004b72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004b76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	441a      	add	r2, r3
 8004bae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004bb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004bc6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3774      	adds	r7, #116	@ 0x74
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop

08004bd8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b08d      	sub	sp, #52	@ 0x34
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	7b1b      	ldrb	r3, [r3, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f040 808e 	bne.w	8004d08 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	785b      	ldrb	r3, [r3, #1]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d044      	beq.n	8004c7e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	81bb      	strh	r3, [r7, #12]
 8004c02:	89bb      	ldrh	r3, [r7, #12]
 8004c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01b      	beq.n	8004c44 <USB_DeactivateEndpoint+0x6c>
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c22:	817b      	strh	r3, [r7, #10]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	441a      	add	r2, r3
 8004c2e:	897b      	ldrh	r3, [r7, #10]
 8004c30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c5a:	813b      	strh	r3, [r7, #8]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	441a      	add	r2, r3
 8004c66:	893b      	ldrh	r3, [r7, #8]
 8004c68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	8013      	strh	r3, [r2, #0]
 8004c7c:	e192      	b.n	8004fa4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	827b      	strh	r3, [r7, #18]
 8004c8c:	8a7b      	ldrh	r3, [r7, #18]
 8004c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01b      	beq.n	8004cce <USB_DeactivateEndpoint+0xf6>
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cac:	823b      	strh	r3, [r7, #16]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	441a      	add	r2, r3
 8004cb8:	8a3b      	ldrh	r3, [r7, #16]
 8004cba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce4:	81fb      	strh	r3, [r7, #14]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	441a      	add	r2, r3
 8004cf0:	89fb      	ldrh	r3, [r7, #14]
 8004cf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	8013      	strh	r3, [r2, #0]
 8004d06:	e14d      	b.n	8004fa4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	785b      	ldrb	r3, [r3, #1]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f040 80a5 	bne.w	8004e5c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	843b      	strh	r3, [r7, #32]
 8004d20:	8c3b      	ldrh	r3, [r7, #32]
 8004d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d01b      	beq.n	8004d62 <USB_DeactivateEndpoint+0x18a>
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d40:	83fb      	strh	r3, [r7, #30]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	441a      	add	r2, r3
 8004d4c:	8bfb      	ldrh	r3, [r7, #30]
 8004d4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	83bb      	strh	r3, [r7, #28]
 8004d70:	8bbb      	ldrh	r3, [r7, #28]
 8004d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d01b      	beq.n	8004db2 <USB_DeactivateEndpoint+0x1da>
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d90:	837b      	strh	r3, [r7, #26]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	441a      	add	r2, r3
 8004d9c:	8b7b      	ldrh	r3, [r7, #26]
 8004d9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004da2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004da6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004daa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc8:	833b      	strh	r3, [r7, #24]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	441a      	add	r2, r3
 8004dd4:	8b3b      	ldrh	r3, [r7, #24]
 8004dd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004de2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e00:	82fb      	strh	r3, [r7, #22]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	441a      	add	r2, r3
 8004e0c:	8afb      	ldrh	r3, [r7, #22]
 8004e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e38:	82bb      	strh	r3, [r7, #20]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	441a      	add	r2, r3
 8004e44:	8abb      	ldrh	r3, [r7, #20]
 8004e46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	8013      	strh	r3, [r2, #0]
 8004e5a:	e0a3      	b.n	8004fa4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004e6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004e6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01b      	beq.n	8004eac <USB_DeactivateEndpoint+0x2d4>
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e8a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004e98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ea0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004eba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01b      	beq.n	8004efc <USB_DeactivateEndpoint+0x324>
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eda:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	441a      	add	r2, r3
 8004ee6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004ee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ef4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f12:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	441a      	add	r2, r3
 8004f1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004f20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f4a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	441a      	add	r2, r3
 8004f56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f82:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004f90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3734      	adds	r7, #52	@ 0x34
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b0c2      	sub	sp, #264	@ 0x108
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fc0:	6018      	str	r0, [r3, #0]
 8004fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fca:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	785b      	ldrb	r3, [r3, #1]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	f040 86b7 	bne.w	8005d4c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d908      	bls.n	800500c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800500a:	e007      	b.n	800501c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800500c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800501c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	7b1b      	ldrb	r3, [r3, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d13a      	bne.n	80050a2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800502c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6959      	ldr	r1, [r3, #20]
 8005038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800503c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	88da      	ldrh	r2, [r3, #6]
 8005044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005048:	b29b      	uxth	r3, r3
 800504a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800504e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005052:	6800      	ldr	r0, [r0, #0]
 8005054:	f001 fc8d 	bl	8006972 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800505c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005068:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005072:	b29b      	uxth	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4413      	add	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	011a      	lsls	r2, r3, #4
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4413      	add	r3, r2
 800508e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	801a      	strh	r2, [r3, #0]
 800509e:	f000 be1f 	b.w	8005ce0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80050a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	78db      	ldrb	r3, [r3, #3]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	f040 8462 	bne.w	8005978 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80050b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6a1a      	ldr	r2, [r3, #32]
 80050c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	f240 83df 	bls.w	8005890 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80050d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80050fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005100:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800510a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	441a      	add	r2, r3
 8005116:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800511a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800511e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005122:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800512a:	b29b      	uxth	r3, r3
 800512c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800512e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005132:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6a1a      	ldr	r2, [r3, #32]
 800513a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800513e:	1ad2      	subs	r2, r2, r3
 8005140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800514c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005150:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800515a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29b      	uxth	r3, r3
 800516a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 81c7 	beq.w	8005502 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005178:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	785b      	ldrb	r3, [r3, #1]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d177      	bne.n	8005280 <USB_EPStartXfer+0x2ce>
 8005190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005194:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800519c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b0:	4413      	add	r3, r2
 80051b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	011a      	lsls	r2, r3, #4
 80051c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c4:	4413      	add	r3, r2
 80051c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80051cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051da:	801a      	strh	r2, [r3, #0]
 80051dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10a      	bne.n	80051fa <USB_EPStartXfer+0x248>
 80051e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f6:	801a      	strh	r2, [r3, #0]
 80051f8:	e067      	b.n	80052ca <USB_EPStartXfer+0x318>
 80051fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8005200:	d81c      	bhi.n	800523c <USB_EPStartXfer+0x28a>
 8005202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005206:	085b      	lsrs	r3, r3, #1
 8005208:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800520c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d004      	beq.n	8005222 <USB_EPStartXfer+0x270>
 8005218:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800521c:	3301      	adds	r3, #1
 800521e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29a      	uxth	r2, r3
 8005228:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800522c:	b29b      	uxth	r3, r3
 800522e:	029b      	lsls	r3, r3, #10
 8005230:	b29b      	uxth	r3, r3
 8005232:	4313      	orrs	r3, r2
 8005234:	b29a      	uxth	r2, r3
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	801a      	strh	r2, [r3, #0]
 800523a:	e046      	b.n	80052ca <USB_EPStartXfer+0x318>
 800523c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800524a:	f003 031f 	and.w	r3, r3, #31
 800524e:	2b00      	cmp	r3, #0
 8005250:	d104      	bne.n	800525c <USB_EPStartXfer+0x2aa>
 8005252:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005256:	3b01      	subs	r3, #1
 8005258:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	b29a      	uxth	r2, r3
 8005262:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005266:	b29b      	uxth	r3, r3
 8005268:	029b      	lsls	r3, r3, #10
 800526a:	b29b      	uxth	r3, r3
 800526c:	4313      	orrs	r3, r2
 800526e:	b29b      	uxth	r3, r3
 8005270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005278:	b29a      	uxth	r2, r3
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	801a      	strh	r2, [r3, #0]
 800527e:	e024      	b.n	80052ca <USB_EPStartXfer+0x318>
 8005280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	785b      	ldrb	r3, [r3, #1]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d11c      	bne.n	80052ca <USB_EPStartXfer+0x318>
 8005290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005294:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800529e:	b29b      	uxth	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a4:	4413      	add	r3, r2
 80052a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80052a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	011a      	lsls	r2, r3, #4
 80052b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b8:	4413      	add	r3, r2
 80052ba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80052ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	895b      	ldrh	r3, [r3, #10]
 80052d6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6959      	ldr	r1, [r3, #20]
 80052e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80052f0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80052f4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80052f8:	6800      	ldr	r0, [r0, #0]
 80052fa:	f001 fb3a 	bl	8006972 <USB_WritePMA>
            ep->xfer_buff += len;
 80052fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695a      	ldr	r2, [r3, #20]
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530e:	441a      	add	r2, r3
 8005310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800531c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6a1a      	ldr	r2, [r3, #32]
 8005328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800532c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	429a      	cmp	r2, r3
 8005336:	d90f      	bls.n	8005358 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800533c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6a1a      	ldr	r2, [r3, #32]
 8005344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005348:	1ad2      	subs	r2, r2, r3
 800534a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	621a      	str	r2, [r3, #32]
 8005356:	e00e      	b.n	8005376 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800536c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2200      	movs	r2, #0
 8005374:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800537a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	785b      	ldrb	r3, [r3, #1]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d177      	bne.n	8005476 <USB_EPStartXfer+0x4c4>
 8005386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005396:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	461a      	mov	r2, r3
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	4413      	add	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	011a      	lsls	r2, r3, #4
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	4413      	add	r3, r2
 80053bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10a      	bne.n	80053f0 <USB_EPStartXfer+0x43e>
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	e06d      	b.n	80054cc <USB_EPStartXfer+0x51a>
 80053f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80053f6:	d81c      	bhi.n	8005432 <USB_EPStartXfer+0x480>
 80053f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053fc:	085b      	lsrs	r3, r3, #1
 80053fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d004      	beq.n	8005418 <USB_EPStartXfer+0x466>
 800540e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005412:	3301      	adds	r3, #1
 8005414:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29a      	uxth	r2, r3
 800541e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005422:	b29b      	uxth	r3, r3
 8005424:	029b      	lsls	r3, r3, #10
 8005426:	b29b      	uxth	r3, r3
 8005428:	4313      	orrs	r3, r2
 800542a:	b29a      	uxth	r2, r3
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	801a      	strh	r2, [r3, #0]
 8005430:	e04c      	b.n	80054cc <USB_EPStartXfer+0x51a>
 8005432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800543c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <USB_EPStartXfer+0x4a0>
 8005448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800544c:	3b01      	subs	r3, #1
 800544e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29a      	uxth	r2, r3
 8005458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800545c:	b29b      	uxth	r3, r3
 800545e:	029b      	lsls	r3, r3, #10
 8005460:	b29b      	uxth	r3, r3
 8005462:	4313      	orrs	r3, r2
 8005464:	b29b      	uxth	r3, r3
 8005466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800546a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800546e:	b29a      	uxth	r2, r3
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	801a      	strh	r2, [r3, #0]
 8005474:	e02a      	b.n	80054cc <USB_EPStartXfer+0x51a>
 8005476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	785b      	ldrb	r3, [r3, #1]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d122      	bne.n	80054cc <USB_EPStartXfer+0x51a>
 8005486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	623b      	str	r3, [r7, #32]
 8005492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005496:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	461a      	mov	r2, r3
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	4413      	add	r3, r2
 80054a8:	623b      	str	r3, [r7, #32]
 80054aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	011a      	lsls	r2, r3, #4
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	4413      	add	r3, r2
 80054bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054c0:	61fb      	str	r3, [r7, #28]
 80054c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	891b      	ldrh	r3, [r3, #8]
 80054d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6959      	ldr	r1, [r3, #20]
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80054f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80054f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80054fa:	6800      	ldr	r0, [r0, #0]
 80054fc:	f001 fa39 	bl	8006972 <USB_WritePMA>
 8005500:	e3ee      	b.n	8005ce0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	785b      	ldrb	r3, [r3, #1]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d177      	bne.n	8005602 <USB_EPStartXfer+0x650>
 8005512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005516:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800551e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005522:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800552c:	b29b      	uxth	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005532:	4413      	add	r3, r2
 8005534:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800553a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	011a      	lsls	r2, r3, #4
 8005544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005546:	4413      	add	r3, r2
 8005548:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800554c:	647b      	str	r3, [r7, #68]	@ 0x44
 800554e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005558:	b29a      	uxth	r2, r3
 800555a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800555c:	801a      	strh	r2, [r3, #0]
 800555e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <USB_EPStartXfer+0x5ca>
 8005566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	b29b      	uxth	r3, r3
 800556c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005574:	b29a      	uxth	r2, r3
 8005576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	e06d      	b.n	8005658 <USB_EPStartXfer+0x6a6>
 800557c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005580:	2b3e      	cmp	r3, #62	@ 0x3e
 8005582:	d81c      	bhi.n	80055be <USB_EPStartXfer+0x60c>
 8005584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005588:	085b      	lsrs	r3, r3, #1
 800558a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800558e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d004      	beq.n	80055a4 <USB_EPStartXfer+0x5f2>
 800559a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800559e:	3301      	adds	r3, #1
 80055a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80055a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	029b      	lsls	r3, r3, #10
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	4313      	orrs	r3, r2
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ba:	801a      	strh	r2, [r3, #0]
 80055bc:	e04c      	b.n	8005658 <USB_EPStartXfer+0x6a6>
 80055be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80055c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d104      	bne.n	80055de <USB_EPStartXfer+0x62c>
 80055d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055d8:	3b01      	subs	r3, #1
 80055da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80055de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	029b      	lsls	r3, r3, #10
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	4313      	orrs	r3, r2
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055fe:	801a      	strh	r2, [r3, #0]
 8005600:	e02a      	b.n	8005658 <USB_EPStartXfer+0x6a6>
 8005602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	785b      	ldrb	r3, [r3, #1]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d122      	bne.n	8005658 <USB_EPStartXfer+0x6a6>
 8005612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005616:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	653b      	str	r3, [r7, #80]	@ 0x50
 800561e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005622:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800562c:	b29b      	uxth	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005632:	4413      	add	r3, r2
 8005634:	653b      	str	r3, [r7, #80]	@ 0x50
 8005636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800563a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	011a      	lsls	r2, r3, #4
 8005644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005646:	4413      	add	r3, r2
 8005648:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800564c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800564e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005652:	b29a      	uxth	r2, r3
 8005654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005656:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800565c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	891b      	ldrh	r3, [r3, #8]
 8005664:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800566c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6959      	ldr	r1, [r3, #20]
 8005674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005678:	b29b      	uxth	r3, r3
 800567a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800567e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005682:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005686:	6800      	ldr	r0, [r0, #0]
 8005688:	f001 f973 	bl	8006972 <USB_WritePMA>
            ep->xfer_buff += len;
 800568c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695a      	ldr	r2, [r3, #20]
 8005698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569c:	441a      	add	r2, r3
 800569e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80056aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6a1a      	ldr	r2, [r3, #32]
 80056b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d90f      	bls.n	80056e6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80056c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6a1a      	ldr	r2, [r3, #32]
 80056d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d6:	1ad2      	subs	r2, r2, r3
 80056d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	621a      	str	r2, [r3, #32]
 80056e4:	e00e      	b.n	8005704 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80056e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80056f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2200      	movs	r2, #0
 8005702:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005708:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	785b      	ldrb	r3, [r3, #1]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d177      	bne.n	8005810 <USB_EPStartXfer+0x85e>
 8005720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005724:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800572c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005730:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800573a:	b29b      	uxth	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005740:	4413      	add	r3, r2
 8005742:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	011a      	lsls	r2, r3, #4
 8005752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005754:	4413      	add	r3, r2
 8005756:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800575a:	637b      	str	r3, [r7, #52]	@ 0x34
 800575c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	b29b      	uxth	r3, r3
 8005762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005766:	b29a      	uxth	r2, r3
 8005768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10a      	bne.n	800578a <USB_EPStartXfer+0x7d8>
 8005774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800577e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005782:	b29a      	uxth	r2, r3
 8005784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005786:	801a      	strh	r2, [r3, #0]
 8005788:	e067      	b.n	800585a <USB_EPStartXfer+0x8a8>
 800578a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800578e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005790:	d81c      	bhi.n	80057cc <USB_EPStartXfer+0x81a>
 8005792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005796:	085b      	lsrs	r3, r3, #1
 8005798:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800579c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d004      	beq.n	80057b2 <USB_EPStartXfer+0x800>
 80057a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ac:	3301      	adds	r3, #1
 80057ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80057b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057bc:	b29b      	uxth	r3, r3
 80057be:	029b      	lsls	r3, r3, #10
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	4313      	orrs	r3, r2
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c8:	801a      	strh	r2, [r3, #0]
 80057ca:	e046      	b.n	800585a <USB_EPStartXfer+0x8a8>
 80057cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80057d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d104      	bne.n	80057ec <USB_EPStartXfer+0x83a>
 80057e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e6:	3b01      	subs	r3, #1
 80057e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80057ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	029b      	lsls	r3, r3, #10
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	4313      	orrs	r3, r2
 80057fe:	b29b      	uxth	r3, r3
 8005800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005808:	b29a      	uxth	r2, r3
 800580a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	e024      	b.n	800585a <USB_EPStartXfer+0x8a8>
 8005810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d11c      	bne.n	800585a <USB_EPStartXfer+0x8a8>
 8005820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005824:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800582e:	b29b      	uxth	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005834:	4413      	add	r3, r2
 8005836:	643b      	str	r3, [r7, #64]	@ 0x40
 8005838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	011a      	lsls	r2, r3, #4
 8005846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005848:	4413      	add	r3, r2
 800584a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800584e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005854:	b29a      	uxth	r2, r3
 8005856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005858:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800585a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	895b      	ldrh	r3, [r3, #10]
 8005866:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800586a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800586e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6959      	ldr	r1, [r3, #20]
 8005876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587a:	b29b      	uxth	r3, r3
 800587c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005880:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005884:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005888:	6800      	ldr	r0, [r0, #0]
 800588a:	f001 f872 	bl	8006972 <USB_WritePMA>
 800588e:	e227      	b.n	8005ce0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80058a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80058c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80058ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	441a      	add	r2, r3
 80058e4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80058e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005900:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005916:	b29b      	uxth	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800591c:	4413      	add	r3, r2
 800591e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	011a      	lsls	r2, r3, #4
 800592e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005930:	4413      	add	r3, r2
 8005932:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005936:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800593c:	b29a      	uxth	r2, r3
 800593e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005940:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	891b      	ldrh	r3, [r3, #8]
 800594e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6959      	ldr	r1, [r3, #20]
 800595e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005962:	b29b      	uxth	r3, r3
 8005964:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005968:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800596c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005970:	6800      	ldr	r0, [r0, #0]
 8005972:	f000 fffe 	bl	8006972 <USB_WritePMA>
 8005976:	e1b3      	b.n	8005ce0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800597c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6a1a      	ldr	r2, [r3, #32]
 8005984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005988:	1ad2      	subs	r2, r2, r3
 800598a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 80c6 	beq.w	8005b4a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80059ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d177      	bne.n	8005aca <USB_EPStartXfer+0xb18>
 80059da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	461a      	mov	r2, r3
 80059f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059fa:	4413      	add	r3, r2
 80059fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	011a      	lsls	r2, r3, #4
 8005a0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a0e:	4413      	add	r3, r2
 8005a10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a14:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a24:	801a      	strh	r2, [r3, #0]
 8005a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <USB_EPStartXfer+0xa92>
 8005a2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a40:	801a      	strh	r2, [r3, #0]
 8005a42:	e067      	b.n	8005b14 <USB_EPStartXfer+0xb62>
 8005a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a48:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a4a:	d81c      	bhi.n	8005a86 <USB_EPStartXfer+0xad4>
 8005a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a50:	085b      	lsrs	r3, r3, #1
 8005a52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d004      	beq.n	8005a6c <USB_EPStartXfer+0xaba>
 8005a62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005a66:	3301      	adds	r3, #1
 8005a68:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	029b      	lsls	r3, r3, #10
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a82:	801a      	strh	r2, [r3, #0]
 8005a84:	e046      	b.n	8005b14 <USB_EPStartXfer+0xb62>
 8005a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <USB_EPStartXfer+0xaf4>
 8005a9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005aa6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	029b      	lsls	r3, r3, #10
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ac6:	801a      	strh	r2, [r3, #0]
 8005ac8:	e024      	b.n	8005b14 <USB_EPStartXfer+0xb62>
 8005aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	785b      	ldrb	r3, [r3, #1]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d11c      	bne.n	8005b14 <USB_EPStartXfer+0xb62>
 8005ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ade:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	461a      	mov	r2, r3
 8005aec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005aee:	4413      	add	r3, r2
 8005af0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	011a      	lsls	r2, r3, #4
 8005b00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b02:	4413      	add	r3, r2
 8005b04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b08:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	895b      	ldrh	r3, [r3, #10]
 8005b20:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6959      	ldr	r1, [r3, #20]
 8005b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b3a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b3e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b42:	6800      	ldr	r0, [r0, #0]
 8005b44:	f000 ff15 	bl	8006972 <USB_WritePMA>
 8005b48:	e0ca      	b.n	8005ce0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	785b      	ldrb	r3, [r3, #1]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d177      	bne.n	8005c4a <USB_EPStartXfer+0xc98>
 8005b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b7a:	4413      	add	r3, r2
 8005b7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	011a      	lsls	r2, r3, #4
 8005b8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b8e:	4413      	add	r3, r2
 8005b90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <USB_EPStartXfer+0xc12>
 8005bae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bc0:	801a      	strh	r2, [r3, #0]
 8005bc2:	e073      	b.n	8005cac <USB_EPStartXfer+0xcfa>
 8005bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005bca:	d81c      	bhi.n	8005c06 <USB_EPStartXfer+0xc54>
 8005bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd0:	085b      	lsrs	r3, r3, #1
 8005bd2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d004      	beq.n	8005bec <USB_EPStartXfer+0xc3a>
 8005be2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005be6:	3301      	adds	r3, #1
 8005be8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005bec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	029b      	lsls	r3, r3, #10
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c02:	801a      	strh	r2, [r3, #0]
 8005c04:	e052      	b.n	8005cac <USB_EPStartXfer+0xcfa>
 8005c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c14:	f003 031f 	and.w	r3, r3, #31
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d104      	bne.n	8005c26 <USB_EPStartXfer+0xc74>
 8005c1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005c20:	3b01      	subs	r3, #1
 8005c22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	029b      	lsls	r3, r3, #10
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	4313      	orrs	r3, r2
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c46:	801a      	strh	r2, [r3, #0]
 8005c48:	e030      	b.n	8005cac <USB_EPStartXfer+0xcfa>
 8005c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	785b      	ldrb	r3, [r3, #1]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d128      	bne.n	8005cac <USB_EPStartXfer+0xcfa>
 8005c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c7e:	4413      	add	r3, r2
 8005c80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	011a      	lsls	r2, r3, #4
 8005c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c96:	4413      	add	r3, r2
 8005c98:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005caa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	891b      	ldrh	r3, [r3, #8]
 8005cb8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6959      	ldr	r1, [r3, #20]
 8005cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005cd2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005cd6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005cda:	6800      	ldr	r0, [r0, #0]
 8005cdc:	f000 fe49 	bl	8006972 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d06:	817b      	strh	r3, [r7, #10]
 8005d08:	897b      	ldrh	r3, [r7, #10]
 8005d0a:	f083 0310 	eor.w	r3, r3, #16
 8005d0e:	817b      	strh	r3, [r7, #10]
 8005d10:	897b      	ldrh	r3, [r7, #10]
 8005d12:	f083 0320 	eor.w	r3, r3, #32
 8005d16:	817b      	strh	r3, [r7, #10]
 8005d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	441a      	add	r2, r3
 8005d32:	897b      	ldrh	r3, [r7, #10]
 8005d34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	8013      	strh	r3, [r2, #0]
 8005d48:	f000 bcdf 	b.w	800670a <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	7b1b      	ldrb	r3, [r3, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f040 80bc 	bne.w	8005ed6 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699a      	ldr	r2, [r3, #24]
 8005d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d917      	bls.n	8005daa <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d9a:	1ad2      	subs	r2, r2, r3
 8005d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	619a      	str	r2, [r3, #24]
 8005da8:	e00e      	b.n	8005dc8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005dec:	4413      	add	r3, r2
 8005dee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	011a      	lsls	r2, r3, #4
 8005e00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e04:	4413      	add	r3, r2
 8005e06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e20:	801a      	strh	r2, [r3, #0]
 8005e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10d      	bne.n	8005e46 <USB_EPStartXfer+0xe94>
 8005e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e40:	801a      	strh	r2, [r3, #0]
 8005e42:	f000 bc28 	b.w	8006696 <USB_EPStartXfer+0x16e4>
 8005e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e4c:	d81f      	bhi.n	8005e8e <USB_EPStartXfer+0xedc>
 8005e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d004      	beq.n	8005e6e <USB_EPStartXfer+0xebc>
 8005e64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005e68:	3301      	adds	r3, #1
 8005e6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	029b      	lsls	r3, r3, #10
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	4313      	orrs	r3, r2
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e88:	801a      	strh	r2, [r3, #0]
 8005e8a:	f000 bc04 	b.w	8006696 <USB_EPStartXfer+0x16e4>
 8005e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9c:	f003 031f 	and.w	r3, r3, #31
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d104      	bne.n	8005eae <USB_EPStartXfer+0xefc>
 8005ea4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	029b      	lsls	r3, r3, #10
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ed2:	801a      	strh	r2, [r3, #0]
 8005ed4:	e3df      	b.n	8006696 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	78db      	ldrb	r3, [r3, #3]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	f040 8218 	bne.w	8006318 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	785b      	ldrb	r3, [r3, #1]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f040 809d 	bne.w	8006034 <USB_EPStartXfer+0x1082>
 8005efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f1e:	4413      	add	r3, r2
 8005f20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	011a      	lsls	r2, r3, #4
 8005f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f36:	4413      	add	r3, r2
 8005f38:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f52:	801a      	strh	r2, [r3, #0]
 8005f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10c      	bne.n	8005f7e <USB_EPStartXfer+0xfcc>
 8005f64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f7a:	801a      	strh	r2, [r3, #0]
 8005f7c:	e08f      	b.n	800609e <USB_EPStartXfer+0x10ec>
 8005f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f8c:	d826      	bhi.n	8005fdc <USB_EPStartXfer+0x102a>
 8005f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	085b      	lsrs	r3, r3, #1
 8005f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d004      	beq.n	8005fbe <USB_EPStartXfer+0x100c>
 8005fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fb8:	3301      	adds	r3, #1
 8005fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	029b      	lsls	r3, r3, #10
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005fd8:	801a      	strh	r2, [r3, #0]
 8005fda:	e060      	b.n	800609e <USB_EPStartXfer+0x10ec>
 8005fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d104      	bne.n	800600c <USB_EPStartXfer+0x105a>
 8006002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006006:	3b01      	subs	r3, #1
 8006008:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800600c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29a      	uxth	r2, r3
 8006014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006018:	b29b      	uxth	r3, r3
 800601a:	029b      	lsls	r3, r3, #10
 800601c:	b29b      	uxth	r3, r3
 800601e:	4313      	orrs	r3, r2
 8006020:	b29b      	uxth	r3, r3
 8006022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800602a:	b29a      	uxth	r2, r3
 800602c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006030:	801a      	strh	r2, [r3, #0]
 8006032:	e034      	b.n	800609e <USB_EPStartXfer+0x10ec>
 8006034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d12c      	bne.n	800609e <USB_EPStartXfer+0x10ec>
 8006044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006048:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006060:	b29b      	uxth	r3, r3
 8006062:	461a      	mov	r2, r3
 8006064:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006068:	4413      	add	r3, r2
 800606a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800606e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	011a      	lsls	r2, r3, #4
 800607c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006080:	4413      	add	r3, r2
 8006082:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006086:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800608a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	b29a      	uxth	r2, r3
 8006098:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800609c:	801a      	strh	r2, [r3, #0]
 800609e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f040 809d 	bne.w	80061f8 <USB_EPStartXfer+0x1246>
 80060be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060da:	b29b      	uxth	r3, r3
 80060dc:	461a      	mov	r2, r3
 80060de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060e2:	4413      	add	r3, r2
 80060e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	011a      	lsls	r2, r3, #4
 80060f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060fa:	4413      	add	r3, r2
 80060fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006110:	b29a      	uxth	r2, r3
 8006112:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006116:	801a      	strh	r2, [r3, #0]
 8006118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800611c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10c      	bne.n	8006142 <USB_EPStartXfer+0x1190>
 8006128:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006138:	b29a      	uxth	r2, r3
 800613a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	e088      	b.n	8006254 <USB_EPStartXfer+0x12a2>
 8006142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006150:	d826      	bhi.n	80061a0 <USB_EPStartXfer+0x11ee>
 8006152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	085b      	lsrs	r3, r3, #1
 8006160:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d004      	beq.n	8006182 <USB_EPStartXfer+0x11d0>
 8006178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800617c:	3301      	adds	r3, #1
 800617e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006182:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29a      	uxth	r2, r3
 800618a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800618e:	b29b      	uxth	r3, r3
 8006190:	029b      	lsls	r3, r3, #10
 8006192:	b29b      	uxth	r3, r3
 8006194:	4313      	orrs	r3, r2
 8006196:	b29a      	uxth	r2, r3
 8006198:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800619c:	801a      	strh	r2, [r3, #0]
 800619e:	e059      	b.n	8006254 <USB_EPStartXfer+0x12a2>
 80061a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	095b      	lsrs	r3, r3, #5
 80061ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d104      	bne.n	80061d0 <USB_EPStartXfer+0x121e>
 80061c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ca:	3b01      	subs	r3, #1
 80061cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061dc:	b29b      	uxth	r3, r3
 80061de:	029b      	lsls	r3, r3, #10
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	4313      	orrs	r3, r2
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	e02d      	b.n	8006254 <USB_EPStartXfer+0x12a2>
 80061f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d125      	bne.n	8006254 <USB_EPStartXfer+0x12a2>
 8006208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006216:	b29b      	uxth	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800621e:	4413      	add	r3, r2
 8006220:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	011a      	lsls	r2, r3, #4
 8006232:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006236:	4413      	add	r3, r2
 8006238:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800623c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	b29a      	uxth	r2, r3
 800624e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006252:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 8218 	beq.w	8006696 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006286:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800628a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d005      	beq.n	800629e <USB_EPStartXfer+0x12ec>
 8006292:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10d      	bne.n	80062ba <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800629e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80062a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f040 81f5 	bne.w	8006696 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80062b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 81ee 	bne.w	8006696 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80062ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80062e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	441a      	add	r2, r3
 80062fe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006302:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006306:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800630a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800630e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006312:	b29b      	uxth	r3, r3
 8006314:	8013      	strh	r3, [r2, #0]
 8006316:	e1be      	b.n	8006696 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	78db      	ldrb	r3, [r3, #3]
 8006324:	2b01      	cmp	r3, #1
 8006326:	f040 81b4 	bne.w	8006692 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800632a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699a      	ldr	r2, [r3, #24]
 8006336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	429a      	cmp	r2, r3
 8006344:	d917      	bls.n	8006376 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8006346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006366:	1ad2      	subs	r2, r2, r3
 8006368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	619a      	str	r2, [r3, #24]
 8006374:	e00e      	b.n	8006394 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8006376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2200      	movs	r2, #0
 8006392:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	785b      	ldrb	r3, [r3, #1]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f040 8085 	bne.w	80064b0 <USB_EPStartXfer+0x14fe>
 80063a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063ca:	4413      	add	r3, r2
 80063cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	011a      	lsls	r2, r3, #4
 80063de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063e2:	4413      	add	r3, r2
 80063e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80063fe:	801a      	strh	r2, [r3, #0]
 8006400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10c      	bne.n	8006422 <USB_EPStartXfer+0x1470>
 8006408:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	b29b      	uxth	r3, r3
 8006410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006418:	b29a      	uxth	r2, r3
 800641a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800641e:	801a      	strh	r2, [r3, #0]
 8006420:	e077      	b.n	8006512 <USB_EPStartXfer+0x1560>
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006426:	2b3e      	cmp	r3, #62	@ 0x3e
 8006428:	d81e      	bhi.n	8006468 <USB_EPStartXfer+0x14b6>
 800642a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642e:	085b      	lsrs	r3, r3, #1
 8006430:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d004      	beq.n	800644a <USB_EPStartXfer+0x1498>
 8006440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006444:	3301      	adds	r3, #1
 8006446:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800644a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29a      	uxth	r2, r3
 8006452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006456:	b29b      	uxth	r3, r3
 8006458:	029b      	lsls	r3, r3, #10
 800645a:	b29b      	uxth	r3, r3
 800645c:	4313      	orrs	r3, r2
 800645e:	b29a      	uxth	r2, r3
 8006460:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006464:	801a      	strh	r2, [r3, #0]
 8006466:	e054      	b.n	8006512 <USB_EPStartXfer+0x1560>
 8006468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646c:	095b      	lsrs	r3, r3, #5
 800646e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006476:	f003 031f 	and.w	r3, r3, #31
 800647a:	2b00      	cmp	r3, #0
 800647c:	d104      	bne.n	8006488 <USB_EPStartXfer+0x14d6>
 800647e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006482:	3b01      	subs	r3, #1
 8006484:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006488:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29a      	uxth	r2, r3
 8006490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006494:	b29b      	uxth	r3, r3
 8006496:	029b      	lsls	r3, r3, #10
 8006498:	b29b      	uxth	r3, r3
 800649a:	4313      	orrs	r3, r2
 800649c:	b29b      	uxth	r3, r3
 800649e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064ac:	801a      	strh	r2, [r3, #0]
 80064ae:	e030      	b.n	8006512 <USB_EPStartXfer+0x1560>
 80064b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	785b      	ldrb	r3, [r3, #1]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d128      	bne.n	8006512 <USB_EPStartXfer+0x1560>
 80064c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80064ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064dc:	b29b      	uxth	r3, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064e4:	4413      	add	r3, r2
 80064e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80064ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	011a      	lsls	r2, r3, #4
 80064f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064fc:	4413      	add	r3, r2
 80064fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006502:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650a:	b29a      	uxth	r2, r3
 800650c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006510:	801a      	strh	r2, [r3, #0]
 8006512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006516:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	2b00      	cmp	r3, #0
 800652e:	f040 8085 	bne.w	800663c <USB_EPStartXfer+0x168a>
 8006532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006536:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006544:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800654e:	b29b      	uxth	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006556:	4413      	add	r3, r2
 8006558:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800655c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	011a      	lsls	r2, r3, #4
 800656a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800656e:	4413      	add	r3, r2
 8006570:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006574:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006578:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006584:	b29a      	uxth	r2, r3
 8006586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800658a:	801a      	strh	r2, [r3, #0]
 800658c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10c      	bne.n	80065ae <USB_EPStartXfer+0x15fc>
 8006594:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	b29b      	uxth	r3, r3
 800659c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80065aa:	801a      	strh	r2, [r3, #0]
 80065ac:	e073      	b.n	8006696 <USB_EPStartXfer+0x16e4>
 80065ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80065b4:	d81e      	bhi.n	80065f4 <USB_EPStartXfer+0x1642>
 80065b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ba:	085b      	lsrs	r3, r3, #1
 80065bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80065c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d004      	beq.n	80065d6 <USB_EPStartXfer+0x1624>
 80065cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065d0:	3301      	adds	r3, #1
 80065d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80065d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29a      	uxth	r2, r3
 80065de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	029b      	lsls	r3, r3, #10
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	4313      	orrs	r3, r2
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80065f0:	801a      	strh	r2, [r3, #0]
 80065f2:	e050      	b.n	8006696 <USB_EPStartXfer+0x16e4>
 80065f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006602:	f003 031f 	and.w	r3, r3, #31
 8006606:	2b00      	cmp	r3, #0
 8006608:	d104      	bne.n	8006614 <USB_EPStartXfer+0x1662>
 800660a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800660e:	3b01      	subs	r3, #1
 8006610:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006614:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29a      	uxth	r2, r3
 800661c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006620:	b29b      	uxth	r3, r3
 8006622:	029b      	lsls	r3, r3, #10
 8006624:	b29b      	uxth	r3, r3
 8006626:	4313      	orrs	r3, r2
 8006628:	b29b      	uxth	r3, r3
 800662a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800662e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006632:	b29a      	uxth	r2, r3
 8006634:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006638:	801a      	strh	r2, [r3, #0]
 800663a:	e02c      	b.n	8006696 <USB_EPStartXfer+0x16e4>
 800663c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	785b      	ldrb	r3, [r3, #1]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d124      	bne.n	8006696 <USB_EPStartXfer+0x16e4>
 800664c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800665a:	b29b      	uxth	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006662:	4413      	add	r3, r2
 8006664:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	011a      	lsls	r2, r3, #4
 8006676:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800667a:	4413      	add	r3, r2
 800667c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006680:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006688:	b29a      	uxth	r2, r3
 800668a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800668e:	801a      	strh	r2, [r3, #0]
 8006690:	e001      	b.n	8006696 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e03a      	b.n	800670c <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800669a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066bc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80066c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80066c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80066c8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80066cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80066d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80066d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80066d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	441a      	add	r2, r3
 80066f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80066f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006706:	b29b      	uxth	r3, r3
 8006708:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006716:	b480      	push	{r7}
 8006718:	b085      	sub	sp, #20
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	785b      	ldrb	r3, [r3, #1]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d020      	beq.n	800676a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800673a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800673e:	81bb      	strh	r3, [r7, #12]
 8006740:	89bb      	ldrh	r3, [r7, #12]
 8006742:	f083 0310 	eor.w	r3, r3, #16
 8006746:	81bb      	strh	r3, [r7, #12]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	441a      	add	r2, r3
 8006752:	89bb      	ldrh	r3, [r7, #12]
 8006754:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006758:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800675c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006764:	b29b      	uxth	r3, r3
 8006766:	8013      	strh	r3, [r2, #0]
 8006768:	e01f      	b.n	80067aa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800677c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006780:	81fb      	strh	r3, [r7, #14]
 8006782:	89fb      	ldrh	r3, [r7, #14]
 8006784:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006788:	81fb      	strh	r3, [r7, #14]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	441a      	add	r2, r3
 8006794:	89fb      	ldrh	r3, [r7, #14]
 8006796:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800679a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800679e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	7b1b      	ldrb	r3, [r3, #12]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f040 809d 	bne.w	8006906 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	785b      	ldrb	r3, [r3, #1]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d04c      	beq.n	800686e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	823b      	strh	r3, [r7, #16]
 80067e2:	8a3b      	ldrh	r3, [r7, #16]
 80067e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d01b      	beq.n	8006824 <USB_EPClearStall+0x6c>
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006802:	81fb      	strh	r3, [r7, #14]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	441a      	add	r2, r3
 800680e:	89fb      	ldrh	r3, [r7, #14]
 8006810:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006814:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006818:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800681c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006820:	b29b      	uxth	r3, r3
 8006822:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	78db      	ldrb	r3, [r3, #3]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d06c      	beq.n	8006906 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	b29b      	uxth	r3, r3
 800683a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800683e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006842:	81bb      	strh	r3, [r7, #12]
 8006844:	89bb      	ldrh	r3, [r7, #12]
 8006846:	f083 0320 	eor.w	r3, r3, #32
 800684a:	81bb      	strh	r3, [r7, #12]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	441a      	add	r2, r3
 8006856:	89bb      	ldrh	r3, [r7, #12]
 8006858:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800685c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006860:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006868:	b29b      	uxth	r3, r3
 800686a:	8013      	strh	r3, [r2, #0]
 800686c:	e04b      	b.n	8006906 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	82fb      	strh	r3, [r7, #22]
 800687c:	8afb      	ldrh	r3, [r7, #22]
 800687e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d01b      	beq.n	80068be <USB_EPClearStall+0x106>
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689c:	82bb      	strh	r3, [r7, #20]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	441a      	add	r2, r3
 80068a8:	8abb      	ldrh	r3, [r7, #20]
 80068aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d4:	827b      	strh	r3, [r7, #18]
 80068d6:	8a7b      	ldrh	r3, [r7, #18]
 80068d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80068dc:	827b      	strh	r3, [r7, #18]
 80068de:	8a7b      	ldrh	r3, [r7, #18]
 80068e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068e4:	827b      	strh	r3, [r7, #18]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	441a      	add	r2, r3
 80068f0:	8a7b      	ldrh	r3, [r7, #18]
 80068f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006902:	b29b      	uxth	r3, r3
 8006904:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	371c      	adds	r7, #28
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006920:	78fb      	ldrb	r3, [r7, #3]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d103      	bne.n	800692e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2280      	movs	r2, #128	@ 0x80
 800692a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006952:	b480      	push	{r7}
 8006954:	b085      	sub	sp, #20
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006960:	b29b      	uxth	r3, r3
 8006962:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006964:	68fb      	ldr	r3, [r7, #12]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006972:	b480      	push	{r7}
 8006974:	b08b      	sub	sp, #44	@ 0x2c
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	4611      	mov	r1, r2
 800697e:	461a      	mov	r2, r3
 8006980:	460b      	mov	r3, r1
 8006982:	80fb      	strh	r3, [r7, #6]
 8006984:	4613      	mov	r3, r2
 8006986:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006988:	88bb      	ldrh	r3, [r7, #4]
 800698a:	3301      	adds	r3, #1
 800698c:	085b      	lsrs	r3, r3, #1
 800698e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006998:	88fb      	ldrh	r3, [r7, #6]
 800699a:	005a      	lsls	r2, r3, #1
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069a4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80069aa:	e01f      	b.n	80069ec <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	3301      	adds	r3, #1
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	b21b      	sxth	r3, r3
 80069ba:	021b      	lsls	r3, r3, #8
 80069bc:	b21a      	sxth	r2, r3
 80069be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	b21b      	sxth	r3, r3
 80069c6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	8a7a      	ldrh	r2, [r7, #18]
 80069cc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	3302      	adds	r3, #2
 80069d2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	3302      	adds	r3, #2
 80069d8:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	3301      	adds	r3, #1
 80069de:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	3301      	adds	r3, #1
 80069e4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	3b01      	subs	r3, #1
 80069ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80069ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1dc      	bne.n	80069ac <USB_WritePMA+0x3a>
  }
}
 80069f2:	bf00      	nop
 80069f4:	bf00      	nop
 80069f6:	372c      	adds	r7, #44	@ 0x2c
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b08b      	sub	sp, #44	@ 0x2c
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	460b      	mov	r3, r1
 8006a10:	80fb      	strh	r3, [r7, #6]
 8006a12:	4613      	mov	r3, r2
 8006a14:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006a16:	88bb      	ldrh	r3, [r7, #4]
 8006a18:	085b      	lsrs	r3, r3, #1
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a26:	88fb      	ldrh	r3, [r7, #6]
 8006a28:	005a      	lsls	r2, r3, #1
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a32:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a38:	e01b      	b.n	8006a72 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	3302      	adds	r3, #2
 8006a46:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	3301      	adds	r3, #1
 8006a54:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	0a1b      	lsrs	r3, r3, #8
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	3301      	adds	r3, #1
 8006a64:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	3302      	adds	r3, #2
 8006a6a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e0      	bne.n	8006a3a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006a78:	88bb      	ldrh	r3, [r7, #4]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d007      	beq.n	8006a94 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	701a      	strb	r2, [r3, #0]
  }
}
 8006a94:	bf00      	nop
 8006a96:	372c      	adds	r7, #44	@ 0x2c
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	7c1b      	ldrb	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d115      	bne.n	8006ae4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ab8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006abc:	2202      	movs	r2, #2
 8006abe:	2181      	movs	r1, #129	@ 0x81
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f001 fee0 	bl	8008886 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006acc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 fed6 	bl	8008886 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006ae2:	e012      	b.n	8006b0a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ae4:	2340      	movs	r3, #64	@ 0x40
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	2181      	movs	r1, #129	@ 0x81
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 fecb 	bl	8008886 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006af6:	2340      	movs	r3, #64	@ 0x40
 8006af8:	2202      	movs	r2, #2
 8006afa:	2101      	movs	r1, #1
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 fec2 	bl	8008886 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	2203      	movs	r2, #3
 8006b0e:	2182      	movs	r1, #130	@ 0x82
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f001 feb8 	bl	8008886 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b1c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006b20:	f001 ffd8 	bl	8008ad4 <USBD_static_malloc>
 8006b24:	4602      	mov	r2, r0
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d102      	bne.n	8006b3c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006b36:	2301      	movs	r3, #1
 8006b38:	73fb      	strb	r3, [r7, #15]
 8006b3a:	e026      	b.n	8006b8a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b42:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	7c1b      	ldrb	r3, [r3, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b70:	2101      	movs	r1, #1
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 ff78 	bl	8008a68 <USBD_LL_PrepareReceive>
 8006b78:	e007      	b.n	8006b8a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b80:	2340      	movs	r3, #64	@ 0x40
 8006b82:	2101      	movs	r1, #1
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 ff6f 	bl	8008a68 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ba4:	2181      	movs	r1, #129	@ 0x81
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 fe93 	bl	80088d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 fe8c 	bl	80088d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006bc2:	2182      	movs	r1, #130	@ 0x82
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 fe84 	bl	80088d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00e      	beq.n	8006bf8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 ff80 	bl	8008af0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b086      	sub	sp, #24
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c12:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d039      	beq.n	8006ca0 <USBD_CDC_Setup+0x9e>
 8006c2c:	2b20      	cmp	r3, #32
 8006c2e:	d17f      	bne.n	8006d30 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	88db      	ldrh	r3, [r3, #6]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d029      	beq.n	8006c8c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	b25b      	sxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	da11      	bge.n	8006c66 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006c4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	88d2      	ldrh	r2, [r2, #6]
 8006c54:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c56:	6939      	ldr	r1, [r7, #16]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	88db      	ldrh	r3, [r3, #6]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 fa10 	bl	8008084 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006c64:	e06b      	b.n	8006d3e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	785a      	ldrb	r2, [r3, #1]
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	88db      	ldrh	r3, [r3, #6]
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c7c:	6939      	ldr	r1, [r7, #16]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	88db      	ldrh	r3, [r3, #6]
 8006c82:	461a      	mov	r2, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 fa2b 	bl	80080e0 <USBD_CtlPrepareRx>
      break;
 8006c8a:	e058      	b.n	8006d3e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	7850      	ldrb	r0, [r2, #1]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	4798      	blx	r3
      break;
 8006c9e:	e04e      	b.n	8006d3e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	785b      	ldrb	r3, [r3, #1]
 8006ca4:	2b0b      	cmp	r3, #11
 8006ca6:	d02e      	beq.n	8006d06 <USBD_CDC_Setup+0x104>
 8006ca8:	2b0b      	cmp	r3, #11
 8006caa:	dc38      	bgt.n	8006d1e <USBD_CDC_Setup+0x11c>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <USBD_CDC_Setup+0xb4>
 8006cb0:	2b0a      	cmp	r3, #10
 8006cb2:	d014      	beq.n	8006cde <USBD_CDC_Setup+0xdc>
 8006cb4:	e033      	b.n	8006d1e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d107      	bne.n	8006cd0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006cc0:	f107 030c 	add.w	r3, r7, #12
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 f9db 	bl	8008084 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cce:	e02e      	b.n	8006d2e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f001 f96b 	bl	8007fae <USBD_CtlError>
            ret = USBD_FAIL;
 8006cd8:	2302      	movs	r3, #2
 8006cda:	75fb      	strb	r3, [r7, #23]
          break;
 8006cdc:	e027      	b.n	8006d2e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ce4:	2b03      	cmp	r3, #3
 8006ce6:	d107      	bne.n	8006cf8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ce8:	f107 030f 	add.w	r3, r7, #15
 8006cec:	2201      	movs	r2, #1
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 f9c7 	bl	8008084 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cf6:	e01a      	b.n	8006d2e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f001 f957 	bl	8007fae <USBD_CtlError>
            ret = USBD_FAIL;
 8006d00:	2302      	movs	r3, #2
 8006d02:	75fb      	strb	r3, [r7, #23]
          break;
 8006d04:	e013      	b.n	8006d2e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	d00d      	beq.n	8006d2c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 f94b 	bl	8007fae <USBD_CtlError>
            ret = USBD_FAIL;
 8006d18:	2302      	movs	r3, #2
 8006d1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d1c:	e006      	b.n	8006d2c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 f944 	bl	8007fae <USBD_CtlError>
          ret = USBD_FAIL;
 8006d26:	2302      	movs	r3, #2
 8006d28:	75fb      	strb	r3, [r7, #23]
          break;
 8006d2a:	e000      	b.n	8006d2e <USBD_CDC_Setup+0x12c>
          break;
 8006d2c:	bf00      	nop
      }
      break;
 8006d2e:	e006      	b.n	8006d3e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 f93b 	bl	8007fae <USBD_CtlError>
      ret = USBD_FAIL;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d3c:	bf00      	nop
  }

  return ret;
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d5a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006d62:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d03a      	beq.n	8006de4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006d6e:	78fa      	ldrb	r2, [r7, #3]
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	331c      	adds	r3, #28
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d029      	beq.n	8006dd8 <USBD_CDC_DataIn+0x90>
 8006d84:	78fa      	ldrb	r2, [r7, #3]
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	440b      	add	r3, r1
 8006d92:	331c      	adds	r3, #28
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	78f9      	ldrb	r1, [r7, #3]
 8006d98:	68b8      	ldr	r0, [r7, #8]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	4403      	add	r3, r0
 8006da4:	3320      	adds	r3, #32
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d110      	bne.n	8006dd8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006db6:	78fa      	ldrb	r2, [r7, #3]
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	331c      	adds	r3, #28
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006dca:	78f9      	ldrb	r1, [r7, #3]
 8006dcc:	2300      	movs	r3, #0
 8006dce:	2200      	movs	r2, #0
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f001 fe26 	bl	8008a22 <USBD_LL_Transmit>
 8006dd6:	e003      	b.n	8006de0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	e000      	b.n	8006de6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006de4:	2302      	movs	r3, #2
  }
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	460b      	mov	r3, r1
 8006df8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e00:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e02:	78fb      	ldrb	r3, [r7, #3]
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 fe51 	bl	8008aae <USBD_LL_GetRxDataSize>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00d      	beq.n	8006e3a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006e32:	4611      	mov	r1, r2
 8006e34:	4798      	blx	r3

    return USBD_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	e000      	b.n	8006e3c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006e3a:	2302      	movs	r3, #2
  }
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e52:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d014      	beq.n	8006e88 <USBD_CDC_EP0_RxReady+0x44>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006e64:	2bff      	cmp	r3, #255	@ 0xff
 8006e66:	d00f      	beq.n	8006e88 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006e76:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e7e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	22ff      	movs	r2, #255	@ 0xff
 8006e84:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
	...

08006e94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2243      	movs	r2, #67	@ 0x43
 8006ea0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006ea2:	4b03      	ldr	r3, [pc, #12]	@ (8006eb0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	20000094 	.word	0x20000094

08006eb4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2243      	movs	r2, #67	@ 0x43
 8006ec0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006ec2:	4b03      	ldr	r3, [pc, #12]	@ (8006ed0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	20000050 	.word	0x20000050

08006ed4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2243      	movs	r2, #67	@ 0x43
 8006ee0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006ee2:	4b03      	ldr	r3, [pc, #12]	@ (8006ef0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	200000d8 	.word	0x200000d8

08006ef4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	220a      	movs	r2, #10
 8006f00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006f02:	4b03      	ldr	r3, [pc, #12]	@ (8006f10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	2000000c 	.word	0x2000000c

08006f14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006f1e:	2302      	movs	r3, #2
 8006f20:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b087      	sub	sp, #28
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f56:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006f60:	88fa      	ldrh	r2, [r7, #6]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	371c      	adds	r7, #28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f86:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d01c      	beq.n	8006ff2 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d115      	bne.n	8006fee <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	2181      	movs	r1, #129	@ 0x81
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 fd1c 	bl	8008a22 <USBD_LL_Transmit>

      return USBD_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	e002      	b.n	8006ff4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e000      	b.n	8006ff4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006ff2:	2302      	movs	r3, #2
  }
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800700a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d017      	beq.n	8007046 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	7c1b      	ldrb	r3, [r3, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d109      	bne.n	8007032 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007028:	2101      	movs	r1, #1
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 fd1c 	bl	8008a68 <USBD_LL_PrepareReceive>
 8007030:	e007      	b.n	8007042 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007038:	2340      	movs	r3, #64	@ 0x40
 800703a:	2101      	movs	r1, #1
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 fd13 	bl	8008a68 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	e000      	b.n	8007048 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007046:	2302      	movs	r3, #2
  }
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	4613      	mov	r3, r2
 800705c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007064:	2302      	movs	r3, #2
 8007066:	e01a      	b.n	800709e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	79fa      	ldrb	r2, [r7, #7]
 8007094:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f001 fb80 	bl	800879c <USBD_LL_Init>

  return USBD_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b085      	sub	sp, #20
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d006      	beq.n	80070c8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	73fb      	strb	r3, [r7, #15]
 80070c6:	e001      	b.n	80070cc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80070c8:	2302      	movs	r3, #2
 80070ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 fbb4 	bl	8008850 <USBD_LL_Start>

  return USBD_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b083      	sub	sp, #12
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007114:	2302      	movs	r3, #2
 8007116:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00c      	beq.n	800713c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	78fa      	ldrb	r2, [r7, #3]
 800712c:	4611      	mov	r1, r2
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800713c:	7bfb      	ldrb	r3, [r7, #15]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b082      	sub	sp, #8
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	460b      	mov	r3, r1
 8007150:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	78fa      	ldrb	r2, [r7, #3]
 800715c:	4611      	mov	r1, r2
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	4798      	blx	r3

  return USBD_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f000 fedb 	bl	8007f3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007192:	461a      	mov	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80071a0:	f003 031f 	and.w	r3, r3, #31
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d016      	beq.n	80071d6 <USBD_LL_SetupStage+0x6a>
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d81c      	bhi.n	80071e6 <USBD_LL_SetupStage+0x7a>
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <USBD_LL_SetupStage+0x4a>
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d008      	beq.n	80071c6 <USBD_LL_SetupStage+0x5a>
 80071b4:	e017      	b.n	80071e6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f9ce 	bl	8007560 <USBD_StdDevReq>
      break;
 80071c4:	e01a      	b.n	80071fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fa30 	bl	8007634 <USBD_StdItfReq>
      break;
 80071d4:	e012      	b.n	80071fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa70 	bl	80076c4 <USBD_StdEPReq>
      break;
 80071e4:	e00a      	b.n	80071fc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80071ec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f001 fb8b 	bl	8008910 <USBD_LL_StallEP>
      break;
 80071fa:	bf00      	nop
  }

  return USBD_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b086      	sub	sp, #24
 800720a:	af00      	add	r7, sp, #0
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	460b      	mov	r3, r1
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d14b      	bne.n	80072b2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007220:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007228:	2b03      	cmp	r3, #3
 800722a:	d134      	bne.n	8007296 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	429a      	cmp	r2, r3
 8007236:	d919      	bls.n	800726c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	1ad2      	subs	r2, r2, r3
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800724e:	429a      	cmp	r2, r3
 8007250:	d203      	bcs.n	800725a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007256:	b29b      	uxth	r3, r3
 8007258:	e002      	b.n	8007260 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800725e:	b29b      	uxth	r3, r3
 8007260:	461a      	mov	r2, r3
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 ff59 	bl	800811c <USBD_CtlContinueRx>
 800726a:	e038      	b.n	80072de <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00a      	beq.n	800728e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800727e:	2b03      	cmp	r3, #3
 8007280:	d105      	bne.n	800728e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 ff56 	bl	8008140 <USBD_CtlSendStatus>
 8007294:	e023      	b.n	80072de <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800729c:	2b05      	cmp	r3, #5
 800729e:	d11e      	bne.n	80072de <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80072a8:	2100      	movs	r1, #0
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f001 fb30 	bl	8008910 <USBD_LL_StallEP>
 80072b0:	e015      	b.n	80072de <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00d      	beq.n	80072da <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d108      	bne.n	80072da <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	7afa      	ldrb	r2, [r7, #11]
 80072d2:	4611      	mov	r1, r2
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	4798      	blx	r3
 80072d8:	e001      	b.n	80072de <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80072da:	2302      	movs	r3, #2
 80072dc:	e000      	b.n	80072e0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	460b      	mov	r3, r1
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80072f6:	7afb      	ldrb	r3, [r7, #11]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d17f      	bne.n	80073fc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3314      	adds	r3, #20
 8007300:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007308:	2b02      	cmp	r3, #2
 800730a:	d15c      	bne.n	80073c6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	429a      	cmp	r2, r3
 8007316:	d915      	bls.n	8007344 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	68da      	ldr	r2, [r3, #12]
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	1ad2      	subs	r2, r2, r3
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	b29b      	uxth	r3, r3
 800732c:	461a      	mov	r2, r3
 800732e:	6879      	ldr	r1, [r7, #4]
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 fec3 	bl	80080bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007336:	2300      	movs	r3, #0
 8007338:	2200      	movs	r2, #0
 800733a:	2100      	movs	r1, #0
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f001 fb93 	bl	8008a68 <USBD_LL_PrepareReceive>
 8007342:	e04e      	b.n	80073e2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	6912      	ldr	r2, [r2, #16]
 800734c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007350:	fb01 f202 	mul.w	r2, r1, r2
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d11c      	bne.n	8007394 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	689a      	ldr	r2, [r3, #8]
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007362:	429a      	cmp	r2, r3
 8007364:	d316      	bcc.n	8007394 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007370:	429a      	cmp	r2, r3
 8007372:	d20f      	bcs.n	8007394 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007374:	2200      	movs	r2, #0
 8007376:	2100      	movs	r1, #0
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 fe9f 	bl	80080bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007386:	2300      	movs	r3, #0
 8007388:	2200      	movs	r2, #0
 800738a:	2100      	movs	r1, #0
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f001 fb6b 	bl	8008a68 <USBD_LL_PrepareReceive>
 8007392:	e026      	b.n	80073e2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00a      	beq.n	80073b6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d105      	bne.n	80073b6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80073b6:	2180      	movs	r1, #128	@ 0x80
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f001 faa9 	bl	8008910 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 fed1 	bl	8008166 <USBD_CtlReceiveStatus>
 80073c4:	e00d      	b.n	80073e2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d004      	beq.n	80073da <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d103      	bne.n	80073e2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80073da:	2180      	movs	r1, #128	@ 0x80
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f001 fa97 	bl	8008910 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d11d      	bne.n	8007428 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f7ff fe80 	bl	80070f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80073fa:	e015      	b.n	8007428 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00d      	beq.n	8007424 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800740e:	2b03      	cmp	r3, #3
 8007410:	d108      	bne.n	8007424 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	7afa      	ldrb	r2, [r7, #11]
 800741c:	4611      	mov	r1, r2
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	4798      	blx	r3
 8007422:	e001      	b.n	8007428 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007424:	2302      	movs	r3, #2
 8007426:	e000      	b.n	800742a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800743a:	2340      	movs	r3, #64	@ 0x40
 800743c:	2200      	movs	r2, #0
 800743e:	2100      	movs	r1, #0
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f001 fa20 	bl	8008886 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2240      	movs	r2, #64	@ 0x40
 8007452:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007456:	2340      	movs	r3, #64	@ 0x40
 8007458:	2200      	movs	r2, #0
 800745a:	2180      	movs	r1, #128	@ 0x80
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 fa12 	bl	8008886 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2240      	movs	r2, #64	@ 0x40
 800746c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6852      	ldr	r2, [r2, #4]
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	4611      	mov	r1, r2
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	4798      	blx	r3
  }

  return USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	78fa      	ldrb	r2, [r7, #3]
 80074c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2204      	movs	r2, #4
 80074ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800750c:	2b04      	cmp	r3, #4
 800750e:	d105      	bne.n	800751c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007538:	2b03      	cmp	r3, #3
 800753a:	d10b      	bne.n	8007554 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
	...

08007560 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007576:	2b40      	cmp	r3, #64	@ 0x40
 8007578:	d005      	beq.n	8007586 <USBD_StdDevReq+0x26>
 800757a:	2b40      	cmp	r3, #64	@ 0x40
 800757c:	d84f      	bhi.n	800761e <USBD_StdDevReq+0xbe>
 800757e:	2b00      	cmp	r3, #0
 8007580:	d009      	beq.n	8007596 <USBD_StdDevReq+0x36>
 8007582:	2b20      	cmp	r3, #32
 8007584:	d14b      	bne.n	800761e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
      break;
 8007594:	e048      	b.n	8007628 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	2b09      	cmp	r3, #9
 800759c:	d839      	bhi.n	8007612 <USBD_StdDevReq+0xb2>
 800759e:	a201      	add	r2, pc, #4	@ (adr r2, 80075a4 <USBD_StdDevReq+0x44>)
 80075a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a4:	080075f5 	.word	0x080075f5
 80075a8:	08007609 	.word	0x08007609
 80075ac:	08007613 	.word	0x08007613
 80075b0:	080075ff 	.word	0x080075ff
 80075b4:	08007613 	.word	0x08007613
 80075b8:	080075d7 	.word	0x080075d7
 80075bc:	080075cd 	.word	0x080075cd
 80075c0:	08007613 	.word	0x08007613
 80075c4:	080075eb 	.word	0x080075eb
 80075c8:	080075e1 	.word	0x080075e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f9dc 	bl	800798c <USBD_GetDescriptor>
          break;
 80075d4:	e022      	b.n	800761c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fb3f 	bl	8007c5c <USBD_SetAddress>
          break;
 80075de:	e01d      	b.n	800761c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fb7e 	bl	8007ce4 <USBD_SetConfig>
          break;
 80075e8:	e018      	b.n	800761c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fc07 	bl	8007e00 <USBD_GetConfig>
          break;
 80075f2:	e013      	b.n	800761c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fc37 	bl	8007e6a <USBD_GetStatus>
          break;
 80075fc:	e00e      	b.n	800761c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fc65 	bl	8007ed0 <USBD_SetFeature>
          break;
 8007606:	e009      	b.n	800761c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fc74 	bl	8007ef8 <USBD_ClrFeature>
          break;
 8007610:	e004      	b.n	800761c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fcca 	bl	8007fae <USBD_CtlError>
          break;
 800761a:	bf00      	nop
      }
      break;
 800761c:	e004      	b.n	8007628 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fcc4 	bl	8007fae <USBD_CtlError>
      break;
 8007626:	bf00      	nop
  }

  return ret;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop

08007634 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800764a:	2b40      	cmp	r3, #64	@ 0x40
 800764c:	d005      	beq.n	800765a <USBD_StdItfReq+0x26>
 800764e:	2b40      	cmp	r3, #64	@ 0x40
 8007650:	d82e      	bhi.n	80076b0 <USBD_StdItfReq+0x7c>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <USBD_StdItfReq+0x26>
 8007656:	2b20      	cmp	r3, #32
 8007658:	d12a      	bne.n	80076b0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007660:	3b01      	subs	r3, #1
 8007662:	2b02      	cmp	r3, #2
 8007664:	d81d      	bhi.n	80076a2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	889b      	ldrh	r3, [r3, #4]
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b01      	cmp	r3, #1
 800766e:	d813      	bhi.n	8007698 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4798      	blx	r3
 800767e:	4603      	mov	r3, r0
 8007680:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	88db      	ldrh	r3, [r3, #6]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d110      	bne.n	80076ac <USBD_StdItfReq+0x78>
 800768a:	7bfb      	ldrb	r3, [r7, #15]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10d      	bne.n	80076ac <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fd55 	bl	8008140 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007696:	e009      	b.n	80076ac <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fc87 	bl	8007fae <USBD_CtlError>
          break;
 80076a0:	e004      	b.n	80076ac <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fc82 	bl	8007fae <USBD_CtlError>
          break;
 80076aa:	e000      	b.n	80076ae <USBD_StdItfReq+0x7a>
          break;
 80076ac:	bf00      	nop
      }
      break;
 80076ae:	e004      	b.n	80076ba <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fc7b 	bl	8007fae <USBD_CtlError>
      break;
 80076b8:	bf00      	nop
  }

  return USBD_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	889b      	ldrh	r3, [r3, #4]
 80076d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076e0:	2b40      	cmp	r3, #64	@ 0x40
 80076e2:	d007      	beq.n	80076f4 <USBD_StdEPReq+0x30>
 80076e4:	2b40      	cmp	r3, #64	@ 0x40
 80076e6:	f200 8146 	bhi.w	8007976 <USBD_StdEPReq+0x2b2>
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <USBD_StdEPReq+0x40>
 80076ee:	2b20      	cmp	r3, #32
 80076f0:	f040 8141 	bne.w	8007976 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	4798      	blx	r3
      break;
 8007702:	e13d      	b.n	8007980 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800770c:	2b20      	cmp	r3, #32
 800770e:	d10a      	bne.n	8007726 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	4798      	blx	r3
 800771e:	4603      	mov	r3, r0
 8007720:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007722:	7bfb      	ldrb	r3, [r7, #15]
 8007724:	e12d      	b.n	8007982 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	785b      	ldrb	r3, [r3, #1]
 800772a:	2b03      	cmp	r3, #3
 800772c:	d007      	beq.n	800773e <USBD_StdEPReq+0x7a>
 800772e:	2b03      	cmp	r3, #3
 8007730:	f300 811b 	bgt.w	800796a <USBD_StdEPReq+0x2a6>
 8007734:	2b00      	cmp	r3, #0
 8007736:	d072      	beq.n	800781e <USBD_StdEPReq+0x15a>
 8007738:	2b01      	cmp	r3, #1
 800773a:	d03a      	beq.n	80077b2 <USBD_StdEPReq+0xee>
 800773c:	e115      	b.n	800796a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007744:	2b02      	cmp	r3, #2
 8007746:	d002      	beq.n	800774e <USBD_StdEPReq+0x8a>
 8007748:	2b03      	cmp	r3, #3
 800774a:	d015      	beq.n	8007778 <USBD_StdEPReq+0xb4>
 800774c:	e02b      	b.n	80077a6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00c      	beq.n	800776e <USBD_StdEPReq+0xaa>
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b80      	cmp	r3, #128	@ 0x80
 8007758:	d009      	beq.n	800776e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 f8d6 	bl	8008910 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007764:	2180      	movs	r1, #128	@ 0x80
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 f8d2 	bl	8008910 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800776c:	e020      	b.n	80077b0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fc1c 	bl	8007fae <USBD_CtlError>
              break;
 8007776:	e01b      	b.n	80077b0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	885b      	ldrh	r3, [r3, #2]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10e      	bne.n	800779e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00b      	beq.n	800779e <USBD_StdEPReq+0xda>
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	2b80      	cmp	r3, #128	@ 0x80
 800778a:	d008      	beq.n	800779e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	88db      	ldrh	r3, [r3, #6]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d104      	bne.n	800779e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f001 f8b9 	bl	8008910 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fcce 	bl	8008140 <USBD_CtlSendStatus>

              break;
 80077a4:	e004      	b.n	80077b0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fc00 	bl	8007fae <USBD_CtlError>
              break;
 80077ae:	bf00      	nop
          }
          break;
 80077b0:	e0e0      	b.n	8007974 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d002      	beq.n	80077c2 <USBD_StdEPReq+0xfe>
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d015      	beq.n	80077ec <USBD_StdEPReq+0x128>
 80077c0:	e026      	b.n	8007810 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00c      	beq.n	80077e2 <USBD_StdEPReq+0x11e>
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	2b80      	cmp	r3, #128	@ 0x80
 80077cc:	d009      	beq.n	80077e2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f001 f89c 	bl	8008910 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80077d8:	2180      	movs	r1, #128	@ 0x80
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 f898 	bl	8008910 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077e0:	e01c      	b.n	800781c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fbe2 	bl	8007fae <USBD_CtlError>
              break;
 80077ea:	e017      	b.n	800781c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	885b      	ldrh	r3, [r3, #2]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d112      	bne.n	800781a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d004      	beq.n	8007808 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f001 f8a3 	bl	800894e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fc99 	bl	8008140 <USBD_CtlSendStatus>
              }
              break;
 800780e:	e004      	b.n	800781a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fbcb 	bl	8007fae <USBD_CtlError>
              break;
 8007818:	e000      	b.n	800781c <USBD_StdEPReq+0x158>
              break;
 800781a:	bf00      	nop
          }
          break;
 800781c:	e0aa      	b.n	8007974 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007824:	2b02      	cmp	r3, #2
 8007826:	d002      	beq.n	800782e <USBD_StdEPReq+0x16a>
 8007828:	2b03      	cmp	r3, #3
 800782a:	d032      	beq.n	8007892 <USBD_StdEPReq+0x1ce>
 800782c:	e097      	b.n	800795e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d007      	beq.n	8007844 <USBD_StdEPReq+0x180>
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	2b80      	cmp	r3, #128	@ 0x80
 8007838:	d004      	beq.n	8007844 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fbb6 	bl	8007fae <USBD_CtlError>
                break;
 8007842:	e091      	b.n	8007968 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007844:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007848:	2b00      	cmp	r3, #0
 800784a:	da0b      	bge.n	8007864 <USBD_StdEPReq+0x1a0>
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	3310      	adds	r3, #16
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	4413      	add	r3, r2
 8007860:	3304      	adds	r3, #4
 8007862:	e00b      	b.n	800787c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	4413      	add	r3, r2
 800787a:	3304      	adds	r3, #4
 800787c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2202      	movs	r2, #2
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fbfa 	bl	8008084 <USBD_CtlSendData>
              break;
 8007890:	e06a      	b.n	8007968 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007892:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007896:	2b00      	cmp	r3, #0
 8007898:	da11      	bge.n	80078be <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	f003 020f 	and.w	r2, r3, #15
 80078a0:	6879      	ldr	r1, [r7, #4]
 80078a2:	4613      	mov	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	440b      	add	r3, r1
 80078ac:	3318      	adds	r3, #24
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d117      	bne.n	80078e4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fb79 	bl	8007fae <USBD_CtlError>
                  break;
 80078bc:	e054      	b.n	8007968 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	f003 020f 	and.w	r2, r3, #15
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	440b      	add	r3, r1
 80078d0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d104      	bne.n	80078e4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fb66 	bl	8007fae <USBD_CtlError>
                  break;
 80078e2:	e041      	b.n	8007968 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	da0b      	bge.n	8007904 <USBD_StdEPReq+0x240>
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
 80078ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80078f2:	4613      	mov	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	3310      	adds	r3, #16
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	4413      	add	r3, r2
 8007900:	3304      	adds	r3, #4
 8007902:	e00b      	b.n	800791c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800790a:	4613      	mov	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	4413      	add	r3, r2
 800791a:	3304      	adds	r3, #4
 800791c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d002      	beq.n	800792a <USBD_StdEPReq+0x266>
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	2b80      	cmp	r3, #128	@ 0x80
 8007928:	d103      	bne.n	8007932 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2200      	movs	r2, #0
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	e00e      	b.n	8007950 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 f828 	bl	800898c <USBD_LL_IsStallEP>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2201      	movs	r2, #1
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	e002      	b.n	8007950 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2202      	movs	r2, #2
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fb94 	bl	8008084 <USBD_CtlSendData>
              break;
 800795c:	e004      	b.n	8007968 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fb24 	bl	8007fae <USBD_CtlError>
              break;
 8007966:	bf00      	nop
          }
          break;
 8007968:	e004      	b.n	8007974 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fb1e 	bl	8007fae <USBD_CtlError>
          break;
 8007972:	bf00      	nop
      }
      break;
 8007974:	e004      	b.n	8007980 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fb18 	bl	8007fae <USBD_CtlError>
      break;
 800797e:	bf00      	nop
  }

  return ret;
 8007980:	7bfb      	ldrb	r3, [r7, #15]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800799a:	2300      	movs	r3, #0
 800799c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	885b      	ldrh	r3, [r3, #2]
 80079a6:	0a1b      	lsrs	r3, r3, #8
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	2b06      	cmp	r3, #6
 80079ae:	f200 8128 	bhi.w	8007c02 <USBD_GetDescriptor+0x276>
 80079b2:	a201      	add	r2, pc, #4	@ (adr r2, 80079b8 <USBD_GetDescriptor+0x2c>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	080079d5 	.word	0x080079d5
 80079bc:	080079ed 	.word	0x080079ed
 80079c0:	08007a2d 	.word	0x08007a2d
 80079c4:	08007c03 	.word	0x08007c03
 80079c8:	08007c03 	.word	0x08007c03
 80079cc:	08007ba3 	.word	0x08007ba3
 80079d0:	08007bcf 	.word	0x08007bcf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	7c12      	ldrb	r2, [r2, #16]
 80079e0:	f107 0108 	add.w	r1, r7, #8
 80079e4:	4610      	mov	r0, r2
 80079e6:	4798      	blx	r3
 80079e8:	60f8      	str	r0, [r7, #12]
      break;
 80079ea:	e112      	b.n	8007c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	7c1b      	ldrb	r3, [r3, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10d      	bne.n	8007a10 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079fc:	f107 0208 	add.w	r2, r7, #8
 8007a00:	4610      	mov	r0, r2
 8007a02:	4798      	blx	r3
 8007a04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a0e:	e100      	b.n	8007c12 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a18:	f107 0208 	add.w	r2, r7, #8
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	4798      	blx	r3
 8007a20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3301      	adds	r3, #1
 8007a26:	2202      	movs	r2, #2
 8007a28:	701a      	strb	r2, [r3, #0]
      break;
 8007a2a:	e0f2      	b.n	8007c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	885b      	ldrh	r3, [r3, #2]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b05      	cmp	r3, #5
 8007a34:	f200 80ac 	bhi.w	8007b90 <USBD_GetDescriptor+0x204>
 8007a38:	a201      	add	r2, pc, #4	@ (adr r2, 8007a40 <USBD_GetDescriptor+0xb4>)
 8007a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3e:	bf00      	nop
 8007a40:	08007a59 	.word	0x08007a59
 8007a44:	08007a8d 	.word	0x08007a8d
 8007a48:	08007ac1 	.word	0x08007ac1
 8007a4c:	08007af5 	.word	0x08007af5
 8007a50:	08007b29 	.word	0x08007b29
 8007a54:	08007b5d 	.word	0x08007b5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00b      	beq.n	8007a7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	7c12      	ldrb	r2, [r2, #16]
 8007a70:	f107 0108 	add.w	r1, r7, #8
 8007a74:	4610      	mov	r0, r2
 8007a76:	4798      	blx	r3
 8007a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a7a:	e091      	b.n	8007ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fa95 	bl	8007fae <USBD_CtlError>
            err++;
 8007a84:	7afb      	ldrb	r3, [r7, #11]
 8007a86:	3301      	adds	r3, #1
 8007a88:	72fb      	strb	r3, [r7, #11]
          break;
 8007a8a:	e089      	b.n	8007ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00b      	beq.n	8007ab0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	7c12      	ldrb	r2, [r2, #16]
 8007aa4:	f107 0108 	add.w	r1, r7, #8
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4798      	blx	r3
 8007aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aae:	e077      	b.n	8007ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fa7b 	bl	8007fae <USBD_CtlError>
            err++;
 8007ab8:	7afb      	ldrb	r3, [r7, #11]
 8007aba:	3301      	adds	r3, #1
 8007abc:	72fb      	strb	r3, [r7, #11]
          break;
 8007abe:	e06f      	b.n	8007ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	7c12      	ldrb	r2, [r2, #16]
 8007ad8:	f107 0108 	add.w	r1, r7, #8
 8007adc:	4610      	mov	r0, r2
 8007ade:	4798      	blx	r3
 8007ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ae2:	e05d      	b.n	8007ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa61 	bl	8007fae <USBD_CtlError>
            err++;
 8007aec:	7afb      	ldrb	r3, [r7, #11]
 8007aee:	3301      	adds	r3, #1
 8007af0:	72fb      	strb	r3, [r7, #11]
          break;
 8007af2:	e055      	b.n	8007ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	7c12      	ldrb	r2, [r2, #16]
 8007b0c:	f107 0108 	add.w	r1, r7, #8
 8007b10:	4610      	mov	r0, r2
 8007b12:	4798      	blx	r3
 8007b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b16:	e043      	b.n	8007ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fa47 	bl	8007fae <USBD_CtlError>
            err++;
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	3301      	adds	r3, #1
 8007b24:	72fb      	strb	r3, [r7, #11]
          break;
 8007b26:	e03b      	b.n	8007ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	7c12      	ldrb	r2, [r2, #16]
 8007b40:	f107 0108 	add.w	r1, r7, #8
 8007b44:	4610      	mov	r0, r2
 8007b46:	4798      	blx	r3
 8007b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b4a:	e029      	b.n	8007ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fa2d 	bl	8007fae <USBD_CtlError>
            err++;
 8007b54:	7afb      	ldrb	r3, [r7, #11]
 8007b56:	3301      	adds	r3, #1
 8007b58:	72fb      	strb	r3, [r7, #11]
          break;
 8007b5a:	e021      	b.n	8007ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	7c12      	ldrb	r2, [r2, #16]
 8007b74:	f107 0108 	add.w	r1, r7, #8
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b7e:	e00f      	b.n	8007ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fa13 	bl	8007fae <USBD_CtlError>
            err++;
 8007b88:	7afb      	ldrb	r3, [r7, #11]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b8e:	e007      	b.n	8007ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fa0b 	bl	8007fae <USBD_CtlError>
          err++;
 8007b98:	7afb      	ldrb	r3, [r7, #11]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007b9e:	e038      	b.n	8007c12 <USBD_GetDescriptor+0x286>
 8007ba0:	e037      	b.n	8007c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	7c1b      	ldrb	r3, [r3, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d109      	bne.n	8007bbe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bb2:	f107 0208 	add.w	r2, r7, #8
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	4798      	blx	r3
 8007bba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bbc:	e029      	b.n	8007c12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f9f4 	bl	8007fae <USBD_CtlError>
        err++;
 8007bc6:	7afb      	ldrb	r3, [r7, #11]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	72fb      	strb	r3, [r7, #11]
      break;
 8007bcc:	e021      	b.n	8007c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	7c1b      	ldrb	r3, [r3, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10d      	bne.n	8007bf2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bde:	f107 0208 	add.w	r2, r7, #8
 8007be2:	4610      	mov	r0, r2
 8007be4:	4798      	blx	r3
 8007be6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	2207      	movs	r2, #7
 8007bee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bf0:	e00f      	b.n	8007c12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f9da 	bl	8007fae <USBD_CtlError>
        err++;
 8007bfa:	7afb      	ldrb	r3, [r7, #11]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	72fb      	strb	r3, [r7, #11]
      break;
 8007c00:	e007      	b.n	8007c12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f9d2 	bl	8007fae <USBD_CtlError>
      err++;
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c10:	bf00      	nop
  }

  if (err != 0U)
 8007c12:	7afb      	ldrb	r3, [r7, #11]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d11c      	bne.n	8007c52 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007c18:	893b      	ldrh	r3, [r7, #8]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d011      	beq.n	8007c42 <USBD_GetDescriptor+0x2b6>
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	88db      	ldrh	r3, [r3, #6]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00d      	beq.n	8007c42 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	88da      	ldrh	r2, [r3, #6]
 8007c2a:	893b      	ldrh	r3, [r7, #8]
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	bf28      	it	cs
 8007c30:	4613      	movcs	r3, r2
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c36:	893b      	ldrh	r3, [r7, #8]
 8007c38:	461a      	mov	r2, r3
 8007c3a:	68f9      	ldr	r1, [r7, #12]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fa21 	bl	8008084 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	88db      	ldrh	r3, [r3, #6]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d104      	bne.n	8007c54 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fa78 	bl	8008140 <USBD_CtlSendStatus>
 8007c50:	e000      	b.n	8007c54 <USBD_GetDescriptor+0x2c8>
    return;
 8007c52:	bf00      	nop
    }
  }
}
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop

08007c5c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	889b      	ldrh	r3, [r3, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d130      	bne.n	8007cd0 <USBD_SetAddress+0x74>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	88db      	ldrh	r3, [r3, #6]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d12c      	bne.n	8007cd0 <USBD_SetAddress+0x74>
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	885b      	ldrh	r3, [r3, #2]
 8007c7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c7c:	d828      	bhi.n	8007cd0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	885b      	ldrh	r3, [r3, #2]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d104      	bne.n	8007c9e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f989 	bl	8007fae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c9c:	e01d      	b.n	8007cda <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	7bfa      	ldrb	r2, [r7, #15]
 8007ca2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fe9a 	bl	80089e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fa45 	bl	8008140 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d004      	beq.n	8007cc6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc4:	e009      	b.n	8007cda <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cce:	e004      	b.n	8007cda <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f96b 	bl	8007fae <USBD_CtlError>
  }
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	885b      	ldrh	r3, [r3, #2]
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	4b41      	ldr	r3, [pc, #260]	@ (8007dfc <USBD_SetConfig+0x118>)
 8007cf6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007cf8:	4b40      	ldr	r3, [pc, #256]	@ (8007dfc <USBD_SetConfig+0x118>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d904      	bls.n	8007d0a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f953 	bl	8007fae <USBD_CtlError>
 8007d08:	e075      	b.n	8007df6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d002      	beq.n	8007d1a <USBD_SetConfig+0x36>
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d023      	beq.n	8007d60 <USBD_SetConfig+0x7c>
 8007d18:	e062      	b.n	8007de0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007d1a:	4b38      	ldr	r3, [pc, #224]	@ (8007dfc <USBD_SetConfig+0x118>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d01a      	beq.n	8007d58 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007d22:	4b36      	ldr	r3, [pc, #216]	@ (8007dfc <USBD_SetConfig+0x118>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2203      	movs	r2, #3
 8007d30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d34:	4b31      	ldr	r3, [pc, #196]	@ (8007dfc <USBD_SetConfig+0x118>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7ff f9e4 	bl	8007108 <USBD_SetClassConfig>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d104      	bne.n	8007d50 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f930 	bl	8007fae <USBD_CtlError>
            return;
 8007d4e:	e052      	b.n	8007df6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f9f5 	bl	8008140 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d56:	e04e      	b.n	8007df6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f9f1 	bl	8008140 <USBD_CtlSendStatus>
        break;
 8007d5e:	e04a      	b.n	8007df6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007d60:	4b26      	ldr	r3, [pc, #152]	@ (8007dfc <USBD_SetConfig+0x118>)
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d112      	bne.n	8007d8e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007d70:	4b22      	ldr	r3, [pc, #136]	@ (8007dfc <USBD_SetConfig+0x118>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007d7a:	4b20      	ldr	r3, [pc, #128]	@ (8007dfc <USBD_SetConfig+0x118>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7ff f9e0 	bl	8007146 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f9da 	bl	8008140 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d8c:	e033      	b.n	8007df6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8007dfc <USBD_SetConfig+0x118>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d01d      	beq.n	8007dd8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7ff f9ce 	bl	8007146 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007daa:	4b14      	ldr	r3, [pc, #80]	@ (8007dfc <USBD_SetConfig+0x118>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007db4:	4b11      	ldr	r3, [pc, #68]	@ (8007dfc <USBD_SetConfig+0x118>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7ff f9a4 	bl	8007108 <USBD_SetClassConfig>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d104      	bne.n	8007dd0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f8f0 	bl	8007fae <USBD_CtlError>
            return;
 8007dce:	e012      	b.n	8007df6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f9b5 	bl	8008140 <USBD_CtlSendStatus>
        break;
 8007dd6:	e00e      	b.n	8007df6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f9b1 	bl	8008140 <USBD_CtlSendStatus>
        break;
 8007dde:	e00a      	b.n	8007df6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f8e3 	bl	8007fae <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007de8:	4b04      	ldr	r3, [pc, #16]	@ (8007dfc <USBD_SetConfig+0x118>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7ff f9a9 	bl	8007146 <USBD_ClrClassConfig>
        break;
 8007df4:	bf00      	nop
    }
  }
}
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	200002a4 	.word	0x200002a4

08007e00 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	88db      	ldrh	r3, [r3, #6]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d004      	beq.n	8007e1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f8ca 	bl	8007fae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e1a:	e022      	b.n	8007e62 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	dc02      	bgt.n	8007e2c <USBD_GetConfig+0x2c>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	dc03      	bgt.n	8007e32 <USBD_GetConfig+0x32>
 8007e2a:	e015      	b.n	8007e58 <USBD_GetConfig+0x58>
 8007e2c:	2b03      	cmp	r3, #3
 8007e2e:	d00b      	beq.n	8007e48 <USBD_GetConfig+0x48>
 8007e30:	e012      	b.n	8007e58 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f91f 	bl	8008084 <USBD_CtlSendData>
        break;
 8007e46:	e00c      	b.n	8007e62 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f917 	bl	8008084 <USBD_CtlSendData>
        break;
 8007e56:	e004      	b.n	8007e62 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f8a7 	bl	8007fae <USBD_CtlError>
        break;
 8007e60:	bf00      	nop
}
 8007e62:	bf00      	nop
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d81e      	bhi.n	8007ebe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	88db      	ldrh	r3, [r3, #6]
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d004      	beq.n	8007e92 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f88f 	bl	8007fae <USBD_CtlError>
        break;
 8007e90:	e01a      	b.n	8007ec8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f043 0202 	orr.w	r2, r3, #2
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	330c      	adds	r3, #12
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f8e4 	bl	8008084 <USBD_CtlSendData>
      break;
 8007ebc:	e004      	b.n	8007ec8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f874 	bl	8007fae <USBD_CtlError>
      break;
 8007ec6:	bf00      	nop
  }
}
 8007ec8:	bf00      	nop
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	885b      	ldrh	r3, [r3, #2]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d106      	bne.n	8007ef0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f928 	bl	8008140 <USBD_CtlSendStatus>
  }
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d80b      	bhi.n	8007f26 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	885b      	ldrh	r3, [r3, #2]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d10c      	bne.n	8007f30 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f90e 	bl	8008140 <USBD_CtlSendStatus>
      }
      break;
 8007f24:	e004      	b.n	8007f30 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f840 	bl	8007fae <USBD_CtlError>
      break;
 8007f2e:	e000      	b.n	8007f32 <USBD_ClrFeature+0x3a>
      break;
 8007f30:	bf00      	nop
  }
}
 8007f32:	bf00      	nop
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b083      	sub	sp, #12
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	781a      	ldrb	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	785a      	ldrb	r2, [r3, #1]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	3302      	adds	r3, #2
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	3303      	adds	r3, #3
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	021b      	lsls	r3, r3, #8
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	4413      	add	r3, r2
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	3304      	adds	r3, #4
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	461a      	mov	r2, r3
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	3305      	adds	r3, #5
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	021b      	lsls	r3, r3, #8
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	4413      	add	r3, r2
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	3306      	adds	r3, #6
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	3307      	adds	r3, #7
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	021b      	lsls	r3, r3, #8
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	4413      	add	r3, r2
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	80da      	strh	r2, [r3, #6]

}
 8007fa2:	bf00      	nop
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007fb8:	2180      	movs	r1, #128	@ 0x80
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fca8 	bl	8008910 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fca4 	bl	8008910 <USBD_LL_StallEP>
}
 8007fc8:	bf00      	nop
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d032      	beq.n	800804c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 f834 	bl	8008054 <USBD_GetLen>
 8007fec:	4603      	mov	r3, r0
 8007fee:	3301      	adds	r3, #1
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007ffa:	7dfb      	ldrb	r3, [r7, #23]
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	75fa      	strb	r2, [r7, #23]
 8008000:	461a      	mov	r2, r3
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	4413      	add	r3, r2
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	7812      	ldrb	r2, [r2, #0]
 800800a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800800c:	7dfb      	ldrb	r3, [r7, #23]
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	75fa      	strb	r2, [r7, #23]
 8008012:	461a      	mov	r2, r3
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	4413      	add	r3, r2
 8008018:	2203      	movs	r2, #3
 800801a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800801c:	e012      	b.n	8008044 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	1c5a      	adds	r2, r3, #1
 8008022:	60fa      	str	r2, [r7, #12]
 8008024:	7dfa      	ldrb	r2, [r7, #23]
 8008026:	1c51      	adds	r1, r2, #1
 8008028:	75f9      	strb	r1, [r7, #23]
 800802a:	4611      	mov	r1, r2
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	440a      	add	r2, r1
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	75fa      	strb	r2, [r7, #23]
 800803a:	461a      	mov	r2, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	4413      	add	r3, r2
 8008040:	2200      	movs	r2, #0
 8008042:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e8      	bne.n	800801e <USBD_GetString+0x4e>
    }
  }
}
 800804c:	bf00      	nop
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008060:	e005      	b.n	800806e <USBD_GetLen+0x1a>
  {
    len++;
 8008062:	7bfb      	ldrb	r3, [r7, #15]
 8008064:	3301      	adds	r3, #1
 8008066:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3301      	adds	r3, #1
 800806c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1f5      	bne.n	8008062 <USBD_GetLen+0xe>
  }

  return len;
 8008076:	7bfb      	ldrb	r3, [r7, #15]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	4613      	mov	r3, r2
 8008090:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2202      	movs	r2, #2
 8008096:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800809a:	88fa      	ldrh	r2, [r7, #6]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80080a0:	88fa      	ldrh	r2, [r7, #6]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080a6:	88fb      	ldrh	r3, [r7, #6]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	2100      	movs	r1, #0
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f000 fcb8 	bl	8008a22 <USBD_LL_Transmit>

  return USBD_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	4613      	mov	r3, r2
 80080c8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080ca:	88fb      	ldrh	r3, [r7, #6]
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	2100      	movs	r1, #0
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fca6 	bl	8008a22 <USBD_LL_Transmit>

  return USBD_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	4613      	mov	r3, r2
 80080ec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2203      	movs	r2, #3
 80080f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80080f6:	88fa      	ldrh	r2, [r7, #6]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80080fe:	88fa      	ldrh	r2, [r7, #6]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008106:	88fb      	ldrh	r3, [r7, #6]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	2100      	movs	r1, #0
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 fcab 	bl	8008a68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	4613      	mov	r3, r2
 8008128:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800812a:	88fb      	ldrh	r3, [r7, #6]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	2100      	movs	r1, #0
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 fc99 	bl	8008a68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2204      	movs	r2, #4
 800814c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008150:	2300      	movs	r3, #0
 8008152:	2200      	movs	r2, #0
 8008154:	2100      	movs	r1, #0
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fc63 	bl	8008a22 <USBD_LL_Transmit>

  return USBD_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2205      	movs	r2, #5
 8008172:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008176:	2300      	movs	r3, #0
 8008178:	2200      	movs	r2, #0
 800817a:	2100      	movs	r1, #0
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fc73 	bl	8008a68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008190:	2200      	movs	r2, #0
 8008192:	4912      	ldr	r1, [pc, #72]	@ (80081dc <MX_USB_DEVICE_Init+0x50>)
 8008194:	4812      	ldr	r0, [pc, #72]	@ (80081e0 <MX_USB_DEVICE_Init+0x54>)
 8008196:	f7fe ff5b 	bl	8007050 <USBD_Init>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081a0:	f7f8 fa8c 	bl	80006bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80081a4:	490f      	ldr	r1, [pc, #60]	@ (80081e4 <MX_USB_DEVICE_Init+0x58>)
 80081a6:	480e      	ldr	r0, [pc, #56]	@ (80081e0 <MX_USB_DEVICE_Init+0x54>)
 80081a8:	f7fe ff7d 	bl	80070a6 <USBD_RegisterClass>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081b2:	f7f8 fa83 	bl	80006bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80081b6:	490c      	ldr	r1, [pc, #48]	@ (80081e8 <MX_USB_DEVICE_Init+0x5c>)
 80081b8:	4809      	ldr	r0, [pc, #36]	@ (80081e0 <MX_USB_DEVICE_Init+0x54>)
 80081ba:	f7fe feab 	bl	8006f14 <USBD_CDC_RegisterInterface>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081c4:	f7f8 fa7a 	bl	80006bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081c8:	4805      	ldr	r0, [pc, #20]	@ (80081e0 <MX_USB_DEVICE_Init+0x54>)
 80081ca:	f7fe ff86 	bl	80070da <USBD_Start>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80081d4:	f7f8 fa72 	bl	80006bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081d8:	bf00      	nop
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	2000012c 	.word	0x2000012c
 80081e0:	200002a8 	.word	0x200002a8
 80081e4:	20000018 	.word	0x20000018
 80081e8:	2000011c 	.word	0x2000011c

080081ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081f0:	2200      	movs	r2, #0
 80081f2:	4905      	ldr	r1, [pc, #20]	@ (8008208 <CDC_Init_FS+0x1c>)
 80081f4:	4805      	ldr	r0, [pc, #20]	@ (800820c <CDC_Init_FS+0x20>)
 80081f6:	f7fe fea4 	bl	8006f42 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081fa:	4905      	ldr	r1, [pc, #20]	@ (8008210 <CDC_Init_FS+0x24>)
 80081fc:	4803      	ldr	r0, [pc, #12]	@ (800820c <CDC_Init_FS+0x20>)
 80081fe:	f7fe feba 	bl	8006f76 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008202:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008204:	4618      	mov	r0, r3
 8008206:	bd80      	pop	{r7, pc}
 8008208:	20000a70 	.word	0x20000a70
 800820c:	200002a8 	.word	0x200002a8
 8008210:	20000670 	.word	0x20000670

08008214 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008214:	b480      	push	{r7}
 8008216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008218:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800821a:	4618      	mov	r0, r3
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	4603      	mov	r3, r0
 800822c:	6039      	str	r1, [r7, #0]
 800822e:	71fb      	strb	r3, [r7, #7]
 8008230:	4613      	mov	r3, r2
 8008232:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	2b23      	cmp	r3, #35	@ 0x23
 8008238:	d84a      	bhi.n	80082d0 <CDC_Control_FS+0xac>
 800823a:	a201      	add	r2, pc, #4	@ (adr r2, 8008240 <CDC_Control_FS+0x1c>)
 800823c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008240:	080082d1 	.word	0x080082d1
 8008244:	080082d1 	.word	0x080082d1
 8008248:	080082d1 	.word	0x080082d1
 800824c:	080082d1 	.word	0x080082d1
 8008250:	080082d1 	.word	0x080082d1
 8008254:	080082d1 	.word	0x080082d1
 8008258:	080082d1 	.word	0x080082d1
 800825c:	080082d1 	.word	0x080082d1
 8008260:	080082d1 	.word	0x080082d1
 8008264:	080082d1 	.word	0x080082d1
 8008268:	080082d1 	.word	0x080082d1
 800826c:	080082d1 	.word	0x080082d1
 8008270:	080082d1 	.word	0x080082d1
 8008274:	080082d1 	.word	0x080082d1
 8008278:	080082d1 	.word	0x080082d1
 800827c:	080082d1 	.word	0x080082d1
 8008280:	080082d1 	.word	0x080082d1
 8008284:	080082d1 	.word	0x080082d1
 8008288:	080082d1 	.word	0x080082d1
 800828c:	080082d1 	.word	0x080082d1
 8008290:	080082d1 	.word	0x080082d1
 8008294:	080082d1 	.word	0x080082d1
 8008298:	080082d1 	.word	0x080082d1
 800829c:	080082d1 	.word	0x080082d1
 80082a0:	080082d1 	.word	0x080082d1
 80082a4:	080082d1 	.word	0x080082d1
 80082a8:	080082d1 	.word	0x080082d1
 80082ac:	080082d1 	.word	0x080082d1
 80082b0:	080082d1 	.word	0x080082d1
 80082b4:	080082d1 	.word	0x080082d1
 80082b8:	080082d1 	.word	0x080082d1
 80082bc:	080082d1 	.word	0x080082d1
 80082c0:	080082d1 	.word	0x080082d1
 80082c4:	080082d1 	.word	0x080082d1
 80082c8:	080082d1 	.word	0x080082d1
 80082cc:	080082d1 	.word	0x080082d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80082d0:	bf00      	nop
  }

  return (USBD_OK);
 80082d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (!rx_complete) {
 80082ea:	4b19      	ldr	r3, [pc, #100]	@ (8008350 <CDC_Receive_FS+0x70>)
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d129      	bne.n	8008346 <CDC_Receive_FS+0x66>
	if (rx_index + *Len <= RX_TARGET_LEN) {
 80082f2:	4b18      	ldr	r3, [pc, #96]	@ (8008354 <CDC_Receive_FS+0x74>)
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	461a      	mov	r2, r3
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4413      	add	r3, r2
 80082fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008302:	d81d      	bhi.n	8008340 <CDC_Receive_FS+0x60>
	  memcpy(&rx_buffer[rx_index], Buf, *Len);
 8008304:	4b13      	ldr	r3, [pc, #76]	@ (8008354 <CDC_Receive_FS+0x74>)
 8008306:	881b      	ldrh	r3, [r3, #0]
 8008308:	461a      	mov	r2, r3
 800830a:	4b13      	ldr	r3, [pc, #76]	@ (8008358 <CDC_Receive_FS+0x78>)
 800830c:	18d0      	adds	r0, r2, r3
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	6879      	ldr	r1, [r7, #4]
 8008316:	f000 fdaf 	bl	8008e78 <memcpy>
	  rx_index += *Len;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	b29a      	uxth	r2, r3
 8008320:	4b0c      	ldr	r3, [pc, #48]	@ (8008354 <CDC_Receive_FS+0x74>)
 8008322:	881b      	ldrh	r3, [r3, #0]
 8008324:	4413      	add	r3, r2
 8008326:	b29a      	uxth	r2, r3
 8008328:	4b0a      	ldr	r3, [pc, #40]	@ (8008354 <CDC_Receive_FS+0x74>)
 800832a:	801a      	strh	r2, [r3, #0]

	  if (rx_index >= RX_TARGET_LEN) {
 800832c:	4b09      	ldr	r3, [pc, #36]	@ (8008354 <CDC_Receive_FS+0x74>)
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	2bff      	cmp	r3, #255	@ 0xff
 8008332:	d905      	bls.n	8008340 <CDC_Receive_FS+0x60>
		rx_complete = 1;  // Segnala che la ricezione è completa
 8008334:	4b06      	ldr	r3, [pc, #24]	@ (8008350 <CDC_Receive_FS+0x70>)
 8008336:	2201      	movs	r2, #1
 8008338:	701a      	strb	r2, [r3, #0]
		rx_index = 0;     // Resetta l'indice (facoltativo)
 800833a:	4b06      	ldr	r3, [pc, #24]	@ (8008354 <CDC_Receive_FS+0x74>)
 800833c:	2200      	movs	r2, #0
 800833e:	801a      	strh	r2, [r3, #0]
	  }
	}
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008340:	4806      	ldr	r0, [pc, #24]	@ (800835c <CDC_Receive_FS+0x7c>)
 8008342:	f7fe fe5b 	bl	8006ffc <USBD_CDC_ReceivePacket>
  }
  /* USER CODE END 6 */
}
 8008346:	bf00      	nop
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	2000066e 	.word	0x2000066e
 8008354:	2000066c 	.word	0x2000066c
 8008358:	2000056c 	.word	0x2000056c
 800835c:	200002a8 	.word	0x200002a8

08008360 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008370:	4b0d      	ldr	r3, [pc, #52]	@ (80083a8 <CDC_Transmit_FS+0x48>)
 8008372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008376:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008382:	2301      	movs	r3, #1
 8008384:	e00b      	b.n	800839e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008386:	887b      	ldrh	r3, [r7, #2]
 8008388:	461a      	mov	r2, r3
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	4806      	ldr	r0, [pc, #24]	@ (80083a8 <CDC_Transmit_FS+0x48>)
 800838e:	f7fe fdd8 	bl	8006f42 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008392:	4805      	ldr	r0, [pc, #20]	@ (80083a8 <CDC_Transmit_FS+0x48>)
 8008394:	f7fe fe03 	bl	8006f9e <USBD_CDC_TransmitPacket>
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800839c:	7bfb      	ldrb	r3, [r7, #15]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	200002a8 	.word	0x200002a8

080083ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	6039      	str	r1, [r7, #0]
 80083b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	2212      	movs	r2, #18
 80083bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083be:	4b03      	ldr	r3, [pc, #12]	@ (80083cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	20000148 	.word	0x20000148

080083d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	4603      	mov	r3, r0
 80083d8:	6039      	str	r1, [r7, #0]
 80083da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	2204      	movs	r2, #4
 80083e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083e2:	4b03      	ldr	r3, [pc, #12]	@ (80083f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	2000015c 	.word	0x2000015c

080083f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	6039      	str	r1, [r7, #0]
 80083fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d105      	bne.n	8008412 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	4907      	ldr	r1, [pc, #28]	@ (8008428 <USBD_FS_ProductStrDescriptor+0x34>)
 800840a:	4808      	ldr	r0, [pc, #32]	@ (800842c <USBD_FS_ProductStrDescriptor+0x38>)
 800840c:	f7ff fde0 	bl	8007fd0 <USBD_GetString>
 8008410:	e004      	b.n	800841c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	4904      	ldr	r1, [pc, #16]	@ (8008428 <USBD_FS_ProductStrDescriptor+0x34>)
 8008416:	4805      	ldr	r0, [pc, #20]	@ (800842c <USBD_FS_ProductStrDescriptor+0x38>)
 8008418:	f7ff fdda 	bl	8007fd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800841c:	4b02      	ldr	r3, [pc, #8]	@ (8008428 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800841e:	4618      	mov	r0, r3
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000e70 	.word	0x20000e70
 800842c:	08009cd4 	.word	0x08009cd4

08008430 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	4603      	mov	r3, r0
 8008438:	6039      	str	r1, [r7, #0]
 800843a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	4904      	ldr	r1, [pc, #16]	@ (8008450 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008440:	4804      	ldr	r0, [pc, #16]	@ (8008454 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008442:	f7ff fdc5 	bl	8007fd0 <USBD_GetString>
  return USBD_StrDesc;
 8008446:	4b02      	ldr	r3, [pc, #8]	@ (8008450 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	20000e70 	.word	0x20000e70
 8008454:	08009cec 	.word	0x08009cec

08008458 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	4603      	mov	r3, r0
 8008460:	6039      	str	r1, [r7, #0]
 8008462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	221a      	movs	r2, #26
 8008468:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800846a:	f000 f843 	bl	80084f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800846e:	4b02      	ldr	r3, [pc, #8]	@ (8008478 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20000160 	.word	0x20000160

0800847c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	4603      	mov	r3, r0
 8008484:	6039      	str	r1, [r7, #0]
 8008486:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008488:	79fb      	ldrb	r3, [r7, #7]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d105      	bne.n	800849a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	4907      	ldr	r1, [pc, #28]	@ (80084b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008492:	4808      	ldr	r0, [pc, #32]	@ (80084b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008494:	f7ff fd9c 	bl	8007fd0 <USBD_GetString>
 8008498:	e004      	b.n	80084a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	4904      	ldr	r1, [pc, #16]	@ (80084b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800849e:	4805      	ldr	r0, [pc, #20]	@ (80084b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084a0:	f7ff fd96 	bl	8007fd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084a4:	4b02      	ldr	r3, [pc, #8]	@ (80084b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000e70 	.word	0x20000e70
 80084b4:	08009d00 	.word	0x08009d00

080084b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	6039      	str	r1, [r7, #0]
 80084c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084c4:	79fb      	ldrb	r3, [r7, #7]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d105      	bne.n	80084d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084ca:	683a      	ldr	r2, [r7, #0]
 80084cc:	4907      	ldr	r1, [pc, #28]	@ (80084ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084ce:	4808      	ldr	r0, [pc, #32]	@ (80084f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084d0:	f7ff fd7e 	bl	8007fd0 <USBD_GetString>
 80084d4:	e004      	b.n	80084e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	4904      	ldr	r1, [pc, #16]	@ (80084ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084da:	4805      	ldr	r0, [pc, #20]	@ (80084f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084dc:	f7ff fd78 	bl	8007fd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084e0:	4b02      	ldr	r3, [pc, #8]	@ (80084ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	20000e70 	.word	0x20000e70
 80084f0:	08009d0c 	.word	0x08009d0c

080084f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008538 <Get_SerialNum+0x44>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008500:	4b0e      	ldr	r3, [pc, #56]	@ (800853c <Get_SerialNum+0x48>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008506:	4b0e      	ldr	r3, [pc, #56]	@ (8008540 <Get_SerialNum+0x4c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4413      	add	r3, r2
 8008512:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d009      	beq.n	800852e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800851a:	2208      	movs	r2, #8
 800851c:	4909      	ldr	r1, [pc, #36]	@ (8008544 <Get_SerialNum+0x50>)
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 f814 	bl	800854c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008524:	2204      	movs	r2, #4
 8008526:	4908      	ldr	r1, [pc, #32]	@ (8008548 <Get_SerialNum+0x54>)
 8008528:	68b8      	ldr	r0, [r7, #8]
 800852a:	f000 f80f 	bl	800854c <IntToUnicode>
  }
}
 800852e:	bf00      	nop
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	1ffff7ac 	.word	0x1ffff7ac
 800853c:	1ffff7b0 	.word	0x1ffff7b0
 8008540:	1ffff7b4 	.word	0x1ffff7b4
 8008544:	20000162 	.word	0x20000162
 8008548:	20000172 	.word	0x20000172

0800854c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800854c:	b480      	push	{r7}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	4613      	mov	r3, r2
 8008558:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800855e:	2300      	movs	r3, #0
 8008560:	75fb      	strb	r3, [r7, #23]
 8008562:	e027      	b.n	80085b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	0f1b      	lsrs	r3, r3, #28
 8008568:	2b09      	cmp	r3, #9
 800856a:	d80b      	bhi.n	8008584 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	0f1b      	lsrs	r3, r3, #28
 8008570:	b2da      	uxtb	r2, r3
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	005b      	lsls	r3, r3, #1
 8008576:	4619      	mov	r1, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	440b      	add	r3, r1
 800857c:	3230      	adds	r2, #48	@ 0x30
 800857e:	b2d2      	uxtb	r2, r2
 8008580:	701a      	strb	r2, [r3, #0]
 8008582:	e00a      	b.n	800859a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	0f1b      	lsrs	r3, r3, #28
 8008588:	b2da      	uxtb	r2, r3
 800858a:	7dfb      	ldrb	r3, [r7, #23]
 800858c:	005b      	lsls	r3, r3, #1
 800858e:	4619      	mov	r1, r3
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	440b      	add	r3, r1
 8008594:	3237      	adds	r2, #55	@ 0x37
 8008596:	b2d2      	uxtb	r2, r2
 8008598:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	011b      	lsls	r3, r3, #4
 800859e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	3301      	adds	r3, #1
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	4413      	add	r3, r2
 80085aa:	2200      	movs	r2, #0
 80085ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
 80085b0:	3301      	adds	r3, #1
 80085b2:	75fb      	strb	r3, [r7, #23]
 80085b4:	7dfa      	ldrb	r2, [r7, #23]
 80085b6:	79fb      	ldrb	r3, [r7, #7]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d3d3      	bcc.n	8008564 <IntToUnicode+0x18>
  }
}
 80085bc:	bf00      	nop
 80085be:	bf00      	nop
 80085c0:	371c      	adds	r7, #28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
	...

080085cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08a      	sub	sp, #40	@ 0x28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085d4:	f107 0314 	add.w	r3, r7, #20
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	605a      	str	r2, [r3, #4]
 80085de:	609a      	str	r2, [r3, #8]
 80085e0:	60da      	str	r2, [r3, #12]
 80085e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a1c      	ldr	r2, [pc, #112]	@ (800865c <HAL_PCD_MspInit+0x90>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d131      	bne.n	8008652 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008660 <HAL_PCD_MspInit+0x94>)
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	4a1b      	ldr	r2, [pc, #108]	@ (8008660 <HAL_PCD_MspInit+0x94>)
 80085f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085f8:	6153      	str	r3, [r2, #20]
 80085fa:	4b19      	ldr	r3, [pc, #100]	@ (8008660 <HAL_PCD_MspInit+0x94>)
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008602:	613b      	str	r3, [r7, #16]
 8008604:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8008606:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800860a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800860c:	2302      	movs	r3, #2
 800860e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008610:	2300      	movs	r3, #0
 8008612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008614:	2303      	movs	r3, #3
 8008616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8008618:	230e      	movs	r3, #14
 800861a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800861c:	f107 0314 	add.w	r3, r7, #20
 8008620:	4619      	mov	r1, r3
 8008622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008626:	f7f8 fb0b 	bl	8000c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800862a:	4b0d      	ldr	r3, [pc, #52]	@ (8008660 <HAL_PCD_MspInit+0x94>)
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	4a0c      	ldr	r2, [pc, #48]	@ (8008660 <HAL_PCD_MspInit+0x94>)
 8008630:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008634:	61d3      	str	r3, [r2, #28]
 8008636:	4b0a      	ldr	r3, [pc, #40]	@ (8008660 <HAL_PCD_MspInit+0x94>)
 8008638:	69db      	ldr	r3, [r3, #28]
 800863a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800863e:	60fb      	str	r3, [r7, #12]
 8008640:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8008642:	2200      	movs	r2, #0
 8008644:	2100      	movs	r1, #0
 8008646:	2014      	movs	r0, #20
 8008648:	f7f8 fac3 	bl	8000bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800864c:	2014      	movs	r0, #20
 800864e:	f7f8 fadc 	bl	8000c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008652:	bf00      	nop
 8008654:	3728      	adds	r7, #40	@ 0x28
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	40005c00 	.word	0x40005c00
 8008660:	40021000 	.word	0x40021000

08008664 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008678:	4619      	mov	r1, r3
 800867a:	4610      	mov	r0, r2
 800867c:	f7fe fd76 	bl	800716c <USBD_LL_SetupStage>
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800869a:	78fa      	ldrb	r2, [r7, #3]
 800869c:	6879      	ldr	r1, [r7, #4]
 800869e:	4613      	mov	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	00db      	lsls	r3, r3, #3
 80086a6:	440b      	add	r3, r1
 80086a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	4619      	mov	r1, r3
 80086b2:	f7fe fda8 	bl	8007206 <USBD_LL_DataOutStage>
}
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	460b      	mov	r3, r1
 80086c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 80086d0:	78fa      	ldrb	r2, [r7, #3]
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	440b      	add	r3, r1
 80086de:	3324      	adds	r3, #36	@ 0x24
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	78fb      	ldrb	r3, [r7, #3]
 80086e4:	4619      	mov	r1, r3
 80086e6:	f7fe fdff 	bl	80072e8 <USBD_LL_DataInStage>
}
 80086ea:	bf00      	nop
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe ff12 	bl	800752a <USBD_LL_SOF>
}
 8008706:	bf00      	nop
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008716:	2301      	movs	r3, #1
 8008718:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	795b      	ldrb	r3, [r3, #5]
 800871e:	2b02      	cmp	r3, #2
 8008720:	d001      	beq.n	8008726 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008722:	f7f7 ffcb 	bl	80006bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800872c:	7bfa      	ldrb	r2, [r7, #15]
 800872e:	4611      	mov	r1, r2
 8008730:	4618      	mov	r0, r3
 8008732:	f7fe febf 	bl	80074b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800873c:	4618      	mov	r0, r3
 800873e:	f7fe fe78 	bl	8007432 <USBD_LL_Reset>
}
 8008742:	bf00      	nop
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe feba 	bl	80074d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	7a5b      	ldrb	r3, [r3, #9]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d005      	beq.n	8008774 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008768:	4b04      	ldr	r3, [pc, #16]	@ (800877c <HAL_PCD_SuspendCallback+0x30>)
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	4a03      	ldr	r2, [pc, #12]	@ (800877c <HAL_PCD_SuspendCallback+0x30>)
 800876e:	f043 0306 	orr.w	r3, r3, #6
 8008772:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008774:	bf00      	nop
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	e000ed00 	.word	0xe000ed00

08008780 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800878e:	4618      	mov	r0, r3
 8008790:	f7fe feb5 	bl	80074fe <USBD_LL_Resume>
}
 8008794:	bf00      	nop
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80087a4:	4a28      	ldr	r2, [pc, #160]	@ (8008848 <USBD_LL_Init+0xac>)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a26      	ldr	r2, [pc, #152]	@ (8008848 <USBD_LL_Init+0xac>)
 80087b0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80087b4:	4b24      	ldr	r3, [pc, #144]	@ (8008848 <USBD_LL_Init+0xac>)
 80087b6:	4a25      	ldr	r2, [pc, #148]	@ (800884c <USBD_LL_Init+0xb0>)
 80087b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80087ba:	4b23      	ldr	r3, [pc, #140]	@ (8008848 <USBD_LL_Init+0xac>)
 80087bc:	2208      	movs	r2, #8
 80087be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80087c0:	4b21      	ldr	r3, [pc, #132]	@ (8008848 <USBD_LL_Init+0xac>)
 80087c2:	2202      	movs	r2, #2
 80087c4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80087c6:	4b20      	ldr	r3, [pc, #128]	@ (8008848 <USBD_LL_Init+0xac>)
 80087c8:	2202      	movs	r2, #2
 80087ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80087cc:	4b1e      	ldr	r3, [pc, #120]	@ (8008848 <USBD_LL_Init+0xac>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80087d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008848 <USBD_LL_Init+0xac>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80087d8:	481b      	ldr	r0, [pc, #108]	@ (8008848 <USBD_LL_Init+0xac>)
 80087da:	f7f8 fcf5 	bl	80011c8 <HAL_PCD_Init>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80087e4:	f7f7 ff6a 	bl	80006bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80087ee:	2318      	movs	r3, #24
 80087f0:	2200      	movs	r2, #0
 80087f2:	2100      	movs	r1, #0
 80087f4:	f7fa f96e 	bl	8002ad4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80087fe:	2358      	movs	r3, #88	@ 0x58
 8008800:	2200      	movs	r2, #0
 8008802:	2180      	movs	r1, #128	@ 0x80
 8008804:	f7fa f966 	bl	8002ad4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800880e:	23c0      	movs	r3, #192	@ 0xc0
 8008810:	2200      	movs	r2, #0
 8008812:	2181      	movs	r1, #129	@ 0x81
 8008814:	f7fa f95e 	bl	8002ad4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800881e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008822:	2200      	movs	r2, #0
 8008824:	2101      	movs	r1, #1
 8008826:	f7fa f955 	bl	8002ad4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008830:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008834:	2200      	movs	r2, #0
 8008836:	2182      	movs	r1, #130	@ 0x82
 8008838:	f7fa f94c 	bl	8002ad4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20001070 	.word	0x20001070
 800884c:	40005c00 	.word	0x40005c00

08008850 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008866:	4618      	mov	r0, r3
 8008868:	f7f8 fd75 	bl	8001356 <HAL_PCD_Start>
 800886c:	4603      	mov	r3, r0
 800886e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008870:	7bfb      	ldrb	r3, [r7, #15]
 8008872:	4618      	mov	r0, r3
 8008874:	f000 f952 	bl	8008b1c <USBD_Get_USB_Status>
 8008878:	4603      	mov	r3, r0
 800887a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800887c:	7bbb      	ldrb	r3, [r7, #14]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	4608      	mov	r0, r1
 8008890:	4611      	mov	r1, r2
 8008892:	461a      	mov	r2, r3
 8008894:	4603      	mov	r3, r0
 8008896:	70fb      	strb	r3, [r7, #3]
 8008898:	460b      	mov	r3, r1
 800889a:	70bb      	strb	r3, [r7, #2]
 800889c:	4613      	mov	r3, r2
 800889e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80088ae:	78bb      	ldrb	r3, [r7, #2]
 80088b0:	883a      	ldrh	r2, [r7, #0]
 80088b2:	78f9      	ldrb	r1, [r7, #3]
 80088b4:	f7f8 fe6d 	bl	8001592 <HAL_PCD_EP_Open>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 f92c 	bl	8008b1c <USBD_Get_USB_Status>
 80088c4:	4603      	mov	r3, r0
 80088c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80088ec:	78fa      	ldrb	r2, [r7, #3]
 80088ee:	4611      	mov	r1, r2
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7f8 feab 	bl	800164c <HAL_PCD_EP_Close>
 80088f6:	4603      	mov	r3, r0
 80088f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 f90d 	bl	8008b1c <USBD_Get_USB_Status>
 8008902:	4603      	mov	r3, r0
 8008904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008906:	7bbb      	ldrb	r3, [r7, #14]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008920:	2300      	movs	r3, #0
 8008922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800892a:	78fa      	ldrb	r2, [r7, #3]
 800892c:	4611      	mov	r1, r2
 800892e:	4618      	mov	r0, r3
 8008930:	f7f8 ff54 	bl	80017dc <HAL_PCD_EP_SetStall>
 8008934:	4603      	mov	r3, r0
 8008936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	4618      	mov	r0, r3
 800893c:	f000 f8ee 	bl	8008b1c <USBD_Get_USB_Status>
 8008940:	4603      	mov	r3, r0
 8008942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008944:	7bbb      	ldrb	r3, [r7, #14]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	460b      	mov	r3, r1
 8008958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008968:	78fa      	ldrb	r2, [r7, #3]
 800896a:	4611      	mov	r1, r2
 800896c:	4618      	mov	r0, r3
 800896e:	f7f8 ff87 	bl	8001880 <HAL_PCD_EP_ClrStall>
 8008972:	4603      	mov	r3, r0
 8008974:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	4618      	mov	r0, r3
 800897a:	f000 f8cf 	bl	8008b1c <USBD_Get_USB_Status>
 800897e:	4603      	mov	r3, r0
 8008980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008982:	7bbb      	ldrb	r3, [r7, #14]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800899e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	da0b      	bge.n	80089c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089a8:	78fb      	ldrb	r3, [r7, #3]
 80089aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089ae:	68f9      	ldr	r1, [r7, #12]
 80089b0:	4613      	mov	r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	00db      	lsls	r3, r3, #3
 80089b8:	440b      	add	r3, r1
 80089ba:	3312      	adds	r3, #18
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	e00b      	b.n	80089d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089c0:	78fb      	ldrb	r3, [r7, #3]
 80089c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089c6:	68f9      	ldr	r1, [r7, #12]
 80089c8:	4613      	mov	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	00db      	lsls	r3, r3, #3
 80089d0:	440b      	add	r3, r1
 80089d2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80089d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	460b      	mov	r3, r1
 80089ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80089fe:	78fa      	ldrb	r2, [r7, #3]
 8008a00:	4611      	mov	r1, r2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7f8 fda1 	bl	800154a <HAL_PCD_SetAddress>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 f884 	bl	8008b1c <USBD_Get_USB_Status>
 8008a14:	4603      	mov	r3, r0
 8008a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b086      	sub	sp, #24
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	460b      	mov	r3, r1
 8008a30:	72fb      	strb	r3, [r7, #11]
 8008a32:	4613      	mov	r3, r2
 8008a34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a44:	893b      	ldrh	r3, [r7, #8]
 8008a46:	7af9      	ldrb	r1, [r7, #11]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	f7f8 fe90 	bl	800176e <HAL_PCD_EP_Transmit>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 f861 	bl	8008b1c <USBD_Get_USB_Status>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	607a      	str	r2, [r7, #4]
 8008a72:	461a      	mov	r2, r3
 8008a74:	460b      	mov	r3, r1
 8008a76:	72fb      	strb	r3, [r7, #11]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a8a:	893b      	ldrh	r3, [r7, #8]
 8008a8c:	7af9      	ldrb	r1, [r7, #11]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	f7f8 fe24 	bl	80016dc <HAL_PCD_EP_Receive>
 8008a94:	4603      	mov	r3, r0
 8008a96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 f83e 	bl	8008b1c <USBD_Get_USB_Status>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008aa4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ac0:	78fa      	ldrb	r2, [r7, #3]
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7f8 fe3a 	bl	800173e <HAL_PCD_EP_GetRxCount>
 8008aca:	4603      	mov	r3, r0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008adc:	4b03      	ldr	r3, [pc, #12]	@ (8008aec <USBD_static_malloc+0x18>)
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	20001344 	.word	0x20001344

08008af0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]

}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d817      	bhi.n	8008b60 <USBD_Get_USB_Status+0x44>
 8008b30:	a201      	add	r2, pc, #4	@ (adr r2, 8008b38 <USBD_Get_USB_Status+0x1c>)
 8008b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b36:	bf00      	nop
 8008b38:	08008b49 	.word	0x08008b49
 8008b3c:	08008b4f 	.word	0x08008b4f
 8008b40:	08008b55 	.word	0x08008b55
 8008b44:	08008b5b 	.word	0x08008b5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4c:	e00b      	b.n	8008b66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b4e:	2302      	movs	r3, #2
 8008b50:	73fb      	strb	r3, [r7, #15]
    break;
 8008b52:	e008      	b.n	8008b66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b54:	2301      	movs	r3, #1
 8008b56:	73fb      	strb	r3, [r7, #15]
    break;
 8008b58:	e005      	b.n	8008b66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5e:	e002      	b.n	8008b66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b60:	2302      	movs	r3, #2
 8008b62:	73fb      	strb	r3, [r7, #15]
    break;
 8008b64:	bf00      	nop
  }
  return usb_status;
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <arm_fft>:
 8008b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b78:	ed2d 8b02 	vpush	{d8}
 8008b7c:	2a01      	cmp	r2, #1
 8008b7e:	b087      	sub	sp, #28
 8008b80:	460d      	mov	r5, r1
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	d079      	beq.n	8008c7a <arm_fft+0x106>
 8008b86:	4693      	mov	fp, r2
 8008b88:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8008b8c:	ea4f 0a62 	mov.w	sl, r2, asr #1
 8008b90:	dd7c      	ble.n	8008c8c <arm_fft+0x118>
 8008b92:	f8df e128 	ldr.w	lr, [pc, #296]	@ 8008cbc <arm_fft+0x148>
 8008b96:	4a48      	ldr	r2, [pc, #288]	@ (8008cb8 <arm_fft+0x144>)
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2400      	movs	r4, #0
 8008b9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008ba0:	eb0e 06c4 	add.w	r6, lr, r4, lsl #3
 8008ba4:	e886 0003 	stmia.w	r6, {r0, r1}
 8008ba8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008bac:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
 8008bb0:	3401      	adds	r4, #1
 8008bb2:	4554      	cmp	r4, sl
 8008bb4:	e886 0003 	stmia.w	r6, {r0, r1}
 8008bb8:	f103 0310 	add.w	r3, r3, #16
 8008bbc:	dbee      	blt.n	8008b9c <arm_fft+0x28>
 8008bbe:	466b      	mov	r3, sp
 8008bc0:	ee08 3a10 	vmov	s16, r3
 8008bc4:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8008bc8:	469d      	mov	sp, r3
 8008bca:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8008bce:	46e8      	mov	r8, sp
 8008bd0:	469d      	mov	sp, r3
 8008bd2:	483a      	ldr	r0, [pc, #232]	@ (8008cbc <arm_fft+0x148>)
 8008bd4:	4641      	mov	r1, r8
 8008bd6:	4652      	mov	r2, sl
 8008bd8:	466e      	mov	r6, sp
 8008bda:	f7ff ffcb 	bl	8008b74 <arm_fft>
 8008bde:	4836      	ldr	r0, [pc, #216]	@ (8008cb8 <arm_fft+0x144>)
 8008be0:	4652      	mov	r2, sl
 8008be2:	4631      	mov	r1, r6
 8008be4:	f7ff ffc6 	bl	8008b74 <arm_fft>
 8008be8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008bec:	607b      	str	r3, [r7, #4]
 8008bee:	f04f 0900 	mov.w	r9, #0
 8008bf2:	4648      	mov	r0, r9
 8008bf4:	4659      	mov	r1, fp
 8008bf6:	f000 f8e5 	bl	8008dc4 <esponenziale_negj>
 8008bfa:	eb06 03c9 	add.w	r3, r6, r9, lsl #3
 8008bfe:	ed93 1a00 	vldr	s2, [r3]
 8008c02:	edd3 1a01 	vldr	s3, [r3, #4]
 8008c06:	ed87 0a02 	vstr	s0, [r7, #8]
 8008c0a:	edc7 0a03 	vstr	s1, [r7, #12]
 8008c0e:	f000 f8cb 	bl	8008da8 <prodotto_c>
 8008c12:	ea4f 04c9 	mov.w	r4, r9, lsl #3
 8008c16:	4444      	add	r4, r8
 8008c18:	eeb0 1a40 	vmov.f32	s2, s0
 8008c1c:	eef0 1a60 	vmov.f32	s3, s1
 8008c20:	ed94 0a00 	vldr	s0, [r4]
 8008c24:	edd4 0a01 	vldr	s1, [r4, #4]
 8008c28:	edc7 1a05 	vstr	s3, [r7, #20]
 8008c2c:	ed87 1a04 	vstr	s2, [r7, #16]
 8008c30:	f000 f8aa 	bl	8008d88 <somma_c>
 8008c34:	ed97 1a04 	vldr	s2, [r7, #16]
 8008c38:	ed85 0a00 	vstr	s0, [r5]
 8008c3c:	edc5 0a01 	vstr	s1, [r5, #4]
 8008c40:	ed94 0a00 	vldr	s0, [r4]
 8008c44:	edd4 0a01 	vldr	s1, [r4, #4]
 8008c48:	edd7 1a05 	vldr	s3, [r7, #20]
 8008c4c:	f000 f8a4 	bl	8008d98 <sottrazione_c>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f109 0901 	add.w	r9, r9, #1
 8008c56:	442b      	add	r3, r5
 8008c58:	45d1      	cmp	r9, sl
 8008c5a:	ed83 0a00 	vstr	s0, [r3]
 8008c5e:	f105 0508 	add.w	r5, r5, #8
 8008c62:	edc3 0a01 	vstr	s1, [r3, #4]
 8008c66:	dbc4      	blt.n	8008bf2 <arm_fft+0x7e>
 8008c68:	ee18 3a10 	vmov	r3, s16
 8008c6c:	371c      	adds	r7, #28
 8008c6e:	469d      	mov	sp, r3
 8008c70:	46bd      	mov	sp, r7
 8008c72:	ecbd 8b02 	vpop	{d8}
 8008c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7a:	c803      	ldmia	r0, {r0, r1}
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008c82:	46bd      	mov	sp, r7
 8008c84:	ecbd 8b02 	vpop	{d8}
 8008c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8c:	466b      	mov	r3, sp
 8008c8e:	ee08 3a10 	vmov	s16, r3
 8008c92:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8008c96:	469d      	mov	sp, r3
 8008c98:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8008c9c:	4669      	mov	r1, sp
 8008c9e:	469d      	mov	sp, r3
 8008ca0:	4652      	mov	r2, sl
 8008ca2:	4806      	ldr	r0, [pc, #24]	@ (8008cbc <arm_fft+0x148>)
 8008ca4:	466c      	mov	r4, sp
 8008ca6:	f7ff ff65 	bl	8008b74 <arm_fft>
 8008caa:	4803      	ldr	r0, [pc, #12]	@ (8008cb8 <arm_fft+0x144>)
 8008cac:	4652      	mov	r2, sl
 8008cae:	4621      	mov	r1, r4
 8008cb0:	f7ff ff60 	bl	8008b74 <arm_fft>
 8008cb4:	e7d8      	b.n	8008c68 <arm_fft+0xf4>
 8008cb6:	bf00      	nop
 8008cb8:	20001564 	.word	0x20001564
 8008cbc:	20003564 	.word	0x20003564

08008cc0 <fft_to_spectrogram>:
 8008cc0:	2a00      	cmp	r2, #0
 8008cc2:	dd50      	ble.n	8008d66 <fft_to_spectrogram+0xa6>
 8008cc4:	b570      	push	{r4, r5, r6, lr}
 8008cc6:	ed2d 8b04 	vpush	{d8-d9}
 8008cca:	eddf 8a2d 	vldr	s17, [pc, #180]	@ 8008d80 <fft_to_spectrogram+0xc0>
 8008cce:	b084      	sub	sp, #16
 8008cd0:	eeb0 8a40 	vmov.f32	s16, s0
 8008cd4:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8008cd8:	460c      	mov	r4, r1
 8008cda:	460d      	mov	r5, r1
 8008cdc:	edd0 7a01 	vldr	s15, [r0, #4]
 8008ce0:	ed90 7a00 	vldr	s14, [r0]
 8008ce4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008ce8:	3008      	adds	r0, #8
 8008cea:	eee7 7a07 	vfma.f32	s15, s14, s14
 8008cee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf6:	eeb1 9ae7 	vsqrt.f32	s18, s15
 8008cfa:	d435      	bmi.n	8008d68 <fft_to_spectrogram+0xa8>
 8008cfc:	eeb4 9a68 	vcmp.f32	s18, s17
 8008d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d04:	bfc8      	it	gt
 8008d06:	eef0 8a49 	vmovgt.f32	s17, s18
 8008d0a:	42b0      	cmp	r0, r6
 8008d0c:	eca5 9a01 	vstmia	r5!, {s18}
 8008d10:	d1e4      	bne.n	8008cdc <fft_to_spectrogram+0x1c>
 8008d12:	ed9f 9a1c 	vldr	s18, [pc, #112]	@ 8008d84 <fft_to_spectrogram+0xc4>
 8008d16:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8008d1a:	eef3 9a04 	vmov.f32	s19, #52	@ 0x41a00000  20.0
 8008d1e:	ed94 0a00 	vldr	s0, [r4]
 8008d22:	eeb4 0a49 	vcmp.f32	s0, s18
 8008d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d2a:	bf48      	it	mi
 8008d2c:	eeb0 0a49 	vmovmi.f32	s0, s18
 8008d30:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8008d34:	f000 f8ae 	bl	8008e94 <log10f>
 8008d38:	ee20 0a29 	vmul.f32	s0, s0, s19
 8008d3c:	eeb4 0a48 	vcmp.f32	s0, s16
 8008d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d44:	bf48      	it	mi
 8008d46:	eeb0 0a48 	vmovmi.f32	s0, s16
 8008d4a:	ee70 7a48 	vsub.f32	s15, s0, s16
 8008d4e:	eef1 7a67 	vneg.f32	s15, s15
 8008d52:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8008d56:	eca4 7a01 	vstmia	r4!, {s14}
 8008d5a:	42a5      	cmp	r5, r4
 8008d5c:	d1df      	bne.n	8008d1e <fft_to_spectrogram+0x5e>
 8008d5e:	b004      	add	sp, #16
 8008d60:	ecbd 8b04 	vpop	{d8-d9}
 8008d64:	bd70      	pop	{r4, r5, r6, pc}
 8008d66:	4770      	bx	lr
 8008d68:	eeb0 0a67 	vmov.f32	s0, s15
 8008d6c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008d70:	9001      	str	r0, [sp, #4]
 8008d72:	f000 f8bd 	bl	8008ef0 <sqrtf>
 8008d76:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008d7a:	9801      	ldr	r0, [sp, #4]
 8008d7c:	e7be      	b.n	8008cfc <fft_to_spectrogram+0x3c>
 8008d7e:	bf00      	nop
 8008d80:	00000000 	.word	0x00000000
 8008d84:	2b8cbccc 	.word	0x2b8cbccc

08008d88 <somma_c>:
 8008d88:	ee30 0a01 	vadd.f32	s0, s0, s2
 8008d8c:	ee70 0aa1 	vadd.f32	s1, s1, s3
 8008d90:	b088      	sub	sp, #32
 8008d92:	b008      	add	sp, #32
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop

08008d98 <sottrazione_c>:
 8008d98:	ee30 0a41 	vsub.f32	s0, s0, s2
 8008d9c:	ee70 0ae1 	vsub.f32	s1, s1, s3
 8008da0:	b088      	sub	sp, #32
 8008da2:	b008      	add	sp, #32
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop

08008da8 <prodotto_c>:
 8008da8:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8008dac:	ee60 0a81 	vmul.f32	s1, s1, s2
 8008db0:	eee0 7a01 	vfma.f32	s15, s0, s2
 8008db4:	b088      	sub	sp, #32
 8008db6:	eee0 0a21 	vfma.f32	s1, s0, s3
 8008dba:	eeb0 0a67 	vmov.f32	s0, s15
 8008dbe:	b008      	add	sp, #32
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop

08008dc4 <esponenziale_negj>:
 8008dc4:	ee07 0a90 	vmov	s15, r0
 8008dc8:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8008e10 <esponenziale_negj+0x4c>
 8008dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dd0:	b500      	push	{lr}
 8008dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008dd6:	ee07 1a10 	vmov	s14, r1
 8008dda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008dde:	ed2d 8b02 	vpush	{d8}
 8008de2:	eec7 8a87 	vdiv.f32	s17, s15, s14
 8008de6:	b085      	sub	sp, #20
 8008de8:	eeb0 0a68 	vmov.f32	s0, s17
 8008dec:	f000 f89e 	bl	8008f2c <cosf>
 8008df0:	eeb0 8a40 	vmov.f32	s16, s0
 8008df4:	eeb0 0a68 	vmov.f32	s0, s17
 8008df8:	f000 f8dc 	bl	8008fb4 <sinf>
 8008dfc:	eef0 0a40 	vmov.f32	s1, s0
 8008e00:	eeb0 0a48 	vmov.f32	s0, s16
 8008e04:	b005      	add	sp, #20
 8008e06:	ecbd 8b02 	vpop	{d8}
 8008e0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e0e:	bf00      	nop
 8008e10:	c0c90fdb 	.word	0xc0c90fdb

08008e14 <memset>:
 8008e14:	4402      	add	r2, r0
 8008e16:	4603      	mov	r3, r0
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d100      	bne.n	8008e1e <memset+0xa>
 8008e1c:	4770      	bx	lr
 8008e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e22:	e7f9      	b.n	8008e18 <memset+0x4>

08008e24 <__errno>:
 8008e24:	4b01      	ldr	r3, [pc, #4]	@ (8008e2c <__errno+0x8>)
 8008e26:	6818      	ldr	r0, [r3, #0]
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	2000017c 	.word	0x2000017c

08008e30 <__libc_init_array>:
 8008e30:	b570      	push	{r4, r5, r6, lr}
 8008e32:	4d0d      	ldr	r5, [pc, #52]	@ (8008e68 <__libc_init_array+0x38>)
 8008e34:	4c0d      	ldr	r4, [pc, #52]	@ (8008e6c <__libc_init_array+0x3c>)
 8008e36:	1b64      	subs	r4, r4, r5
 8008e38:	10a4      	asrs	r4, r4, #2
 8008e3a:	2600      	movs	r6, #0
 8008e3c:	42a6      	cmp	r6, r4
 8008e3e:	d109      	bne.n	8008e54 <__libc_init_array+0x24>
 8008e40:	4d0b      	ldr	r5, [pc, #44]	@ (8008e70 <__libc_init_array+0x40>)
 8008e42:	4c0c      	ldr	r4, [pc, #48]	@ (8008e74 <__libc_init_array+0x44>)
 8008e44:	f000 ff3a 	bl	8009cbc <_init>
 8008e48:	1b64      	subs	r4, r4, r5
 8008e4a:	10a4      	asrs	r4, r4, #2
 8008e4c:	2600      	movs	r6, #0
 8008e4e:	42a6      	cmp	r6, r4
 8008e50:	d105      	bne.n	8008e5e <__libc_init_array+0x2e>
 8008e52:	bd70      	pop	{r4, r5, r6, pc}
 8008e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e58:	4798      	blx	r3
 8008e5a:	3601      	adds	r6, #1
 8008e5c:	e7ee      	b.n	8008e3c <__libc_init_array+0xc>
 8008e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e62:	4798      	blx	r3
 8008e64:	3601      	adds	r6, #1
 8008e66:	e7f2      	b.n	8008e4e <__libc_init_array+0x1e>
 8008e68:	0800a120 	.word	0x0800a120
 8008e6c:	0800a120 	.word	0x0800a120
 8008e70:	0800a120 	.word	0x0800a120
 8008e74:	0800a124 	.word	0x0800a124

08008e78 <memcpy>:
 8008e78:	440a      	add	r2, r1
 8008e7a:	4291      	cmp	r1, r2
 8008e7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e80:	d100      	bne.n	8008e84 <memcpy+0xc>
 8008e82:	4770      	bx	lr
 8008e84:	b510      	push	{r4, lr}
 8008e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e8e:	4291      	cmp	r1, r2
 8008e90:	d1f9      	bne.n	8008e86 <memcpy+0xe>
 8008e92:	bd10      	pop	{r4, pc}

08008e94 <log10f>:
 8008e94:	b508      	push	{r3, lr}
 8008e96:	ed2d 8b02 	vpush	{d8}
 8008e9a:	eeb0 8a40 	vmov.f32	s16, s0
 8008e9e:	f000 f979 	bl	8009194 <__ieee754_log10f>
 8008ea2:	eeb4 8a48 	vcmp.f32	s16, s16
 8008ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eaa:	d60f      	bvs.n	8008ecc <log10f+0x38>
 8008eac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb4:	d80a      	bhi.n	8008ecc <log10f+0x38>
 8008eb6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ebe:	d108      	bne.n	8008ed2 <log10f+0x3e>
 8008ec0:	f7ff ffb0 	bl	8008e24 <__errno>
 8008ec4:	2322      	movs	r3, #34	@ 0x22
 8008ec6:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008ee8 <log10f+0x54>
 8008eca:	6003      	str	r3, [r0, #0]
 8008ecc:	ecbd 8b02 	vpop	{d8}
 8008ed0:	bd08      	pop	{r3, pc}
 8008ed2:	f7ff ffa7 	bl	8008e24 <__errno>
 8008ed6:	ecbd 8b02 	vpop	{d8}
 8008eda:	2321      	movs	r3, #33	@ 0x21
 8008edc:	6003      	str	r3, [r0, #0]
 8008ede:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ee2:	4802      	ldr	r0, [pc, #8]	@ (8008eec <log10f+0x58>)
 8008ee4:	f000 b8ac 	b.w	8009040 <nanf>
 8008ee8:	ff800000 	.word	0xff800000
 8008eec:	08009d4c 	.word	0x08009d4c

08008ef0 <sqrtf>:
 8008ef0:	b508      	push	{r3, lr}
 8008ef2:	ed2d 8b02 	vpush	{d8}
 8008ef6:	eeb0 8a40 	vmov.f32	s16, s0
 8008efa:	f000 f8a7 	bl	800904c <__ieee754_sqrtf>
 8008efe:	eeb4 8a48 	vcmp.f32	s16, s16
 8008f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f06:	d60c      	bvs.n	8008f22 <sqrtf+0x32>
 8008f08:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8008f28 <sqrtf+0x38>
 8008f0c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f14:	d505      	bpl.n	8008f22 <sqrtf+0x32>
 8008f16:	f7ff ff85 	bl	8008e24 <__errno>
 8008f1a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008f1e:	2321      	movs	r3, #33	@ 0x21
 8008f20:	6003      	str	r3, [r0, #0]
 8008f22:	ecbd 8b02 	vpop	{d8}
 8008f26:	bd08      	pop	{r3, pc}
 8008f28:	00000000 	.word	0x00000000

08008f2c <cosf>:
 8008f2c:	ee10 3a10 	vmov	r3, s0
 8008f30:	b507      	push	{r0, r1, r2, lr}
 8008f32:	4a1e      	ldr	r2, [pc, #120]	@ (8008fac <cosf+0x80>)
 8008f34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d806      	bhi.n	8008f4a <cosf+0x1e>
 8008f3c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8008fb0 <cosf+0x84>
 8008f40:	b003      	add	sp, #12
 8008f42:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f46:	f000 b885 	b.w	8009054 <__kernel_cosf>
 8008f4a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008f4e:	d304      	bcc.n	8008f5a <cosf+0x2e>
 8008f50:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008f54:	b003      	add	sp, #12
 8008f56:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f5a:	4668      	mov	r0, sp
 8008f5c:	f000 f972 	bl	8009244 <__ieee754_rem_pio2f>
 8008f60:	f000 0003 	and.w	r0, r0, #3
 8008f64:	2801      	cmp	r0, #1
 8008f66:	d009      	beq.n	8008f7c <cosf+0x50>
 8008f68:	2802      	cmp	r0, #2
 8008f6a:	d010      	beq.n	8008f8e <cosf+0x62>
 8008f6c:	b9b0      	cbnz	r0, 8008f9c <cosf+0x70>
 8008f6e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008f72:	ed9d 0a00 	vldr	s0, [sp]
 8008f76:	f000 f86d 	bl	8009054 <__kernel_cosf>
 8008f7a:	e7eb      	b.n	8008f54 <cosf+0x28>
 8008f7c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008f80:	ed9d 0a00 	vldr	s0, [sp]
 8008f84:	f000 f8be 	bl	8009104 <__kernel_sinf>
 8008f88:	eeb1 0a40 	vneg.f32	s0, s0
 8008f8c:	e7e2      	b.n	8008f54 <cosf+0x28>
 8008f8e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008f92:	ed9d 0a00 	vldr	s0, [sp]
 8008f96:	f000 f85d 	bl	8009054 <__kernel_cosf>
 8008f9a:	e7f5      	b.n	8008f88 <cosf+0x5c>
 8008f9c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008fa0:	ed9d 0a00 	vldr	s0, [sp]
 8008fa4:	2001      	movs	r0, #1
 8008fa6:	f000 f8ad 	bl	8009104 <__kernel_sinf>
 8008faa:	e7d3      	b.n	8008f54 <cosf+0x28>
 8008fac:	3f490fd8 	.word	0x3f490fd8
 8008fb0:	00000000 	.word	0x00000000

08008fb4 <sinf>:
 8008fb4:	ee10 3a10 	vmov	r3, s0
 8008fb8:	b507      	push	{r0, r1, r2, lr}
 8008fba:	4a1f      	ldr	r2, [pc, #124]	@ (8009038 <sinf+0x84>)
 8008fbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d807      	bhi.n	8008fd4 <sinf+0x20>
 8008fc4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800903c <sinf+0x88>
 8008fc8:	2000      	movs	r0, #0
 8008fca:	b003      	add	sp, #12
 8008fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fd0:	f000 b898 	b.w	8009104 <__kernel_sinf>
 8008fd4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008fd8:	d304      	bcc.n	8008fe4 <sinf+0x30>
 8008fda:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008fde:	b003      	add	sp, #12
 8008fe0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008fe4:	4668      	mov	r0, sp
 8008fe6:	f000 f92d 	bl	8009244 <__ieee754_rem_pio2f>
 8008fea:	f000 0003 	and.w	r0, r0, #3
 8008fee:	2801      	cmp	r0, #1
 8008ff0:	d00a      	beq.n	8009008 <sinf+0x54>
 8008ff2:	2802      	cmp	r0, #2
 8008ff4:	d00f      	beq.n	8009016 <sinf+0x62>
 8008ff6:	b9c0      	cbnz	r0, 800902a <sinf+0x76>
 8008ff8:	eddd 0a01 	vldr	s1, [sp, #4]
 8008ffc:	ed9d 0a00 	vldr	s0, [sp]
 8009000:	2001      	movs	r0, #1
 8009002:	f000 f87f 	bl	8009104 <__kernel_sinf>
 8009006:	e7ea      	b.n	8008fde <sinf+0x2a>
 8009008:	eddd 0a01 	vldr	s1, [sp, #4]
 800900c:	ed9d 0a00 	vldr	s0, [sp]
 8009010:	f000 f820 	bl	8009054 <__kernel_cosf>
 8009014:	e7e3      	b.n	8008fde <sinf+0x2a>
 8009016:	eddd 0a01 	vldr	s1, [sp, #4]
 800901a:	ed9d 0a00 	vldr	s0, [sp]
 800901e:	2001      	movs	r0, #1
 8009020:	f000 f870 	bl	8009104 <__kernel_sinf>
 8009024:	eeb1 0a40 	vneg.f32	s0, s0
 8009028:	e7d9      	b.n	8008fde <sinf+0x2a>
 800902a:	eddd 0a01 	vldr	s1, [sp, #4]
 800902e:	ed9d 0a00 	vldr	s0, [sp]
 8009032:	f000 f80f 	bl	8009054 <__kernel_cosf>
 8009036:	e7f5      	b.n	8009024 <sinf+0x70>
 8009038:	3f490fd8 	.word	0x3f490fd8
 800903c:	00000000 	.word	0x00000000

08009040 <nanf>:
 8009040:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009048 <nanf+0x8>
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	7fc00000 	.word	0x7fc00000

0800904c <__ieee754_sqrtf>:
 800904c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009050:	4770      	bx	lr
	...

08009054 <__kernel_cosf>:
 8009054:	ee10 3a10 	vmov	r3, s0
 8009058:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800905c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009060:	eef0 6a40 	vmov.f32	s13, s0
 8009064:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009068:	d204      	bcs.n	8009074 <__kernel_cosf+0x20>
 800906a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800906e:	ee17 2a90 	vmov	r2, s15
 8009072:	b342      	cbz	r2, 80090c6 <__kernel_cosf+0x72>
 8009074:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009078:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80090e4 <__kernel_cosf+0x90>
 800907c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80090e8 <__kernel_cosf+0x94>
 8009080:	4a1a      	ldr	r2, [pc, #104]	@ (80090ec <__kernel_cosf+0x98>)
 8009082:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009086:	4293      	cmp	r3, r2
 8009088:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80090f0 <__kernel_cosf+0x9c>
 800908c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009090:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80090f4 <__kernel_cosf+0xa0>
 8009094:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009098:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80090f8 <__kernel_cosf+0xa4>
 800909c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80090a0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80090fc <__kernel_cosf+0xa8>
 80090a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80090a8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80090ac:	ee26 6a07 	vmul.f32	s12, s12, s14
 80090b0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80090b4:	eee7 0a06 	vfma.f32	s1, s14, s12
 80090b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090bc:	d804      	bhi.n	80090c8 <__kernel_cosf+0x74>
 80090be:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80090c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80090c6:	4770      	bx	lr
 80090c8:	4a0d      	ldr	r2, [pc, #52]	@ (8009100 <__kernel_cosf+0xac>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	bf9a      	itte	ls
 80090ce:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80090d2:	ee07 3a10 	vmovls	s14, r3
 80090d6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80090da:	ee30 0a47 	vsub.f32	s0, s0, s14
 80090de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80090e2:	e7ec      	b.n	80090be <__kernel_cosf+0x6a>
 80090e4:	ad47d74e 	.word	0xad47d74e
 80090e8:	310f74f6 	.word	0x310f74f6
 80090ec:	3e999999 	.word	0x3e999999
 80090f0:	b493f27c 	.word	0xb493f27c
 80090f4:	37d00d01 	.word	0x37d00d01
 80090f8:	bab60b61 	.word	0xbab60b61
 80090fc:	3d2aaaab 	.word	0x3d2aaaab
 8009100:	3f480000 	.word	0x3f480000

08009104 <__kernel_sinf>:
 8009104:	ee10 3a10 	vmov	r3, s0
 8009108:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800910c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009110:	d204      	bcs.n	800911c <__kernel_sinf+0x18>
 8009112:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009116:	ee17 3a90 	vmov	r3, s15
 800911a:	b35b      	cbz	r3, 8009174 <__kernel_sinf+0x70>
 800911c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009120:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009178 <__kernel_sinf+0x74>
 8009124:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800917c <__kernel_sinf+0x78>
 8009128:	eea7 6a27 	vfma.f32	s12, s14, s15
 800912c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8009180 <__kernel_sinf+0x7c>
 8009130:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009134:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8009184 <__kernel_sinf+0x80>
 8009138:	eea7 6a87 	vfma.f32	s12, s15, s14
 800913c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8009188 <__kernel_sinf+0x84>
 8009140:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009144:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009148:	b930      	cbnz	r0, 8009158 <__kernel_sinf+0x54>
 800914a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800918c <__kernel_sinf+0x88>
 800914e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009152:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009156:	4770      	bx	lr
 8009158:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800915c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009160:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009164:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009168:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8009190 <__kernel_sinf+0x8c>
 800916c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009170:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	2f2ec9d3 	.word	0x2f2ec9d3
 800917c:	b2d72f34 	.word	0xb2d72f34
 8009180:	3638ef1b 	.word	0x3638ef1b
 8009184:	b9500d01 	.word	0xb9500d01
 8009188:	3c088889 	.word	0x3c088889
 800918c:	be2aaaab 	.word	0xbe2aaaab
 8009190:	3e2aaaab 	.word	0x3e2aaaab

08009194 <__ieee754_log10f>:
 8009194:	b508      	push	{r3, lr}
 8009196:	ee10 3a10 	vmov	r3, s0
 800919a:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800919e:	ed2d 8b02 	vpush	{d8}
 80091a2:	d108      	bne.n	80091b6 <__ieee754_log10f+0x22>
 80091a4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800922c <__ieee754_log10f+0x98>
 80091a8:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8009230 <__ieee754_log10f+0x9c>
 80091ac:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80091b0:	ecbd 8b02 	vpop	{d8}
 80091b4:	bd08      	pop	{r3, pc}
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	461a      	mov	r2, r3
 80091ba:	da02      	bge.n	80091c2 <__ieee754_log10f+0x2e>
 80091bc:	ee30 7a40 	vsub.f32	s14, s0, s0
 80091c0:	e7f2      	b.n	80091a8 <__ieee754_log10f+0x14>
 80091c2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80091c6:	db02      	blt.n	80091ce <__ieee754_log10f+0x3a>
 80091c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80091cc:	e7f0      	b.n	80091b0 <__ieee754_log10f+0x1c>
 80091ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80091d2:	bfbf      	itttt	lt
 80091d4:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 8009234 <__ieee754_log10f+0xa0>
 80091d8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80091dc:	f06f 0118 	mvnlt.w	r1, #24
 80091e0:	ee17 2a90 	vmovlt	r2, s15
 80091e4:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80091e8:	bfa8      	it	ge
 80091ea:	2100      	movge	r1, #0
 80091ec:	3b7f      	subs	r3, #127	@ 0x7f
 80091ee:	440b      	add	r3, r1
 80091f0:	0fd9      	lsrs	r1, r3, #31
 80091f2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80091fe:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 8009202:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009206:	ee00 3a10 	vmov	s0, r3
 800920a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800920e:	f000 fbb9 	bl	8009984 <__ieee754_logf>
 8009212:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8009238 <__ieee754_log10f+0xa4>
 8009216:	ee20 0a27 	vmul.f32	s0, s0, s15
 800921a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800923c <__ieee754_log10f+0xa8>
 800921e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8009222:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8009240 <__ieee754_log10f+0xac>
 8009226:	eea8 0a27 	vfma.f32	s0, s16, s15
 800922a:	e7c1      	b.n	80091b0 <__ieee754_log10f+0x1c>
 800922c:	cc000000 	.word	0xcc000000
 8009230:	00000000 	.word	0x00000000
 8009234:	4c000000 	.word	0x4c000000
 8009238:	3ede5bd9 	.word	0x3ede5bd9
 800923c:	355427db 	.word	0x355427db
 8009240:	3e9a2080 	.word	0x3e9a2080

08009244 <__ieee754_rem_pio2f>:
 8009244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009246:	ee10 6a10 	vmov	r6, s0
 800924a:	4b88      	ldr	r3, [pc, #544]	@ (800946c <__ieee754_rem_pio2f+0x228>)
 800924c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8009250:	429d      	cmp	r5, r3
 8009252:	b087      	sub	sp, #28
 8009254:	4604      	mov	r4, r0
 8009256:	d805      	bhi.n	8009264 <__ieee754_rem_pio2f+0x20>
 8009258:	2300      	movs	r3, #0
 800925a:	ed80 0a00 	vstr	s0, [r0]
 800925e:	6043      	str	r3, [r0, #4]
 8009260:	2000      	movs	r0, #0
 8009262:	e022      	b.n	80092aa <__ieee754_rem_pio2f+0x66>
 8009264:	4b82      	ldr	r3, [pc, #520]	@ (8009470 <__ieee754_rem_pio2f+0x22c>)
 8009266:	429d      	cmp	r5, r3
 8009268:	d83a      	bhi.n	80092e0 <__ieee754_rem_pio2f+0x9c>
 800926a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800926e:	2e00      	cmp	r6, #0
 8009270:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8009474 <__ieee754_rem_pio2f+0x230>
 8009274:	4a80      	ldr	r2, [pc, #512]	@ (8009478 <__ieee754_rem_pio2f+0x234>)
 8009276:	f023 030f 	bic.w	r3, r3, #15
 800927a:	dd18      	ble.n	80092ae <__ieee754_rem_pio2f+0x6a>
 800927c:	4293      	cmp	r3, r2
 800927e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009282:	bf09      	itett	eq
 8009284:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800947c <__ieee754_rem_pio2f+0x238>
 8009288:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8009480 <__ieee754_rem_pio2f+0x23c>
 800928c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8009484 <__ieee754_rem_pio2f+0x240>
 8009290:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009294:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8009298:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800929c:	ed80 7a00 	vstr	s14, [r0]
 80092a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80092a4:	edc0 7a01 	vstr	s15, [r0, #4]
 80092a8:	2001      	movs	r0, #1
 80092aa:	b007      	add	sp, #28
 80092ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092ae:	4293      	cmp	r3, r2
 80092b0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80092b4:	bf09      	itett	eq
 80092b6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800947c <__ieee754_rem_pio2f+0x238>
 80092ba:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8009480 <__ieee754_rem_pio2f+0x23c>
 80092be:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8009484 <__ieee754_rem_pio2f+0x240>
 80092c2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80092c6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80092ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80092ce:	ed80 7a00 	vstr	s14, [r0]
 80092d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092d6:	edc0 7a01 	vstr	s15, [r0, #4]
 80092da:	f04f 30ff 	mov.w	r0, #4294967295
 80092de:	e7e4      	b.n	80092aa <__ieee754_rem_pio2f+0x66>
 80092e0:	4b69      	ldr	r3, [pc, #420]	@ (8009488 <__ieee754_rem_pio2f+0x244>)
 80092e2:	429d      	cmp	r5, r3
 80092e4:	d873      	bhi.n	80093ce <__ieee754_rem_pio2f+0x18a>
 80092e6:	f000 f8dd 	bl	80094a4 <fabsf>
 80092ea:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800948c <__ieee754_rem_pio2f+0x248>
 80092ee:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80092f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80092f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092fe:	ee17 0a90 	vmov	r0, s15
 8009302:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009474 <__ieee754_rem_pio2f+0x230>
 8009306:	eea7 0a67 	vfms.f32	s0, s14, s15
 800930a:	281f      	cmp	r0, #31
 800930c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009480 <__ieee754_rem_pio2f+0x23c>
 8009310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009314:	eeb1 6a47 	vneg.f32	s12, s14
 8009318:	ee70 6a67 	vsub.f32	s13, s0, s15
 800931c:	ee16 1a90 	vmov	r1, s13
 8009320:	dc09      	bgt.n	8009336 <__ieee754_rem_pio2f+0xf2>
 8009322:	4a5b      	ldr	r2, [pc, #364]	@ (8009490 <__ieee754_rem_pio2f+0x24c>)
 8009324:	1e47      	subs	r7, r0, #1
 8009326:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800932a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800932e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009332:	4293      	cmp	r3, r2
 8009334:	d107      	bne.n	8009346 <__ieee754_rem_pio2f+0x102>
 8009336:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800933a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800933e:	2a08      	cmp	r2, #8
 8009340:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8009344:	dc14      	bgt.n	8009370 <__ieee754_rem_pio2f+0x12c>
 8009346:	6021      	str	r1, [r4, #0]
 8009348:	ed94 7a00 	vldr	s14, [r4]
 800934c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009350:	2e00      	cmp	r6, #0
 8009352:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009356:	ed84 0a01 	vstr	s0, [r4, #4]
 800935a:	daa6      	bge.n	80092aa <__ieee754_rem_pio2f+0x66>
 800935c:	eeb1 7a47 	vneg.f32	s14, s14
 8009360:	eeb1 0a40 	vneg.f32	s0, s0
 8009364:	ed84 7a00 	vstr	s14, [r4]
 8009368:	ed84 0a01 	vstr	s0, [r4, #4]
 800936c:	4240      	negs	r0, r0
 800936e:	e79c      	b.n	80092aa <__ieee754_rem_pio2f+0x66>
 8009370:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800947c <__ieee754_rem_pio2f+0x238>
 8009374:	eef0 6a40 	vmov.f32	s13, s0
 8009378:	eee6 6a25 	vfma.f32	s13, s12, s11
 800937c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8009380:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009384:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009484 <__ieee754_rem_pio2f+0x240>
 8009388:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800938c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009390:	ee15 2a90 	vmov	r2, s11
 8009394:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009398:	1a5b      	subs	r3, r3, r1
 800939a:	2b19      	cmp	r3, #25
 800939c:	dc04      	bgt.n	80093a8 <__ieee754_rem_pio2f+0x164>
 800939e:	edc4 5a00 	vstr	s11, [r4]
 80093a2:	eeb0 0a66 	vmov.f32	s0, s13
 80093a6:	e7cf      	b.n	8009348 <__ieee754_rem_pio2f+0x104>
 80093a8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8009494 <__ieee754_rem_pio2f+0x250>
 80093ac:	eeb0 0a66 	vmov.f32	s0, s13
 80093b0:	eea6 0a25 	vfma.f32	s0, s12, s11
 80093b4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80093b8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8009498 <__ieee754_rem_pio2f+0x254>
 80093bc:	eee6 7a25 	vfma.f32	s15, s12, s11
 80093c0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80093c4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80093c8:	ed84 7a00 	vstr	s14, [r4]
 80093cc:	e7bc      	b.n	8009348 <__ieee754_rem_pio2f+0x104>
 80093ce:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80093d2:	d306      	bcc.n	80093e2 <__ieee754_rem_pio2f+0x19e>
 80093d4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80093d8:	edc0 7a01 	vstr	s15, [r0, #4]
 80093dc:	edc0 7a00 	vstr	s15, [r0]
 80093e0:	e73e      	b.n	8009260 <__ieee754_rem_pio2f+0x1c>
 80093e2:	15ea      	asrs	r2, r5, #23
 80093e4:	3a86      	subs	r2, #134	@ 0x86
 80093e6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80093f2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800949c <__ieee754_rem_pio2f+0x258>
 80093f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80093fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093fe:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009402:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009406:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800940a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800940e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009412:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009416:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800941a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800941e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009422:	edcd 7a05 	vstr	s15, [sp, #20]
 8009426:	d11e      	bne.n	8009466 <__ieee754_rem_pio2f+0x222>
 8009428:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800942c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009430:	bf0c      	ite	eq
 8009432:	2301      	moveq	r3, #1
 8009434:	2302      	movne	r3, #2
 8009436:	491a      	ldr	r1, [pc, #104]	@ (80094a0 <__ieee754_rem_pio2f+0x25c>)
 8009438:	9101      	str	r1, [sp, #4]
 800943a:	2102      	movs	r1, #2
 800943c:	9100      	str	r1, [sp, #0]
 800943e:	a803      	add	r0, sp, #12
 8009440:	4621      	mov	r1, r4
 8009442:	f000 f837 	bl	80094b4 <__kernel_rem_pio2f>
 8009446:	2e00      	cmp	r6, #0
 8009448:	f6bf af2f 	bge.w	80092aa <__ieee754_rem_pio2f+0x66>
 800944c:	edd4 7a00 	vldr	s15, [r4]
 8009450:	eef1 7a67 	vneg.f32	s15, s15
 8009454:	edc4 7a00 	vstr	s15, [r4]
 8009458:	edd4 7a01 	vldr	s15, [r4, #4]
 800945c:	eef1 7a67 	vneg.f32	s15, s15
 8009460:	edc4 7a01 	vstr	s15, [r4, #4]
 8009464:	e782      	b.n	800936c <__ieee754_rem_pio2f+0x128>
 8009466:	2303      	movs	r3, #3
 8009468:	e7e5      	b.n	8009436 <__ieee754_rem_pio2f+0x1f2>
 800946a:	bf00      	nop
 800946c:	3f490fd8 	.word	0x3f490fd8
 8009470:	4016cbe3 	.word	0x4016cbe3
 8009474:	3fc90f80 	.word	0x3fc90f80
 8009478:	3fc90fd0 	.word	0x3fc90fd0
 800947c:	37354400 	.word	0x37354400
 8009480:	37354443 	.word	0x37354443
 8009484:	2e85a308 	.word	0x2e85a308
 8009488:	43490f80 	.word	0x43490f80
 800948c:	3f22f984 	.word	0x3f22f984
 8009490:	08009d50 	.word	0x08009d50
 8009494:	2e85a300 	.word	0x2e85a300
 8009498:	248d3132 	.word	0x248d3132
 800949c:	43800000 	.word	0x43800000
 80094a0:	08009dd0 	.word	0x08009dd0

080094a4 <fabsf>:
 80094a4:	ee10 3a10 	vmov	r3, s0
 80094a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80094ac:	ee00 3a10 	vmov	s0, r3
 80094b0:	4770      	bx	lr
	...

080094b4 <__kernel_rem_pio2f>:
 80094b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b8:	ed2d 8b04 	vpush	{d8-d9}
 80094bc:	b0d9      	sub	sp, #356	@ 0x164
 80094be:	4690      	mov	r8, r2
 80094c0:	9001      	str	r0, [sp, #4]
 80094c2:	4ab6      	ldr	r2, [pc, #728]	@ (800979c <__kernel_rem_pio2f+0x2e8>)
 80094c4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80094c6:	f118 0f04 	cmn.w	r8, #4
 80094ca:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80094ce:	460f      	mov	r7, r1
 80094d0:	f103 3bff 	add.w	fp, r3, #4294967295
 80094d4:	db26      	blt.n	8009524 <__kernel_rem_pio2f+0x70>
 80094d6:	f1b8 0203 	subs.w	r2, r8, #3
 80094da:	bf48      	it	mi
 80094dc:	f108 0204 	addmi.w	r2, r8, #4
 80094e0:	10d2      	asrs	r2, r2, #3
 80094e2:	1c55      	adds	r5, r2, #1
 80094e4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80094e6:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80097ac <__kernel_rem_pio2f+0x2f8>
 80094ea:	00e8      	lsls	r0, r5, #3
 80094ec:	eba2 060b 	sub.w	r6, r2, fp
 80094f0:	9002      	str	r0, [sp, #8]
 80094f2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80094f6:	eb0a 0c0b 	add.w	ip, sl, fp
 80094fa:	ac1c      	add	r4, sp, #112	@ 0x70
 80094fc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8009500:	2000      	movs	r0, #0
 8009502:	4560      	cmp	r0, ip
 8009504:	dd10      	ble.n	8009528 <__kernel_rem_pio2f+0x74>
 8009506:	a91c      	add	r1, sp, #112	@ 0x70
 8009508:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800950c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8009510:	2600      	movs	r6, #0
 8009512:	4556      	cmp	r6, sl
 8009514:	dc24      	bgt.n	8009560 <__kernel_rem_pio2f+0xac>
 8009516:	f8dd e004 	ldr.w	lr, [sp, #4]
 800951a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80097ac <__kernel_rem_pio2f+0x2f8>
 800951e:	4684      	mov	ip, r0
 8009520:	2400      	movs	r4, #0
 8009522:	e016      	b.n	8009552 <__kernel_rem_pio2f+0x9e>
 8009524:	2200      	movs	r2, #0
 8009526:	e7dc      	b.n	80094e2 <__kernel_rem_pio2f+0x2e>
 8009528:	42c6      	cmn	r6, r0
 800952a:	bf5d      	ittte	pl
 800952c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8009530:	ee07 1a90 	vmovpl	s15, r1
 8009534:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009538:	eef0 7a47 	vmovmi.f32	s15, s14
 800953c:	ece4 7a01 	vstmia	r4!, {s15}
 8009540:	3001      	adds	r0, #1
 8009542:	e7de      	b.n	8009502 <__kernel_rem_pio2f+0x4e>
 8009544:	ecfe 6a01 	vldmia	lr!, {s13}
 8009548:	ed3c 7a01 	vldmdb	ip!, {s14}
 800954c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009550:	3401      	adds	r4, #1
 8009552:	455c      	cmp	r4, fp
 8009554:	ddf6      	ble.n	8009544 <__kernel_rem_pio2f+0x90>
 8009556:	ece9 7a01 	vstmia	r9!, {s15}
 800955a:	3601      	adds	r6, #1
 800955c:	3004      	adds	r0, #4
 800955e:	e7d8      	b.n	8009512 <__kernel_rem_pio2f+0x5e>
 8009560:	a908      	add	r1, sp, #32
 8009562:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009566:	9104      	str	r1, [sp, #16]
 8009568:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800956a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80097a8 <__kernel_rem_pio2f+0x2f4>
 800956e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80097a4 <__kernel_rem_pio2f+0x2f0>
 8009572:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009576:	9203      	str	r2, [sp, #12]
 8009578:	4654      	mov	r4, sl
 800957a:	00a2      	lsls	r2, r4, #2
 800957c:	9205      	str	r2, [sp, #20]
 800957e:	aa58      	add	r2, sp, #352	@ 0x160
 8009580:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8009584:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8009588:	a944      	add	r1, sp, #272	@ 0x110
 800958a:	aa08      	add	r2, sp, #32
 800958c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009590:	4694      	mov	ip, r2
 8009592:	4626      	mov	r6, r4
 8009594:	2e00      	cmp	r6, #0
 8009596:	dc4c      	bgt.n	8009632 <__kernel_rem_pio2f+0x17e>
 8009598:	4628      	mov	r0, r5
 800959a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800959e:	f000 fae3 	bl	8009b68 <scalbnf>
 80095a2:	eeb0 8a40 	vmov.f32	s16, s0
 80095a6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80095aa:	ee28 0a00 	vmul.f32	s0, s16, s0
 80095ae:	f000 fb41 	bl	8009c34 <floorf>
 80095b2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80095b6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80095ba:	2d00      	cmp	r5, #0
 80095bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095c0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80095c4:	ee17 9a90 	vmov	r9, s15
 80095c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095cc:	ee38 8a67 	vsub.f32	s16, s16, s15
 80095d0:	dd41      	ble.n	8009656 <__kernel_rem_pio2f+0x1a2>
 80095d2:	f104 3cff 	add.w	ip, r4, #4294967295
 80095d6:	a908      	add	r1, sp, #32
 80095d8:	f1c5 0e08 	rsb	lr, r5, #8
 80095dc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80095e0:	fa46 f00e 	asr.w	r0, r6, lr
 80095e4:	4481      	add	r9, r0
 80095e6:	fa00 f00e 	lsl.w	r0, r0, lr
 80095ea:	1a36      	subs	r6, r6, r0
 80095ec:	f1c5 0007 	rsb	r0, r5, #7
 80095f0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80095f4:	4106      	asrs	r6, r0
 80095f6:	2e00      	cmp	r6, #0
 80095f8:	dd3c      	ble.n	8009674 <__kernel_rem_pio2f+0x1c0>
 80095fa:	f04f 0e00 	mov.w	lr, #0
 80095fe:	f109 0901 	add.w	r9, r9, #1
 8009602:	4670      	mov	r0, lr
 8009604:	4574      	cmp	r4, lr
 8009606:	dc68      	bgt.n	80096da <__kernel_rem_pio2f+0x226>
 8009608:	2d00      	cmp	r5, #0
 800960a:	dd03      	ble.n	8009614 <__kernel_rem_pio2f+0x160>
 800960c:	2d01      	cmp	r5, #1
 800960e:	d074      	beq.n	80096fa <__kernel_rem_pio2f+0x246>
 8009610:	2d02      	cmp	r5, #2
 8009612:	d07d      	beq.n	8009710 <__kernel_rem_pio2f+0x25c>
 8009614:	2e02      	cmp	r6, #2
 8009616:	d12d      	bne.n	8009674 <__kernel_rem_pio2f+0x1c0>
 8009618:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800961c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009620:	b340      	cbz	r0, 8009674 <__kernel_rem_pio2f+0x1c0>
 8009622:	4628      	mov	r0, r5
 8009624:	9306      	str	r3, [sp, #24]
 8009626:	f000 fa9f 	bl	8009b68 <scalbnf>
 800962a:	9b06      	ldr	r3, [sp, #24]
 800962c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009630:	e020      	b.n	8009674 <__kernel_rem_pio2f+0x1c0>
 8009632:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009636:	3e01      	subs	r6, #1
 8009638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800963c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009640:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009644:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009648:	ecac 0a01 	vstmia	ip!, {s0}
 800964c:	ed30 0a01 	vldmdb	r0!, {s0}
 8009650:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009654:	e79e      	b.n	8009594 <__kernel_rem_pio2f+0xe0>
 8009656:	d105      	bne.n	8009664 <__kernel_rem_pio2f+0x1b0>
 8009658:	1e60      	subs	r0, r4, #1
 800965a:	a908      	add	r1, sp, #32
 800965c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8009660:	11f6      	asrs	r6, r6, #7
 8009662:	e7c8      	b.n	80095f6 <__kernel_rem_pio2f+0x142>
 8009664:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009668:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800966c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009670:	da31      	bge.n	80096d6 <__kernel_rem_pio2f+0x222>
 8009672:	2600      	movs	r6, #0
 8009674:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967c:	f040 8098 	bne.w	80097b0 <__kernel_rem_pio2f+0x2fc>
 8009680:	1e60      	subs	r0, r4, #1
 8009682:	2200      	movs	r2, #0
 8009684:	4550      	cmp	r0, sl
 8009686:	da4b      	bge.n	8009720 <__kernel_rem_pio2f+0x26c>
 8009688:	2a00      	cmp	r2, #0
 800968a:	d065      	beq.n	8009758 <__kernel_rem_pio2f+0x2a4>
 800968c:	3c01      	subs	r4, #1
 800968e:	ab08      	add	r3, sp, #32
 8009690:	3d08      	subs	r5, #8
 8009692:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d0f8      	beq.n	800968c <__kernel_rem_pio2f+0x1d8>
 800969a:	4628      	mov	r0, r5
 800969c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80096a0:	f000 fa62 	bl	8009b68 <scalbnf>
 80096a4:	1c63      	adds	r3, r4, #1
 80096a6:	aa44      	add	r2, sp, #272	@ 0x110
 80096a8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80097a8 <__kernel_rem_pio2f+0x2f4>
 80096ac:	0099      	lsls	r1, r3, #2
 80096ae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80096b2:	4623      	mov	r3, r4
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f280 80a9 	bge.w	800980c <__kernel_rem_pio2f+0x358>
 80096ba:	4623      	mov	r3, r4
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f2c0 80c7 	blt.w	8009850 <__kernel_rem_pio2f+0x39c>
 80096c2:	aa44      	add	r2, sp, #272	@ 0x110
 80096c4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80096c8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80097a0 <__kernel_rem_pio2f+0x2ec>
 80096cc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80097ac <__kernel_rem_pio2f+0x2f8>
 80096d0:	2000      	movs	r0, #0
 80096d2:	1ae2      	subs	r2, r4, r3
 80096d4:	e0b1      	b.n	800983a <__kernel_rem_pio2f+0x386>
 80096d6:	2602      	movs	r6, #2
 80096d8:	e78f      	b.n	80095fa <__kernel_rem_pio2f+0x146>
 80096da:	f852 1b04 	ldr.w	r1, [r2], #4
 80096de:	b948      	cbnz	r0, 80096f4 <__kernel_rem_pio2f+0x240>
 80096e0:	b121      	cbz	r1, 80096ec <__kernel_rem_pio2f+0x238>
 80096e2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80096e6:	f842 1c04 	str.w	r1, [r2, #-4]
 80096ea:	2101      	movs	r1, #1
 80096ec:	f10e 0e01 	add.w	lr, lr, #1
 80096f0:	4608      	mov	r0, r1
 80096f2:	e787      	b.n	8009604 <__kernel_rem_pio2f+0x150>
 80096f4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80096f8:	e7f5      	b.n	80096e6 <__kernel_rem_pio2f+0x232>
 80096fa:	f104 3cff 	add.w	ip, r4, #4294967295
 80096fe:	aa08      	add	r2, sp, #32
 8009700:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8009704:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009708:	a908      	add	r1, sp, #32
 800970a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800970e:	e781      	b.n	8009614 <__kernel_rem_pio2f+0x160>
 8009710:	f104 3cff 	add.w	ip, r4, #4294967295
 8009714:	aa08      	add	r2, sp, #32
 8009716:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800971a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800971e:	e7f3      	b.n	8009708 <__kernel_rem_pio2f+0x254>
 8009720:	a908      	add	r1, sp, #32
 8009722:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009726:	3801      	subs	r0, #1
 8009728:	430a      	orrs	r2, r1
 800972a:	e7ab      	b.n	8009684 <__kernel_rem_pio2f+0x1d0>
 800972c:	3201      	adds	r2, #1
 800972e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8009732:	2e00      	cmp	r6, #0
 8009734:	d0fa      	beq.n	800972c <__kernel_rem_pio2f+0x278>
 8009736:	9905      	ldr	r1, [sp, #20]
 8009738:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800973c:	eb0d 0001 	add.w	r0, sp, r1
 8009740:	18e6      	adds	r6, r4, r3
 8009742:	a91c      	add	r1, sp, #112	@ 0x70
 8009744:	f104 0c01 	add.w	ip, r4, #1
 8009748:	384c      	subs	r0, #76	@ 0x4c
 800974a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800974e:	4422      	add	r2, r4
 8009750:	4562      	cmp	r2, ip
 8009752:	da04      	bge.n	800975e <__kernel_rem_pio2f+0x2aa>
 8009754:	4614      	mov	r4, r2
 8009756:	e710      	b.n	800957a <__kernel_rem_pio2f+0xc6>
 8009758:	9804      	ldr	r0, [sp, #16]
 800975a:	2201      	movs	r2, #1
 800975c:	e7e7      	b.n	800972e <__kernel_rem_pio2f+0x27a>
 800975e:	9903      	ldr	r1, [sp, #12]
 8009760:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009764:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8009768:	9105      	str	r1, [sp, #20]
 800976a:	ee07 1a90 	vmov	s15, r1
 800976e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009772:	2400      	movs	r4, #0
 8009774:	ece6 7a01 	vstmia	r6!, {s15}
 8009778:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80097ac <__kernel_rem_pio2f+0x2f8>
 800977c:	46b1      	mov	r9, r6
 800977e:	455c      	cmp	r4, fp
 8009780:	dd04      	ble.n	800978c <__kernel_rem_pio2f+0x2d8>
 8009782:	ece0 7a01 	vstmia	r0!, {s15}
 8009786:	f10c 0c01 	add.w	ip, ip, #1
 800978a:	e7e1      	b.n	8009750 <__kernel_rem_pio2f+0x29c>
 800978c:	ecfe 6a01 	vldmia	lr!, {s13}
 8009790:	ed39 7a01 	vldmdb	r9!, {s14}
 8009794:	3401      	adds	r4, #1
 8009796:	eee6 7a87 	vfma.f32	s15, s13, s14
 800979a:	e7f0      	b.n	800977e <__kernel_rem_pio2f+0x2ca>
 800979c:	0800a114 	.word	0x0800a114
 80097a0:	0800a0e8 	.word	0x0800a0e8
 80097a4:	43800000 	.word	0x43800000
 80097a8:	3b800000 	.word	0x3b800000
 80097ac:	00000000 	.word	0x00000000
 80097b0:	9b02      	ldr	r3, [sp, #8]
 80097b2:	eeb0 0a48 	vmov.f32	s0, s16
 80097b6:	eba3 0008 	sub.w	r0, r3, r8
 80097ba:	f000 f9d5 	bl	8009b68 <scalbnf>
 80097be:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80097a4 <__kernel_rem_pio2f+0x2f0>
 80097c2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80097c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ca:	db19      	blt.n	8009800 <__kernel_rem_pio2f+0x34c>
 80097cc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80097a8 <__kernel_rem_pio2f+0x2f4>
 80097d0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80097d4:	aa08      	add	r2, sp, #32
 80097d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097da:	3508      	adds	r5, #8
 80097dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097e0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80097e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097e8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80097ec:	ee10 3a10 	vmov	r3, s0
 80097f0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80097f4:	ee17 3a90 	vmov	r3, s15
 80097f8:	3401      	adds	r4, #1
 80097fa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80097fe:	e74c      	b.n	800969a <__kernel_rem_pio2f+0x1e6>
 8009800:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009804:	aa08      	add	r2, sp, #32
 8009806:	ee10 3a10 	vmov	r3, s0
 800980a:	e7f6      	b.n	80097fa <__kernel_rem_pio2f+0x346>
 800980c:	a808      	add	r0, sp, #32
 800980e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009812:	9001      	str	r0, [sp, #4]
 8009814:	ee07 0a90 	vmov	s15, r0
 8009818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800981c:	3b01      	subs	r3, #1
 800981e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009822:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009826:	ed62 7a01 	vstmdb	r2!, {s15}
 800982a:	e743      	b.n	80096b4 <__kernel_rem_pio2f+0x200>
 800982c:	ecfc 6a01 	vldmia	ip!, {s13}
 8009830:	ecb5 7a01 	vldmia	r5!, {s14}
 8009834:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009838:	3001      	adds	r0, #1
 800983a:	4550      	cmp	r0, sl
 800983c:	dc01      	bgt.n	8009842 <__kernel_rem_pio2f+0x38e>
 800983e:	4290      	cmp	r0, r2
 8009840:	ddf4      	ble.n	800982c <__kernel_rem_pio2f+0x378>
 8009842:	a858      	add	r0, sp, #352	@ 0x160
 8009844:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009848:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800984c:	3b01      	subs	r3, #1
 800984e:	e735      	b.n	80096bc <__kernel_rem_pio2f+0x208>
 8009850:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009852:	2b02      	cmp	r3, #2
 8009854:	dc09      	bgt.n	800986a <__kernel_rem_pio2f+0x3b6>
 8009856:	2b00      	cmp	r3, #0
 8009858:	dc27      	bgt.n	80098aa <__kernel_rem_pio2f+0x3f6>
 800985a:	d040      	beq.n	80098de <__kernel_rem_pio2f+0x42a>
 800985c:	f009 0007 	and.w	r0, r9, #7
 8009860:	b059      	add	sp, #356	@ 0x164
 8009862:	ecbd 8b04 	vpop	{d8-d9}
 8009866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800986c:	2b03      	cmp	r3, #3
 800986e:	d1f5      	bne.n	800985c <__kernel_rem_pio2f+0x3a8>
 8009870:	aa30      	add	r2, sp, #192	@ 0xc0
 8009872:	1f0b      	subs	r3, r1, #4
 8009874:	4413      	add	r3, r2
 8009876:	461a      	mov	r2, r3
 8009878:	4620      	mov	r0, r4
 800987a:	2800      	cmp	r0, #0
 800987c:	dc50      	bgt.n	8009920 <__kernel_rem_pio2f+0x46c>
 800987e:	4622      	mov	r2, r4
 8009880:	2a01      	cmp	r2, #1
 8009882:	dc5d      	bgt.n	8009940 <__kernel_rem_pio2f+0x48c>
 8009884:	ab30      	add	r3, sp, #192	@ 0xc0
 8009886:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80097ac <__kernel_rem_pio2f+0x2f8>
 800988a:	440b      	add	r3, r1
 800988c:	2c01      	cmp	r4, #1
 800988e:	dc67      	bgt.n	8009960 <__kernel_rem_pio2f+0x4ac>
 8009890:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8009894:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8009898:	2e00      	cmp	r6, #0
 800989a:	d167      	bne.n	800996c <__kernel_rem_pio2f+0x4b8>
 800989c:	edc7 6a00 	vstr	s13, [r7]
 80098a0:	ed87 7a01 	vstr	s14, [r7, #4]
 80098a4:	edc7 7a02 	vstr	s15, [r7, #8]
 80098a8:	e7d8      	b.n	800985c <__kernel_rem_pio2f+0x3a8>
 80098aa:	ab30      	add	r3, sp, #192	@ 0xc0
 80098ac:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80097ac <__kernel_rem_pio2f+0x2f8>
 80098b0:	440b      	add	r3, r1
 80098b2:	4622      	mov	r2, r4
 80098b4:	2a00      	cmp	r2, #0
 80098b6:	da24      	bge.n	8009902 <__kernel_rem_pio2f+0x44e>
 80098b8:	b34e      	cbz	r6, 800990e <__kernel_rem_pio2f+0x45a>
 80098ba:	eef1 7a47 	vneg.f32	s15, s14
 80098be:	edc7 7a00 	vstr	s15, [r7]
 80098c2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80098c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098ca:	aa31      	add	r2, sp, #196	@ 0xc4
 80098cc:	2301      	movs	r3, #1
 80098ce:	429c      	cmp	r4, r3
 80098d0:	da20      	bge.n	8009914 <__kernel_rem_pio2f+0x460>
 80098d2:	b10e      	cbz	r6, 80098d8 <__kernel_rem_pio2f+0x424>
 80098d4:	eef1 7a67 	vneg.f32	s15, s15
 80098d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80098dc:	e7be      	b.n	800985c <__kernel_rem_pio2f+0x3a8>
 80098de:	ab30      	add	r3, sp, #192	@ 0xc0
 80098e0:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80097ac <__kernel_rem_pio2f+0x2f8>
 80098e4:	440b      	add	r3, r1
 80098e6:	2c00      	cmp	r4, #0
 80098e8:	da05      	bge.n	80098f6 <__kernel_rem_pio2f+0x442>
 80098ea:	b10e      	cbz	r6, 80098f0 <__kernel_rem_pio2f+0x43c>
 80098ec:	eef1 7a67 	vneg.f32	s15, s15
 80098f0:	edc7 7a00 	vstr	s15, [r7]
 80098f4:	e7b2      	b.n	800985c <__kernel_rem_pio2f+0x3a8>
 80098f6:	ed33 7a01 	vldmdb	r3!, {s14}
 80098fa:	3c01      	subs	r4, #1
 80098fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009900:	e7f1      	b.n	80098e6 <__kernel_rem_pio2f+0x432>
 8009902:	ed73 7a01 	vldmdb	r3!, {s15}
 8009906:	3a01      	subs	r2, #1
 8009908:	ee37 7a27 	vadd.f32	s14, s14, s15
 800990c:	e7d2      	b.n	80098b4 <__kernel_rem_pio2f+0x400>
 800990e:	eef0 7a47 	vmov.f32	s15, s14
 8009912:	e7d4      	b.n	80098be <__kernel_rem_pio2f+0x40a>
 8009914:	ecb2 7a01 	vldmia	r2!, {s14}
 8009918:	3301      	adds	r3, #1
 800991a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800991e:	e7d6      	b.n	80098ce <__kernel_rem_pio2f+0x41a>
 8009920:	ed72 7a01 	vldmdb	r2!, {s15}
 8009924:	edd2 6a01 	vldr	s13, [r2, #4]
 8009928:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800992c:	3801      	subs	r0, #1
 800992e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009932:	ed82 7a00 	vstr	s14, [r2]
 8009936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800993a:	edc2 7a01 	vstr	s15, [r2, #4]
 800993e:	e79c      	b.n	800987a <__kernel_rem_pio2f+0x3c6>
 8009940:	ed73 7a01 	vldmdb	r3!, {s15}
 8009944:	edd3 6a01 	vldr	s13, [r3, #4]
 8009948:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800994c:	3a01      	subs	r2, #1
 800994e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009952:	ed83 7a00 	vstr	s14, [r3]
 8009956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800995a:	edc3 7a01 	vstr	s15, [r3, #4]
 800995e:	e78f      	b.n	8009880 <__kernel_rem_pio2f+0x3cc>
 8009960:	ed33 7a01 	vldmdb	r3!, {s14}
 8009964:	3c01      	subs	r4, #1
 8009966:	ee77 7a87 	vadd.f32	s15, s15, s14
 800996a:	e78f      	b.n	800988c <__kernel_rem_pio2f+0x3d8>
 800996c:	eef1 6a66 	vneg.f32	s13, s13
 8009970:	eeb1 7a47 	vneg.f32	s14, s14
 8009974:	edc7 6a00 	vstr	s13, [r7]
 8009978:	ed87 7a01 	vstr	s14, [r7, #4]
 800997c:	eef1 7a67 	vneg.f32	s15, s15
 8009980:	e790      	b.n	80098a4 <__kernel_rem_pio2f+0x3f0>
 8009982:	bf00      	nop

08009984 <__ieee754_logf>:
 8009984:	ee10 3a10 	vmov	r3, s0
 8009988:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800998c:	d106      	bne.n	800999c <__ieee754_logf+0x18>
 800998e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8009b28 <__ieee754_logf+0x1a4>
 8009992:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8009b2c <__ieee754_logf+0x1a8>
 8009996:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800999a:	4770      	bx	lr
 800999c:	2b00      	cmp	r3, #0
 800999e:	461a      	mov	r2, r3
 80099a0:	da02      	bge.n	80099a8 <__ieee754_logf+0x24>
 80099a2:	ee30 7a40 	vsub.f32	s14, s0, s0
 80099a6:	e7f4      	b.n	8009992 <__ieee754_logf+0xe>
 80099a8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80099ac:	db02      	blt.n	80099b4 <__ieee754_logf+0x30>
 80099ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 80099b2:	4770      	bx	lr
 80099b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80099b8:	bfb8      	it	lt
 80099ba:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8009b30 <__ieee754_logf+0x1ac>
 80099be:	485d      	ldr	r0, [pc, #372]	@ (8009b34 <__ieee754_logf+0x1b0>)
 80099c0:	bfbe      	ittt	lt
 80099c2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80099c6:	f06f 0118 	mvnlt.w	r1, #24
 80099ca:	ee17 2a90 	vmovlt	r2, s15
 80099ce:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80099d2:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80099d6:	4410      	add	r0, r2
 80099d8:	bfa8      	it	ge
 80099da:	2100      	movge	r1, #0
 80099dc:	3b7f      	subs	r3, #127	@ 0x7f
 80099de:	440b      	add	r3, r1
 80099e0:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 80099e4:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 80099e8:	4311      	orrs	r1, r2
 80099ea:	ee00 1a10 	vmov	s0, r1
 80099ee:	4952      	ldr	r1, [pc, #328]	@ (8009b38 <__ieee754_logf+0x1b4>)
 80099f0:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 80099f4:	f102 000f 	add.w	r0, r2, #15
 80099f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80099fc:	4001      	ands	r1, r0
 80099fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009a02:	bb89      	cbnz	r1, 8009a68 <__ieee754_logf+0xe4>
 8009a04:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a0c:	d10f      	bne.n	8009a2e <__ieee754_logf+0xaa>
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f000 8087 	beq.w	8009b22 <__ieee754_logf+0x19e>
 8009a14:	ee07 3a90 	vmov	s15, r3
 8009a18:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8009b3c <__ieee754_logf+0x1b8>
 8009a1c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8009b40 <__ieee754_logf+0x1bc>
 8009a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a24:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009a28:	eea7 0a87 	vfma.f32	s0, s15, s14
 8009a2c:	4770      	bx	lr
 8009a2e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8009b44 <__ieee754_logf+0x1c0>
 8009a32:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009a36:	eee0 7a66 	vfms.f32	s15, s0, s13
 8009a3a:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009a3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a42:	b913      	cbnz	r3, 8009a4a <__ieee754_logf+0xc6>
 8009a44:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009a48:	4770      	bx	lr
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009b3c <__ieee754_logf+0x1b8>
 8009a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a56:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009a5a:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009a5e:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8009b40 <__ieee754_logf+0x1bc>
 8009a62:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8009a66:	4770      	bx	lr
 8009a68:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8009a6c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009a70:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8009b48 <__ieee754_logf+0x1c4>
 8009a74:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8009b4c <__ieee754_logf+0x1c8>
 8009a78:	4935      	ldr	r1, [pc, #212]	@ (8009b50 <__ieee754_logf+0x1cc>)
 8009a7a:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8009a7e:	4411      	add	r1, r2
 8009a80:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8009a84:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8009a88:	430a      	orrs	r2, r1
 8009a8a:	2a00      	cmp	r2, #0
 8009a8c:	ee07 3a90 	vmov	s15, r3
 8009a90:	ee26 5a06 	vmul.f32	s10, s12, s12
 8009a94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009a98:	ee25 7a05 	vmul.f32	s14, s10, s10
 8009a9c:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8009b54 <__ieee754_logf+0x1d0>
 8009aa0:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009aa4:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8009b58 <__ieee754_logf+0x1d4>
 8009aa8:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009aac:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8009b5c <__ieee754_logf+0x1d8>
 8009ab0:	eee7 7a24 	vfma.f32	s15, s14, s9
 8009ab4:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8009b60 <__ieee754_logf+0x1dc>
 8009ab8:	eee7 4a87 	vfma.f32	s9, s15, s14
 8009abc:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8009b64 <__ieee754_logf+0x1e0>
 8009ac0:	eee4 7a87 	vfma.f32	s15, s9, s14
 8009ac4:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009ac8:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009acc:	dd1a      	ble.n	8009b04 <__ieee754_logf+0x180>
 8009ace:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009ad2:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009ad6:	ee27 7a00 	vmul.f32	s14, s14, s0
 8009ada:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ade:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009ae2:	b913      	cbnz	r3, 8009aea <__ieee754_logf+0x166>
 8009ae4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009ae8:	e7ac      	b.n	8009a44 <__ieee754_logf+0xc0>
 8009aea:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8009b3c <__ieee754_logf+0x1b8>
 8009aee:	eee6 7a86 	vfma.f32	s15, s13, s12
 8009af2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009af6:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009afa:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8009b40 <__ieee754_logf+0x1bc>
 8009afe:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8009b02:	4770      	bx	lr
 8009b04:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009b08:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009b0c:	b913      	cbnz	r3, 8009b14 <__ieee754_logf+0x190>
 8009b0e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009b12:	4770      	bx	lr
 8009b14:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8009b3c <__ieee754_logf+0x1b8>
 8009b18:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8009b1c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009b20:	e7eb      	b.n	8009afa <__ieee754_logf+0x176>
 8009b22:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8009b2c <__ieee754_logf+0x1a8>
 8009b26:	4770      	bx	lr
 8009b28:	cc000000 	.word	0xcc000000
 8009b2c:	00000000 	.word	0x00000000
 8009b30:	4c000000 	.word	0x4c000000
 8009b34:	004afb20 	.word	0x004afb20
 8009b38:	007ffff0 	.word	0x007ffff0
 8009b3c:	3717f7d1 	.word	0x3717f7d1
 8009b40:	3f317180 	.word	0x3f317180
 8009b44:	3eaaaaab 	.word	0x3eaaaaab
 8009b48:	3e1cd04f 	.word	0x3e1cd04f
 8009b4c:	3e178897 	.word	0x3e178897
 8009b50:	ffcf5c30 	.word	0xffcf5c30
 8009b54:	3e638e29 	.word	0x3e638e29
 8009b58:	3ecccccd 	.word	0x3ecccccd
 8009b5c:	3e3a3325 	.word	0x3e3a3325
 8009b60:	3e924925 	.word	0x3e924925
 8009b64:	3f2aaaab 	.word	0x3f2aaaab

08009b68 <scalbnf>:
 8009b68:	ee10 3a10 	vmov	r3, s0
 8009b6c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009b70:	d02b      	beq.n	8009bca <scalbnf+0x62>
 8009b72:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009b76:	d302      	bcc.n	8009b7e <scalbnf+0x16>
 8009b78:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009b7c:	4770      	bx	lr
 8009b7e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009b82:	d123      	bne.n	8009bcc <scalbnf+0x64>
 8009b84:	4b24      	ldr	r3, [pc, #144]	@ (8009c18 <scalbnf+0xb0>)
 8009b86:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009c1c <scalbnf+0xb4>
 8009b8a:	4298      	cmp	r0, r3
 8009b8c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009b90:	db17      	blt.n	8009bc2 <scalbnf+0x5a>
 8009b92:	ee10 3a10 	vmov	r3, s0
 8009b96:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009b9a:	3a19      	subs	r2, #25
 8009b9c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009ba0:	4288      	cmp	r0, r1
 8009ba2:	dd15      	ble.n	8009bd0 <scalbnf+0x68>
 8009ba4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009c20 <scalbnf+0xb8>
 8009ba8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8009c24 <scalbnf+0xbc>
 8009bac:	ee10 3a10 	vmov	r3, s0
 8009bb0:	eeb0 7a67 	vmov.f32	s14, s15
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	bfb8      	it	lt
 8009bb8:	eef0 7a66 	vmovlt.f32	s15, s13
 8009bbc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009bc0:	4770      	bx	lr
 8009bc2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009c28 <scalbnf+0xc0>
 8009bc6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009bca:	4770      	bx	lr
 8009bcc:	0dd2      	lsrs	r2, r2, #23
 8009bce:	e7e5      	b.n	8009b9c <scalbnf+0x34>
 8009bd0:	4410      	add	r0, r2
 8009bd2:	28fe      	cmp	r0, #254	@ 0xfe
 8009bd4:	dce6      	bgt.n	8009ba4 <scalbnf+0x3c>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	dd06      	ble.n	8009be8 <scalbnf+0x80>
 8009bda:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009bde:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009be2:	ee00 3a10 	vmov	s0, r3
 8009be6:	4770      	bx	lr
 8009be8:	f110 0f16 	cmn.w	r0, #22
 8009bec:	da09      	bge.n	8009c02 <scalbnf+0x9a>
 8009bee:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009c28 <scalbnf+0xc0>
 8009bf2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009c2c <scalbnf+0xc4>
 8009bf6:	ee10 3a10 	vmov	r3, s0
 8009bfa:	eeb0 7a67 	vmov.f32	s14, s15
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	e7d9      	b.n	8009bb6 <scalbnf+0x4e>
 8009c02:	3019      	adds	r0, #25
 8009c04:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009c08:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009c0c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009c30 <scalbnf+0xc8>
 8009c10:	ee07 3a90 	vmov	s15, r3
 8009c14:	e7d7      	b.n	8009bc6 <scalbnf+0x5e>
 8009c16:	bf00      	nop
 8009c18:	ffff3cb0 	.word	0xffff3cb0
 8009c1c:	4c000000 	.word	0x4c000000
 8009c20:	7149f2ca 	.word	0x7149f2ca
 8009c24:	f149f2ca 	.word	0xf149f2ca
 8009c28:	0da24260 	.word	0x0da24260
 8009c2c:	8da24260 	.word	0x8da24260
 8009c30:	33000000 	.word	0x33000000

08009c34 <floorf>:
 8009c34:	ee10 3a10 	vmov	r3, s0
 8009c38:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009c3c:	3a7f      	subs	r2, #127	@ 0x7f
 8009c3e:	2a16      	cmp	r2, #22
 8009c40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009c44:	dc2b      	bgt.n	8009c9e <floorf+0x6a>
 8009c46:	2a00      	cmp	r2, #0
 8009c48:	da12      	bge.n	8009c70 <floorf+0x3c>
 8009c4a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009cb0 <floorf+0x7c>
 8009c4e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009c52:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c5a:	dd06      	ble.n	8009c6a <floorf+0x36>
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	da24      	bge.n	8009caa <floorf+0x76>
 8009c60:	2900      	cmp	r1, #0
 8009c62:	4b14      	ldr	r3, [pc, #80]	@ (8009cb4 <floorf+0x80>)
 8009c64:	bf08      	it	eq
 8009c66:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8009c6a:	ee00 3a10 	vmov	s0, r3
 8009c6e:	4770      	bx	lr
 8009c70:	4911      	ldr	r1, [pc, #68]	@ (8009cb8 <floorf+0x84>)
 8009c72:	4111      	asrs	r1, r2
 8009c74:	420b      	tst	r3, r1
 8009c76:	d0fa      	beq.n	8009c6e <floorf+0x3a>
 8009c78:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8009cb0 <floorf+0x7c>
 8009c7c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009c80:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c88:	ddef      	ble.n	8009c6a <floorf+0x36>
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	bfbe      	ittt	lt
 8009c8e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8009c92:	fa40 f202 	asrlt.w	r2, r0, r2
 8009c96:	189b      	addlt	r3, r3, r2
 8009c98:	ea23 0301 	bic.w	r3, r3, r1
 8009c9c:	e7e5      	b.n	8009c6a <floorf+0x36>
 8009c9e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009ca2:	d3e4      	bcc.n	8009c6e <floorf+0x3a>
 8009ca4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009ca8:	4770      	bx	lr
 8009caa:	2300      	movs	r3, #0
 8009cac:	e7dd      	b.n	8009c6a <floorf+0x36>
 8009cae:	bf00      	nop
 8009cb0:	7149f2ca 	.word	0x7149f2ca
 8009cb4:	bf800000 	.word	0xbf800000
 8009cb8:	007fffff 	.word	0x007fffff

08009cbc <_init>:
 8009cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cbe:	bf00      	nop
 8009cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cc2:	bc08      	pop	{r3}
 8009cc4:	469e      	mov	lr, r3
 8009cc6:	4770      	bx	lr

08009cc8 <_fini>:
 8009cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cca:	bf00      	nop
 8009ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cce:	bc08      	pop	{r3}
 8009cd0:	469e      	mov	lr, r3
 8009cd2:	4770      	bx	lr
